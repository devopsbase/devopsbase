{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/gold/ghost",
    "repository_url": "https://hub.docker.com/v2/repositories/gold/ghost",
    "tags_url": "https://hub.docker.com/v2/repositories/gold/ghost/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/gold/ghost/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/gold/ghost/autobuild",
    "user": "gold",
    "name": "ghost",
    "namespace": "gold",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 8,
    "pull_count": 1745,
    "last_updated": "2016-10-14T17:29:09.935410Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 126559109,
        "id": 1553502,
        "repository": 443127,
        "creator": 549033,
        "last_updater": 549036,
        "last_updated": "2016-10-14T17:29:09.205850Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.11.0",
        "full_size": 133059816,
        "id": 4914116,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-09-18T20:34:33.198148Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.10.1",
        "full_size": 114360546,
        "id": 4771237,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-09-09T20:58:01.022938Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.9.0a",
        "full_size": 109022385,
        "id": 4680893,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-09-05T21:38:20.468259Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.8.0a",
        "full_size": 108377515,
        "id": 4680876,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-09-05T21:36:25.954307Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.10.0",
        "full_size": 118910165,
        "id": 4633298,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-09-01T20:20:00.850534Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.7.9",
        "full_size": 107400790,
        "id": 2700467,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-04-18T21:34:48.429259Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "alpine",
        "full_size": 45069871,
        "id": 2700329,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-04-18T21:22:24.569115Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "0.7.8",
        "full_size": 106091657,
        "id": 2672868,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-04-15T13:10:33.907263Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "0.7.6",
        "full_size": 105802917,
        "id": 2672846,
        "repository": 443127,
        "creator": 549036,
        "last_updater": 549036,
        "last_updated": "2016-04-15T13:08:08.801542Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "aholbreich/docker-ghost"
  },
  "name": "gold/ghost Docker container",
  "description": "Configurable Golden Ghost image.",
  "readme": "# docker-ghost\n\n\nDocker golden image ([gold/ghost](https://hub.docker.com/r/gold/ghost/)) for [Ghost](https://github.com/TryGhost/Ghost).\n\nMost relevant tags\n* 0.11.0\n* 0.10.1\n* 0.9.0\n* 0.8.0\n* 0.7.9 \n* 0.7.8 \n* 0.7.6 \n* 0.7.5\n* 0.7.4\n* 0.7.3\n\n#### Experimental branch \n* alpine - not recomendet for production now. \n\n\n## Why yet another image for Ghost?\n\n[Ghost environments](http://support.ghost.org/config/#about-environments) suggest that it's better to use production\n\nThe official container for Ghost is fine for running in development mode, but it has the wrong\npermissions for running in production. That, and the config file doesn't have any easy way to tweak\nit (Credits to [Peter Timofev](https://github.com/ptimof/docker-ghost))\n\nAlso backup script is backed in.\nSwitc from dev to production environment is easy. Beware in default config both modes operate on same database\n`/content/data/ghost.db`\n\n\n## Quickstart\n\n```\ndocker run --name some-ghost -p 8080:2368 -d gold/ghost\n```\n\nThis will start Ghost in development mode and whire to the port 80 of the container.\n\nThen, access it via `http://localhost:8080` or `http://host-ip:8080` in a browser.\n\n## Running in production\n\nThe official Ghost image places the blog content in `/var/lib/ghost` and exports it as a `VOLUME`.\nThis allows two main modes of operation:\n\n### Content on host filesystem\n\nIn this mode, the Ghost blog content lives on the filesystem of the host with the `UID`:`GID` of\n`1000`:`1000`. If this is acceptable, create a directory somewhere, and use the `-v` Docker command\nline option to mount it:\n\n```\nsudo mkdir -p /var/lib/ghost\nsudo chown 1000:1000 /var/lib/ghost\ndocker run --name some-ghost --env-file /etc/default/ghost -p 80:2368 -v /var/lib/ghost:/var/lib/ghost -d gold/ghost npm start --production\n```\n\nThis is very convinient, because you can tweak your configuration directly in host's `/var/lib/ghost/confg.js`.\n\n### Content in a data volume\n\nThis is the preferred mechanism to store the blog data. Please see the\n[Docker documentation](https://docs.docker.com/userguide/dockervolumes/#backup-restore-or-migrate-data-volumes)\nfor backup, restore, and migration strategies.\n\n```\ndocker create -v /var/lib/ghost --name some-ghost-content busybox\ndocker run --name some-ghost --env-file /etc/default/ghost -p 80:2368 --volumes-from some-ghost-content -d gold/ghost npm start --production\n```\n\nYou should now be able to access this instance as `http://www.example.com` in a browser.\n\n### Configuration via environment variables\n\nEpecially in case you run the content in a volume it's good to have a posibillity to injet some config form outide.\n\nThere are environment variables that can be used:\n\n* `GHOST_URL`: the URL of your blog (e.g., `http://www.example.com`)\n* `MAIL_FROM`: the email of the blog installation (e.g., `'\"Webmaster\" <webmaster@example.com>'`)\n* `MAIL_HOST`: which host to send email to (e.g., `mail.example.com`)\n* `PROD_FORCE_ADMIN_SSL`: Relevant for prodction mode only. Tel's Ghost to force use SSL for admin pages (default: true)\n* `MAIL_PORT`: sets a port for secure mail connection\n* `MAIL_SSL` : set \"true\" or \"false\"\n* `MAIL_USERNAME` : The username for the mail server\n* `MAIL_PASSWORD` : The password for the username above\n\nThese can either be set on the Docker command line directly, or stored in a file and passed on\nthe Docker command line:\n\n```\ndocker run --name some-ghost --env-file /etc/default/ghost -p 8080:2368 -d gold/ghost\n```\n\nHere an example of ENV variables file:\n```\n# Ghost environment example\n# Place in /etc/default/ghost\n\nGHOST_URL=http://www.example.com\nMAIL_FROM='\"Webmaster\" <webmaster@example.com>'\nMAIL_HOST=mail.example.com\nPROD_FORCE_ADMIN_SSL=true\nMAIL_SSL=true\nMAIL_PORT=465\nMAIL_USERNAME=ghost@example.com\nMAIL_PASSWORD=hopefullyasecurepassword\n```\n\n### Behind a reverse proxy\n\nOf course, you should really be running Ghost behind a reverse proxy, and set things up to auto restart. For that,\na reasonable container would be:\n\n```\ndocker create --name some-ghost -h ghost.example.com --env-file /etc/default/ghost -p 127.0.0.1:2368:2368 --volumes-from some-ghost-content --restart=on-failure:10 gold/ghost npm start --production\ndocker run some-ghost\n```\n\n### Backup \n\nBackup is working for host based or volume based data (see below)\n\n```\ndocker run --rm --volumes-from some-ghost -v $(pwd)/backups:/backups gold/ghost /backup.sh\n```\nBackups ghost to current directory.\n\n#### Restoring Backup\n**Attention:**  Restore script for volume based data keeping is not provied yet. Make sure you know what to do.\n\nFor the host based solution just extract backup file content to volume location on host.\n\nPlease contactm if you have good ideas here.\n\n\n### Example docker-comose.yaml\n```\nghost:\n  image: gold/ghost:0.7.9\n  command: npm start --production\n  restart: always  \n  ports: \n   - \"2368:2368\"\n  volumes:\n   - /var/containerdata/ghost/blog/:/var/lib/ghost\n  environment:\n   - GHOST_URL=http://example.com\n   - PROD_FORCE_ADMIN_SSL=true\n   - MAIL_FROM='\"Webmaster\" <webmaster@example.com>'\n   - MAIL_HOST=mail.example.com\n   - MAIL_SSL=true\n   - MAIL_PORT=465\n   - MAIL_USERNAME=ghost@example.com\n   - MAIL_PASSWORD=hopefullyasecurepassword\n\n```\nEven if env varibales are provided, config.js can b still found and tweaked in /var/containerdata/ghost/blog/ on the host.\n\n### More information\n\n* [Docker image for Ghost blog](http://alexander.holbreich.org/docker-ghost-image/)\n* [Home of the project on Gihub](https://github.com/aholbreich/docker-ghost)\n",
  "dockerfile": "# Ghost Docker image.\n# Ghost is a simple, powerful publishing platform.\n#\n# Ghost version: latest\n#\nFROM ghost:latest\n\nMAINTAINER Alexander Holbreich http//alexander.holbreich.org\n\n# Add better default config \nADD config.example.js config.example.js\nADD backup.sh /\n# Fix permisions for backup script\nRUN chmod a+x /backup.sh \n\n# Fix ownership in src\nRUN chown -R user $GHOST_SOURCE/content\n\n#volume for backupscripts\nVOLUME /backups\n\n# Default environment variables\nENV GHOST_URL=http://localhost PROD_FORCE_ADMIN_SSL=true",
  "dockerfile_json": {
    "add": [
      {
        "source": "config.example.js",
        "dest": "config.example.js"
      },
      {
        "source": "backup.sh",
        "dest": "/"
      }
    ],
    "expose": [],
    "volume": [
      "/backups"
    ],
    "run": [
      "chmod a+x /backup.sh ",
      "chown -R user $GHOST_SOURCE/content"
    ],
    "workdir": [],
    "from": "ghost:latest",
    "maintainer": "Alexander Holbreich http//alexander.holbreich.org",
    "env": {
      "GHOST_URL": "http://localhost",
      "PROD_FORCE_ADMIN_SSL": "true"
    }
  },
  "source_repository_url": "https://github.com/aholbreich/docker-ghost.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/aholbreich/docker-ghost",
  "docker_repository": "gold/ghost",
  "docker_image": "gold/ghost",
  "parameters_schema": {
    "GHOST_URL": {
      "default": "http://localhost",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PROD_FORCE_ADMIN_SSL": {
      "default": "true",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "gold/ghost",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/gold/ghost",
    "https://hub.docker.com/v2/repositories/gold/ghost",
    "https://github.com/aholbreich/docker-ghost.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://hub.docker.com/r/gold/ghost",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}