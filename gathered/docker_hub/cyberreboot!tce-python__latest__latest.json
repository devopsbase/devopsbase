{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/cyberreboot/tce-python",
    "repository_url": "https://hub.docker.com/v2/repositories/cyberreboot/tce-python",
    "tags_url": "https://hub.docker.com/v2/repositories/cyberreboot/tce-python/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/cyberreboot/tce-python/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/cyberreboot/tce-python/autobuild",
    "user": "cyberreboot",
    "name": "tce-python",
    "namespace": "cyberreboot",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 203,
    "last_updated": "2016-10-11T17:27:32.010149Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 41601856,
        "id": 3684976,
        "repository": 779615,
        "creator": 294177,
        "last_updater": 294177,
        "last_updated": "2016-10-11T17:27:31.704832Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "CyberReboot/vent"
  },
  "name": "cyberreboot/tce-python Docker container",
  "description": "tinycore python2",
  "readme": "vent\n====\n\n> Network Visibility (an anagram)\n\n[![CircleCI](https://circleci.com/gh/CyberReboot/vent.svg?style=shield)](https://circleci.com/gh/CyberReboot/vent)\n[![Documentation Status](https://readthedocs.org/projects/vent/badge/?version=latest)](http://vent.readthedocs.io/en/latest/?badge=latest)\n[![GitHub Release](https://badge.fury.io/gh/cyberreboot%2Fvent.svg)](https://github.com/CyberReboot/vent/releases)\n[![codecov](https://codecov.io/gh/CyberReboot/vent/branch/master/graph/badge.svg)](https://codecov.io/gh/CyberReboot/vent)\n[![Code Issues](https://www.quantifiedcode.com/api/v1/project/ffe3b2d6a9254b98a12de6b3273676b3/badge.svg)](https://www.quantifiedcode.com/app/project/ffe3b2d6a9254b98a12de6b3273676b3)\n[![Github Release Downloads](https://img.shields.io/github/downloads/cyberreboot/vent/total.svg?maxAge=2592000)](https://github.com/CyberReboot/vent/releases)\n\n            '.,\n              'b      *\n               '$    #.\n                $:   #:\n                *#  @):\n                :@,@):   ,.**:'\n      ,         :@@*: ..**'\n       '#o.    .:(@'.@*\"'\n          'bq,..:,@@*'   ,*\n          ,p$q8,:@)'  .p*'\n         '    '@@Pp@@*'\n               Y7'.'\n              :@):.\n             .:@:'.\n           .::(@:. \n                       _   \n      __   _____ _ __ | |_ \n      \\ \\ / / _ \\ '_ \\| __|\n       \\ V /  __/ | | | |_ \n        \\_/ \\___|_| |_|\\__|\n\noverview\n====\nvent is a lightweight, self-contained virtual appliance designed to serve as a general platform for analyzing network traffic. built with some basic functionality, vent serves as a user-friendly slate to build custom `plugins` on to perform user-defined processing on incoming network data. vent supports any filetype, but only processes one based on the types of plugins installed for that instance of vent.\n\nsimply create your `plugins`, point vent to them & install them, and drop a file in vent to begin processing!\n\ndownload pre-compiled ISO\n====\n\n[releases](https://github.com/CyberReboot/vent/releases)\n\n\nbuild the ISO\n====\n\n### build dependencies\n\n```\ndocker\nmake\nzip\n```\n\n### getting the bits\n\n```\ngit clone --recursive https://github.com/CyberReboot/vent.git\ncd vent\n```\n\n### building\n\n```\nmake\n```\n\neasy ways to build a VM out of the ISO\n====\n\nwith docker-machine cli:\n\n```\n# in a terminal from the path where the ISO file is (usually inside of the vent directory)\npython -m SimpleHTTPServer\n\n# from another terminal while the previous command is still running, execute the\n# following, with optional additional arguments prior to the last vent in the command\ndocker-machine create -d virtualbox --virtualbox-boot2docker-url http://localhost:8000/vent.iso vent\n# other options to customize the size of the vm are available as well:\n# --virtualbox-cpu-count \"1\"\n# --virtualbox-disk-size \"20000\"\n# --virtualbox-memory \"1024\"\n\n# finally once the previous command is finished, execute this for the vent user interface\ndocker-machine ssh vent\n```\n\nof course traditional ways of deploying an ISO work as well, including VMWare, OpenStack, and booting from it to install on bare metal.  a couple of things to note: it will automatically install and provision the disk and then restart when done.  vent runs in RAM, so changes need to be made under `/var/lib/docker` or `/var/lib/boot2docker` as those are persistent (see boot2docker [documentation](https://github.com/boot2docker/boot2docker/blob/master/README.md) for more information).  it's possible that `vent-management` won't automatically get added and run, if you run `docker ps` and it's not running, execute `sudo /vent/custom`.\n\ngetting started\n====\n\nfrom within the vent interface (once SSH'd in) first `build` the core.  it might take a little while to download and compile everything. `note` - you must build core before building any `plugins`, `collectors`, or `visualization`. core provides essential services needed to build/start other services.\n\nonce it's built you're ready to start the `core` from the `mode` menu option.\n\nafter starting, you should be able to go into `system info` and see that everything is running as expected.  once that looks good, you're ready to copy up pcaps.  that's it!\n\ncopy up new pcaps\n====\n\ninstall the `vent` script locally first:\n```\nsudo make install\n```\n\nif using docker-machine cli to provision:\n\n```\n# from the directory that contains your pcaps\n# optionally add an argument of the name for vent in\n#     docker-machine if you called it something other than vent\ncd /path/where/pcaps/are/\nvent\n```\n\nif deploying as a self-configured machine (VMWare, OpenStack, bare metal, etc.):\n\n```\n# from the directory that contains your pcaps\n# optionally add an argument of the name/ip for vent on your network\ncd vent\ncp vent-generic /usr/local/bin/vent\ncd /path/where/pcaps/are/\nvent\n```\n\notherwise edit the `ssh` and `scp` lines in `vent` specific to docker-machine and change to suit your needs\n\ncopy up new templates and plugins\n====\n\nif using docker-machine cli to provision:\n\n```\ndocker-machine scp modes.template vent:/var/lib/docker/data/templates/modes.template\n```\n\nif using boot2docker cli to provision (DEPRECATED):\n\n```\nscp -r -i ~/.ssh/id_boot2docker -P 2022 modes.template docker@localhost:/var/lib/docker/data/templates/modes.template\n```\n\nif deploying as a self-configured machine (VMWare, OpenStack, bare metal, etc.):\n\n```\nscp modes.template docker@vent:/var/lib/docker/data/templates/modes.template\n```\n\ndocumentation\n====\n\n- [Docs](https://github.com/CyberReboot/vent/tree/master/docs)\n- [Diagrams](https://github.com/CyberReboot/vent/tree/master/docs/images)\n\ncontributing to vent\n====\n\nWant to contribute?  Awesome!  Issue a pull request or see more details [here](https://github.com/CyberReboot/vent/blob/master/CONTRIBUTING.md).\n\nFAQ\n====\n\n**Q**: What are the credentials to login if I don't use certificates/keys?\n\n**A**: docker/tcuser\n\n**Q**: I went into the shell and did a `docker ps` but no containers are running, how do I get it working again?\n\n**A**: Execute `docker rm vent-management; sudo /vent/custom`, if that doesn't work, restart the machine.\n\n**Q**: I'm not running DHCP, how do I statically set the IP Address?\n\n**A**: For a quick and dirty solution (doesn't survive reboot):\n\n```\nifconfig eth0 192.168.99.101 netmask 255.255.255.0 broadcast 192.168.99.255 up\nip route add default via 192.168.99.1\n```\n\nAdditionally if you need to set DNS, add the following to `/etc/resolv.conf`:\n\n```\nnameserver 8.8.8.8\n```\n\nFor a more permanent solution look at the [docs](https://github.com/boot2docker/boot2docker) for boot2docker\n",
  "dockerfile": "FROM tatsushid/tinycore:7.2-x86_64\n\n# Instructions are run with 'tc' user\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=C.UTF-8 LC_ALL=C\n\n#RUN echo 'http://distro.ibiblio.org/tinycorelinux/' > /opt/tcemirror\nRUN tce-load -wic gnupg curl \\\n    && rm -rf /tmp/tce/optional/*\n\n# gpg: key 18ADD4FF: public key \"Benjamin Peterson <benjamin@python.org>\" imported\nRUN gpg2 --keyserver pool.sks-keyservers.net --recv-keys C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF\n\nENV PYTHON_VERSION 2.7.12\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 8.1.2\n\nRUN tce-load -wic \\\n        bzip2-dev \\\n        flex \\\n        file \\\n        gcc \\\n        make \\\n        linux-4.2.1_api_headers \\\n        glibc_add_lib \\\n        glibc_base-dev \\\n        openssl-dev \\\n        gdbm-dev \\\n        ncurses-dev \\\n        readline-dev \\\n        sqlite3-dev \\\n        zlib_base-dev \\\n        tk-dev \\\n        libX11-dev \\\n        libXss \\\n        xorg-proto \\\n    && cd /tmp \\\n    && curl -SL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o python.tar.xz \\\n    && curl -SL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc\" -o python.tar.xz.asc \\\n    && gpg2 --verify python.tar.xz.asc \\\n    && rm python.tar.xz.asc \\\n    && tar -xJf python.tar.xz \\\n    && rm python.tar.xz \\\n    && cd \"/tmp/Python-$PYTHON_VERSION\" \\\n    && ./configure --enable-shared --with-ensurepip=install \\\n    && make \\\n    && mkdir tmp_install \\\n    && make install DESTDIR=tmp_install \\\n    && for F in `find tmp_install | xargs file | grep \"executable\" | grep ELF | grep \"not stripped\" | cut -f 1 -d :`; do \\\n            [ -f $F ] && strip --strip-unneeded $F; \\\n        done \\\n    && for F in `find tmp_install | xargs file | grep \"shared object\" | grep ELF | grep \"not stripped\" | cut -f 1 -d :`; do \\\n            [ -f $F ] && if [ ! -w $F ]; then chmod u+w $F && strip -g $F && chmod u-w $F; else strip -g $F; fi \\\n        done \\\n    && for F in `find tmp_install | xargs file | grep \"current ar archive\" | cut -f 1 -d :`; do \\\n            [ -f $F ] && strip -g $F; \\\n        done \\\n    && find tmp_install \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) -exec rm -rf '{}' + \\\n    && find tmp_install \\( -type d -a -name test -o -name tests \\) | xargs rm -rf \\\n    && $(cd tmp_install; sudo cp -R . /) \\\n    && rm -rf \"/tmp/Python-$PYTHON_VERSION\" \\\n    && cd /tmp/tce/optional \\\n    && for PKG in `ls *-dev.tcz`; do \\\n            echo \"Removing $PKG files\"; \\\n            for F in `unsquashfs -l $PKG | grep squashfs-root | sed -e 's/squashfs-root//'`; do \\\n                [ -f $F -o -L $F ] && sudo rm -f $F; \\\n            done; \\\n            INSTALLED=$(echo -n $PKG | sed -e s/.tcz//); \\\n            sudo rm -f /usr/local/tce.installed/$INSTALLED; \\\n        done \\\n    && for PKG in binutils.tcz \\\n                cloog.tcz \\\n                file.tcz \\\n                flex.tcz \\\n                gcc.tcz \\\n                gcc_libs.tcz \\\n                linux-4.2.1_api_headers.tcz \\\n                make.tcz \\\n                sqlite3-bin.tcz \\\n                xorg-proto.tcz; do \\\n            echo \"Removing $PKG files\"; \\\n            for F in `unsquashfs -l $PKG | grep squashfs-root | sed -e 's/squashfs-root//'`; do \\\n                [ -f $F -o -L $F ] && sudo rm -f $F; \\\n            done; \\\n            INSTALLED=$(echo -n $PKG | sed -e s/.tcz//); \\\n            sudo rm -f /usr/local/tce.installed/$INSTALLED; \\\n        done \\\n    && sudo rm -f /usr/bin/file \\\n    && sudo /sbin/ldconfig \\\n    && rm -rf /tmp/tce/optional/* \\\n    && sudo find /usr/local \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) -exec rm -rf '{}' + \\\n    && find /usr/local \\( -type d -a -name test -o -name tests \\) | sudo xargs rm -rf \\\n    && sudo rm -rf /usr/src/python\n\n# write resulting build to stdout\nRUN mkdir /tmp/python2\nWORKDIR /tmp/python2\nRUN cp -R /usr/local/lib/python2.7 . && tar cf python.tar python2.7 && rm -rf python2.7\nRUN cp -R /usr/local/include/python2.7 . && tar cf python-include.tar python2.7 && rm -rf python2.7\nRUN cp -R /usr/local/bin/python2.7 .\nRUN cp -R /usr/local/bin/python2.7-config .\nRUN cp -R /usr/local/lib/libpython2.7.so .\nRUN cp -R /usr/local/lib/libpython2.7.so.1.0 .\nRUN cp -R /usr/local/lib/pkgconfig/python-2.7.pc .\nRUN cp -R /usr/local/share/man/man1/python2.7.1 .\nRUN cd /tmp && tar cf python2.tar /tmp/python2\nCMD [\"cat\", \"/tmp/python2.tar\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "tce-load -wic gnupg curl     && rm -rf /tmp/tce/optional/*",
      "gpg2 --keyserver pool.sks-keyservers.net --recv-keys C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF",
      "tce-load -wic         bzip2-dev         flex         file         gcc         make         linux-4.2.1_api_headers         glibc_add_lib         glibc_base-dev         openssl-dev         gdbm-dev         ncurses-dev         readline-dev         sqlite3-dev         zlib_base-dev         tk-dev         libX11-dev         libXss         xorg-proto     && cd /tmp     && curl -SL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o python.tar.xz     && curl -SL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc\" -o python.tar.xz.asc     && gpg2 --verify python.tar.xz.asc     && rm python.tar.xz.asc     && tar -xJf python.tar.xz     && rm python.tar.xz     && cd \"/tmp/Python-$PYTHON_VERSION\"     && ./configure --enable-shared --with-ensurepip=install     && make     && mkdir tmp_install     && make install DESTDIR=tmp_install     && for F in `find tmp_install | xargs file | grep \"executable\" | grep ELF | grep \"not stripped\" | cut -f 1 -d :`; do             [ -f $F ] && strip --strip-unneeded $F;         done     && for F in `find tmp_install | xargs file | grep \"shared object\" | grep ELF | grep \"not stripped\" | cut -f 1 -d :`; do             [ -f $F ] && if [ ! -w $F ]; then chmod u+w $F && strip -g $F && chmod u-w $F; else strip -g $F; fi         done     && for F in `find tmp_install | xargs file | grep \"current ar archive\" | cut -f 1 -d :`; do             [ -f $F ] && strip -g $F;         done     && find tmp_install \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) -exec rm -rf '{}' +     && find tmp_install \\( -type d -a -name test -o -name tests \\) | xargs rm -rf     && $(cd tmp_install; sudo cp -R . /)     && rm -rf \"/tmp/Python-$PYTHON_VERSION\"     && cd /tmp/tce/optional     && for PKG in `ls *-dev.tcz`; do             echo \"Removing $PKG files\";             for F in `unsquashfs -l $PKG | grep squashfs-root | sed -e 's/squashfs-root//'`; do                 [ -f $F -o -L $F ] && sudo rm -f $F;             done;             INSTALLED=$(echo -n $PKG | sed -e s/.tcz//);             sudo rm -f /usr/local/tce.installed/$INSTALLED;         done     && for PKG in binutils.tcz                 cloog.tcz                 file.tcz                 flex.tcz                 gcc.tcz                 gcc_libs.tcz                 linux-4.2.1_api_headers.tcz                 make.tcz                 sqlite3-bin.tcz                 xorg-proto.tcz; do             echo \"Removing $PKG files\";             for F in `unsquashfs -l $PKG | grep squashfs-root | sed -e 's/squashfs-root//'`; do                 [ -f $F -o -L $F ] && sudo rm -f $F;             done;             INSTALLED=$(echo -n $PKG | sed -e s/.tcz//);             sudo rm -f /usr/local/tce.installed/$INSTALLED;         done     && sudo rm -f /usr/bin/file     && sudo /sbin/ldconfig     && rm -rf /tmp/tce/optional/*     && sudo find /usr/local \\( -type f -a -name '*.pyc' -o -name '*.pyo' \\) -exec rm -rf '{}' +     && find /usr/local \\( -type d -a -name test -o -name tests \\) | sudo xargs rm -rf     && sudo rm -rf /usr/src/python",
      "mkdir /tmp/python2",
      "cp -R /usr/local/lib/python2.7 . && tar cf python.tar python2.7 && rm -rf python2.7",
      "cp -R /usr/local/include/python2.7 . && tar cf python-include.tar python2.7 && rm -rf python2.7",
      "cp -R /usr/local/bin/python2.7 .",
      "cp -R /usr/local/bin/python2.7-config .",
      "cp -R /usr/local/lib/libpython2.7.so .",
      "cp -R /usr/local/lib/libpython2.7.so.1.0 .",
      "cp -R /usr/local/lib/pkgconfig/python-2.7.pc .",
      "cp -R /usr/local/share/man/man1/python2.7.1 .",
      "cd /tmp && tar cf python2.tar /tmp/python2"
    ],
    "workdir": [
      "/tmp/python2"
    ],
    "from": "tatsushid/tinycore:7.2-x86_64",
    "env": {
      "LANG": "C.UTF-8",
      "LC_ALL": "C",
      "PYTHON_VERSION": "2.7.12",
      "PYTHON_PIP_VERSION": "8.1.2"
    },
    "cmd": "[\"cat\", \"/tmp/python2.tar\"]"
  },
  "source_repository_url": "https://github.com/CyberReboot/vent.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/CyberReboot/vent",
  "docker_repository": "cyberreboot/tce-python",
  "docker_image": "cyberreboot/tce-python",
  "parameters_schema": {
    "LANG": {
      "default": "C.UTF-8",
      "type": "string",
      "mapping": "environment_variable"
    },
    "LC_ALL": {
      "default": "C",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PYTHON_VERSION": {
      "default": "2.7.12",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PYTHON_PIP_VERSION": {
      "default": "8.1.2",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "cyberreboot/tce-python",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/cyberreboot/tce-python",
    "https://hub.docker.com/v2/repositories/cyberreboot/tce-python",
    "https://github.com/CyberReboot/vent.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Python"
  ],
  "info_url": "https://hub.docker.com/r/cyberreboot/tce-python",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}