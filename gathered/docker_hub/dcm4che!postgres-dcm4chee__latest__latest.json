{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/dcm4che/postgres-dcm4chee",
    "repository_url": "https://hub.docker.com/v2/repositories/dcm4che/postgres-dcm4chee",
    "tags_url": "https://hub.docker.com/v2/repositories/dcm4che/postgres-dcm4chee/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/dcm4che/postgres-dcm4chee/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/dcm4che/postgres-dcm4chee/autobuild",
    "user": "dcm4che",
    "name": "postgres-dcm4chee",
    "namespace": "dcm4che",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 1572,
    "last_updated": "2016-09-29T14:33:47.215157Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 100891969,
        "id": 1479753,
        "repository": 430567,
        "creator": 275291,
        "last_updater": 523676,
        "last_updated": "2016-09-29T14:33:46.753759Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.7",
        "full_size": 100891969,
        "id": 4926176,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-09-29T14:32:53.646571Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.6",
        "full_size": 100901076,
        "id": 3938089,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-09-05T13:24:19.633909Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.5",
        "full_size": 100935363,
        "id": 3514203,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-06-27T13:38:15.800704Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.4",
        "full_size": 100875106,
        "id": 3338007,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-06-13T13:36:16.060658Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.3",
        "full_size": 100873956,
        "id": 3161457,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-05-25T15:49:02.446396Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "5.2",
        "full_size": 100873215,
        "id": 3063265,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-05-18T08:48:01.532266Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "5.2.0",
        "full_size": 100843889,
        "id": 2360873,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-04-28T07:31:33.270684Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "5.1.0",
        "full_size": 100337642,
        "id": 1811478,
        "repository": 430567,
        "creator": 523676,
        "last_updater": 523676,
        "last_updated": "2016-03-04T12:37:33.383253Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "5.0.1.Alpha1",
        "full_size": 100199378,
        "id": 1830376,
        "repository": 430567,
        "creator": 275291,
        "last_updater": 275291,
        "last_updated": "2016-01-26T19:44:06.635865Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "dcm4che-dockerfiles/postgres-dcm4chee"
  },
  "name": "dcm4che/postgres-dcm4chee Docker container",
  "description": "PostgreSQL for dcm4che-arc 5.x",
  "readme": "This docker image provides PostgreSQL initalized for the DICOM Archive\n[dcm4chee-arc-light](https://github.com/dcm4che/dcm4chee-arc-light/wiki).\nIt extends the [official postgres image](https://hub.docker.com/_/postgres/).\n\n# How to use this image\n\n## start a postgres instance\n\n```console\n$ docker run --name mypostgres \\\n             -p 5432:5432 \\\n             -e POSTGRES_DB=pacsdb \\\n             -e POSTGRES_USER=pacs \\\n             -e POSTGRES_PASSWORD=pacsword \\\n             -v /var/local/mypacs/db:/var/lib/postgresql/data \\\n             -d dcm4che/postgres-dcm4chee\n```\n## connect to it from the DICOM Archive application\n\n```console\n$ docker run --link mypostgres:db ... -d dcm4che/dcm4chee-arc-psql\n```\n\n## Environment Variables\n\nThis image does not define additional environment variables to those inherited from the PostgreSQL image. But in opposite to the base image, they are required - except `PGDATA` - to be specified, because the DICOM Archive application relies on their provision.\n\n### `POSTGRES_PASSWORD`\n\nThis environment variable sets the superuser password for PostgreSQL. In the above example, it is being set to \"pacsword\".\n\n### `POSTGRES_USER`\n\nThis environment variable is used in conjunction with `POSTGRES_PASSWORD` to set a user and its password. This variable will create the specified user with superuser power.\n\n### `POSTGRES_DB`\n\nThis environment variable defines the name for the default database that is created when the image is first started.\n\n### `PGDATA`\n\nThis optional environment variable can be used to define another location - like a subdirectory - for the database files. The default is `/var/lib/postgresql/data`, but if the data volume you're using is a fs mountpoint (like with GCE persistent disks), Postgres `initdb` recommends a subdirectory (for example `/var/lib/postgresql/data/pgdata` ) be created to contain the data.\n\n## Setup Master/Slave Replication\n\n1. Start a container with Postgres acting as 'master' DB:\n\n    ```console\n    $ docker run --name db1 \\\n                 -p 5432:5432 \\\n                 -e POSTGRES_DB=pacsdb \\\n                 -e POSTGRES_USER=pacs \\\n                 -e POSTGRES_PASSWORD=pacsword \\\n                 -v /path/to/db1:/var/lib/postgresql/data \\\n                 -d dcm4che/postgres-dcm4chee\n    ```\n2. Allow all hosts to replicate with this 'master' DB:\n\n    ```console\n    $ echo 'host replication replicator 0.0.0.0/0 trust' >> /path/to/db1/pg_hba.conf\n    $ cat << EOF >> /path/to/db1/postgresql.conf\n    wal_level = hot_standby\n    checkpoint_segments = 8\n    max_wal_senders = 3\n    wal_keep_segments = 8\n    hot_standby = on\n    EOF\n    ```\n3. Restart the container:\n\n    ```console\n    $ docker restart db1\n    ```\n4. Create a user for replication:\n\n    ```console\n    $ docker exec -it db1 \\\n                  su -c \"psql -c \\\"CREATE USER replicator REPLICATION LOGIN PASSWORD 'replpass';\\\" pacsdb pacs\"\n    ```\n5. Initialize database files of the 'slave' DB by running `pg_basebackup` against the 'master' DB:\n\n    ```console\n    $ docker run -v /path/to/db2:/var/lib/postgresql/data \\\n                 --rm -it dcm4che/postgres-dcm4chee \\\n                 su -c \"pg_basebackup -h <ip-of-db1-host> -D /var/lib/postgresql/data -Ureplicator -P -v -x\"\n    ```\n6. Configure parameters needed for log-streaming replication standby in Recovery Configuration file `recovery.conf`:\n\n    ```console\n    $ cat << EOF > /path/to/db2/recovery.conf\n    primary_conninfo = 'host=<ip-of-db1-host> port=5432 user=replicator password=replpass'\n    trigger_file = '/var/lib/postgresql/data/failover'\n    standby_mode = 'on'\n    EOF\n    ```\n7. Adjust the permissions of the data directory:\n\n    ```console\n    $ chmod 700 /path/to/db2\n    ```\n8. Start another container with Postgres acting as 'slave' DB connected with the 'master' DB:\n\n    ```console\n    $ docker run --name db2 \\\n                 -p 5432:5432 \\\n                 -e POSTGRES_DB=pacsdb \\\n                 -e POSTGRES_USER=pacs \\\n                 -e POSTGRES_PASSWORD=pacsword \\\n                 -v /path/to/db2:/var/lib/postgresql/data \\\n                 -d dcm4che/postgres-dcm4chee\n    ```\n\n## Initiate failover from 'master' DB to 'slave' DB\n\n1. Create trigger file `failover` in the data directory of the slave DB:\n\n    ```console\n    $ touch /var/local/mypacs/slave_db/failover\n    ```\n\n  Postgres will remove the trigger file and rename Recovery Configuration file `recovery.conf`\n  to `recovery.done`, indicating that the 'slave' DB is no longer in standby mode, but is acting\n  as new 'master' DB'.\n  \n## Recover previous 'master' DB after failover to 'slave' DB\n\n1. Ensure the previous 'master' DB is stopped and remove the container:\n\n    ```console\n    $ docker stop db1\n    $ docker rm -v db1\n    ```\n2. Delete the database files of the  'master' DB:\n\n    ```console\n    $ rm -r /path/to/db1\n    ```\n3. Initialize database files of the new 'slave' DB by running `pg_basebackup` against the new 'master' DB:\n\n    ```console\n    $ docker run -v /path/to/db1:/var/lib/postgresql/data \\\n                 --rm -it dcm4che/postgres-dcm4chee \\\n                 su -c \"pg_basebackup -h <ip-of-db2-host> -D /var/lib/postgresql/data -Ureplicator -P -v -x\"\n    ````\n4. Configure parameters needed for log-streaming replication standby in Recovery Configuration file `recovery.conf`:\n\n    ```console\n    $ cat << EOF > /path/to/db1/recovery.conf\n    primary_conninfo = 'host=<ip-of-db2-host> port=5432 user=replicator password=replpass'\n    trigger_file = '/var/lib/postgresql/data/failover'\n    standby_mode = 'on'\n    EOF\n    ```\n5. Adjust the permissions of the data directory:\n\n    ```console\n    $ chmod 700 /path/to/db1\n    ```\n6. Start another container with Postgres acting as new 'slave' DB connected with the new 'master' DB:\n\n    ```console\n    $ docker run --name db1 \\\n                 -p 5432:5432 \\\n                 -e POSTGRES_DB=pacsdb \\\n                 -e POSTGRES_USER=pacs \\\n                 -e POSTGRES_PASSWORD=pacsword \\\n                 -v /path/to/db1:/var/lib/postgresql/data \\\n                 -d dcm4che/postgres-dcm4chee\n",
  "dockerfile": "FROM postgres:9.4\n\nCOPY docker-entrypoint-initdb.d docker-entrypoint-initdb.d/\nCOPY sql sql/\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [],
    "workdir": [],
    "from": "postgres:9.4",
    "copy": "sql sql/"
  },
  "source_repository_url": "https://github.com/dcm4che-dockerfiles/postgres-dcm4chee.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/dcm4che-dockerfiles/postgres-dcm4chee",
  "docker_repository": "dcm4che/postgres-dcm4chee",
  "docker_image": "dcm4che/postgres-dcm4chee",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "dcm4che/postgres-dcm4chee",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/dcm4che/postgres-dcm4chee",
    "https://hub.docker.com/v2/repositories/dcm4che/postgres-dcm4chee",
    "https://github.com/dcm4che-dockerfiles/postgres-dcm4chee.git"
  ],
  "labels": [
    "Docker",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Store/Relational/PostgreSQL"
  ],
  "info_url": "https://hub.docker.com/r/dcm4che/postgres-dcm4chee",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}