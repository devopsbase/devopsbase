{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/jhipster/jhipster-sample-app-cassandra",
    "repository_url": "https://hub.docker.com/v2/repositories/jhipster/jhipster-sample-app-cassandra",
    "tags_url": "https://hub.docker.com/v2/repositories/jhipster/jhipster-sample-app-cassandra/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/jhipster/jhipster-sample-app-cassandra/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/jhipster/jhipster-sample-app-cassandra/autobuild",
    "user": "jhipster",
    "name": "jhipster-sample-app-cassandra",
    "namespace": "jhipster",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 15,
    "last_updated": "2016-10-11T15:45:05.546068Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 322248481,
        "id": 4974331,
        "repository": 930827,
        "creator": 113878,
        "last_updater": 113878,
        "last_updated": "2016-10-11T15:45:03.581903Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "jhipster/jhipster-sample-app-cassandra"
  },
  "name": "jhipster/jhipster-sample-app-cassandra Docker container",
  "description": "This is a sample application created with JHipster, with the Cassandra option",
  "readme": "# jhipsterCassandraSampleApplication\n\nThis application was generated using JHipster 3.9.1, you can find documentation and help at [https://jhipster.github.io/documentation-archive/v3.9.1](https://jhipster.github.io/documentation-archive/v3.9.1).\n\n## Development\n\nBefore you can build this project, you must install and configure the following dependencies on your machine:\n1. [Node.js][]: We use Node to run a development web server and build the project.\n   Depending on your system, you can install Node either from source or as a pre-packaged bundle.\n\nAfter installing Node, you should be able to run the following command to install development tools (like\n[Bower][] and [BrowserSync][]). You will only need to run this command when dependencies change in package.json.\n\n    npm install\n\nWe use [Gulp][] as our build system. Install the Gulp command-line tool globally with:\n\n    npm install -g gulp-cli\n\nRun the following commands in two separate terminals to create a blissful development experience where your browser\nauto-refreshes when files change on your hard drive.\n\n    ./mvnw\n    gulp\n\nBower is used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by\nspecifying a newer version in `bower.json`. You can also run `bower update` and `bower install` to manage dependencies.\nAdd the `-h` flag on any command to see how you can use it. For example, `bower update -h`.\n\nFor further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].\n\n## Building for production\n\nTo optimize the jhipsterCassandraSampleApplication application for production, run:\n\n    ./mvnw -Pprod clean package\n\nThis will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.\nTo ensure everything worked, run:\n\n    java -jar target/*.war\n\nThen navigate to [http://localhost:8080](http://localhost:8080) in your browser.\n\nRefer to [Using JHipster in production][] for more details.\n\n## Testing\n\nTo launch your application's tests, run:\n\n    ./mvnw clean test\n\n### Client tests\n\nUnit tests are run by [Karma][] and written with [Jasmine][]. They're located in `src/test/javascript/` and can be run with:\n\n    gulp test\n\nUI end-to-end tests are powered by [Protractor][], which is built on top of WebDriverJS. They're located in `src/test/javascript/e2e`\nand can be run by starting Spring Boot in one terminal (`./mvnw spring-boot:run`) and running the tests (`gulp itest`) in a second one.\n### Other tests\n\nPerformance tests are run by [Gatling][] and written in Scala. They're located in `src/test/gatling` and can be run with:\n\n    ./mvnw gatling:execute\n\nFor more information, refer to the [Running tests page][].\n\n## Using Docker to simplify development (optional)\n\nYou can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the `src/main/docker` folder to launch required third party services.\nFor example, to start a cassandra database in a docker container, run:\n\n    docker-compose -f src/main/docker/cassandra.yml up -d\n\nTo stop it and remove the container, run:\n\n    docker-compose -f src/main/docker/cassandra.yml down\n\nYou can also fully dockerize your application and all the services that it depends on.\nTo achieve this, first build a docker image of your app by running:\n\n    ./mvnw package -Pprod docker:build\n\nThen run:\n\n    docker-compose -f src/main/docker/app.yml up -d\n\nFor more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`yo jhipster:docker-compose`), which is able to generate docker configurations for one or several JHipster applications.\n\n## Continuous Integration (optional)\n\nTo set up a CI environment, consult the [Setting up Continuous Integration][] page.\n\n[JHipster Homepage and latest documentation]: https://jhipster.github.io\n[JHipster 3.9.1 archive]: https://jhipster.github.io/documentation-archive/v3.9.1\n\n[Using JHipster in development]: https://jhipster.github.io/documentation-archive/v3.9.1/development/\n[Using Docker and Docker-Compose]: https://jhipster.github.io/documentation-archive/v3.9.1/docker-compose\n[Using JHipster in production]: https://jhipster.github.io/documentation-archive/v3.9.1/production/\n[Running tests page]: https://jhipster.github.io/documentation-archive/v3.9.1/running-tests/\n[Setting up Continuous Integration]: https://jhipster.github.io/documentation-archive/v3.9.1/setting-up-ci/\n\n[Gatling]: http://gatling.io/\n[Node.js]: https://nodejs.org/\n[Bower]: http://bower.io/\n[Gulp]: http://gulpjs.com/\n[BrowserSync]: http://www.browsersync.io/\n[Karma]: http://karma-runner.github.io/\n[Jasmine]: http://jasmine.github.io/2.0/introduction.html\n[Protractor]: https://angular.github.io/protractor/\n",
  "dockerfile": "FROM openjdk:8\n\nENV JHIPSTER_SLEEP 0\n\n# add source\nADD . /code/\n# package the application and delete all lib\nRUN echo '{ \"allow_root\": true }' > /root/.bowerrc && \\\n    cd /code/ && \\\n    ./mvnw clean package -Pprod -DskipTests && \\\n    mv /code/target/*.war /app.war && \\\n    rm -Rf /code /root/.npm/ /tmp && \\\n    rm -Rf /root/.m2/\n\nRUN sh -c 'touch /app.war'\nVOLUME /tmp\nEXPOSE 8080\nCMD echo \"The application will start in ${JHIPSTER_SLEEP}s...\" && \\\n    sleep ${JHIPSTER_SLEEP} && \\\n    java -Djava.security.egd=file:/dev/./urandom -jar /app.war\n",
  "dockerfile_json": {
    "add": [
      {
        "source": ".",
        "dest": "/code/"
      }
    ],
    "expose": [
      8080
    ],
    "volume": [
      "/tmp"
    ],
    "run": [
      "echo '{ \"allow_root\": true }' > /root/.bowerrc &&     cd /code/ &&     ./mvnw clean package -Pprod -DskipTests &&     mv /code/target/*.war /app.war &&     rm -Rf /code /root/.npm/ /tmp &&     rm -Rf /root/.m2/",
      "sh -c 'touch /app.war'"
    ],
    "workdir": [],
    "from": "openjdk:8",
    "env": {
      "JHIPSTER_SLEEP": "0"
    },
    "cmd": "echo \"The application will start in ${JHIPSTER_SLEEP}s...\" &&     sleep ${JHIPSTER_SLEEP} &&     java -Djava.security.egd=file:/dev/./urandom -jar /app.war"
  },
  "source_repository_url": "https://github.com/jhipster/jhipster-sample-app-cassandra.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/jhipster/jhipster-sample-app-cassandra",
  "docker_repository": "jhipster/jhipster-sample-app-cassandra",
  "docker_image": "jhipster/jhipster-sample-app-cassandra",
  "parameters_schema": {
    "JHIPSTER_SLEEP": {
      "default": "0",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        8080
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "jhipster/jhipster-sample-app-cassandra",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/jhipster/jhipster-sample-app-cassandra",
    "https://hub.docker.com/v2/repositories/jhipster/jhipster-sample-app-cassandra",
    "https://github.com/jhipster/jhipster-sample-app-cassandra.git"
  ],
  "labels": [
    "Docker",
    "Style/Virtualization Level/Application",
    "Type/Middleware/Data Store/Key-Value/Cassandra"
  ],
  "info_url": "https://hub.docker.com/r/jhipster/jhipster-sample-app-cassandra",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}