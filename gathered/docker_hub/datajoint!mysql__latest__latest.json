{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/datajoint/mysql",
    "repository_url": "https://hub.docker.com/v2/repositories/datajoint/mysql",
    "tags_url": "https://hub.docker.com/v2/repositories/datajoint/mysql/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/datajoint/mysql/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/datajoint/mysql/autobuild",
    "user": "datajoint",
    "name": "mysql",
    "namespace": "datajoint",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 104,
    "last_updated": "2016-10-15T02:41:47.931259Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 131619053,
        "id": 2538411,
        "repository": 618792,
        "creator": 596817,
        "last_updater": 596817,
        "last_updated": "2016-10-15T02:41:47.633464Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "datajoint/mysql-docker"
  },
  "name": "datajoint/mysql Docker container",
  "description": "MySQL image pre-configured to work smoothly with DataJoint.",
  "readme": "# MySQL for DataJoint\nThis is a docker image of mysql that comes configured for use with DataJoint!\n\n## Warning to Mac and Windows users\nPlease note that there are still some issues running a MySQL Docker container on virtual machines under Mac and Windows, as in particular MySQL image cannot work well with files that are mapped from the host machine (i.e. Mac/Windows) onto the virtual machine on which the Docker container is running. This issue is expected to be resolved once [integrated Docker solution for Mac and Windows gets released](https://blog.docker.com/2016/03/docker-for-mac-windows-beta/). Until then, users are recommended to use Docker based MySQL deployment on Mac and Windows only for testing purposes. Refer to instructions below to modify the content of `docker-compose.yml` such that you can run the container on Mac/Windows. Please be aware that after the modificatio of the `docker-compose.yml`, the data you store in MySQL container on Mac/Windows should generally be considered **not properly backed up** and thus users are strongly discouraged to store any important data in the MySQL server running this way!! Until the integrated Docker becomes available, please consider running MySQL container on a Linux machine.\n\n## How to use\n\n### Using `docker-compose`\nThe simplest and the recommended way to configure and run a MySQL server with Docker is to use the [Docker compose](https://docs.docker.com/compose/). Once you have `docker` and `docker-compose` installed on your system (the one on which you'd want to run the MySQL server), copy this [`docker-compose.yml`](https://raw.githubusercontent.com/datajoint/mysql-docker/master/docker-compose.yml) to a folder, and run `docker-compose up -d` to start the MySQL server. Here is a series of commands to run in the terminal to achieve this:\n\n```bash\n$ mkdir mysql-docker\n$ cd mysql-docker\n$ wget https://raw.githubusercontent.com/datajoint/mysql-docker/master/docker-compose.yml\n$ sudo docker-compose up -d\n```\n\nThis will start the MySQL server mapped to localhost's port `3306`, and any MySQL data will be stored in the direction `./data`, on if you followed the above instructions, `mysql-docker/data` directory. \n\nBy default the database sets up user `root` with password `simple` (refer to below on how to change this at the startup). You can access your locally running MySQL server as below\n\n```bash\n$ mysql -h 127.0.0.1 -u root -p\nEnter password: [type in your password here: default is \"simple\"]\n\nmysql >\n```\n\nRead on to find out the details about the content of the `docker-compose.yml` and how you can customize it to fit your needs.\n\n### What's in `docker-compose.yml`?\nThe content of the `docker-compose.yml` is rather simple:\n\n```yml\nversion: '2'\nservices:\n  db:\n    image: datajoint/mysql\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=simple\n    volumes:\n      - ./data:/var/lib/mysql\n```\n\nLet's step through the parts you might want to customize. The line\n\n```yml\n- MYSQL_ROOT_PASSWORD=simple\n```\n\nconfigures the default password. If you would like to use something else, you can modify this prior to starting your server with `docker-compose up`.\n\nThe lines:\n\n```yml\nvolumes:\n  - ./data:/var/lib/mysql\n```\n\nmaps the local directory `./data` to the `/var/lib/mysql` inside the container where MySQL stores all of its data by default. If you are running on Mac or Windows, make sure to remove these two lines for you to be able to run the container via `docker-compose up`.\n",
  "dockerfile": "FROM mysql\n\nMAINTAINER Edgar Y. Walker\n\nADD my.cnf /etc/mysql/my.cnf\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "my.cnf",
        "dest": "/etc/mysql/my.cnf"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [],
    "workdir": [],
    "from": "mysql",
    "maintainer": "Edgar Y. Walker"
  },
  "source_repository_url": "https://github.com/datajoint/mysql-docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/datajoint/mysql-docker",
  "docker_repository": "datajoint/mysql",
  "docker_image": "datajoint/mysql",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "datajoint/mysql",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/datajoint/mysql",
    "https://hub.docker.com/v2/repositories/datajoint/mysql",
    "https://github.com/datajoint/mysql-docker.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image",
    "Type/Middleware/Data Store/Relational/MySQL"
  ],
  "info_url": "https://hub.docker.com/r/datajoint/mysql",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}