{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/openphacts/ops-search-elasticsearch",
    "repository_url": "https://hub.docker.com/v2/repositories/openphacts/ops-search-elasticsearch",
    "tags_url": "https://hub.docker.com/v2/repositories/openphacts/ops-search-elasticsearch/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/openphacts/ops-search-elasticsearch/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/openphacts/ops-search-elasticsearch/autobuild",
    "user": "openphacts",
    "name": "ops-search-elasticsearch",
    "namespace": "openphacts",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 542,
    "last_updated": "2016-10-11T21:09:40.682712Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 154361831,
        "id": 209928,
        "repository": 185337,
        "creator": 152794,
        "last_updater": 152794,
        "last_updated": "2016-10-11T21:09:40.281335Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "openphacts/ops-search"
  },
  "name": "openphacts/ops-search-elasticsearch Docker container",
  "description": "ElasticSearch configured for ops-search",
  "readme": "# ops-search - Open PHACTS search service\n\nThis is the search service for [Open PHACTS](http://openphacts.org/), previously called *IRS2*.\n\nPopulates an [ElasticSearch](http://www.elasticsearch.org) instance with [JSON-LD](http://www.w3.org/TR/json-ld/)\ndocuments with searchable labels extracted from [SPARQL queries](http://www.w3.org/TR/sparql11-query/) from\na configured [SPARQL service](http://www.w3.org/TR/sparql11-protocol/).\n\nExposes a Linked Data web service for searching over the indexed labels, with\ncontent negotiation for JSON, JSON-LD, Turtle, RDF/XML etc.\n\n\n## License\nLicense: [MIT license](http://opensource.org/licenses/MIT)\n\n(c) 2014-2016 University of Manchester, UK\n\nSee [LICENSE](LICENSE) for details.\n\nThe additional Python libraries used are:\n\n* [elasticsearch](https://pypi.python.org/pypi/elasticsearch/) ([Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0))\n* [ijson](https://pypi.python.org/pypi/ijson/) ([BSD license](https://github.com/isagalaev/ijson/blob/master/LICENSE.txt))\n* [PyYaml](https://pypi.python.org/pypi/pyaml/) ([WTFPL license](https://github.com/mk-fg/pretty-yaml/blob/master/COPYING))\n* [ijson](https://pypi.python.org/pypi/ijson/) ([BSD license](https://github.com/isagalaev/ijson/blob/master/LICENSE.txt))\n* [yajl](https://pypi.python.org/pypi/yajl) (optional) ([BSD license?](https://github.com/rtyler/py-yajl/issues/28))\n* bottle\n* mimerender\n* rdflib\n* rdflib-jsonld\n\n## Installation\n\nYou will need Python 3 and pip, in addition to some dependencies.\n\nIn Ubuntu 14.04, this easiest achieved using:\n\n    sudo apt-get install git python3-pip libyajl2 python3-yaml python3-bottle\n    sudo pip3 install elasticsearch ijson yajl mimerender rdflib rdflib-jsonld\n\nYou will also need an [ElasticSearch](http://www.elasticsearch.org)\ninstallation (tested with version 1.4), with dynamic Groovy [scripting\nenabled](http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html#_enabling_dynamic_scripting)\n\nThe simplest way to do this is to use the [included elasticsearch](elasticsearch) [Docker](https://www.docker.com/) image:\n\n    docker run --name elasticsearch -d -p 9200:9200 openphacts/ops-search-elasticsearch\n\nYou verify this install at: [http://localhost:9200/_search?q=alice](http://localhost:9200/_search?q=alice)  \n\n_Note: On OSX & Windows you may need to find the actual IP address that [boot2docker](https://github.com/boot2docker) is using. Try `boot2docker ip` and then use that when testing in a browser eg `http://192.168.59.103:9200/_search?q=alice`_\n\n## Running\n\nTo populate elastic search using the [configuration](#Configuration) in [example.yaml](conf/example.yaml), do:\n\n    python3 src/load.py conf/example.yaml\n    \nIf you want to test the SPARQL queries without populating the elastic search indexes then add the `dryrun` flag and this will show you all the queries without executing them.\n\n    python src/load.py conf/example.yaml -d\n\nTo run the server for the API, using the same configuration, do:\n  \n    python3 src/api.py conf/example.yaml\n\n### Updating and backing up the docker image\n\nIf the [Open PHACTS Elastic Search image](https://hub.docker.com/r/openphacts/ops-search-elasticsearch/) has been updated then you can update the image and transfer the data to the latest version.   \n\nFirst pull the latest version from the docker hub with `docker pull openphacts/ops-search-elasticsearch`.  \nThen stop the currently running image using `docker stop elasticsearch` (or whatever your image is called).  \nTo start the latest image and to use the data from the previous version, try \n`docker run --name elasticsearch --volumes-from elasticsearch_old -d -p 9200:9200 openphacts/ops-search-elasticsearch` where `elasticsearch_old` is the name for the older version (you will probably have called it something else) and `elasticsearch` is the docker container we want to run. You can rename docker images using `docker rename elasticsearch elasticsearch_old` which would rename the `elasticsearch` image to `elasticsearch_old`.  \n\nTo backup the data for the elasticsearch image try `docker run --rm --volumes-from elasticsearch_old -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /usr/share/elasticsearch/data`. This would backup the data volume `/usr/share/elasticsearch/data` from the `elasticsearch_old` image to the local file `backup.tar`.\n\n## Configuration\n\nYou need to create a config file similar to\n[example.yaml](conf/example.yaml) to configure the ElasticSearch data loading.\n\nTo allow external access to the API you may need to change the webservice host setting in your version of the config file to eg '0.0.0.0'. You can also change the port where it is accessed. Note that we recommend that in production you run the API in a WSGI compatible webserver.\n\nA description of each element of the configuration follows below:\n\n### ElasticSearch\n\nThe default configuration is:\n\n```yaml\n    elasticsearch:\n        - host: localhost\n          port: 9200\n```\n\nMultiple hosts can be given to address the cluster:\n\n\n```yaml\n    elasticsearch:\n        - host: server1\n        - host: server2\n          port: 9201\n        - host: server3\n```\n\nThe address where the webservice is available can be altered:\n\n```yaml\n    webservice:\n        host: 'localhost'\n        port: 8839\n```\n\n[Additional parameters](http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch) like `use_ssl` may be provided as supported by the ElasticSearch Python library.\n\n\n### Prefixes\n\nA series of namespace prefixes and their URIs should be defined,\nthese will be used both within the generated SPARQL queries\nand in the generated JSON-LD `@context`.\n\n```yaml\n    prefixes:\n      rdfs: http://www.w3.org/2000/01/rdf-schema#\n      owl: http://www.w3o.rg/2002/07/owl#\n      dct: http://purl.org/dc/terms/\n      dc: http://purl.org/dc/elements/1.1/\n      skos: http://www.w3.org/2004/02/skos/core#\n      foaf: http://xmlns.com/foaf/0.1/\n```\n\n### SPARQL server\n\nThe `uri` of a [SPARQL endpoint])(http://www.w3.org/TR/sparql11-protocol/) to query:\n\n```yaml\n    sparql:\n      uri: http://localhost:8890/sparql\n      timeout_s: 7200 # e.g. 2 hours\n```\n\nTODO: Support authentication?\n\n### Common properties\n\nThe optional `common_properties` specifies any common properties that will\nalways be indexed:\n\n```yaml\n    common_properties:\n      - rdfs:label\n```\n\nProperties MUST be given as one of:\n\n - qname using one of the defined [prefixes](#Prefixes)\n - expanded [property configuration](#Property_configuration) (see below)\n\nThe JSON-LD property name will be taken from the string after `:`, unless\nthat name is already used, in which case an auto-generated name is used.\nYou can use a [property configuration](#Property_configuration) to give a\nbetter name.\n\n### Property configuration\n\nInstead of the qname string, a property can be specified as a\nnested object with the keys `sparql`, `variable` and `jsonld`:\n\n```yaml\n    common_properties:\n      - rdfs:label\n      - sparql: \"dbprop:shortDescription\"\n        variable: \"shortDesc\"\n        jsonld: \"dc:description\"\n```\n\nThe `sparql` string is inserted verbatim into the query. The string\ncan be a qname using one of the [prefixes](#Prefixes) (e.g. `dc:title`)\n, an absolute IRI enclosed with `<>`\n(e.g. `<http://example.com/vocab#property>`), or a\n[SPARQL property paths](http://www.w3.org/TR/sparql11-query/#propertypaths)\nif supported by the server, e.g. `foaf:knows/foaf:name`.\n\nThe `variable` defines the SPARQL variable name that will be used in the query\n(excluding the `?`). This name must be unique across properties.\n\nThe `jsonld` defines the JSON-LD string that is used for the indexed\nJSON-LD document. This MUST be given as a qname\nusing one of the defined [prefixes](#Prefixes).\n\n\n### Indexes\n\nEach key under `indexes` specified will (re)create the corresponding [ElasticSearch index](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-index_.html).\n\n**NOTE**: Each index will be deleted before populating with new results.\n\n#### Types\n\nEach index can contain multiple types. The below example creates the two indexes `customers` and `staff`, where the first index has two types, `orgs` and `people`, and the second only the type `people`.\n\n```yaml\n    indexes:\n        customers:\n            orgs:\n                type: foaf:Organization\n            people:\n                graph: http://example.com/customers\n                type: foaf:Person\n        staff:\n            people:\n                graph: http://example.com/staff\n                type: foaf:Person\n```\n\nEach index-type combination can specify multiple properties for defining what to index - as detailed below:\n\n#### Graph\n\nA typical configuration for indexing multiple graphs is to have one ElasticSearch index per graph, as shown in the example above.\n\n```yaml\n    graph: http://example.com/customers\n```\n\nThis specifies the name of the `GRAPH` to query. Note that it is always the configured `sparql` endpoint that is contacted, so\nthis URI is not retrieved.\n\nIf the `graph` key is missing, the default graph of the SPARQL endpoint is searched instead.\n\n#### Type\n\n```yaml\n    type: foaf:Person\n```\n\nThe `rdf:type` of triples to index. Typically one ElasticSearch type corresponds to one RDF type.\n\nIf `type` is not specified, all resources in the graph with the given properties are indexed.\nIn this case, all properties are required to be present.\n\n#### Subclasses\n\n```yaml\n    subclasses: owl\n```\n\nIf the resources in the graph are only typed as subclasses of `type` in the graph, then specifying `subclasses` will modify the SPARQL query to select for subclasses instead. You can specify different mechanisms, which will generate corresponding SPARQL fragments:\n\n`subclasses: direct`: will generate:\n```\n        ?uri a ?subClass .\n        ?subClass rdfs:subClassOf ?type .\n```\n\n`subclasses: owl` will generate something like:\n```\n        ?uri a ?subClass .\n        ?subClass a owl:Class .\n        ?subClass rdfs:subClassOf+ ?type .\n```\n\nNote that the `rdfs:subClassOf` and `owl:Class` statements (e.g. loaded from an ontology) must be within the same `graph`.\n\n#### Properties\n\nThe RDF properties to index:\n\n```yaml\n    properties:\n      - dct:title\n      - rdfs:description\n      - skos:prefLabel\n      - skos:altLabel\n```\n\nProperties MUST be given as one of:\n\n- qname using one of the defined [prefixes](#Prefixes)\n- expanded [property configuration](#Property_configuration) (see below)\n\nAny [common properties](#Common properties) are inserted first at the top of\nthis list.\n\nWithin the indexed JSON documents the property will be given with the local\nname of the property (e.g. `title` and `altLabel`), or with `prefix_localname`\nif an earlier property in the property list *of this index-type* has a\nconflicting name (e.g. `dc:title` `dct:title` would be indexed as `title` and\n`dct_title`).\n\nIf a `type` was specified (match by type), then in the the generated query the\nproperties are individually made `OPTIONAL`, if not, all the specified\nproperties must be present in the graph (match by pattern).\n\n## API defaults\n\nThe API has a fuzziness setting of 1 to allow for simple mispellings of eg Aspirin to Asprin. The `label` field has also been boosted by 2 which means that it takes precedence over other fields.\n\n## Request and Response\n\nSend a GET request to `/search/` with your query as the last part of the URL eg. `http://example.com/search/pfd` or as the parameter `q` eg `http://example.com/search?q=pfd`. You can also include the branch to search for `b`, the type `t` and the limit `l` eg `http://example.com/search?q=asp&b=chebi&t=compound&l=10`.\n\nThe branches are:\n* chebi\n* chembl\n* uniprot\n* drugbank\n* ocrs\n\nThe types are:\n* compound\n* target\n* targetComponent\n\nOr POST a query to `/search` with the payload formatted as follows, here the query is for `pfd` with a maximum of 25 `hits` to be included in the response:\n\n```json\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\":\"pfd\",\"default_operator\":\"AND\"\n        }\n    },\n    \"size\":25,\n    \"highlight\": {\n        \"pre_tags\": [\"<strong>\"],\n        \"post_tags\": [\"</strong>\"],\n        \"fields\": {\n            \"title\":{},\n            \"prefLabel\":{},\n            \"altLabel\":{},\n            \"label\":{},\n            \"description\":{},\n            \"mnemonic\":{},\n            \"oldMnemonic\":{},\n            \"shortName\":{},\n            \"fullName\":{},\n            \"ecName\":{},\n            \"altFullName\":{},\n            \"antigen\":{},\n            \"altEcName\":{},\n            \"altShortName\": {}\n        }\n    }\n}\n```\n\nTODO: POST with `branch` and `type`\n\nThe response format (in JSON) is shown below. The `total` number of hits is included in the response and here was `2`:\n\n```json\n{\n    \"@context\": {\n        \"@vocab\": \"http://example.com/\"\n    },\n    \"@id\": \"/search/pfd\",\n    \"hits\": [\n        {\n            \"@id\": \"http://rdf.ebi.ac.uk/resource/chembl/targetcomponent/CHEMBL_TC_6985\",\n            \"@ops_type\": \"targetComponent\",\n            \"@score\": 2.3294637,\n            \"@type\": [\n                \"chembl:TargetComponent\"\n            ],\n            \"altLabel\": [\n                \"CFD\",\n                \"Complement factor D\",\n                \"Adipsin\",\n                \"C3 convertase activator\",\n                \"DF \",\n                \"PFD\",\n                \"Properdin factor D\"\n            ],\n            \"chemblId\": [\n                \"CHEMBL_TC_6985\"\n            ],\n            \"description\": [\n                \"Complement factor D\"\n            ],\n            \"label\": [\n                \"CHEMBL_TC_6985\"\n            ],\n            \"organism\": [\n                \"Homo sapiens\"\n            ]\n        },\n        {\n            \"@id\": \"http://purl.obolibrary.org/obo/CHEBI_31263\",\n            \"@ops_type\": \"compound\",\n            \"@score\": 0.73953164,\n            \"@type\": [\n                \"owl:Class\"\n            ],\n            \"Definition\": [\n                \"The dipeptide obtained by condensation of N-benzoyl-L-tyrosine with 4-aminobenzoic acid. Used as a noninvasive screening test for exocrine pancreatic insufficiency and to monitor the adequacy of supplemental pancreatic therapy, it is given by mouth: the amount of 4-aminobenzoic acid and its metabolites excreted in the urine is taken as a measure of the chymotrypsin-secreting activity of the pancreas.\"\n            ],\n            \"Synonym\": [\n                \"(S)-4-((2-(benzoylamino)-3-(4-hydroxyphenyl)-1-oxopropyl)amino)benzoic acid\",\n                \"4-(N-benzoyl-L-tyrosylamino)benzoic acid\",\n                \"4-[(N-benzoyl-L-tyrosyl)amino]benzoic acid\",\n                \"BT-PABA\",\n                \"BTPABA\",\n                \"C23H20N2O5\",\n                \"N-benzoyl-L-tyrosyl-p-aminobenzoate\",\n                \"N-benzoyl-L-tyrosyl-p-aminobenzoic acid\",\n                \"PFD\",\n                \"PFT\",\n                \"bentiromide\",\n                \"bentiromido\",\n                \"bentiromidum\",\n                \"benzoyltyrosyl-p-aminobenzoic acid\",\n                \"(S)-p-(alpha-benzamido-p-hydroxyhydrocinnamamido)benzoic acid\"\n            ],\n            \"label\": [\n                \"bentiromide\"\n            ],\n            \"xref\": [\n                \"Beilstein:2910938\",\n                \"DrugBank:DB00522\",\n                \"KEGG DRUG:37106-97-1\",\n                \"KEGG DRUG:D01346\",\n                \"Patent:DE2156835\",\n                \"Patent:US3801562\",\n                \"Wikipedia:Bentiromide\"\n            ]\n        }\n    ],\n    \"query\": \"pfd\",\n    \"total\": 2\n}\n```\n",
  "dockerfile": "FROM elasticsearch:2.2\nADD config/elasticsearch.yml /usr/share/elasticsearch/config/elasticsearch.yml\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "config/elasticsearch.yml",
        "dest": "/usr/share/elasticsearch/config/elasticsearch.yml"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [],
    "workdir": [],
    "from": "elasticsearch:2.2"
  },
  "source_repository_url": "https://github.com/openphacts/ops-search.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/openphacts/ops-search",
  "docker_repository": "openphacts/ops-search-elasticsearch",
  "docker_image": "openphacts/ops-search-elasticsearch",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "openphacts/ops-search-elasticsearch",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/openphacts/ops-search-elasticsearch",
    "https://hub.docker.com/v2/repositories/openphacts/ops-search-elasticsearch",
    "https://github.com/openphacts/ops-search.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Search/Elasticsearch"
  ],
  "info_url": "https://hub.docker.com/r/openphacts/ops-search-elasticsearch",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}