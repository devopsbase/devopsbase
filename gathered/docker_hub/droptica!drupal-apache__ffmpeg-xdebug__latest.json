{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/droptica/drupal-apache",
    "repository_url": "https://hub.docker.com/v2/repositories/droptica/drupal-apache",
    "tags_url": "https://hub.docker.com/v2/repositories/droptica/drupal-apache/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/droptica/drupal-apache/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/droptica/drupal-apache/autobuild",
    "user": "droptica",
    "name": "drupal-apache",
    "namespace": "droptica",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 3885,
    "last_updated": "2016-09-15T09:27:16.160006Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "ffmpeg-xdebug",
        "full_size": 338900088,
        "id": 4861132,
        "repository": 437743,
        "creator": 503193,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:27:15.690764Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "ffmpeg",
        "full_size": 338900115,
        "id": 4861133,
        "repository": 437743,
        "creator": 503193,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:27:14.406014Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "xdebug",
        "full_size": 256023563,
        "id": 1514267,
        "repository": 437743,
        "creator": 394576,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:24:24.776511Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.5-xdebug",
        "full_size": 253523210,
        "id": 3279163,
        "repository": 437743,
        "creator": 503193,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:23:49.900339Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "7-xdebug",
        "full_size": 259931740,
        "id": 1535089,
        "repository": 437743,
        "creator": 394576,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:23:48.547047Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 254808326,
        "id": 1514210,
        "repository": 437743,
        "creator": 394576,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:20:25.811384Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.5",
        "full_size": 252317065,
        "id": 3279210,
        "repository": 437743,
        "creator": 503193,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:20:23.170809Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "7",
        "full_size": 258715057,
        "id": 1514209,
        "repository": 437743,
        "creator": 394576,
        "last_updater": 503193,
        "last_updated": "2016-09-15T09:20:22.353774Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "droptica/docker-images"
  },
  "name": "droptica/drupal-apache Docker container",
  "description": "Drupal apache",
  "readme": "Application for running Drupal projects on Docker.\n\n|\n\n=========\n**Setup**\n=========\n\n|\n\n**docker-drupal package installation**\n======================================\n\nRequirements for docker-drupal:\n\n* Python 2.7\n* setuptools\n* pyyaml\n|\n* docker\n* docker-compose\n\n\nWhen this requirements are satisfied, you can download docker-drupal package, unzip and go to unzipped directory with setup.py file. Then you can install package using command::\n\n    sudo python setup.py install\n\n|\n\n\n**docker-drupal package update**\n================================\nTo update docker-drupal package, you need to do the same steps as for installation.\n\n|\n\n**Autocomplete activation**\n===========================\n\nDuring package installation, bash completion scripts are placed in::\n\n    /usr/share/bash-completion/completions/docker-drupal\n\n|\n\nTo activate docker-drupal commands and options completion, you need to logout and login again, or type::\n\n    exec bash\n\nwithout logging out.\n\n|\n|\n\n==================================\n**Available commands and options**\n==================================\n\n|\n\n**Commands that can be run from anywhere**\n==========================================\n\n- default:\n    Default action if no command spefified. This command is equivalent to::\n\n        docker-drupal\n    and::\n\n        docker-drupal help\n\n|\n\n- help:\n    Print available options, aliases AND commands including commands added locally for project in docker_drupal_overrides.py (if you are running this command in project wrapper).\n    If you use --help option, you will not see available commands, but you can always use::\n\n        docker-drupal <tab><tab>\n    to see this available commands. Note that autocomplete mechanism is not working for commands added locally for project in docker_drupal_overrides.py.\n\n    |\n\n    This command is equivalent to::\n\n        docker-drupal\n    and::\n\n        docker-drupal default\n|\n\n- init:\n    This command is copying following files from docker-drupal default templates to project wrapper:\n        - docker-compose.yml,\n        - docker-compose-jenkins.yml,\n        - docker/my.conf,\n        - docker/docker_drupal/docker_drupal_overrides.py,\n        - docker/docker_drupal/docker_drupal_config_overrides.py\n    Files existing in project wrapper localization, by default will not be replaced.\n\n    |\n\n    Options:\n\n    \\-f, \\--force-replace-conf\n        Set if you want force replace your existing config files listed above.\n        All your changes in listed files will be irrevocably lost. Other files in wrapper folder and 'docker' folder will stay unchanged.\n\n|\n\n- cleanup:\n    | This command is running three commands that are cleaning up unneeded docker containers, images and volumes.\n    | See http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/ for precise description.\n|\n\n- refresh-autocomplete:\n    Recreates bash completion script. It can be used if you want add support for autocomplete of newly added project aliases, or new custom project commands.\n    After that command you need to logout and login again, or run::\n\n        exec bash\n    command to apply autocomplete changes.\n\n|\n\n**Commands that needs to be run from project wrapper with docker-compose.yml file**\n===================================================================================\n\n- shell:\n    Print docker command that runs shell inside docker.\n\n    |\n\n    Options:\n\n    \\-c, \\--docker-container\n        Set container name to run bash in it.\n    |\n    \\-s, \\--docker-shell-run\n        Set if you want to run docker shell.\n\n|\n\n- add-host-to-docker-compose:\n    Add custom host to docker-compose.yml file.\n\n|\n\n- add-host-to-etc-hosts:\n    | Add config entry for project to /etc/hosts depending on VIRTUAL_HOST variable for web and phpmyadmin containers configuration in docker-compose.yml.\n    Example of /etc/hosts entry for project::\n\n        172.17.0.2\t\tproject.dev www.project.dev phpmyadmin.project.dev\n\n|\n\n- up:\n    Start all containers defined in docker-compose.yml\n\n    |\n\n    This command is equivalent to::\n\n        docker-drupal start\n\n|\n\n- start:\n    Start all containers defined in docker-compose.yml\n\n    |\n\n    This command is equivalent to::\n\n        docker-drupal up\n\n|\n\n- stop:\n    Stops all containers that were started for current project.\n\n|\n\n- restart:\n    This command is equivalent to following two commands running one after another in order such as below::\n\n        1. docker-drupal stop\n        2. docker-drupal start/up\n\n|\n\n- drush:\n    Allows for running any drush command inside docker.\n\n    |\n\n    Options:\n\n    \\-e, \\--drush-eval-run-code\n        Set if you want run code in drush eval.\n\n|\n\n- jenkins-prepare:\n    Adds configuration options that are needed to run project on Jenkins environment.\n\n|\n\n- build:\n    This command is running::\n\n        docker-drupal build-in-docker\n\n    command inside docker and some commands to set proper files permissions.\n\n|\n\n- up-and-build:\n    This command is equivalent to following two commands running one after another in order such as below::\n\n        1. docker-drupal up\n        2. docker-drupal build\n\n|\n\n- build-in-docker,\n    This command is responsible for building Drupal application inside docker and it will be not working locally.\n    It is used in::\n\n        docker-drupal build\n\n    command as one of building step.\n\n|\n\n**Global options**\n==================\n- \\--v, \\--version\n    See application version\n\n|\n\n- \\--help\n    See help for docker-drupal, you can also use::\n\n        docker-drupal help\n    command\n\n|\n\n- \\-p, \\--docker-run-path\n    Set path do drupal wrapper with 'docker-compose.yml' files and 'docker' folder\n\n|\n\n- \\-y\n    Yes to all questions where 'confirm_action' is used in command action steps\n\n|\n|\n\n=============================\n**Usage with Drupal project**\n=============================\n\n|\n\n**docker-drupal initialization in drupal project**\n==================================================\n\nTo initialize docker-drupal in drupal project you can either manually create following files:\n\n- docker-compose.yml,\n- docker/docker_drupal/docker_drupal_overrides.py,\n- docker/docker_drupal/docker_drupal_config_overrides.py\n\n|\n\n, or run::\n\n    docker-drupal init\ncommand. This command will copy this files and some other additional files:\n\n- docker-compose-jenkins.yml,\n- docker/my.conf,\n\n|\n\nfrom default package templates to your project wrapper. If you are creating **docker/docker_drupal/docker_drupal_config_overrides.py** file manually,\nyou should **look at the source of docker_drupal package conf/default.py** file to see what config options are available and what are default values.\n\nAfter that, you should adjust settings for your project in::\n\n    <project_name>/docker/docker_drupal/docker_drupal_config_overrides.py\nfile if needed.\n\n\n|\n\n**Adding config entry for project to /etc/hosts**\n=================================================\n\nTo add config entry for project to /etc/hosts you need to run::\n\n    docker-drupal add-host-to-etc-hosts\n\nThis command will run docker for current project and add entry to /etc/hosts with IP Address taken from web container\nand hosts names taken from VIRTUAL_HOST variable for web and phpmyadmin containers configuration in docker-compose.yml\n\n|\n\n**Adding Project Aliases**\n==========================\n\ndocker-drupal application allows for defining project aliases like in drush. In alias configuration there is only project wrapper path configuration. This path should be absolute.\n\n|\n\nAlias files have to be placed in::\n\n    ~/.docker_drupal/aliases/\nfolder. This folder is automatically created during installation. You can place here as many aliases files as you need, with any number of aliases in each file.\n\n|\n\nExample alias.py file::\n\n    project_1_alias = {\n        'path': '/path/to/project1/wrapper/'\n    }\n\n    project_2_alias = {\n        'path': '/path/to/project2/wrapper/'\n    }\n\n    __all__ = ['project_1_alias', 'project_2_alias']\n\n|\n\nIf you will create alias for project you will be able to run docker-drupal from anywhere with project path given in alias::\n\n    docker-drupal @project_1_alias\n\n|\n\nAfter adding new aliases, you need to run::\n\n    docker-drupal refresh-autocomplete\nto add autocomplete support for new aliases.\n\n\n|\n\n**Adjusting default, global configuration options, classes methods and commands to specific project needs, using custom overriding files**\n=======================================================================================================================================\n\n|\n\n**Adjusting configuration options**\n-----------------------------------\n\nTo adjust configuration options you need to modify::\n\n    <project_name>/docker/docker_drupal/docker_drupal_config_overrides.py\nfile.\n\n|\n\nYou can either modify default options values or add new options.\n\n|\n\nExample docker_drupal_config_overrides.py file::\n\n    DB_NAME = \"not_standard_db_name\"\n\n    DB_USER = \"not_standard_db_username\"\n\n    DB_PASSWORD = \"not_standard_db_userpass\"\n\n    DRUPAL_LOCATION = \"some_dir\"\n\n|\n\n**Adjusting classes methods and commands**\n------------------------------------------\n\nTo adjust classes methods or commands you need to modify::\n\n    <project_name>/docker/docker_drupal/docker_drupal_overrides.py\nfile.\n\nYou can either replace existing classes methods or add new methods. Methods from classes can be used create new or replace existing commands locally in project context.\n\nExample docker_drupal_overrides.py file::\n\n\n    #import classes to override\n    from docker_drupal.drush import Drush\n    from docker_drupal.builder import Builder\n\n    # add new methods\n    class DrushLocal:\n        def localtest(self, text):\n            print text\n\n    Drush.__bases__ += (DrushLocal,)\n\n    class BuilderLocal:\n        def printlocal(self):\n            self.drush.localtest('printlocal')\n\n    Builder.__bases__ += (BuilderLocal,)\n\n    # override existing method\n    def drush_uli_local(self):\n        print self.config.DRUPAL_ADMIN_USER\n\n    Drush.uli = drush_uli_local\n\n\n    # replace/add new commands\n    build_arrays_overrides = {\n        'localtest': ['confirm_action', 'drush.localtest(\"upwd %s --password=123\" % self.config.DRUPAL_ADMIN_USER)'],\n        'drush_uli': ['confirm_action(\"no\")', 'drush.uli'],\n    }",
  "dockerfile": "FROM droptica/drupal-apache\n\nRUN echo 'deb http://httpredir.debian.org/debian jessie main contrib non-free' > /etc/apt/sources.list\nRUN echo 'deb-src http://httpredir.debian.org/debian jessie main contrib non-free' >> /etc/apt/sources.list\n\nRUN echo 'deb http://httpredir.debian.org/debian jessie-updates main contrib non-free' >> /etc/apt/sources.list\nRUN echo 'deb-src http://httpredir.debian.org/debian jessie-updates main contrib non-free' >> /etc/apt/sources.list\n\nRUN echo 'deb http://security.debian.org/ jessie/updates main contrib non-free' >> /etc/apt/sources.list\nRUN echo 'deb-src http://security.debian.org/ jessie/updates main contrib non-free' >> /etc/apt/sources.list\n\nRUN echo 'deb http://ftp.debian.org/debian jessie-backports main' >> /etc/apt/sources.list\n\nRUN a2enmod headers\nRUN apt-get update && apt-get install -y libmemcached-dev\nRUN echo \"no\" | pecl install memcached\nRUN docker-php-ext-enable memcached\n\nRUN apt-get -t jessie-backports install -y ffmpeg\n\nRUN ln -s /usr/bin/ffmpeg /usr/local/bin/ffmpeg\n\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nADD entrypoint.sh /bin/entrypoint.sh\n\nRUN chmod 777 /bin/entrypoint.sh\n\nADD htpasswd.conf /etc/apache2/conf-available/htpasswd.conf\n\nCMD entrypoint.sh",
  "dockerfile_json": {
    "add": [
      {
        "source": "entrypoint.sh",
        "dest": "/bin/entrypoint.sh"
      },
      {
        "source": "htpasswd.conf",
        "dest": "/etc/apache2/conf-available/htpasswd.conf"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [
      "echo 'deb http://httpredir.debian.org/debian jessie main contrib non-free' > /etc/apt/sources.list",
      "echo 'deb-src http://httpredir.debian.org/debian jessie main contrib non-free' >> /etc/apt/sources.list",
      "echo 'deb http://httpredir.debian.org/debian jessie-updates main contrib non-free' >> /etc/apt/sources.list",
      "echo 'deb-src http://httpredir.debian.org/debian jessie-updates main contrib non-free' >> /etc/apt/sources.list",
      "echo 'deb http://security.debian.org/ jessie/updates main contrib non-free' >> /etc/apt/sources.list",
      "echo 'deb-src http://security.debian.org/ jessie/updates main contrib non-free' >> /etc/apt/sources.list",
      "echo 'deb http://ftp.debian.org/debian jessie-backports main' >> /etc/apt/sources.list",
      "a2enmod headers",
      "apt-get update && apt-get install -y libmemcached-dev",
      "echo \"no\" | pecl install memcached",
      "docker-php-ext-enable memcached",
      "apt-get -t jessie-backports install -y ffmpeg",
      "ln -s /usr/bin/ffmpeg /usr/local/bin/ffmpeg",
      "apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*",
      "chmod 777 /bin/entrypoint.sh"
    ],
    "workdir": [],
    "from": "droptica/drupal-apache",
    "cmd": "entrypoint.sh"
  },
  "source_repository_url": "https://github.com/droptica/docker-images.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/droptica/docker-images",
  "docker_repository": "droptica/drupal-apache",
  "docker_image": "droptica/drupal-apache",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "droptica/drupal-apache",
  "revision": "ffmpeg-xdebug",
  "uris": [
    "https://hub.docker.com/r/droptica/drupal-apache",
    "https://hub.docker.com/v2/repositories/droptica/drupal-apache",
    "https://github.com/droptica/docker-images.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Web Server/Apache HTTP Server"
  ],
  "info_url": "https://hub.docker.com/r/droptica/drupal-apache",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}