{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/thehackerati/django-app-template",
    "repository_url": "https://hub.docker.com/v2/repositories/thehackerati/django-app-template",
    "tags_url": "https://hub.docker.com/v2/repositories/thehackerati/django-app-template/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/thehackerati/django-app-template/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/thehackerati/django-app-template/autobuild",
    "user": "thehackerati",
    "name": "django-app-template",
    "namespace": "thehackerati",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 464,
    "last_updated": "2016-09-26T19:56:34.410032Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 291341495,
        "id": 663417,
        "repository": 272585,
        "creator": 265633,
        "last_updater": 265634,
        "last_updated": "2016-09-26T19:56:34.002719Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "staging-latest",
        "full_size": 285052496,
        "id": 663426,
        "repository": 272585,
        "creator": 265633,
        "last_updater": 14601,
        "last_updated": "2015-11-05T21:52:37.629441Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "thehackerati/django-app-template"
  },
  "name": "thehackerati/django-app-template Docker container",
  "description": "",
  "readme": " # django-app-template\n\n[![Build Status](https://travis-ci.org/thehackerati/django-app-template.svg?branch=master)](https://travis-ci.org/thehackerati/django-app-template)\n\n\nThis is a starting point for a Docker-based Django app, configured for continuous integration with Travis and continuous deployment to AWS. Just clone and rename the repo and start coding.\n\n## Running locally\n\n### Mac Pre-requisites\n\nIf you're working on a Mac, you'll need a Linux virtual machine to use for development. Vagrant and Virtualbox are a great, free solution:\n\n- Vagrant: http://www.vagrantup.com/downloads.html\n- Virtualbox: https://www.virtualbox.org/wiki/Downloads\n\nYou can also install Virtuabox on a Mac using Homebrew:\n\n```bash\n$ brew cask install virtualbox\n$ brew cask install vagrant\n```\n\nNow you can start the environment:\n\n```bash\n$ git clone git@github.com:thehackerati/django-app-template.git\n$ cd django-app-template\n$ make install\n$ make up\n```\n\nYou'll be prompted to login using an account with admin privileges on your host machine to enable network synchronization of the source tree on your host machine with the Vagrant VM.\n\nOnce the VM is started, check out the app:\n\n```bash\n$ open http://192.168.59.103:8000\n```\n\nIf you are getting an error, give it a minute but you may need to run\n\n```bash\n$ vagrant ssh\n```\nThen try refreshing or opening the page again.\n\n### Windows Pre-requisites\n\nLike the Mac, Windows requires you to run Linux in a virtual machine, and Vagrant/Virtualbox are a great choice!\n\nTODO:\n- Other pre-requisites?\n- Install vagrant and virtualbox on Windows\n- Clone the repo and vagrant up\n- Test\n\n### Linux Pre-requisites\n\nOn Linux, you can run Docker natively, so you don't actually need a virtual machine. To install Docker, make sure you're logged in as a user with sudo privileges. You'll need wget, and you'll need to make sure you have installed all of the pre-requisites for your version of Linux, which can be numerous (there were none for Ubuntu 64-bit 14.04.2).\n\n- Docker: https://docs.docker.com/installation/\n- Docker Compose: https://docs.docker.com/compose/install/\n\nStart by installing Docker:\n\n```bash\n$ wget -qO- https://get.docker.com/ | sh\n$ sudo usermod -aG docker <your user name>\n```\n\nNow verify that Docker is properly installed:\n\n```bash\n$ docker run hello-world\n```\n\nThen install Docker Compose:\n\n```bash\n$ sudo -i curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n\nAt this point, you can clone the repo and start the Docker containers:\n\n```bash\n$ git clone git@github.com:thehackerati/django-app-template.git\n$ cd django-app-template\n$ make build\n$ make up\n```\n\nYou might see the following error message when attempting to start the containers:\n\n```bash\nCannot start container <container>: Error starting userland proxy: listen tcp 0.0.0.0:80: bind: address already in use\n```\n\nIf that is the case, kill all processes using that address and try starting the containers again:\n\n```bash\n$ sudo fuser -k 80/tcp\n$ make up\n```\n\nYou might additionally see the following error message:\n\n```bash\nConflict. The name \"djangoapptemplate_nginx_1\" is already in use by container <container>. You have to delete (or rename) that container to be able to reuse that name.\n```\n\nIf that is the case, stop and remove all containers and restart:\n\n```bash\n$ make stop\n$ make rm\n$ make up\n```\n\nOnce the Docker containers have started, check out the app:\n\n```bash\n$ open http://127.0.0.1:8080 #on mac\n$ curl http://127.0.0.1:80 #on linux\n```\n\nIf you use a firefox to check out the app, make sure you have 'use system proxy settings' checked off in Connection Settings, which can be found under the Network Tab in Advanced Preferences\n\nNote that docker containers run directly on their Linux host machines, not in a virtual guest machine, so you can access any exposed ports on the loopback address: 127.0.0.1.\n\n## What's Inside\n\nVagrant configures and launches a Virtualbox VM based on the Vagrantfile located in the project root and then runs docker-compose in the VM. Docker compose configures launches the Docker containers that are specified in docker-compose.yml, each according to its Dockerfile.\n\nAs a starting point, this repo only includes some very basic components:\n\n- LICENSE: It's MIT licensed!\n- README.md: this file\n- Vagrantfile: configures a VM that runs docker-compose on boot\n- app: Docker container based on the official python image with scaffolded Django app\n- docker-compose.yml: runs the configured Docker containers\n- nginx: Docker container for the official nginx image, configured as a reverse proxy for the app\n\nYou can add additional services like mongodb, mysql, redis, and elasticsearch as separate containers. As a convention, add each container in its own directory under the project root and configure the container in docker-compose.yml.\n\nNote: Docker uses volumes to mount host directories in containers; so you can keep directories on your host and your container in sync. This allows you to do things like develop in your host using your favorite editor while you watch for changes to code in your container so you can automatically reload your application and/or run tests. Docker containers mount volumes at boot time, not at build time, in order to maintain portability from host to host. If you try to mount a volume on a mount point inside your container, the contents of the mounted volume will overwrite any files or directories that might have previously existed in your mount point.\n\nThis makes installing application dependencies at build time (e.g. running npm install, pip or whatever package manager you use) a little tricky. They key is to install dependencies in a separate directory from your volume mount point, so they don't get overwritten when the container boots. You can then either modify your application to look for dependencies wherever you installed them, or you can copy the dependencies to your mounted volume before starting your application. Note that any changes to your mounted volume will be reflected in your host directory, which isn't desirable. Neither is having a non-standard deployment directory structure. TODO: decide on the best approach.\n\nHere, ./app/Dockerfile installs dependencies in /opt/app in the container at build time. At boot time, docker-compose.yml mounts the ./app directory in the host (project root) on the /src/app volume in the appsvr container to run.\n\n## Working in the Environment\n\n### Development Workflow\n\nThis environment is designed to support GitHub Flow, which is described in more detail here: [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html). GitHub Flow works for Web applications that don't have traditional releases but instead aim to continuously deploy smaller changes to production as often as several times a day. Here's a summary:\n\n- Pull from the upstream repo to make sure your local copy is in sync.\n- Create a local feature branch.\n- Develop the new feature and all necessary unit and functional tests. We're not dogmatic about whether you should do so in a test-first manner; use your judgement. But do write automated tests.\n- On save, tests will automatically run and the application will automatically reload in the container. Repeat the code/test cycle until the test passes.\n    - TODO: look for clock skew issues in container\n- Frequently commit your changes.\n- Push your changes to a Github feature branch of the same name at least once a day.\n- Travis will run tests automatically on push (move this to on opening a pull request?)\n- Repeat until youâ€™re ready to merge your commits (remember to frequently rebase with upstream master)\n- Push to Github and open a pull request\n- Review and merge the pull request to staging branch to deploy to staging environment\n- Acceptance test and merge the pull request to production branch to deploy to production environment\n- TODO:\n    - Deploy to AWS staging and production\n\n### Working with Docker Containers\n\nYou can find lots of useful information about Docker containers here:\n\n- https://docs.docker.com/userguide/usingdocker/\n- https://github.com/wsargent/docker-cheat-sheet\n\nHere are some useful Docker commands that you can run from your host, assuming your containers are running in a VM under Vagrant. Make sure that you run these from your project root directory, where your Vagrantfile is located.\n\nTo ssh to your VM (it's just a Linux host):\n\n```bash\n$ make ssh\n```\n\nTo show the Docker containers that are currently running:\n\n```bash\n$ make ps\n```\n\nTo tail the log files from your containers:\n\n```bash\n$ make tail\n$ make tailnginx\n```\n\nTo open a shell in your Docker container\n\n```bash\n$ make shell\n```\n\nTo rebuild a container after changing a Dockerfile:\n\n```bash\n$ make build\n```\n\nTo run in debug mode, using your favorite Python debug tool (ipdb included by default):\n```bash\n$ make debug\n```\n\nTo run your suite of tests:\n```bash\n$ make test\n```\n\nTo get a shell inside the Django app (as in running `python manage.py shell):\n```bash\n$ make djangoshell\n```\n\nTo see usage statistics of the app server container:\n```bash\nmake stats\n```\n\nTo see the running processes inside the app server:\n```bash\nmake top\n```\n\n## Setting Up Your Project\n\n### Setting Up Your Own Repo\n\nIf you want to contribute to this project, please fork this repo. If you want to build an application using this project as a foundation or if you want to create a template for a different Web framework:\n\n```bash\n$ git clone git@github.com:thehackerati/django-app-template.git my-repo-name\n$ cd my-repo-name\n```\n\nCreate a new repo on Github. Let's call it me/my-repo-name. Then push to your new repo:\n\n```bash\n$ git remote set-url origin git@github.com:me/my-repo-name.git\n$ git push -u origin master\n```\n\nAdd a staging branch to your repo on Github:\n\n```bash\n$ git checkout -b staging\n$ git push -u origin staging\n```\n\n### Setting Up Continuous Integration\n\nYou'll need to setup your own continous integration service. This repo comes with [TravisCI](http://www.travis-ci.org) already configured. Once you've pushed your code to Github, login into Travis and connect it to your repo. By default, your first build will happen the next time that you push this repo to Github.\n\n#### Install Travis CLI\n\nMake sure you have at least Ruby 1.9.3 (2.0.0 recommended) installed.\n\nYou can check your Ruby version like this:\n\n```bash\n$ ruby -v\nruby 2.1.6p336 (2015-04-13 revision 50298) [x86_64-linux-gnu]\n```\n\nInstall Travis CLI and make sure it works:\n\n```bash\n$ gem install travis -v 1.8.0 --no-rdoc --no-ri\n$ travis version\n1.8.0\n```\n\n#### Enter your AWS Access Key ID and Secret Access Key:\n\nYou can find your AWS keys here: https://console.aws.amazon.com/iam/home?#security_credential\n\nThe Access Key ID acts as a username and does not need to be encrypted. You can replace the access_key_id property in .travis.yml with your Access Key ID.\n\nThe Secret Access Key acts as a password and should be encrypted in the .travis.yml file. To generate an encrypted AWS secret access key:\n\n```bash\n$ travis encrypt --add deploy.secret_access_key\n```\n\nYou'll be prompted to paste your secret key. This will place the new encrypted key at the end of the .travis.yml file:\n\n```bash\n  secret_access_key:\n    secure: <key>\n```\n\nMake sure your Github repository and AWS environment names match your configuration.\n\nTo validate your .travis.yml file, install Travis Lint:\n\n```bash\n$ sudo gem install travis-lint\n```\n\nCreate an AWS S3 bucket and directories for deployment. This appears to fail silently if you forget to do it, so don't forget!\n\n### Setting Up AWS Elastic Beanstalk on Local Development Environment\n\nNOTE: This is only relevant on the Docker Host (e.g. Linux).\n\nInstall Elastic Beanstalk CLI\n\nTODO: Add EB CLI install to Vagrantfile for Mac. Then vagrant ssh\n\nClone the repo and run the environment locally:\n\n```bash\n$ git clone git@github.com:thehackerati/django-app-template.git\n$ cd django-app-template\n$ eb init\n$ eb local run\n```\n\nTest the local environment:\n\n```bash\n$ curl http://127.0.0.1\n```\n\n### Setting Up AWS Production Environment\n\n```bash\n$ eb create\nWARNING: The Multi-container Docker platform requires additional ECS permissions. Add the permissions to the aws-elasticbeanstalk-ec2-role or use your own instance profile by typing \"-ip {profile-name}\".\nFor more information see: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_ecstutorial.html#create_deploy_docker_ecstutorial_role\nEnter Environment Name\n(default is django-app-template-dev): djangoAppTemplateProd\nEnter DNS CNAME prefix\n(default is djangoAppTemplateProd):\nlots of output...\n```\n\nTest the production environment:\n\n```bash\n$ curl http://djangoAppTemplateProd.elasticbeanstalk.com\n```\n\n### Setting Up AWS Staging Environment\n\n```bash\n$ eb clone\nEnter name for Environment Clone\n(default is my-cloned-env): djangoAppTemplateStg\nEnter DNS CNAME prefix\n(default is djangoAppTemplateStg):\nlots of output...\n```\n#### Test the staging environment:\n\n```bash\n$ curl http://djangoAppTemplateStg.elasticbeanstalk.com\n```\n\n### Setting Up Automated Build and Deploy to AWS Elastic Beanstalk\n#### Configure Elastic Beanstalk\nYou will need a staging and production environment, as well as an RDS instance which these environements will connect to.\n\nThe Django code provided will connect to a database automatically so long as the appropriate environment variables are set, and the security group rules allow such connections.\nIn addition to database-related environment variables, you should also generate long and random SECRET_KEY variables,\none for your staging environment, and one for production, and set these here.\nThe environment variables can be set on the Elastic Beanstalk console for each environment by going to Configuration > Software Configuration.\nIn here you must set the following environment variables:\nRDS_DB_NAME, RDS_USERNAME, RDS_PASSWORD, RDS_HOSTNAME, RDS_PORT, SECRET_KEY,\nALLOWED_HOST, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_S3_CUSTOM_DOMAIN,\nENVIRONMENT, MEDIAFILES_LOCATION, S3_BUCKET_NAME, STATICFILES_LOCATION\n\n\n\nBe sure to use a different RDS_DB_NAME for staging and production.\n\n### Working within your environment\n#### Migrating the database\nIn order to create migrations on your development environment you will need to run:\n```bash\n$ make makemigrations\n```\n\nYou must do this while the environment is running.\nThen you can run:\n```bash\n$ make migrate\n```\nThis will apply the migrations to the database.\nWhen you are ready to deploy, you must be sure to check your migrations into your repository.\nWhen you push your branch to staging the migrations will automatically be applied to your database.\nYour local database will likewise apply any new migrations each time you start docker-compose.\n\nConfigure DockerHub to build staging and production repositories:\n\nAdd Repository -> Automated Build\nSelect your repository on Github\n\nType        Name        Dockerfile Location     Tag Name\nBranch      staging     /app                    staging-latest\nBranch      master      /app                    latest\n\n\n## License\nCopyright (c) 2015 The Hackerati. This software is licensed under the MIT License.\n",
  "dockerfile": "FROM python:3.5\nENV PYTHONUNBUFFERED 1\n\n# Install Python dependencies\nRUN mkdir -p /src/app/\nCOPY requirements.txt /src/app/\nRUN pip install -r /src/app/requirements.txt\n\n# Ensure we have django user with which uwsgi will run.\nRUN useradd -ms /bin/bash django\n\nCMD uwsgi --ini /src/app/uwsgi.ini\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "mkdir -p /src/app/",
      "pip install -r /src/app/requirements.txt",
      "useradd -ms /bin/bash django"
    ],
    "workdir": [],
    "from": "python:3.5",
    "env": {
      "PYTHONUNBUFFERED": "1"
    },
    "copy": "requirements.txt /src/app/",
    "cmd": "uwsgi --ini /src/app/uwsgi.ini"
  },
  "source_repository_url": "https://github.com/thehackerati/django-app-template.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/thehackerati/django-app-template",
  "docker_repository": "thehackerati/django-app-template",
  "docker_image": "thehackerati/django-app-template",
  "parameters_schema": {
    "PYTHONUNBUFFERED": {
      "default": "1",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "thehackerati/django-app-template",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/thehackerati/django-app-template",
    "https://hub.docker.com/v2/repositories/thehackerati/django-app-template",
    "https://github.com/thehackerati/django-app-template.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Python"
  ],
  "info_url": "https://hub.docker.com/r/thehackerati/django-app-template",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}