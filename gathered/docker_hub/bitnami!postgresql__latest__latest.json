{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/postgresql",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/postgresql",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/postgresql/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/postgresql/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/postgresql/autobuild",
    "user": "bitnami",
    "name": "postgresql",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 5,
    "pull_count": 34052,
    "last_updated": "2016-10-17T10:50:35.176572Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 97274718,
        "id": 1836036,
        "repository": 488333,
        "creator": 563305,
        "last_updater": 342683,
        "last_updated": "2016-10-17T10:50:34.233385Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "9.6.0-r0",
        "full_size": 97274718,
        "id": 5496207,
        "repository": 488333,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T10:50:27.867751Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "_",
        "full_size": 97274746,
        "id": 5450747,
        "repository": 488333,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T10:50:21.209533Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "development",
        "full_size": 97062249,
        "id": 1836035,
        "repository": 488333,
        "creator": 563305,
        "last_updater": 257375,
        "last_updated": "2016-10-17T07:55:21.907315Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r6",
        "full_size": 97062293,
        "id": 5049481,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T19:46:49.992951Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r5",
        "full_size": 95212100,
        "id": 4800921,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-12T17:37:03.073464Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r4",
        "full_size": 95212072,
        "id": 4711429,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-07T11:18:28.479591Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r2",
        "full_size": 92832162,
        "id": 3796644,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-12T08:17:17.577846Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r1",
        "full_size": 92796615,
        "id": 3743231,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-07T16:50:27.242571Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.5.3-r0",
        "full_size": 92301128,
        "id": 3306786,
        "repository": 488333,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-06-06T16:17:38.456878Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-postgresql"
  },
  "name": "bitnami/postgresql Docker container",
  "description": "Bitnami PostgreSQL Docker Image",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-postgresql/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-postgresql/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/postgresql)](https://hub.docker.com/r/bitnami/postgresql/)\n\n\n# What is PostgreSQL?\n\n> [PostgreSQL](http://www.postgresql.org) is an object-relational database management system (ORDBMS) with an emphasis on extensibility and on standards-compliance [[source]](https://en.wikipedia.org/wiki/PostgreSQL).\n\n# TLDR\n\n```bash\ndocker run --name postgresql -e POSTGRESQL_PASSWORD=password123 bitnami/postgresql:latest\n```\n\n## Docker Compose\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_PASSWORD=password123\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami PostgreSQL Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/postgresql).\n\n```bash\ndocker pull bitnami/postgresql:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the [list of available versions](https://hub.docker.com/r/bitnami/postgresql/tags/) in the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/postgresql:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/postgresql:latest https://github.com/bitnami/bitnami-docker-postgresql.git\n```\n\n# Persisting your database\n\nIf you remove the container all your data and configurations will be lost, and the next time you run the image the database will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed.\n\n**Note!**\nIf you have already started using your database, follow the steps on\n[backing up](#backing-up-your-container) and [restoring](#restoring-a-backup) to pull the data from your running container down to your host.\n\nThe image exposes a volume at `/bitnami/postgresql` for the PostgreSQL data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/postgresql-persistence:/bitnami/postgresql bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  volumes:\n    - /path/to/postgresql-persistence:/bitnami/postgresql\n```\n\n# Linking\n\nIf you want to connect to your PostgreSQL server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a PostgreSQL client container to the PostgreSQL server container\n\n### Step 1: Run the PostgreSQL image with a specific name\n\nThe first step is to start our PostgreSQL server.\n\nDocker's linking system uses container ids or names to reference containers. We can explicitly specify a name for our PostgreSQL server to make it easier to connect to other containers.\n\n```bash\ndocker run --name postgresql -e POSTGRESQL_PASSWORD=password123 bitnami/postgresql:latest\n```\n\n### Step 2: Run PostgreSQL image as a client and link to our server\n\nNow that we have our PostgreSQL server running, we can create another container that links to it by giving Docker the `--link` option. This option takes the id or name of the container we want to link it to as well as a hostname to use inside the container, separated by a colon. For example, to have our PostgreSQL server accessible in another container with `server` as it's hostname we would pass `--link postgresql:server` to the Docker run command.\n\nThe Bitnami PostgreSQL Docker Image also ships with a PostgreSQL client, but by default it will start a server. To start the client instead, we can override the default command Docker runs by stating a different command to run after the image name.\n\n```bash\ndocker run --rm -it --link postgresql:server bitnami/postgresql psql -h server -U postgres\n```\n\nWe started the PostgreSQL client passing in the `-h` option that allows us to specify the hostname of the server, which we set to the hostname we created in the link.\n\n**Note!**\nYou can also run the PostgreSQL client in the same container the server is running in using the Docker [exec](https://docs.docker.com/reference/commandline/cli/#exec) command.\n\n```bash\ndocker exec -it postgresql psql -U postgres\n```\n\n## Linking with Docker Compose\n\n### Step 1: Add a PostgreSQL entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add PostgreSQL to your application.\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_PASSWORD=password123\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your PostgreSQL server from to include a link to the `postgresql` entry you added in Step 1.\n\n```yaml\nmyapp:\n  image: myapp\n  links:\n    - postgresql:postgresql\n```\n\nInside `myapp`, use `postgresql` as the hostname for the PostgreSQL server.\n\n# Configuration\n\n## Setting the root password on first run\n\nIn the above commands you may have noticed the use of the `POSTGRESQL_PASSWORD` environment variable. Passing the `POSTGRESQL_PASSWORD` environment variable when running the image for the first time will set the password of the `postgres` user to the value of `POSTGRESQL_PASSWORD`.\n\n```bash\ndocker run --name postgresql -e POSTGRESQL_PASSWORD=password123 bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_PASSWORD=password123\n```\n\n**Note!**\nThe `postgres` user is a superuser and has full administrative access to the PostgreSQL database.\n\n## Creating a database on first run\n\nBy passing the `POSTGRESQL_DATABASE` environment variable when running the image for the first time, a database will be created. This is useful if your application requires that a database already exists, saving you from having to manually create the database using the PostgreSQL client.\n\n```bash\ndocker run --name postgresql -e POSTGRESQL_DATABASE=my_database bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_DATABASE=my_database\n```\n\n## Creating a database user on first run\n\nYou can also create a restricted database user that only has permissions for the database created with the [`POSTGRESQL_DATABASE`](#creating-a-database-on-first-run) environment variable. To do this, provide the `POSTGRESQL_USERNAME` environment variable.\n\n```bash\ndocker run --name postgresql -e POSTGRESQL_USERNAME=my_user -e POSTGRESQL_PASSWORD=password123 -e POSTGRESQL_DATABASE=my_database bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_USERNAME=my_user\n    - POSTGRESQL_PASSWORD=password123\n    - POSTGRESQL_DATABASE=my_database\n```\n\n**Note!**\nWhen `POSTGRESQL_USERNAME` is specified, the `postgres` user is not assigned a password and as a result you cannot login remotely to the PostgreSQL server as the `postgres` user.\n\n## Setting up a streaming replication\n\nA [Streaming replication](http://www.postgresql.org/docs/9.4/static/warm-standby.html#STREAMING-REPLICATION) cluster can easily be setup with the Bitnami PostgreSQL Docker Image using the following environment variables:\n\n - `POSTGRESQL_REPLICATION_MODE`: Replication mode. Possible values `master`/`slave`. No defaults.\n - `POSTGRESQL_REPLICATION_USER`: The replication user created on the master on first run. No defaults.\n - `POSTGRESQL_REPLICATION_PASSWORD`: The replication users password. No defaults.\n - `POSTGRESQL_MASTER_HOST`: Hostname/IP of replication master (slave parameter). No defaults.\n - `POSTGRESQL_MASTER_PORT`: Server port of the replication master (slave parameter). Defaults to `5432`.\n\nIn a replication cluster you can have one master and zero or more slaves. When replication is enabled the master node is in read-write mode, while the slaves are in read-only mode. For best performance its advisable to limit the reads to the slaves.\n\n### Step 1: Create the replication master\n\nThe first step is to start the master.\n\n```bash\ndocker run --name postgresql-master \\\n  -e POSTGRESQL_REPLICATION_MODE=master \\\n  -e POSTGRESQL_USERNAME=my_user \\\n  -e POSTGRESQL_PASSWORD=password123 \\\n  -e POSTGRESQL_DATABASE=my_database \\\n  -e POSTGRESQL_REPLICATION_USER=my_repl_user \\\n  -e POSTGRESQL_REPLICATION_PASSWORD=my_repl_password \\\n  bitnami/postgresql:latest\n```\n\nIn this command we are configuring the container as the master using the `POSTGRESQL_REPLICATION_MODE=master` parameter. A replication user is specified using the `POSTGRESQL_REPLICATION_USER` and `POSTGRESQL_REPLICATION_PASSWORD` parameters.\n\n### Step 2: Create the replication slave\n\nNext we start a replication slave container.\n\n```bash\ndocker run --name postgresql-slave \\\n  --link postgresql-master:master \\\n  -e POSTGRESQL_REPLICATION_MODE=slave \\\n  -e POSTGRESQL_MASTER_HOST=master \\\n  -e POSTGRESQL_MASTER_PORT=5432 \\\n  -e POSTGRESQL_REPLICATION_USER=my_repl_user \\\n  -e POSTGRESQL_REPLICATION_PASSWORD=my_repl_password \\\n  bitnami/postgresql:latest\n```\n\nIn the above command the container is configured as a `slave` using the `POSTGRESQL_REPLICATION_MODE` parameter. Before the replication slave is started, the `POSTGRESQL_MASTER_HOST` and `POSTGRESQL_MASTER_PORT` parameters are used by the slave container to connect to the master and replicate the initial database from the master. The `POSTGRESQL_REPLICATION_USER` and `POSTGRESQL_REPLICATION_PASSWORD` credentials are used to authenticate with the master.\n\nWith these two commands you now have a two node PostgreSQL master-slave streaming replication cluster up and running. You can scale the cluster by adding/removing slaves without incurring any downtime.\n\n> **Note**: The cluster replicates the master in its entirety, which includes all users and databases.\n\nIf the master goes down you can reconfigure a slave to act as the master and begin accepting writes by creating the trigger file `/tmp/postgresql.trigger.5432`. For example the following command reconfigures `postgresql-slave` to act as the master:\n\n```bash\ndocker exec postgresql-slave touch /tmp/postgresql.trigger.5432\n```\n\n> **Note**: The configuration of the other slaves in the cluster needs to be updated so that they are aware of the new master. This would require you to restart the other slaves with `--link postgresql-slave:master` as per our examples.\n\nWith Docker Compose the master-slave replication can be setup using:\n\n```yaml\nmaster:\n  image: bitnami/postgresql:latest\n  environment:\n    - POSTGRESQL_REPLICATION_MODE=master\n    - POSTGRESQL_USERNAME=my_user\n    - POSTGRESQL_PASSWORD=password123\n    - POSTGRESQL_DATABASE=my_database\n    - POSTGRESQL_REPLICATION_USER=my_repl_user\n    - POSTGRESQL_REPLICATION_PASSWORD=my_repl_password\n\nslave:\n  image: bitnami/postgresql:latest\n  links:\n    - master:master\n  environment:\n    - POSTGRESQL_REPLICATION_MODE=slave\n    - POSTGRESQL_MASTER_HOST=master\n    - POSTGRESQL_MASTER_PORT=5432\n    - POSTGRESQL_REPLICATION_USER=my_repl_user\n    - POSTGRESQL_REPLICATION_PASSWORD=my_repl_password\n```\n\nScale the number of slaves using:\n\n```bash\ndocker-compose scale master=1 slave=3\n```\n\nThe above command scales up the number of slaves to `3`. You can scale down in the same way.\n\n> **Note**: You should not scale up/down the number of master nodes. Always have only one master node running.\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/postgresql`. As as mentioned in [Persisting your database](#persisting-your-data) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n### Step 1: Run the PostgreSQL image\n\nRun the PostgreSQL image, mounting a directory from your host.\n\n```bash\ndocker run --name postgresql -v /path/to/postgresql-persistence:/bitnami/postgresql bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```yaml\npostgresql:\n  image: bitnami/postgresql:latest\n  volumes:\n    - /path/to/postgresql-persistence:/bitnami/postgresql\n```\n\n### Step 2: Edit the configuration\n\nEdit the configuration on your host using your favorite editor.\n\n```bash\nvi /path/to/postgresql-persistence/conf/postgresql.conf\n```\n\n### Step 3: Restart PostgreSQL\n\nAfter changing the configuration, restart your PostgreSQL container for changes to take effect.\n\n```bash\ndocker restart postgresql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose restart postgresql\n```\n\n**Further Reading:**\n\n  - [Server Configuration](http://www.postgresql.org/docs/9.4/static/runtime-config.html)\n\n# Logging\n\nThe Bitnami PostgreSQL Docker Image supports two different logging modes: logging to stdout, and logging to a file.\n\n## Logging to stdout\n\nThe default behavior is to log to stdout, as Docker expects. These will be collected by Docker, converted to JSON and stored in the host, to be accessible via the `docker logs` command.\n\n```bash\ndocker logs postgresql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs postgresql\n```\n\nThis method of logging has the downside of not being easy to manage. Without an easy way to rotate logs, they could grow exponentially and take up large amounts of disk space on your host.\n\n# Logging\n\nThe Bitnami PostgreSQL Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs postgresql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs postgresql\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your container\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop postgresql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop postgresql\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm \\\n  -v /path/to/postgresql-backups:/backups \\\n  --volumes-from postgresql busybox \\\n  cp -a /bitnami/postgresql:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm \\\n  -v /path/to/postgresql-backups:/backups \\\n  --volumes-from `docker-compose ps -q postgresql` busybox \\\n  cp -a /bitnami/postgresql:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run \\\n  -v /path/to/postgresql-backups/latest:/bitnami/postgresql \\\n  bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```\npostgresql:\n  image: bitnami/postgresql:latest\n  volumes:\n    - /path/to/postgresql-backups/latest:/bitnami/postgresql\n```\n\n## Upgrade this image\n\nBitnami provides up-to-date versions of PostgreSQL, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/postgresql:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to `bitnami/postgresql:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v postgresql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v postgresql\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name postgresql bitnami/postgresql:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start postgresql\n```\n\n# Testing\n\nThis image is tested for expected runtime behavior, using the [BATS](https://github.com/sstephenson/bats) testing framework. You can run the tests on your machine using the `bats` command.\n\n```bash\nbats test.sh\n```\n\n# Notable Changes\n\n## 9.5.3-r5\n\n- The `POSTGRES_` prefix on environment variables is now replaced by `POSTGRESQL_`\n- `POSTGRES_USER` parameter has been renamed to `POSTGRESQL_USERNAME`.\n- `POSTGRES_DB` parameter has been renamed to `POSTGRESQL_DATABASE`.\n- `POSTGRES_MODE` parameter has been renamed to `POSTGRESQL_REPLICATION_MODE`.\n\n## 9.5.3-r0\n\n- All volumes have been merged at `/bitnami/postgresql`. Now you only need to mount a single volume at `/bitnami/postgresql` for persistence.\n- The logs are always sent to the `stdout` and are no longer collected in the volume.\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an [issue](https://github.com/bitnami/bitnami-docker-postgresql/issues), or submit a [pull request](https://github.com/bitnami/bitnami-docker-postgresql/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an [issue](https://github.com/bitnami/bitnami-docker-postgresql/issues). For us to provide better support, be sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive information)\n\n# License\n\nCopyright (c) 2015-2016 Bitnami\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_IMAGE_VERSION=9.5.3-r6 \\\n    BITNAMI_APP_NAME=postgresql \\\n    BITNAMI_APP_USER=postgres\n\nRUN bitnami-pkg unpack postgresql-9.5.3-6 --checksum 8125346ab11238789e0f30b525a41d72154ed1d81facfa8ce6f1d8169caae9e4\nENV PATH=/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH\n\nCOPY rootfs/ /\nENTRYPOINT [\"/app-entrypoint.sh\"]\nCMD [\"nami\", \"start\", \"--foreground\", \"postgresql\"]\n\nVOLUME [\"/bitnami/$BITNAMI_APP_NAME\"]\n\nEXPOSE 5432\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      5432
    ],
    "volume": [
      "[\"/bitnami/$BITNAMI_APP_NAME\"]"
    ],
    "run": [
      "bitnami-pkg unpack postgresql-9.5.3-6 --checksum 8125346ab11238789e0f30b525a41d72154ed1d81facfa8ce6f1d8169caae9e4"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_IMAGE_VERSION": "9.5.3-r6",
      "": "",
      "BITNAMI_APP_NAME": "postgresql",
      "BITNAMI_APP_USER": "postgres",
      "PATH": "/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH"
    },
    "copy": "rootfs/ /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"postgresql\"]"
  },
  "source_repository_url": "https://github.com/bitnami/bitnami-docker-postgresql.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-postgresql",
  "docker_repository": "bitnami/postgresql",
  "docker_image": "bitnami/postgresql",
  "parameters_schema": {
    "BITNAMI_IMAGE_VERSION": {
      "default": "9.5.3-r6",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_NAME": {
      "default": "postgresql",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_USER": {
      "default": "postgres",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        5432
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/postgresql",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/bitnami/postgresql",
    "https://hub.docker.com/v2/repositories/bitnami/postgresql",
    "https://github.com/bitnami/bitnami-docker-postgresql.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Store/Relational/PostgreSQL"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/postgresql",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}