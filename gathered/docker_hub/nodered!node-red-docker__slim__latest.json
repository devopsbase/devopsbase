{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/nodered/node-red-docker",
    "repository_url": "https://hub.docker.com/v2/repositories/nodered/node-red-docker",
    "tags_url": "https://hub.docker.com/v2/repositories/nodered/node-red-docker/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/nodered/node-red-docker/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/nodered/node-red-docker/autobuild",
    "user": "nodered",
    "name": "node-red-docker",
    "namespace": "nodered",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 26,
    "pull_count": 11619,
    "last_updated": "2016-10-14T15:21:35.722573Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "slim",
        "full_size": 44337251,
        "id": 4002629,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-14T15:21:35.395928Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 288412235,
        "id": 3873359,
        "repository": 802998,
        "creator": 975261,
        "last_updater": 715146,
        "last_updated": "2016-10-14T15:21:34.945946Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.1-slim",
        "full_size": 44337251,
        "id": 5450624,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-14T15:21:34.494545Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.1",
        "full_size": 288412235,
        "id": 5450622,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-14T15:21:18.942045Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.1-rpi",
        "full_size": 200043455,
        "id": 5451037,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-14T07:00:39.946683Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "rpi",
        "full_size": 200043455,
        "id": 3873358,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-14T07:00:30.608079Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.0-slim",
        "full_size": 44337435,
        "id": 5398055,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-13T19:22:45.128781Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.0",
        "full_size": 288411424,
        "id": 5398053,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-13T19:22:30.450357Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.15.0-rpi",
        "full_size": 202083579,
        "id": 5398178,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-12T11:11:33.907095Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.14.6-slim",
        "full_size": 44425243,
        "id": 4061574,
        "repository": 802998,
        "creator": 715146,
        "last_updater": 715146,
        "last_updated": "2016-10-12T10:59:54.919589Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "node-red/node-red-docker"
  },
  "name": "nodered/node-red-docker Docker container",
  "description": "Node-RED Docker images.",
  "readme": "# Node-RED-Docker\n\nThis project describes some of the many ways Node-RED can be run under Docker.\nSome basic familiarity with Docker and the [Docker Command Line](https://docs.docker.com/reference/commandline/cli/) is assumed.\n\nThis project also provides the build for the `nodered/node-red-docker` container on [DockerHub](https://hub.docker.com/r/nodered/node-red-docker/).\n\nTo run this directly in docker at it's simplest just run\n\n        docker run -it -p 1880:1880 --name mynodered nodered/node-red-docker\n\nLet's dissect that command...\n\n        docker run      - run this container... and build locally if necessary first.\n        -it             - attach a terminal session so we can see what is going on\n        -p 1880:1880    - connect local port 1880 to the exposed internal port 1880\n        --name mynodered - give this machine a friendly local name\n        nodered/node-red-docker - the image to base it on - currently Node-RED v0.14.5\n\n\nRunning that command should give a terminal window with a running instance of Node-RED\n\n        Welcome to Node-RED\n        ===================\n        8 Apr 12:13:44 - [info] Node-RED version: v0.14.5\n        8 Apr 12:13:44 - [info] Node.js  version: v4.4.7\n        .... etc\n\nYou can then browse to `http://{host-ip}:1880` to get the familiar Node-RED desktop.\n\nThe advantage of doing this is that by giving it a name we can manipulate it\nmore easily, and by fixing the host port we know we are on familiar ground.\n(Of course this does mean we can only run one instance at a time... but one step at a time folks...)\n\nIf we are happy with what we see we can detach the terminal with `Ctrl-p``Ctrl-q` - the container will keep running in the background.\n\nTo reattach to the terminal (to see logging) run:\n\n        $ docker attach mynodered\n        \nIf you need to restart the container (e.g. after a reboot or restart of the Docker daemon)\n\n        $ docker start mynodered\n\nand stop it again when required\n\n        $ docker stop mynodered\n\n_**Note** : this Dockerfile is configured to store the flows.json file and any\nextra nodes you install \"outside\" of the container. We do this so that you may rebuild the underlying\ncontainer without permanently losing all of your customisations._\n\n## Container Layout\n\nThis repository contains Dockerfiles to build different Node-RED Docker images.\n\n- **latest** - uses [official Node.JS v4 base image](https://hub.docker.com/_/node/).\n- **slim** uses [Alpine Linux base image](https://hub.docker.com/r/mhart/alpine-node/).\n- **rpi** uses [RPi-compatible base image](https://hub.docker.com/r/hypriot/rpi-node/).\n\nUsing Alpine Linux reduces the built image size (~100MB vs ~700MB) but removes\nstandard dependencies that are required for native module compilation. If you\nwant to add modules with native dependencies, use the standard image or extend\nthe slim image with the missing packages.\n\nBuild these images with the following command...\n\n        $ docker build -f <version>/Dockerfile -t mynodered:<version> .\n\n### package.json\n\nThe package.json is a metafile that downloads and installs the required version\nof Node-RED and any other npms you wish to install at build time. During the\nDocker build process, the dependencies are installed under `/usr/src/node-red`.\n\nThe main sections to modify are\n\n    \"dependencies\": {\n        \"node-red\": \"0.14.x\",           <-- set the version of Node-RED here\n        \"node-red-node-rbe\": \"*\"        <-- add any extra npm packages here\n    },\n\nThis is where you can pre-define any extra nodes you want installed every time\nby default, and then\n\n    \"scripts\"      : {\n        \"start\": \"node-red -v $FLOWS\"\n    },\n\nThis is the command that starts Node-RED when the container is run.\n\n### startup\n\nNode-RED is started using NPM start from this `/usr/src/node-red`, with the `--userDir`\nparameter pointing to the `/data` directory on the container. \n\nThe flows configuration file is set using an environment parameter (**FLOWS**),\nwhich defaults to *'flows.json'*. This can be changed at runtime using the\nfollowing command-line flag.\n\n        $ docker run -it -p 1880:1880 -e FLOWS=my_flows.json nodered/node-red-docker\n\nNode.js runtime arguments can be passed to the container using an environment\nparameter (**NODE_OPTIONS**). For example, to fix the heap size used by\nthe Node.js garbage collector you would use the following command.\n\n        $ docker run -it -p 1880:1880 -e NODE_OPTIONS=\"--max_old_space_size=128\" nodered/node-red-docker\n\n## Adding Nodes\n\nInstalling extra Node-RED nodes into an instance running with Docker can be\nachieved by manually installing those nodes into the container, using the cli or\nrunning npm commands within a container shell, or mounting a host directory with\nthose nodes as a data volume. \n\n### Node-RED Admin Tool \n\nUsing the administration tool, with port forwarding on the container to the host\nsystem, extra nodes can be installed without leaving the host system. \n\n        $ npm install -g node-red-admin\n        $ node-red-admin install node-red-node-openwhisk\n\nThis tool assumes Node-RED is available at the following address\n`http://localhost:1880`. \n\nRefreshing the browser page should now reveal the newly added node in the palette.\n\n### Container Shell\n\n        $ docker exec -it mynodered /bin/bash\n\nWill give a command line inside the container - where you can then run the npm install\ncommand you wish - e.g.\n\n        $ cd /data\n        $ npm install node-red-node-smooth\n        node-red-node-smooth@0.0.3 node_modules/node-red-node-smooth\n        $ exit\n        $ docker stop mynodered\n        $ docker start mynodered\n\nRefreshing the browser page should now reveal the newly added node in the palette.\n\n### Host Directory As Volume\n\nRunning a Node-RED container with a host directory mounted as the data volume,\nyou can manually run `npm install` within your host directory. Files created in\nthe host directory will automatically appear in the container's file system.\n\n        $ docker run -it -p 1880:1880 -v ~/.node-red:/data --name mynodered nodered/node-red-docker\n\nThis command mounts the host's node-red directory, containing the user's\nconfiguration and installed nodes, as the user configuration directory inside\nthe container. Adding extra nodes to the container can be accomplished by\nrunning npm install locally.\n\n        $ cd ~/.node-red\n        $ npm install node-red-node-smooth\n        node-red-node-smooth@0.0.3 node_modules/node-red-node-smooth\n        $ docker stop mynodered\n        $ docker start mynodered\n\n_**Note** : Modules with a native dependencies will be compiled on the host\nmachine's architecture. These modules will not work inside the Node-RED\ncontainer unless the architecture matches the container's base image. For native\nmodules, it is recommended to install using a local shell or update the\nproject's package.json and re-build._\n\n### Building Custom Image\n\nCreating a new Docker image, using the public Node-RED images as the base image,\nallows you to install extra nodes during the build process.\n\nThis Dockerfile builds a custom Node-RED image with the flightaware module\ninstalled from NPM.\n\n```\nFROM nodered/node-red-docker\nRUN npm install node-red-contrib-flightaware\n```\n\nAlternatively, you can modify the package.json in this repository and re-build\nthe images from scratch. This will also allow you to modify the version of\nNode-RED that is installed. See below for more details...\n\n## Managing User Data\n\nOnce you have customised the Node-RED instance running with Docker, we need to\nensure these modifications are not lost if the container is destroyed. Managing\nthis user data can be handed by persisting container state into a new image or\nusing named data volumes to handle move this data outside the container.\n\n### Saving Changes As Custom Image\n\nModifications to files within the live container, e.g. manually adding nodes or\ncreating flows, do not exist outside the lifetime of the container. If that\ncontainer instance is destroyed, these changes will be lost.\n\nDocker allows you to the current state of a container to a new image. This\nmeans you can persist your changes as a new image that can be shared on other\nsystems.\n\n        $ docker commit mynodered custom-node-red-docker\n\nIf we destroy the ```mynodered``` container, the instance can be recovered by\nspawning a new container using the ```custom-node-red-docker``` image.\n\n### Using Named Data Volumes\n\nDocker supports using [data volumes](https://docs.docker.com/engine/tutorials/dockervolumes/) to store\npersistent or shared data outside the container. Files and directories within data\nvolumes exist outside of the lifecycle of containers, i.e. the files still exist\nafter removing the container.\n\nNode-RED uses the `/data` directory to store user configuration data.\n\nMounting a data volume inside the container at this directory path means user\nconfiguration data can be saved outside of the container and even shared between\ncontainer instances.\n\nLet's create a new named data volume to persist our user data and run a new\ncontainer using this volume. \n\n        $ docker volume create --name node_red_user_data\n        $ docker volume ls\n        DRIVER              VOLUME NAME\n        local               node_red_user_data\n        $ docker run -it -p 1880:1880 -v node_red_user_data:/data --name mynodered nodered/node-red-docker\n\nUsing Node-RED to create and deploy some sample flows, we can now destroy the\ncontainer and start a new instance without losing our user data.\n\n        $ docker rm mynodered\n        $ docker run -it -p 1880:1880 -v node_red_user_data:/data --name mynodered nodered/node-red-docker\n\n## Updating\n\nUpdating the base container image is as simple as\n\n        $ docker pull nodered/node-red-docker\n        $ docker stop mynodered\n        $ docker start mynodered\n\n## Running headless\n\nThe barest minimum we need to just run Node-RED is\n\n    $ docker run -d -p 1880 nodered/node-red-docker\n\nThis will create a local running instance of a machine - that will have some\ndocker id number and be running on a random port... to find out run\n\n    $ docker ps -a\n    CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS                     PORTS                     NAMES\n    4bbeb39dc8dc        nodered/node-red-docker:latest   \"npm start\"         4 seconds ago       Up 4 seconds               0.0.0.0:49154->1880/tcp   furious_yalow\n    $\n\nYou can now point a browser to the host machine on the tcp port reported back, so in the example\nabove browse to  `http://{host ip}:49154`\n\n## Linking Containers\n\nYou can link containers \"internally\" within the docker runtime by using the --link option.\n\nFor example I have a simple MQTT broker container available as\n\n        docker run -it --name mybroker nodered/node-red-docker\n\n(no need to expose the port 1883 globally unless you want to... as we do magic below)\n\nThen run nodered docker - but this time with a link parameter (name:alias)\n\n        docker run -it -p 1880:1880 --name mynodered --link mybroker:broker nodered/node-red-docker\n\nthe magic here being the `--link` that inserts a entry into the node-red instance\nhosts file called *broker* that links to the mybroker instance....  but we do\nexpose the 1880 port so we can use an external browser to do the node-red editing.\n\nThen a simple flow like below should work - using the alias *broker* we just set up a second ago.\n\n        [{\"id\":\"190c0df7.e6f3f2\",\"type\":\"mqtt-broker\",\"broker\":\"broker\",\"port\":\"1883\",\"clientid\":\"\"},{\"id\":\"37963300.c869cc\",\"type\":\"mqtt in\",\"name\":\"\",\"topic\":\"test\",\"broker\":\"190c0df7.e6f3f2\",\"x\":226,\"y\":244,\"z\":\"f34f9922.0cb068\",\"wires\":[[\"802d92f9.7fd27\"]]},{\"id\":\"edad4162.1252c\",\"type\":\"mqtt out\",\"name\":\"\",\"topic\":\"test\",\"qos\":\"\",\"retain\":\"\",\"broker\":\"190c0df7.e6f3f2\",\"x\":453,\"y\":135,\"z\":\"f34f9922.0cb068\",\"wires\":[]},{\"id\":\"13d1cf31.ec2e31\",\"type\":\"inject\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":226,\"y\":157,\"z\":\"f34f9922.0cb068\",\"wires\":[[\"edad4162.1252c\"]]},{\"id\":\"802d92f9.7fd27\",\"type\":\"debug\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":441,\"y\":261,\"z\":\"f34f9922.0cb068\",\"wires\":[]}]\n\nThis way the internal broker is not exposed outside of the docker host - of course\nyou may add `-p 1883:1883`  etc to the broker run command if you want to see it...",
  "dockerfile": "FROM mhart/alpine-node:4\n\n# Home directory for Node-RED application source code.\nRUN mkdir -p /usr/src/node-red\n\n# User data directory, contains flows, config and nodes.\nRUN mkdir /data\n\nWORKDIR /usr/src/node-red\n\n# Add node-red user so we aren't running as root.\nRUN adduser -h /usr/src/node-red -D -H node-red \\\n    && chown -R node-red:node-red /data \\\n    && chown -R node-red:node-red /usr/src/node-red\n\nUSER node-red\n\n# package.json contains Node-RED NPM module and node dependencies\nCOPY package.json /usr/src/node-red/\nRUN npm install\n\n# User configuration directory volume\nVOLUME [\"/data\"]\nEXPOSE 1880\n\n# Environment variable holding file path for flows configuration\nENV FLOWS=flows.json\n\nCMD [\"npm\", \"start\", \"--\", \"--userDir\", \"/data\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      1880
    ],
    "volume": [
      "[\"/data\"]"
    ],
    "run": [
      "mkdir -p /usr/src/node-red",
      "mkdir /data",
      "adduser -h /usr/src/node-red -D -H node-red     && chown -R node-red:node-red /data     && chown -R node-red:node-red /usr/src/node-red",
      "npm install"
    ],
    "workdir": [
      "/usr/src/node-red"
    ],
    "from": "mhart/alpine-node:4",
    "user": "node-red",
    "copy": "package.json /usr/src/node-red/",
    "env": {
      "FLOWS": "flows.json"
    },
    "cmd": "[\"npm\", \"start\", \"--\", \"--userDir\", \"/data\"]"
  },
  "source_repository_url": "https://github.com/node-red/node-red-docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/node-red/node-red-docker",
  "docker_repository": "nodered/node-red-docker",
  "docker_image": "nodered/node-red-docker",
  "parameters_schema": {
    "FLOWS": {
      "default": "flows.json",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        1880
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "nodered/node-red-docker",
  "revision": "slim",
  "uris": [
    "https://hub.docker.com/r/nodered/node-red-docker",
    "https://hub.docker.com/v2/repositories/nodered/node-red-docker",
    "https://github.com/node-red/node-red-docker.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Middleware/Runtime/JavaScript/Node.js"
  ],
  "info_url": "https://hub.docker.com/r/nodered/node-red-docker",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}