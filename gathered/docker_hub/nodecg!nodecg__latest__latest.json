{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/nodecg/nodecg",
    "repository_url": "https://hub.docker.com/v2/repositories/nodecg/nodecg",
    "tags_url": "https://hub.docker.com/v2/repositories/nodecg/nodecg/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/nodecg/nodecg/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/nodecg/nodecg/autobuild",
    "user": "nodecg",
    "name": "nodecg",
    "namespace": "nodecg",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 107,
    "last_updated": "2016-10-14T04:38:14.531063Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 295900111,
        "id": 3389475,
        "repository": 739139,
        "creator": 896873,
        "last_updater": 896873,
        "last_updated": "2016-10-14T04:38:14.229640Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "replicant-schemas",
        "full_size": 291941410,
        "id": 4781824,
        "repository": 739139,
        "creator": 896873,
        "last_updater": 896873,
        "last_updated": "2016-09-29T00:46:26.961334Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v0.8.3",
        "full_size": 305033130,
        "id": 3547013,
        "repository": 739139,
        "creator": 896873,
        "last_updater": 896873,
        "last_updated": "2016-06-23T03:04:30.258454Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "nodecg/nodecg"
  },
  "name": "nodecg/nodecg Docker container",
  "description": "Create broadcast graphics using Node.js and a browser",
  "readme": "[![NodeCG Logo](http://i.imgur.com/8PjMIL4.png)](http://nodecg.com/)\n\nNodeCG is a broadcast graphics framework and application.\nIt is primarily aimed at [Twitch](http://twitch.tv) broadcasters using \n[Open Broadcaster Software](https://obsproject.com/), but is usable in any environment that can render HTML,\nincluding CasparCG. NodeCG is based on the overlay system developed for the \n[Tip of the Hats 2014](https://www.youtube.com/watch?v=x9PzBHgN29U) charity event.\n\n[![Build Status](https://travis-ci.org/nodecg/nodecg.svg?branch=master)](https://travis-ci.org/nodecg/nodecg)\n[![Coverage Status](https://coveralls.io/repos/nodecg/nodecg/badge.svg?branch=master&service=github)](https://coveralls.io/github/nodecg/nodecg?branch=master)\n\nLooking for a list of NodeCG bundles and resources? Check out [awesome-nodecg](https://github.com/nodecg/awesome-nodecg/blob/master/README.md).\n\nHave questions about NodeCG, or just want to say 'hi'? Join our Gitter chatroom!  \n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/nodecg/nodecg)\n\n> **NOTICE**: NodeCG v0.8 and above require Node.js >= 6 and Chrome >= 49. \n**This means that as of right now, NodeCG graphics will not work in OBS1, XSplit, or CasparCG.** \nThe only platforms that can currently display NodeCG graphics are [OBS Studio](https://obsproject.com/) (with [v1.21 of its Browser Source plugin](https://github.com/kc5nra/obs-browser/releases/tag/1.21)) and [vMix](http://www.vmix.com/).\n\n## Who should use NodeCG?\nNodeCG is a programming framework. As such, it's most useful to developers capable of creating their own graphics\nusing HTML, CSS, and JavaScript. NodeCG is still in beta and the ecosystem of bundles is quite small.\nThose expecting to download NodeCG and use off-the-shelf bundles to get a complete stream overlay\nwithout writing any code may be disappointed.\n\n## Installation\nInstall [node.js (version 6 or greater) & npm (version 2 or greater)](http://nodejs.org/).  \nThen, run the following commands from a terminal (command prompt):\n```\nnpm install -g bower\ngit clone https://github.com/nodecg/nodecg.git\ncd nodecg\nnpm install --production\nbower install\nnode index.js\n```\n\nTo run NodeCG in production, [pm2](https://github.com/Unitech/pm2) is recommended.\n\n## Installing bundles\nNodeCG's individual graphics packages are called _bundles_. They can be installed either from the command-line\n(via [_nodecg-cli_](https://www.npmjs.com/package/nodecg-cli)), or by simply placing the folder into the `./bundles` directory.\n\nThe easiest way to install bundles is via the command-line using [_nodecg-cli_](https://www.npmjs.com/package/nodecg-cli).\nTo install a bundle from Github, enter the owner and repository name:\n```sh\nnodecg install lange/lange-notify\n```\n\n... to install a bundle from Bitbucket, enter the owner and repository name prefixed with `bitbucket:`\n```sh\nnodecg install bitbucket:username/repo-name\n```\n\n... to install a bundle from any other git provider, enter the git URL:\n```sh\nnodecg install https://github.com/GamesDoneQuick/agdq16-layouts.git\n```\n\nBundles are just directories inside the `./bundles` folder. \nThey can always be added and removed by simply moving them into or out of that folder. \nAvoid installing or uninstalling bundles while NodeCG is running.\n\n# Usage\n- Install a bundle to the `bundles` folder\n- Start NodeCG\n- Open the dashboard (`http://localhost:9090`)\n- Open a graphic from the \"Graphics\" menu, accessible by clicking the top-left menu button on the dashboard\n- You can configure NodeCG by creating and editing [cfg/nodecg.json](http://nodecg.com/tutorial-nodecg-configuration.html).\n\n## Configuration\n`./cfg/nodecg.json` is an optional file that you can create to configure NodeCG.\nSee the [NodeCG Configuration tutorial](http://nodecg.com/tutorial-nodecg-configuration.html) for more information on configuring NodeCG.\n\n# Bundles\n\nEach NodeCG graphic is called a _bundle_. A bundle has one or more of the following:\n- _Graphics_: Visual elements to render and broadcast\n- _Dashboard Panels_: Controls used to manipulate and manage the bundle\n- _Extension_: Server-side code\n\nA bundle can have multiple graphics and dashboard panels, and an extension can be split up into multiple files.\n\nIf you wish to quickly start a new bundle from a template, try [generator-nodecg](https://github.com/nodecg/generator-nodecg).\n\n## Graphics\n\nGraphics are, as the name implies, the actual graphics intended for broadcast. \nThey are standard HTML webpages, and there are no restrictions on their content. \nWhen serving a graphic, NodeCG injects an instance of the API into the global scope.\n\n## Dashboard Panels\n\nDashboard panels are the interface used to control and manage a bundle. They too are standard HTML webpages. \nEach panel is served as an iframe on the dashboard. This is done to ensure full code and style encapsulation. \nBecause dashboard panels are iframes, they cannot render any content outside of their bounding box. \nFor example, it is not possible to have a tooltip in a panel that extends beyond the bounding box of the panel itself.\n\nWhen serving panels, NodeCG injects an instance of the API into the global scope, as well as a few default styles.\n\nIt is strongly recommended to use Polymer elements to build panels, though it is not required. \nGoogle's [official Polymer elements](https://elements.polymer-project.org/), specifically their \n[Paper elements](https://elements.polymer-project.org/browse?package=paper-elements), are a great place to start.\nThe official [NodeCGElements](https://github.com/NodeCGElements) organization also has \na selection of Polymer elements that are integrated with NodeCG's API.\n\n## Extensions\n\nExtensions are server-side code. They are standard Node.js JavaScript files. An extension must export a function\nthat accepts a single argument. That argument will be an instance of the NodeCG API:\n```js\n// bundles/my-bundle/extension.js\nmodule.exports = function(nodecg) {\n    nodecg.listenFor('foo', function() {\n        console.log('bar');\n    });\n};\n```\n\nNodeCG automatically attempts to load the following files as extensions:\n - `your-bundle/extension.js`\n - `your-bundle/extension/index.js`\n \nBundles may have one of, but not both of the above files. If your extension is simple enough to fit in one file,\nuse the former approach. If your extension is broken up into multiple files, you may want to use the latter structure\nand keep all those files in a single `extension` folder. If using an `extension` folder, **NodeCG will only load\n`your-bundle/extension/index.js`**. It is up to you to load any other files that your extension needs via `require`.\n\n## package.json manifest\n\nEvery bundle must have a [`package.json`](https://docs.npmjs.com/files/package.json). In addition to the required fields\nlike `name` and `version` outlined in that link, NodeCG bundles must also have a `nodecg` object in their `package.json`\nwith some additional properties that tell NodeCG about the bundle and how to load it.\n\nSee the [manifest tutorial](http://nodecg.com/tutorial-manifest.html) for more information on creating a valid `package.json` for a bundle.\n\n## Contributing\n1. Fork it ( http://github.com/nodecg/nodecg/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n**Before creating your pull request:**\n\n1. Ensure your code matches our existing style using our provided [EditorConfig](http://editorconfig.org/) options\n2. Ensure the existing tests pass, or are updated appropriately, with `npm test`\n3. For new features, you should add new tests\n\nCheck which branch you should PR to. NodeCG is still in an unstable state, so we follow these [semver](http://semver.org/) guidelines:\n- Bug fixes and new features go to the next 'patch' branch (`0.current.x`)\n- Breaking changes go to the next 'minor' branch (`0.next.0`)\n\n## License\nNodeCG is provided under the MIT license, which is available to read in the \n[LICENSE](https://github.com/nodecg/nodecg/blob/master/LICENSE) file.\n\n## Contributors\n* [Matt \"Bluee\" McNamara](http://mattmcn.com/)  \n* [Alex \"Lange\" Van Camp](http://alexvan.camp)  \n* [\"tsc\"](http://fwdcp.net)  \n\n### Special Thanks\n* [Atmo](https://github.com/atmosfar), original dashboard concept and code  \n* [Alex \"Lange\" Van Camp](http://alexvan.camp), designer & developer of [toth-overlay](https://github.com/TipoftheHats/toth-overlay)  \n",
  "dockerfile": "FROM node:6\n\nWORKDIR /usr/src/app\n\n# Copy NodeCG (just the files we need)\nRUN mkdir cfg && mkdir bundles && mkdir logs && mkdir db\nCOPY . /usr/src/app/\n\n# Install dependencies\nRUN npm install -g bower\nRUN npm install --production\nRUN bower install --allow-root\n\n# The command to run\nEXPOSE 9090\nCMD [\"node\", \"index.js\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      9090
    ],
    "volume": [],
    "run": [
      "mkdir cfg && mkdir bundles && mkdir logs && mkdir db",
      "npm install -g bower",
      "npm install --production",
      "bower install --allow-root"
    ],
    "workdir": [
      "/usr/src/app"
    ],
    "from": "node:6",
    "copy": ". /usr/src/app/",
    "cmd": "[\"node\", \"index.js\"]"
  },
  "source_repository_url": "https://github.com/nodecg/nodecg.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/nodecg/nodecg",
  "docker_repository": "nodecg/nodecg",
  "docker_image": "nodecg/nodecg",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        9090
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "nodecg/nodecg",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/nodecg/nodecg",
    "https://hub.docker.com/v2/repositories/nodecg/nodecg",
    "https://github.com/nodecg/nodecg.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Binding/Region/North America/US",
    "Type/Middleware/Data Store/Graph"
  ],
  "info_url": "https://hub.docker.com/r/nodecg/nodecg",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}