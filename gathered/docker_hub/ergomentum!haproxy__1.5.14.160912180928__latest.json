{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/ergomentum/haproxy",
    "repository_url": "https://hub.docker.com/v2/repositories/ergomentum/haproxy",
    "tags_url": "https://hub.docker.com/v2/repositories/ergomentum/haproxy/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/ergomentum/haproxy/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/ergomentum/haproxy/autobuild",
    "user": "ergomentum",
    "name": "haproxy",
    "namespace": "ergomentum",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 53,
    "last_updated": "2016-09-12T18:11:29.726774Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "1.5.14.160912180928",
        "full_size": 69969351,
        "id": 4801672,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-09-12T18:11:29.320686Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 69969160,
        "id": 2632405,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-09-12T18:09:04.449953Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.5.14.160828204226",
        "full_size": 69968686,
        "id": 4549070,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-08-28T20:44:04.557577Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.5.14.160807163541",
        "full_size": 62867249,
        "id": 4202188,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-08-07T16:37:21.790383Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.5.14.160720171242",
        "full_size": 108072655,
        "id": 3926804,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-07-20T17:15:10.621789Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.5.14.160629081455",
        "full_size": 115439468,
        "id": 3629725,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-06-29T08:16:25.123982Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.5.14.160412202959",
        "full_size": 114151976,
        "id": 2632972,
        "repository": 632492,
        "creator": 156549,
        "last_updater": 156549,
        "last_updated": "2016-04-12T20:34:14.611186Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "ergomentum/haproxy"
  },
  "name": "ergomentum/haproxy Docker container",
  "description": "Provides a [HAProxy](http://www.haproxy.org/) image.\n",
  "readme": "[![Docker Image Stars](https://img.shields.io/docker/stars/ergomentum/haproxy.svg)](\n  https://hub.docker.com/r/ergomentum/haproxy/)\n[![Docker Image Pulls](https://img.shields.io/docker/pulls/ergomentum/haproxy.svg)](\n  https://hub.docker.com/r/ergomentum/haproxy/)\n\n# Ergomentum HAProxy\nProvides a [HAProxy](http://www.haproxy.org/) image based on the [Ergomentum CentOS image](\nhttps://hub.docker.com/r/ergomentum/centos/).\n\nThis is the gatekeeper for a docker service orchestration. The HAProxy acts a router which dispatches incoming requests\nto the corresponding services.\n\n## Responsibilities\n\n1. Logging: Log incoming requests\n2. Encryption: Redirect non TLS connections to TLS one.\n3. Virtual TLS hosting: Inspecting the hostname provided via [SNI](https://tools.ietf.org/html/rfc6066#page-6) extension\n   and route the request to the corresponding docker service. This allows end to end encryption.\n4. Sorry Backend: Provide as default backend where all clients without SNI support will be routed to. This can be used\n   to explain why the client can't receive the required resource.\n5. Act as Transparent proxy: Only in [transparent proxy](https://www.kernel.org/doc/Documentation/networking/tproxy.txt)\n   mode each docker service will see the real client IP. This might be important for logging issues, authorization or to\n   defeat SPAM.\n\n## Preconditions\n* Docker host kernel with [transparent proxy](https://www.kernel.org/doc/Documentation/networking/tproxy.txt) support.\n* HAProxy with [transparent proxy](https://www.kernel.org/doc/Documentation/networking/tproxy.txt) support.\n* Docker host with routing enabled (default)\n\n## Example\n\n```\n+----------------+\n|     Client     |\n+----------------+\n| 192.168.99.1   |\n+----------------+\n        |\n+----------------+\n|  Docker Host   |\n+----------------+\n| 192.168.99.100 |---\\\n+----------------+   NAT\n|   172.17.0.1   |---/\n+----------------+\n        |\n+----------------+\n|     HAProxy    |\n+----------------+\n|   172.17.0.2   |---\\\n+----------------+   NAT\n|   172.18.0.2   |---/\n+----------------+\n        |\n        +---------------------+\n        |                     |\n+----------------+   +----------------+\n|  tls-default   |   |  example.com   |\n+----------------+   +----------------+\n|   172.18.0.2   |   |   172.18.0.3   |\n+----------------+   +----------------+\n```\n\n## Volumes\n<dl>\n  <dt><code>/etc/haproxy/haproxy.cfg</code></dt>\n  <dd>The HAProxy configuration, see <a href=\"#usage\">Usage</a>.</dd>\n</dl>\n\n## Environment Variables\nNone.\n\n## Exposed Ports\n<dl>\n  <dt><code>80</code></dt>\n  <dd>The HTTP default port.</dd>\n  <dt><code>443</code></dt>\n  <dd>The HTTPS default port.</dd>\n</dl>\n\n## Configuration\n### General requirements\nThe container expects a HAProxy configuration file [mounted](#volumes) to [`/etc/haproxy/haproxy.cfg`](haproxy.cfg).\nthis must contain:\n\n<pre>\nglobal\n  # Uses the patched feature!\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log\">log</a> /dev/stdout local0\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#pidfile\">pidfile</a> /var/run/haproxy.pid\n\ndefaults\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#mode\">mode</a> tcp\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log%20global\">log global</a>\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#log-format\">log-format</a> %ci:%cp\\ ->\\ %fi:%fp\\ ->\\ %bi:%bp\\ ->\\ %si:%sp\\ (%f->%b->%s)\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#timeout%20connect\">timeout connect</a> 10s\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#timeout%20client\">timeout client</a> 1m\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#timeout%20server\">timeout server</a> 1m\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#source\">source</a> 0.0.0.0 usesrc clientip\n</pre>\n\n### Rewrite HTTP to HTTPS requests\nAdd the following to the file [`/etc/haproxy/haproxy.cfg`](haproxy.cfg):\n\n<pre>\nfrontend http-to-https-rewrite\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#bind\">bind</a> *:80\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#mode\">mode</a> http\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#redirect%20scheme\">redirect scheme</a> https code 301 if !{ <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.4-ssl_fc\">ssl_fc</a> }\n</pre>\n\n### HTTPS frontend\nAdd the following to the file [`/etc/haproxy/haproxy.cfg`](haproxy.cfg):\n\n<pre>\nfrontend https-in\n  # Bind to HTTPS default port:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#bind\">bind</a> *:443\n\n  # Use tcp content accepts to detects ssl client and server hello:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#tcp-request%20inspect-delay\">tcp-request inspect-delay</a> 5s\n\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#tcp-request%20content\">tcp-request content</a> accept if { <a href =\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#req.ssl_hello_type\">req.ssl_hello_type</a> 1 }\n\n  # Map to a default backend if no more appropriate found:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#default_backend\">default_backend</a> tls-default\n\n  # Map to a backend depending from the hostname. Add as much mappings as needed:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#use_backend\">use_backend</a> <var>example.com</var> if { <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#req.ssl_sni\">req.ssl_sni</a> -i <var>example.com</var> }\n</pre>\n\n### Define the default backend\nAdd the following to the file [`/etc/haproxy/haproxy.cfg`](haproxy.cfg):\n\n<pre>\nbackend tls-default\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table\">stick-table</a> type binary <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4.1.2\" title=\"Maximum TLS session ID length is 32 bytes\">len 32</a> size 30k expire 30m\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#acl\">acl</a> clienthello <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-req.ssl_hello_type\">req.ssl_hello_type</a> <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\" title=\"TLS Client Hello = 0x1\">1</a>\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#acl\">acl</a> serverhello <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-res.ssl_hello_type\">res.ssl_hello_type</a> <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\" title=\"TLS Server Hello = 0x2\">2</a>\n\n  # Use tcp content accepts to detects ssl client and server hello:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-tcp-request%20inspect-delay\">tcp-request inspect-delay</a> 5s\n\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#tcp-request%20content\">tcp-request content</a> accept if clienthello\n\n  # No timeout on response inspect delay by default.\n\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-tcp-response%20content\">tcp-response content</a> accept if serverhello\n\n  # Extract a binary block. The block length is defined at offset 43 with length 1. The block offset is at 43 + 1.\n  # Offset start with 0. All values are decimals. This is to extract the TLS session ID from the TLS handshake record.\n  #\n  # <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\">TLS handshake record</a>:\n  # Offset              Length Content\n  #      0                   1 Record type\n  #      1                   2 TLS version\n  #      3                   2 Record length\n  #      5                   1 Handshake type\n  #      6                   3 Record length\n  #      9                   2 TLS Version\n  #     11                   4 Unix timestamp\n  #     15                  28 Random bytes\n  #     43                   1 Session ID length\n  #     44 &lt;Session ID length> Session ID\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick%20on\">stick on</a> <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#req.payload_lv\">req.payload_lv(43,1)</a> if clienthello\n\n  # Learn on response if server hello:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-stick%20store-response\">stick store-response</a> <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-payload_lv\">payload_lv(43,1)</a> if serverhello\n\n  # Map to a backend with name \"sorry\" and hostname \"sorry\":\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#server\">server</a> sorry sorry:443\n</pre>\n\n### Define a backend\nAdd the following to the file [`/etc/haproxy/haproxy.cfg`](haproxy.cfg):\n\n<pre>\nbackend <var>example.com</var>\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table\">stick-table</a> type binary <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4.1.2\" title=\"Maximum TLS session ID length is 32 bytes\">len 32</a> size 30k expire 30m\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#acl\">acl</a> clienthello <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-req.ssl_hello_type\">req.ssl_hello_type</a> <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\" title=\"TLS Client Hello = 0x1\">1</a>\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#acl\">acl</a> serverhello <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-res.ssl_hello_type\">res.ssl_hello_type</a> <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\" title=\"TLS Server Hello = 0x2\">2</a>\n\n  # Use tcp content accepts to detects ssl client and server hello:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-tcp-request%20inspect-delay\">tcp-request inspect-delay</a> 5s\n\n  # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#tcp-request%20content\n  tcp-request content accept if clienthello\n\n  # No timeout on response inspect delay by default.\n\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-tcp-response%20content\">tcp-response content</a> accept if serverhello\n\n  # Extract a binary block. The block length is defined at offset 43 with length 1. The block offset is at 43 + 1.\n  # Offset start with 0. All values are decimals. This is to extract the TLS session ID from the TLS handshake record.\n  #\n  # <a href=\"https://tools.ietf.org/html/rfc5246#section-7.4\">TLS handshake record</a>:\n  # Offset              Length Content\n  #      0                   1 Record type\n  #      1                   2 TLS version\n  #      3                   2 Record length\n  #      5                   1 Handshake type\n  #      6                   3 Record length\n  #      9                   2 TLS Version\n  #     11                   4 Unix timestamp\n  #     15                  28 Random bytes\n  #     43                   1 Session ID length\n  #     44 &lt;Session ID length> Session ID\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick%20on\">stick on</a> <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#req.payload_lv\">req.payload_lv(43,1)</a> if clienthello\n\n  # Learn on response if server hello:\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-stick%20store-response\">stick store-response</a> <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#7.3.5-payload_lv\">payload_lv(43,1)</a> if serverhello\n\n  # Map to a backend with name \"example.com\" and hostname \"myhttpd\":\n  <a href=\"http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#server\">server</a> example.com myhttpd:443\n</pre>\n\n## Usage\nIs is not necessary to use this image as base image. Simply create a container from it.\n\n### Run the example setup\n```bash\ndocker network \\\n  create \\\n  --driver bridge \\\n  backend-network\n\ndocker \\\n  create \\\n  --name dispatcher \\\n  -v \"$PWD/haproxy.cfg:/etc/haproxy/haproxy.cfg\" \\\n  -p '80:80' \\\n  -p '443:443' \\\n  --cap-add=NET_ADMIN \\\n  ergomentum/haproxy\ndocker network \\\n  connect \\\n  backend-network \\\n  dispatcher\ndocker \\\n  run \\\n  -d \\\n  --name example.com \\\n  --net=backend-network \\\n  --cap-add=NET_ADMIN \\\n  ergomentum/httpd\ndocker \\\n  run \\\n  -d \\\n  --name tls-default \\\n  --net=backend-network \\\n  --cap-add=NET_ADMIN \\\n  ergomentum/httpd\n\n# Must be started after all configured backends to resolve hostnames:\ndocker \\\n  start \\\n  dispatcher\n\n# Must be run after the dispatcher is started to resolve the IP of the dispatcher:\ndocker \\\n  exec \\\n  -ti \\\n  example.com \\\n  bash -c 'yum -y install iproute && ip route replace default via $(getent hosts dispatcher | cut -d \" \" -f 1)'\ndocker \\\n  exec \\\n  -ti \\\n  tls-default \\\n  bash -c 'yum -y install iproute && ip route replace default via $(getent hosts dispatcher | cut -d \" \" -f 1)'\n```\n\nThe `iptables` and the `ip` command require the `NET_ADMIN` capability.\n\n## Contributing\nTo contribute a feature or a bugfix please open a [pull request](https://github.com/ergomentum/haproxy/pulls) on\n[GitHub](https://github.com/ergomentum/haproxy/).\n\nSee [CONTRIBUTING](https://github.com/ergomentum/haproxy/blob/master/CONTRIBUTING.md) for details.\n\n## License\nSee the [LICENSE](https://github.com/ergomentum/haproxy/blob/master/LICENSE.md) file for license\nrights and limitations (Apache License, Version 2.0).\n\n## References\n* https://scriptthe.net/2015/02/08/pass-through-ssl-with-haproxy/\n* http://byte-consult.be/2014/01/28/using-haproxy-as-an-ssl-gateway/\n* http://blog.haproxy.com/2012/04/13/enhanced-ssl-load-balancing-with-server-name-indication-sni-tls-extension/\n* http://blog.haproxy.com/2013/09/16/howto-transparent-proxying-and-binding-with-haproxy-and-aloha-load-balancer/\n* https://github.com/dockerfile/haproxy/blob/master/haproxy.cfg\n* https://evancarmi.com/writing/setup-haproxy-stats-over-https/\n* http://www.loadbalancer.org/blog/configure-haproxy-with-tproxy-kernel-for-full-transparent-proxy\n* https://jpetazzo.github.io/2014/06/17/transparent-squid-proxy-docker/\n",
  "dockerfile": "FROM ergomentum/centos:7.2.160911182133\n\nMAINTAINER \\\n  Ergomentum <build@ergomentum.org>\n\nLABEL \\\n  vendor=\"Ergomentum\" \\\n  license=\"Apache 2.0\"\n\nCOPY \\\n  haproxy-1.5.14_patched-3.el7.centos.x86_64.rpm /\n\nRUN \\\n  # Workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1213602\n  touch /var/lib/rpm/* && \\\n  yum localinstall /haproxy-1.5.14_patched-3.el7.centos.x86_64.rpm && \\\n  yum install iptables iproute && \\\n  yum clean all && \\\n  rm /haproxy-1.5.14_patched-3.el7.centos.x86_64.rpm && \\\n  chmod u-w /var/lib/haproxy && \\\n  rm -f /etc/haproxy/haproxy.cfg\n\nVOLUME \\\n  [\"/etc/haproxy/haproxy.cfg\"]\n\nCOPY \\\n  entrypoint.sh /\n\nENTRYPOINT \\\n  [\"/entrypoint.sh\"]\n\nEXPOSE \\\n  80 443\n\nENTRYPOINT \\\n  [\"haproxy\", \"-f\", \"/etc/haproxy/haproxy.cfg\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [
      "  [\"/etc/haproxy/haproxy.cfg\"]"
    ],
    "run": [
      "  # Workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1213602"
    ],
    "workdir": [],
    "from": "ergomentum/centos:7.2.160911182133",
    "maintainer": "  Ergomentum <build@ergomentum.org>",
    "label": "  vendor=\"Ergomentum\"   license=\"Apache 2.0\"",
    "copy": "  entrypoint.sh /",
    "entrypoint": "  [\"haproxy\", \"-f\", \"/etc/haproxy/haproxy.cfg\"]"
  },
  "source_repository_url": "https://github.com/ergomentum/haproxy.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/ergomentum/haproxy",
  "docker_repository": "ergomentum/haproxy",
  "docker_image": "ergomentum/haproxy",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "ergomentum/haproxy",
  "revision": "1.5.14.160912180928",
  "uris": [
    "https://hub.docker.com/r/ergomentum/haproxy",
    "https://hub.docker.com/v2/repositories/ergomentum/haproxy",
    "https://github.com/ergomentum/haproxy.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://hub.docker.com/r/ergomentum/haproxy",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}