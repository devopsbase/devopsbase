{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/itzg/elasticsearch",
    "repository_url": "https://hub.docker.com/v2/repositories/itzg/elasticsearch",
    "tags_url": "https://hub.docker.com/v2/repositories/itzg/elasticsearch/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/itzg/elasticsearch/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/itzg/elasticsearch/autobuild",
    "user": "itzg",
    "name": "elasticsearch",
    "namespace": "itzg",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 37,
    "pull_count": 203460,
    "last_updated": "2016-10-01T14:56:04.304842Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 96692701,
        "id": 72888,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2016-10-01T14:56:03.989842Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.x",
        "full_size": 96692734,
        "id": 1241373,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2016-10-01T14:55:20.450867Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.4.x",
        "full_size": 96692710,
        "id": 4668340,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2016-10-01T14:54:36.765695Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.3.x",
        "full_size": 97057647,
        "id": 4668306,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2016-09-05T00:33:08.581627Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.3",
        "full_size": 205044266,
        "id": 72911,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2015-11-14T10:52:43.596322Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.4",
        "full_size": 204470791,
        "id": 72905,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2015-11-14T10:50:20.485987Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.x",
        "full_size": 204684432,
        "id": 1241374,
        "repository": 82894,
        "creator": 17035,
        "last_updater": 17035,
        "last_updated": "2015-11-05T00:27:31.371402Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "itzg/dockerfiles"
  },
  "name": "itzg/elasticsearch Docker container",
  "description": "Provides an easily configurable Elasticsearch node.",
  "readme": "This Docker image provides an easily configurable Elasticsearch node. Via port mappings, it is easy to create an arbitrarily sized cluster of nodes. As long as the versions match, you can mix-and-match \"real\" Elasticsearch nodes with container-ized ones.\n\n# Basic Usage\n\nTo start an Elasticsearch data node that listens on the standard ports on your host's network interface:\n\n    docker run -d -p 9200:9200 -p 9300:9300 itzg/elasticsearch\n\nYou'll then be able to connect to the Elasticsearch HTTP interface to confirm it's alive:\n\nhttp://DOCKERHOST:9200/\n\n    {\n      \"status\" : 200,\n      \"name\" : \"Charon\",\n      \"version\" : {\n        \"number\" : \"1.3.5\",\n        \"build_hash\" : \"4a50e7df768fddd572f48830ae9c35e4ded86ac1\",\n        \"build_timestamp\" : \"2014-11-05T15:21:28Z\",\n        \"build_snapshot\" : false,\n        \"lucene_version\" : \"4.9\"\n      },\n      \"tagline\" : \"You Know, for Search\"\n    }\n\nWhere `DOCKERHOST` would be the actual hostname of your host running Docker.\n\n# Simple, multi-node cluster\n\nTo run a multi-node cluster (3-node in this example) on a single Docker machine use:\n\n    docker run -d --name es0 -p 9200:9200                    es\n    docker run -d --name es1 --link es0 -e UNICAST_HOSTS=es0 es\n    docker run -d --name es2 --link es0 -e UNICAST_HOSTS=es0 es\n\n\nand then check the cluster health, such as http://192.168.99.100:9200/_cluster/health?pretty\n\n    {\n      \"cluster_name\" : \"elasticsearch\",\n      \"status\" : \"green\",\n      \"timed_out\" : false,\n      \"number_of_nodes\" : 3,\n      \"number_of_data_nodes\" : 3,\n      \"active_primary_shards\" : 0,\n      \"active_shards\" : 0,\n      \"relocating_shards\" : 0,\n      \"initializing_shards\" : 0,\n      \"unassigned_shards\" : 0\n    }\n\n# Configuration Summary\n\n## Ports\n\n* `9200` - HTTP REST\n* `9300` - Native transport\n\n## Volumes\n\n* `/data` - location of `path.data`\n* `/conf` - location of `path.conf`\n\n# Configuration Details\n\nThe following configuration options are specified using `docker run` environment variables (`-e`) like\n\n    docker run ... -e NAME=VALUE ... itzg/elasticsearch\n\nSince Docker's `-e` settings are baked into the container definition, this image provides an extra feature to change any of the settings below for an existing container. Either create/edit the file `env` in the `/conf` volume mapping or edit within the running container's context using:\n\n    docker exec -it CONTAINER_ID vi /conf/env\n\nreplacing `CONTAINER_ID` with the container's ID or name.\n\nThe contents of the `/conf/env` file are standard shell\n\n    NAME=VALUE\n\nentries where `NAME` is one of the variables described below.\n\nConfiguration options not explicitly supported below can be specified via the `OPTS` environment variable. For example, by default `OPTS` is set with\n\n    OPTS=-Dnetwork.bind_host=_non_loopback_\n\n_NOTE: That option is a default since `bind_host` defaults to `localhost` as of 2.0, which isn't helpful for\nport mapping out from the container_.\n\n## Cluster Name\n\nIf joining a pre-existing cluster, then you may need to specify a cluster name different than the default \"elasticsearch\":\n\n    -e CLUSTER=dockers\n\n## Zen Unicast Hosts\n\nWhen joining a multi-physical-host cluster, multicast may not be supported on the physical network. In that case, your node can reference specific one or more hosts in the cluster via the [Zen Unicast Hosts](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html#unicast) capability as a comma-separated list of `HOST:PORT` pairs:\n\n    -e UNICAST_HOSTS=HOST:PORT[,HOST:PORT]\n\nsuch as\n\n    -e UNICAST_HOSTS=192.168.0.100:9300\n\n## Plugins\n\nYou can install one or more plugins before startup by passing a comma-separated list of plugins.\n\n    -e PLUGINS=ID[,ID]\n\nIn this example, it will install the Marvel plugin\n\n    -e PLUGINS=elasticsearch/marvel/latest\n\nMany more plugins [are available here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-plugins.html#known-plugins).\n\n## Publish As\n\nSince the container gives the Elasticsearch software an isolated perspective of its networking, it will most likely advertise its published address with a container-internal IP address. This can be overridden with a physical networking name and port using:\n\n    -e PUBLISH_AS=DOCKERHOST:9301\n\n_Author Note: I have yet to hit a case where this was actually necessary. Other\nthan the cosmetic weirdness in the logs, Elasticsearch seems to be quite tolerant._\n\n## Node Name\n\nRather than use the randomly assigned node name, you can indicate a specific one using:\n\n    -e NODE_NAME=Docker\n\n## Node Type\n\nIf you refer to [the Node section](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-node.html)\nof the Elasticsearch reference guide, you'll find that there's three main types of nodes: master-eligible, data, and client.\n\nIn larger clusters it is important to dedicate a small number (>= 3) of master nodes. There are also cases where a large cluster may need dedicated gateway nodes that are neither master nor data nodes and purely operate as \"smart routers\" and have large amounts of CPU and memory to handle client requests and search-reduce.\n\nTo simplify all that, this image provides a `TYPE` variable to let you amongst these combinations. The choices are:\n\n* (not set, the default) : the default node type which is both master-eligible and a data node\n* `MASTER` : master-eligible, but holds no data. It is good to have three or more of these in a\nlarge cluster\n* `DATA` (or `NON_MASTER`) : holds data and serves search/index requests. Scale these out for elastic-y goodness.\n* `GATEWAY` : only operates as a client node or a \"smart router\". These are the ones whose HTTP port 9200 will need to be exposed\n\nA [Docker Compose](https://docs.docker.com/compose/overview/) file will serve as a good example of these three node types:\n\n```\nversion: '2'\n\nservices:\n  gateway:\n    image: itzg/elasticsearch\n    environment:\n      UNICAST_HOSTS: master\n      TYPE: GATEWAY\n    ports:\n      - \"9200:9200\"\n\n  master:\n    image: itzg/elasticsearch\n    environment:\n      UNICAST_HOSTS: gateway\n      TYPE: MASTER\n      MIN_MASTERS: 2\n\n  data:\n    image: itzg/elasticsearch\n    environment:\n      UNICAST_HOSTS: master,gateway\n      TYPE: DATA\n```\n\n## Minimum Master Nodes\n\nIn combination with the `TYPE` variable above, you will also want to configure the minimum master nodes to [avoid split-brain](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-node.html#split-brain) during network outages.\n\nThe minimum, which can be calculated as `(master_eligible_nodes / 2) + 1`, can be set with the `MIN_MASTERS` variable.\n\nUsing the Docker Compose file above, a value of `2` is appropriate when scaling the cluster to 3 master nodes:\n\n    docker-compose scale master=3\n\n## Auto transport/http discovery with Swarm Mode\n\nWhen using Docker Swarm mode (starting with 1.12), the overlay and ingress network interfaces are assigned\nmultiple IP addresses. As a result, it creates confusion for the transport publish logic even when using\nthe special value `_eth0_`.\n\nTo resolve this, add\n\n    -e DISCOVER_TRANSPORT_IP=eth0\n\nreplacing `eth0` with another interface within the container, if needed.\n\nThe same can be done for publish/binding of the http module by adding:\n\n    -e DISCOVERY_HTTP_IP=eth2\n",
  "dockerfile": "FROM java:8u92-jre-alpine\n\nMAINTAINER itzg\n\nENV ES_VERSION=2.4.1\n\nADD https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/$ES_VERSION/elasticsearch-$ES_VERSION.tar.gz /tmp/es.tgz\nRUN cd /usr/share && \\\n  tar xf /tmp/es.tgz && \\\n  rm /tmp/es.tgz\n\nCOPY start /start\n\nEXPOSE 9200 9300\n\nENV ES_HOME=/usr/share/elasticsearch-$ES_VERSION \\\n    OPTS=-Dnetwork.host=_non_loopback_ \\\n    DEFAULT_ES_USER=elasticsearch\n\nRUN adduser -S -s /bin/sh $DEFAULT_ES_USER\n\nVOLUME [\"/data\",\"/conf\"]\n\nWORKDIR $ES_HOME\n\nCMD [\"/start\"]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/$ES_VERSION/elasticsearch-$ES_VERSION.tar.gz",
        "dest": "/tmp/es.tgz"
      }
    ],
    "expose": [
      9200
    ],
    "volume": [
      "[\"/data\",\"/conf\"]"
    ],
    "run": [
      "cd /usr/share &&   tar xf /tmp/es.tgz &&   rm /tmp/es.tgz",
      "adduser -S -s /bin/sh $DEFAULT_ES_USER"
    ],
    "workdir": [
      "$ES_HOME"
    ],
    "from": "java:8u92-jre-alpine",
    "maintainer": "itzg",
    "env": {
      "ES_VERSION": "2.4.1",
      "ES_HOME": "/usr/share/elasticsearch-$ES_VERSION",
      "": "DEFAULT_ES_USER",
      "OPTS": "-Dnetwork.host",
      "_non_loopback_": ""
    },
    "copy": "start /start",
    "cmd": "[\"/start\"]"
  },
  "source_repository_url": "https://github.com/itzg/dockerfiles.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/itzg/dockerfiles",
  "docker_repository": "itzg/elasticsearch",
  "docker_image": "itzg/elasticsearch",
  "parameters_schema": {
    "ES_VERSION": {
      "default": "2.4.1",
      "type": "string",
      "mapping": "environment_variable"
    },
    "ES_HOME": {
      "default": "/usr/share/elasticsearch-$ES_VERSION",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "DEFAULT_ES_USER",
      "type": "string",
      "mapping": "environment_variable"
    },
    "OPTS": {
      "default": "-Dnetwork.host",
      "type": "string",
      "mapping": "environment_variable"
    },
    "_non_loopback_": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        9200
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "itzg/elasticsearch",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/itzg/elasticsearch",
    "https://hub.docker.com/v2/repositories/itzg/elasticsearch",
    "https://github.com/itzg/dockerfiles.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Type/Middleware/Search/Elasticsearch"
  ],
  "info_url": "https://hub.docker.com/r/itzg/elasticsearch",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}