{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/benyoo/nginx",
    "repository_url": "https://hub.docker.com/v2/repositories/benyoo/nginx",
    "tags_url": "https://hub.docker.com/v2/repositories/benyoo/nginx/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/benyoo/nginx/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/benyoo/nginx/autobuild",
    "user": "benyoo",
    "name": "nginx",
    "namespace": "benyoo",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 144,
    "last_updated": "2016-10-15T08:05:27.740806Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "1.10.1",
        "full_size": 27623651,
        "id": 4310438,
        "repository": 815976,
        "creator": 513417,
        "last_updater": 513417,
        "last_updated": "2016-10-15T08:05:27.391736Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 27623433,
        "id": 3975080,
        "repository": 815976,
        "creator": 513417,
        "last_updater": 513417,
        "last_updated": "2016-10-15T01:42:04.713027Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "xiaoyawl/docker-nginx"
  },
  "name": "benyoo/nginx Docker container",
  "description": "基于Alpine 3.4编译安装的Nginx",
  "readme": "[![](https://images.microbadger.com/badges/version/benyoo/nginx.svg)](http://microbadger.com/images/benyoo/nginx \"Get your own version badge on microbadger.com\")[![](https://images.microbadger.com/badges/image/benyoo/nginx.svg)](http://microbadger.com/images/benyoo/nginx \"Get your own image badge on microbadger.com\")[![Docker Pulls](https://img.shields.io/docker/pulls/benyoo/nginx.svg?maxAge=2592000)](https://hub.docker.com/r/benyoo/nginx/)[![Docker Automated buil](https://img.shields.io/docker/automated/benyoo/nginx.svg?maxAge=2592000)](https://hub.docker.com/r/benyoo/nginx/)\n\n[![Deploy to Tutum](https://s.tutum.co/deploy-to-tutum.svg)](https://dashboard.tutum.co/stack/deploy/)\n\n# 介绍\n\nDockerfile文件编译出一个[Nginx](http://www.nginx.org/) 容器镜像。\n\n## 版本\n\n当前版本: [benyoo/nginx:1.10.1](https://hub.docker.com/r/benyoo/nginx/)\n\n# 帮助\n\n如果你觉得这个镜像对你有用，你可以如下方法给我们提供帮助:\n\n- 发送pull请求与你最新的功能和bug修复\n- 帮助新用户解决他们可能遇到的[问题](https://github.com/xiaoyawl/docker-nginx/issues) \n- 对这个镜像的作者进行[捐助](支付宝:15555612612)\n\n# 问题\n\n如何安装Docker\n\n```bash\ncurl -Lk https://get.docker.com/ | sh\n```\n\nRHEL、CentOS、Fedora的用户可以使用`setenforce 0`来禁用selinux以达到解决一些问题\n\n如果你已经禁用了selinux并且使用的是最新版的Docker，如果还有疑问，你可以尝试通过 [issues](https://github.com/xiaoyawl/docker-nginx/issues) 页面来寻求帮助\n\n当你在issue 提交问题的时候请注意提供一下信息:\n\n- 宿主机的发行版和版本号.\n- 使用 `docker version` 命令来给出Docker版本信息.\n- 使用 `docker info` 命令来给出进一步信息.\n- 提供 `docker run` 命令的详情 (注意打码你的隐私信息).\n\n# 安装\n\n直接使用我们在 [Dockerhub](https://hub.docker.com/r/benyoo/nginx) 上通过自动构建生成的镜像是最为推荐的方式\n\n> **Note**: 也可以在 [Quay.io](https://quay.io/repository/benyoo/nginx)上构建\n\n```bash\ndocker pull benyoo/nginx:latest\n```\n\n由于`1.10.1`版本的镜像已经打了tag。您也可以通过指定版本号的方式pull指定版本的镜像。 例如，\n\n```bash\ndocker pull benyoo/nginx:1.10.1\n```\n\n另外你也可以通过自己构建来实现获取镜像。例如\n\n```bash\ndocker build -t benyoo/nginx:1.10.1 github.com/xiaoyawl/docker-nginx\n```\n\n#运行\n1、常规运行方法：\n`docker run -d -p 80:80 -p 443:443 benyoo/nginx:latest\n2、挂载数据目录方法：\n```bash\ndocker run -d -p 80:80 -p 443:443 \\\n-v /etc/localtime:/etc/localtime:ro \\ #将宿主机的时区文件挂载到容器内\n-v /data/wwwroot:/data/wwwroot:rw \\   #将宿主机的web文件挂载到容器内\n-v /data/logs/wwwlogs:/data/wwwlogs:rw \\  #将容器内的日志文件挂载到宿主机上\n-v /data/conf/nginx/vhost:/usr/local/nginx/conf/vhost:rw \\ #将配置文件挂载进容器\nbenyoo/nginx:latest\n```\n3、和php mysql redis 关联使用的方法\n```bash\ndocker run -d --privileged --restart always \\\n--name redis_server -p 127.0.0.1:6379:6379 \\\n-v /etc/localtime:/etc/localtime:ro \\\n-v /etc/redis.conf:/etc/redis.conf:ro \\\n-v /data/redis:/data/redis:Z \\\nbenyoo/redis\n```\n```bash\ndocker run -d --name mysql_server --restart always \\\n-p 3306:3306 -e MYSQL_ROOT_PASSWORD=lookback \\\n-v /etc/localtime:/etc/localtime:ro\n-v /data/mariadb:/data/mariadb:rw\nbenyoo/mariadb\n```\n```bash\ndocker run -d --restart always --name php_server \\\n-e REDIS=Yes -e MEMCACHE=Yes -e SWOOLE=Yes \\\n--link redis_server:resid_server \\\n--link mysql_server:mysql_server \\\n-v /etc/localtime:/etc/localtime:ro\n-v /data/wwwroot:/data/wwwroot:rw\nbenyoo/php\n```\n```bash\ndocker run -d --restart always --name nginx_server \\\n-p 80:80 -p 443:443 \\\n-e PHP_FPM=Yes -e PHP_FPM_SERVER=php_server \\\n-e PHP_FPM_PORT=9000 -e REWRITE=wordpress \\\n--link php_server:php_server \\\n--link mysql_server:mysql_server \\\n-v /etc/localtime:/etc/localtime:ro \\\n-v /data/wwwroot:/data/wwwroot:rw \\\n-v /data/logs/wwwlogs:/data/wwwlogs:rw \\\n-v /data/conf/nginx/vhost:/usr/local/nginx/conf/vhost:rw \\\nbenyoo/nginx\n```\n",
  "dockerfile": "FROM benyoo/alpine:3.4.20160812\n#FROM registry.ds.com/benyoo/alpine:3.4\n\nMAINTAINER from www.dwhd.org by lookback (mondeolove@gmail.com)\n\nARG VERSION=${VERSION:-1.10.1}\nARG SHA256=${SHA256:-1fd35846566485e03c0e318989561c135c598323ff349c503a6c14826487a801}\n\nENV INSTALL_DIR=/usr/local/nginx \\\n\tDATA_DIR=/data/wwwroot \\\n\tTEMP_DIR=/tmp/nginx\n\nRUN set -x && \\\n\tmkdir -p $(dirname ${DATA_DIR}) ${TEMP_DIR} && cd ${TEMP_DIR} && \\\n\tDOWN_URL=\"http://nginx.org/download\" && \\\n\tDOWN_URL=\"${DOWN_URL}/nginx-${VERSION}.tar.gz\" && \\\n\tFILE_NAME=${DOWN_URL##*/} && \\\n\tapk --update --no-cache upgrade && \\\n\t\tapk --update --no-cache add geoip geoip-dev pcre libxslt gd openssl-dev pcre-dev zlib-dev build-base \\\n\t\tlinux-headers libxslt-dev gd-dev openssl-dev libstdc++ libgcc patch logrotate supervisor inotify-tools git && \\\n\t{ while :;do curl -LkO ${DOWN_URL} && { [ \"$(sha256sum ${TEMP_DIR}/${FILE_NAME} | awk '{print $1}')\" == \"${SHA256}\" ] && break; }; done; } && \\\n\ttar xf ${TEMP_DIR}/${FILE_NAME} && \\\n\tcurl -Lk https://mirrors.dwhd.org/nginx-mode.tar.gz|tar xz -C ${TEMP_DIR} && \\\n\tgit clone https://github.com/arut/nginx-rtmp-module.git -b v1.1.7 && \\\n\tgit clone https://github.com/xiaokai-wang/nginx_upstream_check_module.git && \\\n\tgit clone https://github.com/xiaokai-wang/nginx-stream-upsync-module.git && \\\n\taddgroup -g 400 -S www && \\\n\tadduser -u 400 -S -h ${DATA_DIR} -s /sbin/nologin -g 'WEB Server' -G www www && \\\n\tfind ${TEMP_DIR} -type f -exec sed -i 's/\\r$//g' {} \\; && \\\n\tcd ${FILE_NAME%%\\.tar*} && \\\n\tpatch -p0 < ../nginx_upstream_check_module/check_1.9.2+.patch && \\\n\tCFLAGS=-Wno-unused-but-set-variable ./configure --prefix=${INSTALL_DIR} \\\n\t\t--user=www --group=www \\\n\t\t--error-log-path=/data/wwwlogs/error.log \\\n\t\t--http-log-path=/data/wwwlogs/access.log \\\n\t\t--pid-path=/var/run/nginx/nginx.pid \\\n\t\t--lock-path=/var/lock/nginx.lock \\\n\t\t--with-pcre \\\n\t\t--with-ipv6 \\\n\t\t--with-mail \\\n\t\t--with-mail_ssl_module \\\n\t\t--with-pcre-jit \\\n\t\t--with-file-aio \\\n\t\t--with-threads \\\n\t\t--with-stream \\\n\t\t--with-stream_ssl_module \\\n\t\t--with-http_ssl_module \\\n\t\t--with-http_flv_module \\\n\t\t--with-http_v2_module \\\n\t\t--with-http_realip_module \\\n\t\t--with-http_gzip_static_module \\\n\t\t--with-http_stub_status_module \\\n\t\t--with-http_sub_module \\\n\t\t--with-http_mp4_module \\\n\t\t--with-http_image_filter_module \\\n\t\t--with-http_addition_module \\\n\t\t--with-http_auth_request_module \\\n\t\t--with-http_dav_module \\\n\t\t--with-http_degradation_module \\\n\t\t--with-http_geoip_module \\\n\t\t--with-http_xslt_module \\\n\t\t--with-http_gunzip_module \\\n\t\t--with-http_secure_link_module \\\n\t\t--with-http_slice_module \\\n\t\t--http-client-body-temp-path=${INSTALL_DIR}/client/ \\\n\t\t--http-proxy-temp-path=${INSTALL_DIR}/proxy/ \\\n\t\t--http-fastcgi-temp-path=${INSTALL_DIR}/fcgi/ \\\n\t\t--http-uwsgi-temp-path=${INSTALL_DIR}/uwsgi \\\n\t\t--http-scgi-temp-path=${INSTALL_DIR}/scgi \\\n\t\t--add-module=../ngx_http_substitutions_filter_module \\\n\t\t--add-module=../ngx_fancyindex \\\n\t\t--add-module=../echo_nginx_module \\\n\t\t--add-module=../nginx-rtmp-module \\\n\t\t--add-module=../nginx_upstream_check_module \\\n\t\t--add-module=../nginx-stream-upsync-module && \\\n\tmake -j $(awk '/processor/{i++}END{print i}' /proc/cpuinfo) && \\\n\tmake install && \\\n\tapk del build-base git patch && \\\n\trm -rf /var/cache/apk/* /tmp/* ${INSTALL_DIR}/conf/nginx.conf\n\nENV PATH=${INSTALL_DIR}/sbin:$PATH \\\n\tTERM=linux\n\nADD etc /etc\n#ADD nginx.conf /nginx.conf\nADD entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nVOLUME [\"${DATA_DIR}\"]\nEXPOSE 80 443\n\nENTRYPOINT [\"/entrypoint.sh\"]\n\n#CMD [\"/usr/sbin/supervisord\"]\n#CMD [\"/bin/bash\", \"/entrypoint.sh\"]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "etc",
        "dest": "/etc"
      },
      {
        "source": "entrypoint.sh",
        "dest": "/entrypoint.sh"
      }
    ],
    "expose": [
      80
    ],
    "volume": [
      "[\"${DATA_DIR}\"]"
    ],
    "run": [
      "set -x && \tmkdir -p $(dirname ${DATA_DIR}) ${TEMP_DIR} && cd ${TEMP_DIR} && \tDOWN_URL=\"http://nginx.org/download\" && \tDOWN_URL=\"${DOWN_URL}/nginx-${VERSION}.tar.gz\" && \tFILE_NAME=${DOWN_URL##*/} && \tapk --update --no-cache upgrade && \t\tapk --update --no-cache add geoip geoip-dev pcre libxslt gd openssl-dev pcre-dev zlib-dev build-base \t\tlinux-headers libxslt-dev gd-dev openssl-dev libstdc++ libgcc patch logrotate supervisor inotify-tools git && \t{ while :;do curl -LkO ${DOWN_URL} && { [ \"$(sha256sum ${TEMP_DIR}/${FILE_NAME} | awk '{print $1}')\" == \"${SHA256}\" ] && break; }; done; } && \ttar xf ${TEMP_DIR}/${FILE_NAME} && \tcurl -Lk https://mirrors.dwhd.org/nginx-mode.tar.gz|tar xz -C ${TEMP_DIR} && \tgit clone https://github.com/arut/nginx-rtmp-module.git -b v1.1.7 && \tgit clone https://github.com/xiaokai-wang/nginx_upstream_check_module.git && \tgit clone https://github.com/xiaokai-wang/nginx-stream-upsync-module.git && \taddgroup -g 400 -S www && \tadduser -u 400 -S -h ${DATA_DIR} -s /sbin/nologin -g 'WEB Server' -G www www && \tfind ${TEMP_DIR} -type f -exec sed -i 's/\\r$//g' {} \\; && \tcd ${FILE_NAME%%\\.tar*} && \tpatch -p0 < ../nginx_upstream_check_module/check_1.9.2+.patch && \tCFLAGS=-Wno-unused-but-set-variable ./configure --prefix=${INSTALL_DIR} \t\t--user=www --group=www \t\t--error-log-path=/data/wwwlogs/error.log \t\t--http-log-path=/data/wwwlogs/access.log \t\t--pid-path=/var/run/nginx/nginx.pid \t\t--lock-path=/var/lock/nginx.lock \t\t--with-pcre \t\t--with-ipv6 \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-pcre-jit \t\t--with-file-aio \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-http_ssl_module \t\t--with-http_flv_module \t\t--with-http_v2_module \t\t--with-http_realip_module \t\t--with-http_gzip_static_module \t\t--with-http_stub_status_module \t\t--with-http_sub_module \t\t--with-http_mp4_module \t\t--with-http_image_filter_module \t\t--with-http_addition_module \t\t--with-http_auth_request_module \t\t--with-http_dav_module \t\t--with-http_degradation_module \t\t--with-http_geoip_module \t\t--with-http_xslt_module \t\t--with-http_gunzip_module \t\t--with-http_secure_link_module \t\t--with-http_slice_module \t\t--http-client-body-temp-path=${INSTALL_DIR}/client/ \t\t--http-proxy-temp-path=${INSTALL_DIR}/proxy/ \t\t--http-fastcgi-temp-path=${INSTALL_DIR}/fcgi/ \t\t--http-uwsgi-temp-path=${INSTALL_DIR}/uwsgi \t\t--http-scgi-temp-path=${INSTALL_DIR}/scgi \t\t--add-module=../ngx_http_substitutions_filter_module \t\t--add-module=../ngx_fancyindex \t\t--add-module=../echo_nginx_module \t\t--add-module=../nginx-rtmp-module \t\t--add-module=../nginx_upstream_check_module \t\t--add-module=../nginx-stream-upsync-module && \tmake -j $(awk '/processor/{i++}END{print i}' /proc/cpuinfo) && \tmake install && \tapk del build-base git patch && \trm -rf /var/cache/apk/* /tmp/* ${INSTALL_DIR}/conf/nginx.conf",
      "chmod +x /entrypoint.sh"
    ],
    "workdir": [],
    "from": "benyoo/alpine:3.4.20160812",
    "maintainer": "from www.dwhd.org by lookback (mondeolove@gmail.com)",
    "arg": "SHA256=${SHA256:-1fd35846566485e03c0e318989561c135c598323ff349c503a6c14826487a801}",
    "env": {
      "INSTALL_DIR": "/usr/local/nginx",
      "\tDATA_DIR": "/data/wwwroot",
      "\tTEMP_DIR": "/tmp/nginx",
      "PATH": "${INSTALL_DIR}/sbin:$PATH",
      "\tTERM": "linux"
    },
    "entrypoint": "[\"/entrypoint.sh\"]"
  },
  "source_repository_url": "https://github.com/xiaoyawl/docker-nginx.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/xiaoyawl/docker-nginx",
  "docker_repository": "benyoo/nginx",
  "docker_image": "benyoo/nginx",
  "parameters_schema": {
    "INSTALL_DIR": {
      "default": "/usr/local/nginx",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tDATA_DIR": {
      "default": "/data/wwwroot",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tTEMP_DIR": {
      "default": "/tmp/nginx",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "${INSTALL_DIR}/sbin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tTERM": {
      "default": "linux",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "benyoo/nginx",
  "revision": "1.10.1",
  "uris": [
    "https://hub.docker.com/r/benyoo/nginx",
    "https://hub.docker.com/v2/repositories/benyoo/nginx",
    "https://github.com/xiaoyawl/docker-nginx.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Web Server/Nginx"
  ],
  "info_url": "https://hub.docker.com/r/benyoo/nginx",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}