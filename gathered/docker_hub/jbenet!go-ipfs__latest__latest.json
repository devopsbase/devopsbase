{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/jbenet/go-ipfs",
    "repository_url": "https://hub.docker.com/v2/repositories/jbenet/go-ipfs",
    "tags_url": "https://hub.docker.com/v2/repositories/jbenet/go-ipfs/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/jbenet/go-ipfs/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/jbenet/go-ipfs/autobuild",
    "user": "jbenet",
    "name": "go-ipfs",
    "namespace": "jbenet",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 8,
    "pull_count": 557342,
    "last_updated": "2016-09-23T17:59:03.540215Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 15485788,
        "id": 2945,
        "repository": 178424,
        "creator": 2876,
        "last_updater": 2876,
        "last_updated": "2016-09-23T17:59:02.866015Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "release",
        "full_size": 15485756,
        "id": 1722147,
        "repository": 178424,
        "creator": 2876,
        "last_updater": 2876,
        "last_updated": "2016-09-23T17:51:25.827441Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "master",
        "full_size": 15873991,
        "id": 1722151,
        "repository": 178424,
        "creator": 2876,
        "last_updater": 2876,
        "last_updated": "2016-09-07T20:16:59.639554Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "ipfs/go-ipfs"
  },
  "name": "jbenet/go-ipfs Docker container",
  "description": "",
  "readme": "# go-ipfs\n\n![banner](https://ipfs.io/ipfs/QmVk7srrwahXLNmcDYvyUEJptyoxpndnRa57YJ11L4jV26/ipfs.go.png)\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs)\n\n> IPFS implementation in Go\n\nIPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas from\nGit, BitTorrent, Kademlia, SFS, and the Web. It is like a single bittorrent swarm,\nexchanging git objects. IPFS provides an interface as simple as the HTTP web, but\nwith permanence built in. You can also mount the world at /ipfs.\n\nFor more info see: https://github.com/ipfs/ipfs.\n\nPlease put all issues regarding IPFS _design_ in the\n[ipfs repo issues](https://github.com/ipfs/ipfs/issues).\nPlease put all issues regarding the Go IPFS _implementation_ in [this repo](https://github.com/ipfs/go-ipfs/issues).\n\n## Table of Contents\n\n- [Security Issues](#security-issues)\n- [Install](#install)\n  - [Install prebuilt packages](#install-prebuilt-packages)\n  - [Build from Source](#build-from-source)\n    - [Install Go](#install-go)\n    - [Download and Compile IPFS](#download-and-compile-ipfs)\n    - [Troubleshooting](#troubleshooting)\n  - [Development Dependencies](#development-dependencies)\n  - [Updating](#updating)\n- [Usage](#usage)\n- [Getting Started](#getting-started)\n  - [Some things to try](#some-things-to-try)\n  - [Docker usage](#docker-usage)\n  - [Troubleshooting](#troubleshooting-1)\n- [Todo](#todo)\n- [Contributing](#contributing)\n  - [Want to hack on IPFS?](#want-to-hack-on-ipfs)\n- [License](#license)\n\n## Security Issues\n\nThe IPFS protocol and its implementations are still in heavy development. This means that there may be problems in our protocols, or there may be mistakes in our implementations. And -- though IPFS is not production-ready yet -- many people are already running nodes in their machines. So we take security vulnerabilities very seriously. If you discover a security issue, please bring it to our attention right away!\n\nIf you find a vulnerability that may affect live deployments -- for example, by exposing a remote execution exploit -- please send your report privately to security@ipfs.io. Please DO NOT file a public issue.\n\nIf the issue is a protocol weakness that cannot be immediately exploited or something not yet deployed, just discuss it openly.\n\n## Install\n\nThe canonical download instructions for IPFS are over at: http://ipfs.io/docs/install/. It is **highly suggested** you follow those instructions if you are not interested in working on IPFS development.\n\n### Install prebuilt packages\n\nWe host prebuilt binaries over at our [distributions page](https://ipfs.io/ipns/dist.ipfs.io#go-ipfs).\n\nFrom there:\n- Click the blue \"Download go-ipfs\" on the right side of the page.\n- Open/extract the archive.\n- Move `ipfs` to your path (`install.sh` can do it for you).\n\n### Build from Source\n\n#### Install Go\n\nThe build process for ipfs requires Go 1.7 or higher. If you don't have it: [Download Go 1.7+](https://golang.org/dl/).\n\n\nYou'll need to add Go's bin directories to your `$PATH` environment variable e.g., by adding these lines to your `/etc/profile` (for a system-wide installation) or `$HOME/.profile`:\n\n```\nexport PATH=$PATH:/usr/local/go/bin\nexport PATH=$PATH:$GOPATH/bin\n```\n\n(If you run into trouble, see the [Go install instructions](https://golang.org/doc/install)).\n\n#### Download and Compile IPFS\n\ngo-ipfs differs from the vanilla `go get` flow: it uses\n[gx](https://github.com/whyrusleeping/gx)/[gx-go](https://github.com/whyrusleeping/gx-go)\nfor dependency management.\n\nFirst download `go-ipfs` without installing:\n\n```\n$ go get -d github.com/ipfs/go-ipfs\n\n$ cd $GOPATH/src/github.com/ipfs/go-ipfs\n```\n\nThen install `go-ipfs` and its dependencies, including `gx` and `gx-go`:\n\n```\n$ make install\n```\n\n#### Troubleshooting\n\n* Separate [instructions are available for building on Windows](docs/windows.md).\n* `git` is required in order for `go get` to fetch all dependencies.\n* Package managers often contain out-of-date `golang` packages.\n  Ensure that `go version` reports at least 1.7. See above for how to install go.\n* If you are interested in development, please install the development\ndependencies as well.\n* *WARNING: Older versions of OSX FUSE (for Mac OS X) can cause kernel panics when mounting!*\n  We strongly recommend you use the [latest version of OSX FUSE](http://osxfuse.github.io/).\n  (See https://github.com/ipfs/go-ipfs/issues/177)\n* For more details on setting up FUSE (so that you can mount the filesystem), see the docs folder.\n* Shell command completion is available in `misc/completion/ipfs-completion.bash`. Read [docs/command-completion.md](docs/command-completion.md) to learn how to install it.\n* See the [init examples](https://github.com/ipfs/examples/tree/master/examples/init) for how to connect IPFS to systemd or whatever init system your distro uses.\n\n### Development Dependencies\n\nIf you make changes to the protocol buffers, you will need to install the [protoc compiler](https://github.com/google/protobuf).\n\n### Updating\n\nIPFS has an updating tool that can be accessed through `ipfs update`. The tool is\nnot installed alongside IPFS in order to keep that logic independent of the main\ncodebase. To install `ipfs update`, [download it here](https://ipfs.io/ipns/dist.ipfs.io/#ipfs-update).\n\n## Usage\n\n```\n  ipfs - Global p2p merkle-dag filesystem.\n\n  ipfs [<flags>] <command> [<arg>] ...\n\nSUBCOMMANDS\n  BASIC COMMANDS\n    init          Initialize ipfs local configuration\n    add <path>    Add a file to ipfs\n    cat <ref>     Show ipfs object data\n    get <ref>     Download ipfs objects\n    ls <ref>      List links from an object\n    refs <ref>    List hashes of links from an object\n\n  DATA STRUCTURE COMMANDS\n    block         Interact with raw blocks in the datastore\n    object        Interact with raw dag nodes\n    files         Interact with objects as if they were a unix filesystem\n\n  ADVANCED COMMANDS\n    daemon        Start a long-running daemon process\n    mount         Mount an ipfs read-only mountpoint\n    resolve       Resolve any type of name\n    name          Publish or resolve IPNS names\n    dns           Resolve DNS links\n    pin           Pin objects to local storage\n    repo          Manipulate an IPFS repository\n\n  NETWORK COMMANDS\n    id            Show info about ipfs peers\n    bootstrap     Add or remove bootstrap peers\n    swarm         Manage connections to the p2p network\n    dht           Query the DHT for values or peers\n    ping          Measure the latency of a connection\n    diag          Print diagnostics\n\n  TOOL COMMANDS\n    config        Manage configuration\n    version       Show ipfs version information\n    update        Download and apply go-ipfs updates\n    commands      List all available commands\n\n  Use 'ipfs <command> --help' to learn more about each command.\n\n  ipfs uses a repository in the local file system. By default, the repo is located\n  at ~/.ipfs. To change the repo location, set the $IPFS_PATH environment variable:\n\n    export IPFS_PATH=/path/to/ipfsrepo\n```\n\n## Getting Started\n\nSee also: http://ipfs.io/docs/getting-started/\n\nTo start using IPFS, you must first initialize IPFS's config files on your\nsystem, this is done with `ipfs init`. See `ipfs init --help` for information on\nthe optional arguments it takes. After initialization is complete, you can use\n`ipfs mount`, `ipfs add` and any of the other commands to explore!\n\n### Some things to try\n\nBasic proof of 'ipfs working' locally:\n\n\techo \"hello world\" > hello\n\tipfs add hello\n\t# This should output a hash string that looks something like:\n\t# QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o\n\tipfs cat <that hash>\n\n\n### Docker usage\n\nAn IPFS docker image is hosted at [hub.docker.com/r/ipfs/go-ipfs](https://hub.docker.com/r/ipfs/go-ipfs/).\nTo make files visible inside the container you need to mount a host directory\nwith the `-v` option to docker. Choose a directory that you want to use to\nimport/export files from IPFS. You should also choose a directory to store\nIPFS files that will persist when you restart the container.\n\n    export ipfs_staging=</absolute/path/to/somewhere/>\n    export ipfs_data=</absolute/path/to/somewhere_else/>\n\nMake sure docker can access these folders:\n\n    sudo chmod -R 777 /absolute/path/to/somewhere/\n    sudo chmod -R 777 /absolute/path/to/somewhere_else/\n\nStart a container running ipfs and expose ports 4001, 5001 and 8080:\n\n    docker run -d --name ipfs_host -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 8080:8080 -p 4001:4001 -p 5001:5001 ipfs/go-ipfs:latest\n\nWatch the ipfs log:\n\n    docker logs -f ipfs_host\n\nWait for ipfs to start. ipfs is running when you see:\n\n    Gateway (readonly) server\n    listening on /ip4/0.0.0.0/tcp/8080\n\nYou can now stop watching the log.\n\nRun ipfs commands:\n\n    docker exec ipfs_host ipfs <args...>\n\nFor example: connect to peers\n\n    docker exec ipfs_host ipfs swarm peers\n\nAdd files:\n\n    cp -r <something> $ipfs_staging\n    docker exec ipfs_host ipfs add -r /export/<something>\n\nStop the running container:\n\n    docker stop ipfs_host\n\n### Troubleshooting\nIf you have previously installed IPFS before and you are running into\nproblems getting a newer version to work, try deleting (or backing up somewhere\nelse) your IPFS config directory (~/.ipfs by default) and rerunning `ipfs init`.\nThis will reinitialize the config file to its defaults and clear out the local\ndatastore of any bad entries.\n\nFor any other problems, check the [issues list](https://github.com/ipfs/go-ipfs/issues)\nand if you dont see your problem there, either come talk to us on irc (freenode #ipfs) or\nfile an issue of your own!\n\n## Todo\n\nAn IPFS alpha version has been released in February 2015. Things left to be done are all marked as [issues](https://github.com/ipfs/go-ipfs/issues).\n\n## Contributing\n\nPlease see [Contribute.md](contribute.md)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n",
  "dockerfile": "FROM alpine:edge\nMAINTAINER Lars Gierth <lgierth@ipfs.io>\n\n# There is a copy of this Dockerfile called Dockerfile.fast,\n# which is optimized for build time, instead of image size.\n#\n# Please keep these two Dockerfiles in sync.\n\n\n# Ports for Swarm TCP, Swarm uTP, API, Gateway\nEXPOSE 4001\nEXPOSE 4002/udp\nEXPOSE 5001\nEXPOSE 8080\n\n# Volume for mounting an IPFS fs-repo\n# This is moved to the bottom for technical reasons.\n#VOLUME $IPFS_PATH\n\n# IPFS API to use for fetching gx packages.\n# This can be a gateway too, since its read-only API provides all gx needs.\n# - e.g. /ip4/172.17.0.1/tcp/8080 if the Docker host\n#   has the IPFS gateway listening on the bridge interface\n#   provided by Docker's default networking.\n# - if empty, the public gateway at ipfs.io is used.\nENV GX_IPFS   \"\"\n# The IPFS fs-repo within the container\nENV IPFS_PATH /data/ipfs\n# The default logging level\nENV IPFS_LOGGING \"\"\n# Golang stuff\nENV GOPATH     /go\nENV PATH       /go/bin:$PATH\nENV SRC_PATH   /go/src/github.com/ipfs/go-ipfs\n\n# Get the go-ipfs sourcecode\nCOPY . $SRC_PATH\n\nRUN apk add --update musl-dev gcc go git bash wget ca-certificates \\\n\t# Setup user and fs-repo directory\n\t&& mkdir -p $IPFS_PATH \\\n\t&& adduser -D -h $IPFS_PATH -u 1000 ipfs \\\n\t&& chown ipfs:ipfs $IPFS_PATH && chmod 755 $IPFS_PATH \\\n\t# Install gx\n\t&& go get -u github.com/whyrusleeping/gx \\\n\t&& go get -u github.com/whyrusleeping/gx-go \\\n\t# Point gx to a specific IPFS API\n\t&& ([ -z \"$GX_IPFS\" ] || echo $GX_IPFS > $IPFS_PATH/api) \\\n\t# Invoke gx\n\t&& cd $SRC_PATH \\\n\t&& gx --verbose install --global \\\n\t&& mkdir .git/objects && commit=$(git rev-parse --short HEAD) \\\n\t&& echo \"ldflags=-X github.com/ipfs/go-ipfs/repo/config.CurrentCommit=$commit\" \\\n\t# Build and install IPFS and entrypoint script\n\t&& cd $SRC_PATH/cmd/ipfs \\\n\t&& go build -ldflags \"-X github.com/ipfs/go-ipfs/repo/config.CurrentCommit=$commit\" \\\n\t&& cp ipfs /usr/local/bin/ipfs \\\n\t&& cp $SRC_PATH/bin/container_daemon /usr/local/bin/start_ipfs \\\n\t&& chmod 755 /usr/local/bin/start_ipfs \\\n\t# Remove all build-time dependencies\n\t&& apk del --purge musl-dev gcc go git && rm -rf $GOPATH && rm -vf $IPFS_PATH/api\n\n# Call uid 1000 \"ipfs\"\nUSER ipfs\n\n# Expose the fs-repo as a volume.\n# We're doing this down here (and not at the top),\n# so that the overlay directory is owned by the ipfs user.\n# start_ipfs initializes an ephemeral fs-repo if none is mounted,\n# which is why uid=1000 needs write permissions there.\nVOLUME $IPFS_PATH\n\n# This just makes sure that:\n# 1. There's an fs-repo, and initializes one if there isn't.\n# 2. The API and Gateway are accessible from outside the container.\nENTRYPOINT [\"/usr/local/bin/start_ipfs\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      4001,
      4002,
      5001,
      8080
    ],
    "volume": [
      "$IPFS_PATH"
    ],
    "run": [
      "apk add --update musl-dev gcc go git bash wget ca-certificates \t# Setup user and fs-repo directory"
    ],
    "workdir": [],
    "from": "alpine:edge",
    "maintainer": "Lars Gierth <lgierth@ipfs.io>",
    "env": {
      "GX_IPFS": "",
      "": "/go/src/github.com/ipfs/go-ipfs",
      "IPFS_PATH": "/data/ipfs",
      "IPFS_LOGGING": "\"\"",
      "GOPATH": "",
      "PATH": "",
      "SRC_PATH": ""
    },
    "copy": ". $SRC_PATH",
    "user": "ipfs",
    "entrypoint": "[\"/usr/local/bin/start_ipfs\"]"
  },
  "source_repository_url": "https://github.com/ipfs/go-ipfs.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/ipfs/go-ipfs",
  "docker_repository": "jbenet/go-ipfs",
  "docker_image": "jbenet/go-ipfs",
  "parameters_schema": {
    "GX_IPFS": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "/go/src/github.com/ipfs/go-ipfs",
      "type": "string",
      "mapping": "environment_variable"
    },
    "IPFS_PATH": {
      "default": "/data/ipfs",
      "type": "string",
      "mapping": "environment_variable"
    },
    "IPFS_LOGGING": {
      "default": "\"\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "GOPATH": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SRC_PATH": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        4001,
        4002,
        5001,
        8080
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "jbenet/go-ipfs",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/jbenet/go-ipfs",
    "https://hub.docker.com/v2/repositories/jbenet/go-ipfs",
    "https://github.com/ipfs/go-ipfs.git"
  ],
  "labels": [
    "Docker"
  ],
  "info_url": "https://hub.docker.com/r/jbenet/go-ipfs",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}