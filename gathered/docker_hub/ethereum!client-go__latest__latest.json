{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/ethereum/client-go",
    "repository_url": "https://hub.docker.com/v2/repositories/ethereum/client-go",
    "tags_url": "https://hub.docker.com/v2/repositories/ethereum/client-go/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/ethereum/client-go/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/ethereum/client-go/autobuild",
    "user": "ethereum",
    "name": "client-go",
    "namespace": "ethereum",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 42,
    "pull_count": 63024,
    "last_updated": "2016-10-15T11:04:53.745421Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 84528696,
        "id": 90917,
        "repository": 141765,
        "creator": 150470,
        "last_updater": 150470,
        "last_updated": "2016-10-15T11:04:53.218249Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "alpine",
        "full_size": 10353876,
        "id": 1874374,
        "repository": 141765,
        "creator": 150470,
        "last_updater": 150470,
        "last_updated": "2016-10-15T11:03:09.243669Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "develop",
        "full_size": 84613513,
        "id": 1802046,
        "repository": 141765,
        "creator": 150470,
        "last_updater": 150470,
        "last_updated": "2016-10-15T08:03:07.260149Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "alpine-develop",
        "full_size": 10620468,
        "id": 1874378,
        "repository": 141765,
        "creator": 150470,
        "last_updater": 150470,
        "last_updated": "2016-10-15T08:01:23.680477Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "ethereum/go-ethereum"
  },
  "name": "ethereum/client-go Docker container",
  "description": "",
  "readme": "## Ethereum Go\n\nOfficial golang implementation of the Ethereum protocol\n\n          | Linux   | OSX | ARM | Windows | Tests\n----------|---------|-----|-----|---------|------\ndevelop   | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=Linux%20Go%20develop%20branch)](https://build.ethdev.com/builders/Linux%20Go%20develop%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=Linux%20Go%20develop%20branch)](https://build.ethdev.com/builders/OSX%20Go%20develop%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=ARM%20Go%20develop%20branch)](https://build.ethdev.com/builders/ARM%20Go%20develop%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=Windows%20Go%20develop%20branch)](https://build.ethdev.com/builders/Windows%20Go%20develop%20branch/builds/-1) | [![Buildr+Status](https://travis-ci.org/ethereum/go-ethereum.svg?branch=develop)](https://travis-ci.org/ethereum/go-ethereum) [![codecov.io](http://codecov.io/github/ethereum/go-ethereum/coverage.svg?branch=develop)](http://codecov.io/github/ethereum/go-ethereum?branch=develop)\nmaster    | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=Linux%20Go%20master%20branch)](https://build.ethdev.com/builders/Linux%20Go%20master%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=OSX%20Go%20master%20branch)](https://build.ethdev.com/builders/OSX%20Go%20master%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=ARM%20Go%20master%20branch)](https://build.ethdev.com/builders/ARM%20Go%20master%20branch/builds/-1) | [![Build+Status](https://build.ethdev.com/buildstatusimage?builder=Windows%20Go%20master%20branch)](https://build.ethdev.com/builders/Windows%20Go%20master%20branch/builds/-1) | [![Buildr+Status](https://travis-ci.org/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.org/ethereum/go-ethereum) [![codecov.io](http://codecov.io/github/ethereum/go-ethereum/coverage.svg?branch=master)](http://codecov.io/github/ethereum/go-ethereum?branch=master)\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://godoc.org/github.com/ethereum/go-ethereum)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/go-ethereum?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n## Automated development builds\n\nThe following builds are build automatically by our build servers after each push to the [develop](https://github.com/ethereum/go-ethereum/tree/develop) branch.\n\n* [Docker](https://registry.hub.docker.com/u/ethereum/client-go/)\n* [OS X](http://build.ethdev.com/builds/OSX%20Go%20develop%20branch/Mist-OSX-latest.dmg)\n* Ubuntu\n  [trusty](https://build.ethdev.com/builds/Linux%20Go%20develop%20deb%20i386-trusty/latest/) |\n  [utopic](https://build.ethdev.com/builds/Linux%20Go%20develop%20deb%20i386-utopic/latest/)\n* [Windows 64-bit](https://build.ethdev.com/builds/Windows%20Go%20develop%20branch/Geth-Win64-latest.zip)\n* [ARM](https://build.ethdev.com/builds/ARM%20Go%20develop%20branch/geth-ARM-latest.tar.bz2)\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the\n[Installation Instructions](https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum)\non the wiki.\n\nBuilding geth requires both a Go and a C compiler.\nYou can install them using your favourite package manager.\nOnce the dependencies are installed, run\n\n    make geth\n\nor, to build the full suite of utilities:\n\n    make all\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd` directory.\n\n| Command    | Description |\n|:----------:|-------------|\n| **`geth`** | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default) archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as an gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. Please see our [Command Line Options](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options) wiki page for details. |\n| `abigen` | Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI) with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts) wiki page for details. |\n| `bootnode` | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks. |\n| `disasm` | Bytecode disassembler to convert EVM (Ethereum Virtual Machine) bytecode into more user friendly assembly-like opcodes (e.g. `echo \"6001\" | disasm`). For details on the individual opcodes, please see pages 22-30 of the [Ethereum Yellow Paper](http://gavwood.com/paper.pdf). |\n| `evm` | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow insolated, fine graned debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug`). |\n| `gethrpctest` | Developer utility tool to support our [ethereum/rpc-test](https://github.com/ethereum/rpc-tests) test suite which validates baseline conformity to the [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC) specs. Please see the [test suite's readme](https://github.com/ethereum/rpc-tests/blob/master/README.md) for details. |\n| `rlpdump` | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://github.com/ethereum/wiki/wiki/RLP)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`). |\n\n## Running geth\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options)), but we've\nenumerated a few common parameter combos to get you up to speed quickly on how you can run your\nown Geth instance.\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum network:\ncreate accounts; transfer funds; deploy and interact with contracts. For this particular use-case\nthe user doesn't care about years-old historical data, so we can fast-sync quickly to the current\nstate of the network. To do so:\n\n```\n$ geth --fast --cache=512 console\n```\n\nThis command will:\n\n * Start geth in fast sync mode (`--fast`), causing it to download more data in exchange for avoiding\n   processing the entire history of the Ethereum network, which is very CPU intensive.\n * Bump the memory allowance of the database to 512MB (`--cache=512`), which can help significantly in\n   sync times especially for HDD users. This flag is optional and you can set it as high or as low as\n   you'd like, though we'd recommend the 512MB - 2GB range.\n * Start up Geth's built-in interactive [JavaScript console](https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console),\n   (via the trailing `console` subcommand) through which you can invoke all official [`web3` methods](https://github.com/ethereum/wiki/wiki/JavaScript-API)\n   as well as Geth's own [management APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs).\n   This too is optional and if you leave it out you can always attach to an already running Geth instance\n   with `geth --attach`.\n\n### Full node on the Ethereum test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum contracts, you\nalmost certainly would like to do that without any real money involved until you get the hang of the\nentire system. In other words, instead of attaching to the main network, you want to join the **test**\nnetwork with your node, which is fully equivalent to the main network, but with play-Ether only.\n\n```\n$ geth --testnet --fast --cache=512 console\n```\n\nThe `--fast`, `--cache` flags and `console` subcommand have the exact same meaning as above and they\nare equially useful on the testnet too. Please see above for their explanations if you've skipped to\nhere.\n\nSpecifying the `--testnet` flag however will reconfigure your Geth instance a bit:\n\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), Geth will nest\n   itself one level deeper into a `testnet` subfolder (`~/.ethereum/testnet` on Linux).\n * Instead of connecting the main Ethereum network, the client will connect to the test network,\n   which uses different P2P bootnodes, different network IDs and genesis states.\n\n*Note: Although there are some internal protective measures to prevent transactions from crossing\nover between the main network and test network (different starting nonces), you should make sure to\nalways use separate accounts for play-money and real-money. Unless you manually move accounts, Geth\nwill by default correctly separate the two networks and will not make any accounts available between\nthem.*\n\n### Programatically interfacing Geth nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with Geth and the Ethereum\nnetwork via your own programs and not manually through the console. To aid this, Geth has built in\nsupport for a JSON-RPC based APIs ([standard APIs](https://github.com/ethereum/wiki/wiki/JSON-RPC) and\n[Geth specific APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs)). These can be\nexposed via HTTP, WebSockets and IPC (unix sockets on unix based platroms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by Geth, whereas the HTTP\nand WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons.\nThese can be turned on/off and configured as you'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--rpc` Enable the HTTP-RPC server\n  * `--rpcaddr` HTTP-RPC server listening interface (default: \"localhost\")\n  * `--rpcport` HTTP-RPC server listening port (default: 8545)\n  * `--rpcapi` API's offered over the HTTP-RPC interface (default: \"eth,net,web3\")\n  * `--rpccorsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--wsaddr` WS-RPC server listening interface (default: \"localhost\")\n  * `--wsport` WS-RPC server listening port (default: 8546)\n  * `--wsapi` API's offered over the WS-RPC interface (default: \"eth,net,web3\")\n  * `--wsorigins` Origins from which to accept websockets requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: \"admin,debug,eth,miner,net,personal,shh,txpool,web3\")\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to connect\nvia HTTP, WS or IPC to a Geth node configured with the above flags and you'll need to speak [JSON-RPC](http://www.jsonrpc.org/specification)\non all transports. You can reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based transport before\ndoing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs!\nFurther, all browser tabs can access locally running webservers, so malicious webpages could try to\nsubvert locally available APIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for granted in\nthe official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be aware of\nand agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"alloc\"      : {},\n  \"coinbase\"   : \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\" : \"0x20000\",\n  \"extraData\"  : \"\",\n  \"gasLimit\"   : \"0x2fefd8\",\n  \"nonce\"      : \"0x0000000000000042\",\n  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\"  : \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing the `nonce` to\nsome random value so you prevent unknown remote nodes from being able to connect to you. If you'd\nlike to pre-fund some accounts for easier testing, you can populate the `alloc` field with account\nconfigs:\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\"balance\": \"111111111\"},\n  \"0x0000000000000000000000000000000000000002\": {\"balance\": \"222222222\"}\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every** Geth node\nwith it prior to starting it up to ensure all blockchain parameters are correctly set:\n\n```\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to start a\nbootstrap node that others can use to find each other in your network and/or over the internet. The\nclean way is to configure and run a dedicated bootnode:\n\n```\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://github.com/ethereum/wiki/wiki/enode-url-format)\nthat other nodes can use to connect to it and exchange peer information. Make sure to replace the\ndisplayed IP address information (most probably `[::]`) with your externally accessible IP to get the\nactual `enode` URL.\n\n*Note: You could also use a full fledged Geth node as a bootnode, but it's the less recommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try `telnet <ip> <port>` to ensure\nit's indeed reachable), start every subsequent Geth node pointed to the bootnode for peer discovery\nvia the `--bootnodes` flag. It will probably also be desirable to keep the data directory of your\nprivate network separated, so do also specify a custom `--datadir` flag.\n\n```\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll also\nneed to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\nMining on the public Ethereum network is a complex task as it's only feasible using GPUs, requiring\nan OpenCL or CUDA enabled `ethminer` instance. For information on such a setup, please consult the\n[EtherMining subreddit](https://www.reddit.com/r/EtherMining/) and the [Genoil miner](https://github.com/Genoil/cpp-ethereum)\nrepository.\n\nIn a private network setting however, a single CPU miner instance is more than enough for practical\npurposes as it can produce a stable stream of blocks at the correct intervals without needing heavy\nresources (consider running on a single thread, no need for multiple ones either). To start a Geth\ninstance for mining, run it with all your usual flags, extended by:\n\n```\n$ geth <usual-flags> --mine --minerthreads=1 --etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining bocks and transactions on a single CPU thread, crediting all proceedings to\nthe account specified by `--etherbase`. You can further tune the mining by changing the default gas\nlimit blocks converge to (`--targetgaslimit`) and the price transactions are accepted at (`--gasprice`).\n\n## Contribution\n\nThank you for considering to help out with the source code! We welcome contributions from\nanyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit more\ncomplex changes though, please check up with the core devs first on [our gitter channel](https://gitter.im/ethereum/go-ethereum)\nto ensure those changes are in line with the general philosophy of the project and/or get some\nearly feedback which can make both your efforts much lighter as well as our review and merge\nprocedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting) guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary) guidelines.\n * Pull requests need to be based on and opened against the `develop` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://github.com/ethereum/go-ethereum/wiki/Developers'-Guide)\nfor more details on configuring your environment, managing project dependencies and testing procedures.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](http://www.gnu.org/licenses/lgpl-3.0.en.html), also\nincluded in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) is licensed under the\n[GNU General Public License v3.0](http://www.gnu.org/licenses/gpl-3.0.en.html), also included\nin our repository in the `COPYING` file.\n\n\n",
  "dockerfile": "FROM ubuntu:wily\nMAINTAINER caktux\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && \\\n    apt-get upgrade -q -y && \\\n    apt-get dist-upgrade -q -y && \\\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 923F6CA9 && \\\n    echo \"deb http://ppa.launchpad.net/ethereum/ethereum/ubuntu wily main\" | tee -a /etc/apt/sources.list.d/ethereum.list && \\\n    apt-get update && \\\n    apt-get install -q -y geth\n\nEXPOSE 8545\nEXPOSE 30303\n\nENTRYPOINT [\"/usr/bin/geth\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      8545,
      30303
    ],
    "volume": [],
    "run": [
      "apt-get update &&     apt-get upgrade -q -y &&     apt-get dist-upgrade -q -y &&     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 923F6CA9 &&     echo \"deb http://ppa.launchpad.net/ethereum/ethereum/ubuntu wily main\" | tee -a /etc/apt/sources.list.d/ethereum.list &&     apt-get update &&     apt-get install -q -y geth"
    ],
    "workdir": [],
    "from": "ubuntu:wily",
    "maintainer": "caktux",
    "env": {
      "DEBIAN_FRONTEND": "noninteractive"
    },
    "entrypoint": "[\"/usr/bin/geth\"]"
  },
  "source_repository_url": "https://github.com/ethereum/go-ethereum.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/ethereum/go-ethereum",
  "docker_repository": "ethereum/client-go",
  "docker_image": "ethereum/client-go",
  "parameters_schema": {
    "DEBIAN_FRONTEND": {
      "default": "noninteractive",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        8545,
        30303
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "ethereum/client-go",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/ethereum/client-go",
    "https://hub.docker.com/v2/repositories/ethereum/client-go",
    "https://github.com/ethereum/go-ethereum.git"
  ],
  "labels": [
    "Docker",
    "Binding/Region/Europe/EU",
    "Mode/CLI"
  ],
  "info_url": "https://hub.docker.com/r/ethereum/client-go",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}