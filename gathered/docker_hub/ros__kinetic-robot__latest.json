{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/_/ros",
    "repository_url": "https://hub.docker.com/v2/repositories/library/ros",
    "tags_url": "https://hub.docker.com/v2/repositories/library/ros/tags",
    "user": "library",
    "name": "ros",
    "namespace": "library",
    "status": 1,
    "is_private": false,
    "is_automated": false,
    "star_count": 68,
    "pull_count": 260142,
    "last_updated": "2016-10-14T00:51:11.860493Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "kinetic-robot",
        "full_size": 434265002,
        "id": 3133029,
        "repository": 218390,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:51:06.739544Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "kinetic-perception",
        "full_size": 706506216,
        "id": 3133062,
        "repository": 218390,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:49:46.682858Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 302795104,
        "id": 170642,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:31:14.926266Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "kinetic",
        "full_size": 302795104,
        "id": 3133065,
        "repository": 218390,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:31:04.518825Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "kinetic-ros-base",
        "full_size": 302795104,
        "id": 3133017,
        "repository": 218390,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:30:58.302552Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "jade-robot",
        "full_size": 321275578,
        "id": 170648,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:30:25.031043Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "jade-perception",
        "full_size": 520535575,
        "id": 170635,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:29:09.785371Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "jade-ros-base",
        "full_size": 253181621,
        "id": 170645,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:24:24.374812Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "jade",
        "full_size": 253181621,
        "id": 170631,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:24:24.349726Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "indigo-robot",
        "full_size": 321489409,
        "id": 170639,
        "repository": 218390,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-14T00:23:32.417819Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ]
  },
  "docker_image": "ros",
  "name": "ros Docker container",
  "description": "The Robot Operating System (ROS) is an open source project for building robot applications.",
  "readme": "# Supported tags and respective `Dockerfile` links\n\n-\t[`indigo-ros-core` (*ros/indigo/indigo-ros-core/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/indigo/indigo-ros-core/Dockerfile)\n-\t[`indigo-ros-base`, `indigo` (*ros/indigo/indigo-ros-base/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/indigo/indigo-ros-base/Dockerfile)\n-\t[`indigo-robot` (*ros/indigo/indigo-robot/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/indigo/indigo-robot/Dockerfile)\n-\t[`indigo-perception` (*ros/indigo/indigo-perception/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/indigo/indigo-perception/Dockerfile)\n-\t[`jade-ros-core` (*ros/jade/jade-ros-core/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/jade/jade-ros-core/Dockerfile)\n-\t[`jade-ros-base`, `jade` (*ros/jade/jade-ros-base/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/jade/jade-ros-base/Dockerfile)\n-\t[`jade-robot` (*ros/jade/jade-robot/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/jade/jade-robot/Dockerfile)\n-\t[`jade-perception` (*ros/jade/jade-perception/Dockerfile*)](https://github.com/osrf/docker_images/blob/e4ba7284358c569ebb7818b85e8520fbe9157269/ros/jade/jade-perception/Dockerfile)\n-\t[`kinetic-ros-core` (*ros/kinetic/kinetic-ros-core/Dockerfile*)](https://github.com/osrf/docker_images/blob/bf5219b2ae079b65896232dd0c345a8bc75bc5df/ros/kinetic/kinetic-ros-core/Dockerfile)\n-\t[`kinetic-ros-base`, `kinetic`, `latest` (*ros/kinetic/kinetic-ros-base/Dockerfile*)](https://github.com/osrf/docker_images/blob/bf5219b2ae079b65896232dd0c345a8bc75bc5df/ros/kinetic/kinetic-ros-base/Dockerfile)\n-\t[`kinetic-robot` (*ros/kinetic/kinetic-robot/Dockerfile*)](https://github.com/osrf/docker_images/blob/bf5219b2ae079b65896232dd0c345a8bc75bc5df/ros/kinetic/kinetic-robot/Dockerfile)\n-\t[`kinetic-perception` (*ros/kinetic/kinetic-perception/Dockerfile*)](https://github.com/osrf/docker_images/blob/bf5219b2ae079b65896232dd0c345a8bc75bc5df/ros/kinetic/kinetic-perception/Dockerfile)\n\nFor more information about this image and its history, please see [the relevant manifest file (`library/ros`)](https://github.com/docker-library/official-images/blob/master/library/ros). This image is updated via [pull requests to the `docker-library/official-images` GitHub repo](https://github.com/docker-library/official-images/pulls?q=label%3Alibrary%2Fros).\n\nFor detailed information about the virtual/transfer sizes and individual layers of each of the above supported tags, please see [the `repos/ros/tag-details.md` file](https://github.com/docker-library/repo-info/blob/master/repos/ros/tag-details.md) in [the `docker-library/repo-info` GitHub repo](https://github.com/docker-library/repo-info).\n\n# What is [ROS](http://www.ros.org/)?\n\nThe Robot Operating System (ROS) is a set of software libraries and tools that help you build robot applications. From drivers to state-of-the-art algorithms, and with powerful developer tools, ROS has what you need for your next robotics project. And it's all open source.\n\n> [wikipedia.org/wiki/Robot_Operating_System](https://en.wikipedia.org/wiki/Robot_Operating_System)\n\n[![logo](https://raw.githubusercontent.com/docker-library/docs/0074e9dac72a35e5058f356885121aa82572682f/ros/logo.png)](http://www.ros.org/)\n\n# How to use this image\n\n## Create a `Dockerfile` in your ROS app project\n\n```dockerfile\nFROM ros:indigo\n# place here your application's setup specifics\nCMD [ \"roslaunch\", \"my-ros-app my-ros-app.launch\" ]\n```\n\nYou can then build and run the Docker image:\n\n```console\n$ docker build -t my-ros-app .\n$ docker run -it --rm --name my-running-app my-ros-app\n```\n\n## Deployment use cases\n\nThis dockerized image of ROS is intended to provide a simplified and consistent platform to build and deploy distributed robotic applications. Built from the [official Ubuntu image](https://registry.hub.docker.com/_/ubuntu/) and ROS's official Debian packages, it includes recent supported releases for quick access and download. This provides roboticists in research and industry with an easy way to develop, reuse and ship software for autonomous actions and task planning, control dynamics, localization and mapping, swarm behavior, as well as general system integration.\n\nDeveloping such complex systems with cutting edge implementations of newly published algorithms remains challenging, as repeatability and reproducibility of robotic software can fall to the wayside in the race to innovate. With the added difficulty in coding, tuning and deploying multiple software components that span across many engineering disciplines, a more collaborative approach becomes attractive. However, the technical difficulties in sharing and maintaining a collection of software over multiple robots and platforms has for a while exceeded time and effort than many smaller labs and businesses could afford.\n\nWith the advancements and standardization of software containers, roboticists are primed to acquire a host of improved developer tooling for building and shipping software. To help alleviate the growing pains and technical challenges of adopting new practices, we have focused on providing an official resource for using ROS with these new technologies.\n\n## Deployment suggestions\n\nThe available tags include supported distros along with a hierarchy tags based off the most common meta-package dependencies, designed to have a small footprint and simple configuration:  \n- `ros-core`: barebone ROS install  \n- `ros-base`: basic tools and libraries (also tagged with distro name with LTS version as `latest`)  \n- `robot`: basic install for robots  \n- `perception`: basic install for perception tasks\n\nThe rest of the common meta-packages such as `desktop` and `desktop-full` are hosted on automatic build repos under OSRF's Docker Hub profile [here](https://hub.docker.com/r/osrf/ros/). These meta-packages include graphical dependencies and hook a host of other large packages such as X11, X server, etc. So in the interest of keep the official images lean and secure, the desktop packages are just be hosted with OSRF's profile.\n\n### Volumes\n\nROS uses the `~/.ros/` directory for storing logs, and debugging info. If you wish to persist these files beyond the lifecycle of the containers which produced them, the `~/.ros/` folder can be mounted to an external volume on the host, or a derived image can specify volumes to be managed by the Docker engine. By default, the container runs as the `root` user, so `/root/.ros/` would be the full path to these files.\n\nFor example, if one wishes to use their own `.ros` folder that already resides in their local home directory, with a username of `ubuntu`, we can simple launch the container with an additional volume argument:\n\n```console\n$ docker run -v \"/home/ubuntu/.ros/:/root/.ros/\" ros\n```\n\n### Devices\n\nSome application may require device access for acquiring images from connected cameras, control input from human interface device, or GPUS for hardware acceleration. This can be done using the [`--device`](https://docs.docker.com/reference/run/) run argument to mount the device inside the container, providing processes inside hardware access.\n\n### Networks\n\nThe ROS runtime \"graph\" is a peer-to-peer network of processes (potentially distributed across machines) that are loosely coupled using the ROS communication infrastructure. ROS implements several different styles of communication, including synchronous RPC-style communication over services, asynchronous streaming of data over topics, and storage of data on a Parameter Server. To abide by the best practice of [one process per container](https://docs.docker.com/articles/dockerfile_best-practices/), Docker networks can be used to string together several running ROS processes. For further details about [ROS NetworkSetup](http://wiki.ros.org/ROS/NetworkSetup) wik article, or see the Deployment example below.\n\n## Deployment example\n\nIf we want our all ROS nodes to easily talk to each other, we'll can use a virtual network to connect the separate containers. In this short example, we'll create a virtual network, spin up a new container running `roscore` advertised as the `master` service on the new network, then spawn a message publisher and subscriber process as services on the same network.\n\n### Build image\n\n> Build a ROS image that includes ROS tutorials using this `Dockerfile:`\n\n```dockerfile\nFROM ros:indigo-ros-base\n# install ros tutorials packages\nRUN apt-get update && apt-get install -y\n    ros-indigo-ros-tutorials \\\n    ros-indigo-common-tutorials \\\n    && rm -rf /var/lib/apt/lists/\n```\n\n> Then to build the image from within the same directory:\n\n```console\n$ docker build --tag ros:ros-tutorials .\n```\n\n#### Create network\n\n> To create a new network `foo`, we use the network command:\n\n\tdocker network create foo\n\n> Now that we have a network, we can create services. Services advertise there location on the network, making it easy to resolve the location/address of the service specific container. We'll use this make sure our ROS nodes can find and connect to our ROS `master`.\n\n#### Run services\n\n> To create a container for the ROS master and advertise it's service:\n\n```console\n$ docker run -it --rm \\\n    --net foo \\\n    --name master \\\n    ros:ros-tutorials \\\n    roscore\n```\n\n> Now you can see that master is running and is ready manage our other ROS nodes. To add our `talker` node, we'll need to point the relevant environment variable to the master service:\n\n```console\n$ docker run -it --rm \\\n    --net foo \\\n    --name talker \\\n    --env ROS_HOSTNAME=talker \\\n    --env ROS_MASTER_URI=http://master:11311 \\\n    ros:ros-tutorials \\\n    rosrun roscpp_tutorials talker\n```\n\n> Then in another terminal, run the `listener` node similarly:\n\n```console\n$ docker run -it --rm \\\n    --net foo \\\n    --name listener \\\n    --env ROS_HOSTNAME=listener \\\n    --env ROS_MASTER_URI=http://master:11311 \\\n    ros:ros-tutorials \\\n    rosrun roscpp_tutorials listener\n```\n\n> Alright! You should see `listener` is now echoing each message the `talker` broadcasting. You can then list the containers and see something like this:\n\n```console\n$ docker service ls\nSERVICE ID          NAME                NETWORK             CONTAINER\n67ce73355e67        listener            foo                 a62019123321\n917ee622d295        master              foo                 f6ab9155fdbe\n7f5a4748fb8d        talker              foo                 e0da2ee7570a\n```\n\n> And for the services:\n\n```console\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                CREATED              STATUS              PORTS               NAMES\na62019123321        ros:ros-tutorials   \"/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           listener\ne0da2ee7570a        ros:ros-tutorials   \"/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           talker\nf6ab9155fdbe        ros:ros-tutorials   \"/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           master\n```\n\n#### Introspection\n\n> Ok, now that we see the two nodes are communicating, let get inside one of the containers and do some introspection what exactly the topics are:\n\n```console\n$ docker exec -it master bash\n$ source /ros_entrypoint.sh\n```\n\n> If we then use `rostopic` to list published message topics, we should see something like this:\n\n```console\n$ rostopic list\n/chatter\n/rosout\n/rosout_agg\n```\n\n#### Tear down\n\n> To tear down the structure we've made, we just need to stop the containers and the services. We can stop and remove the containers using `Ctrl^C` where we launched the containers or using the stop command with the names we gave them:\n\n```console\n$ docker stop master talker listener\n$ docker rm master talker listener\n```\n\n### Compose\n\nNow that you have an appreciation for bootstrapping a distributed ROS example manually, lets try and automate it using [`docker-compose`](https://docs.docker.com/compose/)\\.\n\n> Start by making a folder named `rostutorials` and moving the Dockerfile we used earlier inside this directory. Then create a yaml file named `docker-compose.yml` in the same directory and paste the following inside:\n\n```yaml\nversion: '2'\nservices:\n  master:\n    build: .\n    container_name: master\n    command:\n      - roscore\n  \n  talker:\n    build: .\n    container_name: talker\n    environment:\n      - \"ROS_HOSTNAME=talker\"\n      - \"ROS_MASTER_URI=http://master:11311\"\n    command: rosrun roscpp_tutorials talker\n  \n  listener:\n    build: .\n    container_name: listener\n    environment:\n      - \"ROS_HOSTNAME=listener\"\n      - \"ROS_MASTER_URI=http://master:11311\"\n    command: rosrun roscpp_tutorials listener\n```\n\n> Now from inside the same folder, use docker-copose to launch our ROS nodes and specify that they coexist on their own network:\n\n```console\n$ docker-compose up -d\n```\n\n> Notice that a new network named `rostutorials_default` has now been created, you can inspect it further with:\n\n```console\n$ docker network inspect rostutorials_default\n```\n\n> We can monitor the logged output of each service, such as the listener node like so:\n\n```console\n$ docker-compose logs listener\n```\n\n> Finally, we can stop and remove all the relevant containers using docker-copose from the same directory:\n\n```console\n$ docker-compose stop\n$ docker-compose rm\n```\n\n> Note: the auto-generated network, `rostutorials_default`, will persist over the life of the docker engine or until you explicitly remove it using [`docker network rm`](https://docs.docker.com/engine/reference/commandline/network_rm/)\\.\n\n# More Resources\n\n[ROS.org](http://www.ros.org/): Main ROS website  \n[Wiki](http://wiki.ros.org/): Find tutorials and learn more  \n[ROS Answers](http://answers.ros.org/questions/): Ask questions. Get answers  \n[Blog](http://www.ros.org/news/): Stay up-to-date  \n[OSRF](http://www.osrfoundation.org/): Open Source Robotics Foundation\n\n# License\n\nThe core of ROS is licensed under the standard three-clause BSD license. This is a very permissive open license that allows for reuse in commercial and closed source products. You can find more about the BSD license from the Opensource.org [BSD 3-Clause](http://opensource.org/licenses/BSD-3-Clause) page and Wikipedia's [BSD Licenses](http://en.wikipedia.org/wiki/BSD_licenses) entry.\n\nWhile the core parts of ROS are licensed under the BSD license, other licenses are commonly used in the community packages, such as the [Apache 2.0](http://opensource.org/licenses/Apache-2.0) license, the [GPL](http://opensource.org/licenses/gpl-license) license, the [MIT](http://opensource.org/licenses/MIT) license, and even proprietary licenses. Each package in the ROS ecosystem is required to specify a license, so that it is easy for you to quickly identify if a package will meet your licensing needs.\n\n# Supported Docker versions\n\nThis image is officially supported on Docker version 1.12.2.\n\nSupport for older versions (down to 1.6) is provided on a best-effort basis.\n\nPlease see [the Docker installation documentation](https://docs.docker.com/installation/) for details on how to upgrade your Docker daemon.\n\n# User Feedback\n\n## Issues\n\nIf you have any problems with or questions about this image, please contact us through a [GitHub issue](https://github.com/osrf/docker_images/issues). If the issue is related to a CVE, please check for [a `cve-tracker` issue on the `official-images` repository first](https://github.com/docker-library/official-images/issues?q=label%3Acve-tracker).\n\nYou can also reach many of the official image maintainers via the `#docker-library` IRC channel on [Freenode](https://freenode.net).\n\n## Contributing\n\nYou are invited to contribute new features, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.\n\nBefore you start to code, we recommend discussing your plans through a [GitHub issue](https://github.com/osrf/docker_images/issues), especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing.\n\n## Documentation\n\nDocumentation for this image is stored in the [`ros/` directory](https://github.com/docker-library/docs/tree/master/ros) of the [`docker-library/docs` GitHub repo](https://github.com/docker-library/docs). Be sure to familiarize yourself with the [repository's `README.md` file](https://github.com/docker-library/docs/blob/master/README.md) before attempting a pull request.",
  "type": "docker",
  "docker_name": "ros",
  "revision": "kinetic-robot",
  "uris": [
    "https://hub.docker.com/r/_/ros",
    "https://hub.docker.com/v2/repositories/library/ros"
  ],
  "labels": [
    "Docker",
    "Style/Virtualization Level/Operating System",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://hub.docker.com/r/_/ros",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}