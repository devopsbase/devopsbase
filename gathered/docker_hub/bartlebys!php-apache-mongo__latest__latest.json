{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bartlebys/php-apache-mongo",
    "repository_url": "https://hub.docker.com/v2/repositories/bartlebys/php-apache-mongo",
    "tags_url": "https://hub.docker.com/v2/repositories/bartlebys/php-apache-mongo/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bartlebys/php-apache-mongo/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bartlebys/php-apache-mongo/autobuild",
    "user": "bartlebys",
    "name": "php-apache-mongo",
    "namespace": "bartlebys",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 87,
    "last_updated": "2016-10-05T07:42:29.122522Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 246037309,
        "id": 5162126,
        "repository": 949687,
        "creator": 1133008,
        "last_updater": 1133008,
        "last_updated": "2016-10-05T07:42:27.850339Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "Bartlebys/Php-Apache-Mongo"
  },
  "name": "bartlebys/php-apache-mongo Docker container",
  "description": "Dockerized XDebug support for PHP (semaphore support) , Apache Running as Module (for SSE), MongoDB",
  "readme": "# Php-Apache-Mongo (with Dockerized XDebug support)\n\nThis Docker image is based on the Official `php-apache` image.\nIt offers a *Zero Config* fully *dockerized* development environment for macOS.\nYou just call one install script and you obtain a fully dockerized running PHP Development stack.\n\nFeel free to contribute and [propose improvements](https://github.com/Bartlebys/Php-Apache-Mongo/issues).\n\n## Featuring\n\n- PHP 5.6 (7.X to come soon)\n- MongoDB\n- Apache\n- Xdebug\n\n# Includes a Fully functional PHPStorm Sample project\n\n\n[XDebug/PHPStorm](XDebug/PHPStorm/)\n\n![run](assets/run.png)\n\n\n# How to install the PHPStorm sample?\n\nPrerequisite: Download and install [docker for mac](https://download.docker.com/mac/stable/Docker.dmg)\n\n1. Move to [XDebug/PHPStorm](XDebug/PHPStorm/)\n2. Open your IDE and listen to XDebug.\n3. run `./install.sh'\n4. After building the image (may take a few minutes) and running the container it should open a browser on http://localhost:8002/\nYou will have a full PHP / APACHE / MONGODB container with XDEBUG enabled.\n\n\n**You can run again with updated source by calling `./run.sh`**\n\n![Config1](assets/config1.png)\n![Config2](assets/config2.png)\n\n## To proceed to install\n\n```\n./install.sh\n```\n\n# Run Usage\n\nIf you call `./run.sh` it will use the options set in `default.conf`.\n\n## But you can run a different configuration\n\n1. create a `configuration.conf` file\n2. call `./run.sh -o configuration.conf`\n\n## Sample configuration\n\n```\n######################################################\n# This is the Run script configuration file\n# It Defines the default value when calling ./run.sh\n# You can run a specific configuration file with \"-o file.conf\"\n#####################################################\n\n# The name of the container That will be instantiated\nCONTAINER_NAME=SampleContainer\n\n# The name of the Docker Image That will be Created\n# Must be lower cases (if not it will be by the run script)\nIMAGE_NAME=sampledockerImage\n\n# YES or NO if set to YES the image will be rebuilt\nDESTROY_IMAGE=YES\n\n# YES or NO if set to YES \"XDEBUG\" will be enabled\nXDEBUG=YES\n\n# YES or NO if set to YES it will pull the image from docker's hub\nPULL_IMAGE=NO\n\n# YES or NO if set to YES it will rebuild the Image.\nINSTALL=NO\n\n# 80, 8000, ... choose the apache port on your Host. You will access this instance on http://localhost:<PORT>/\nAPACHE_PORT=8002\n\n# 27017, 27018, ... choose the mongodb port on your Host.\nMONGO_DB_PORT=27018\n\n# the PHPStorm Configuration Server name\nSERVER_NAME=DockerLocal\n\n# a script that will be called when the container is up\n#POST_PROCESSING_SCRIPT=refreshSources.sh\n```\n\n\n# Alternative Manual Sequence\n\n- Pull the base image `docker pull bartlebys/php-apache-mongo`\n- Build the  image `docker build -t dockerizedsampleimage:latest .`\n- Run the container\n\n```\n\nCURRENT_DIR=$(PWD)\n\n# Grab the Host IP\nHOST_IP=$(ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}')\n\ndocker run  -e PHP_IDE_CONFIG=\"serverName=DockerLocal\"\\\n            -e XDEBUG_CONFIG=\"idekey=PHPSTORM\"\\\n            -e XDEBUG_CONFIG=\"remote_host=$HOST_IP\"\\\n            -p 27017:27017 \\\n            -p 8002:80\\\n            -v $CURRENT_DIR:/var/www/\\\n            -d --name DockerizedSample dockerizedsampleimage\n            \n```\n\n\n\n# Validated with\n\n+ PhpStorm 2016.2.1\n+ Build #PS-162.1889.1, built on August 23, 2016\n+ You have perpetual fallback license for this version\n+ JRE: 1.8.0_76-release-b216 x86_64\n+ JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o\n+ macOS Sierra **10.12 (16A323)**\n+ Docker for mac Installed from the official [docker for mac](https://download.docker.com/mac/stable/Docker.dmg) **Version 1.12.1** (build: 12133) 2d5b4d9c3daa089e3869e6355a47dd96dbf39856\n",
  "dockerfile": "FROM php:5.6-apache\nMAINTAINER Benoit Pereira da Silva <https://pereira-da-silva.com>\n\n###############\n#   Mongo DB\n###############\n\n# Procedure from the official Mongo Doc.\n# https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\nRUN echo \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.2 main\" | tee /etc/apt/sources.list.d/mongodb-org-3.2.list\nRUN apt-get update\nRUN apt-get install -y mongodb-org\n\n#   **WARNING (Windows & OS X):*** from https://hub.docker.com/_/mongo/\n#\n#   The default Docker setup on Windows and OS X uses a VirtualBox VM to host the Docker daemon.\n#   Unfortunately, the mechanism VirtualBox uses to share folders between the host system and the Docker container is not compatible with the memory mapped files used by MongoDB\n#   (see vbox bug, docs.mongodb.org and related jira.mongodb.org bug).\n#   This means that it is not possible to run a MongoDB container with the data directory mapped to the host.\n#\n#   The Docker documentation is a good starting point for understanding the different storage options and variations,\n#   and there are multiple blogs and forum postings that discuss and give advice in this area.\n#   We will simply show the basic procedure here for the latter option above:\n#   Create a data directory on a suitable volume on your host system, e.g. /my/own/datadir.\n#   Start your mongo container like this:\n#\n#   $  docker run --name some-mongo -v /my/own/datadir:/data/db -d mongo:tag\n#   The -v /my/own/datadir:/data/db part of the command mounts the /my/own/datadir directory from the underlying host system as /data/db inside the container,\n#   where MongoDB by default will write its data files.\n\nRUN mkdir -p /data/db /data/configdb \\\n\t&& chown -R mongodb:mongodb /data/db /data/configdb\nVOLUME /data/db /data/configdb\n\n\n###############\n# Nano\n###############\n\n# We want to have a simple editor by default\nRUN apt-get install nano\n\n\n###############\n#  Apache\n###############\n\n# Enable apache mods.\nRUN a2enmod rewrite\n\n################\n#   PHP\n################\n\n\n#  NOTES https://hub.docker.com/_/php/\n#\n#  PHP Core Extensions :\n#\n#  For iconv, mcrypt and gd extensions, you can inherit the base image that you like, and write your own Dockerfile like this:\n#\n#   RUN apt-get update && apt-get install -y \\\n#           libfreetype6-dev \\\n#           libjpeg62-turbo-dev \\\n#           libmcrypt-dev \\\n#           libpng12-dev \\\n#      && docker-php-ext-install -j$(nproc) iconv mcrypt \\\n#      && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n#      && docker-php-ext-install -j$(nproc) gd\n#\n#\n#  PECL : (compiling extension)\n#\n#\n# To install a PECL extension, use \"pecl install\" to download and compile it,\n# then use \"docker-php-ext-enable\" to enable it\n#\n# e.g : memcached\n#\n#   RUN apt-get update && apt-get install -y libmemcached-dev \\\n#       && pecl install memcached \\\n#       && docker-php-ext-enable memcached\n\n\n# mcrypt\nRUN apt-get install -y libmcrypt-dev\nRUN docker-php-ext-install -j$(nproc) mcrypt\n\n# iconv\nRUN docker-php-ext-install -j$(nproc) iconv\n\n# semaphore\nRUN docker-php-ext-install -j$(nproc) sysvsem\n\n# XDEBUG\n# We install XDEBUG but do not enable it\n# We enable it according to the context in Childrens\nRUN yes | pecl install xdebug\n\n# mongo\n\nRUN apt-get install -y  libsasl2-dev\\\n                        libssl-dev\n\nRUN pecl install mongo &&\\\n    echo \"extension=mongo.so\" > /usr/local/etc/php/conf.d/mongo.ini\n\n\n# Install Telnet to be able to test the connectivity from the container to the host\nRUN apt-get install telnet",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [
      "/data/db /data/configdb"
    ],
    "run": [
      "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927",
      "echo \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.2 main\" | tee /etc/apt/sources.list.d/mongodb-org-3.2.list",
      "apt-get update",
      "apt-get install -y mongodb-org",
      "mkdir -p /data/db /data/configdb \t&& chown -R mongodb:mongodb /data/db /data/configdb",
      "apt-get install nano",
      "a2enmod rewrite",
      "apt-get install -y libmcrypt-dev",
      "docker-php-ext-install -j$(nproc) mcrypt",
      "docker-php-ext-install -j$(nproc) iconv",
      "docker-php-ext-install -j$(nproc) sysvsem",
      "yes | pecl install xdebug",
      "apt-get install -y  libsasl2-dev                        libssl-dev",
      "pecl install mongo &&    echo \"extension=mongo.so\" > /usr/local/etc/php/conf.d/mongo.ini",
      "apt-get install telnet"
    ],
    "workdir": [],
    "from": "php:5.6-apache",
    "maintainer": "Benoit Pereira da Silva <https://pereira-da-silva.com>"
  },
  "source_repository_url": "https://github.com/Bartlebys/Php-Apache-Mongo.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/Bartlebys/Php-Apache-Mongo",
  "docker_repository": "bartlebys/php-apache-mongo",
  "docker_image": "bartlebys/php-apache-mongo",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bartlebys/php-apache-mongo",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/bartlebys/php-apache-mongo",
    "https://hub.docker.com/v2/repositories/bartlebys/php-apache-mongo",
    "https://github.com/Bartlebys/Php-Apache-Mongo.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/HP",
    "Type/Devopsware/Integration/Semaphore",
    "Type/Middleware/Runtime/PHP",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Store/Document-oriented/MongoDB"
  ],
  "info_url": "https://hub.docker.com/r/bartlebys/php-apache-mongo",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}