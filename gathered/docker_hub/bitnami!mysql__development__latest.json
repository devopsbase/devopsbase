{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/mysql",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/mysql",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/mysql/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/mysql/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/mysql/autobuild",
    "user": "bitnami",
    "name": "mysql",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 26,
    "last_updated": "2016-10-17T10:34:58.193082Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "development",
        "full_size": 185233460,
        "id": 5449264,
        "repository": 978910,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-10-17T10:34:57.549151Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "_",
        "full_size": 185234077,
        "id": 5450734,
        "repository": 978910,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T08:29:00.056014Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "latest",
        "full_size": 185234213,
        "id": 5449273,
        "repository": 978910,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-14T04:05:27.814624Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "5.7.14-r0",
        "full_size": 185234213,
        "id": 5449272,
        "repository": 978910,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-14T04:05:26.595845Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-mysql"
  },
  "name": "bitnami/mysql Docker container",
  "description": "Bitnami MySQL Docker Image",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-mysql/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-mysql/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/mysql)](https://hub.docker.com/r/bitnami/mysql/)\n\n# What is MySQL?\n\n> MySQL is a fast, reliable, scalable, and easy to use open-source relational database system. MySQL Server is intended for mission-critical, heavy-load production systems as well as for embedding into mass-deployed software.\n\n[https://mysql.com/](https://mysql.com/)\n\n# TLDR\n\n```bash\ndocker run --name mysql bitnami/mysql:latest\n```\n\n## Docker Compose\n\n```\nmysql:\n  image: bitnami/mysql:latest\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami MySQL Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/mysql).\n\n```bash\ndocker pull bitnami/mysql:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the\n[list of available versions](https://hub.docker.com/r/bitnami/mysql/tags/)\nin the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/mysql:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/mysql:latest https://github.com/bitnami/bitnami-docker-mysql.git\n```\n\n# Persisting your database\n\nIf you remove the container all your data and configurations will be lost, and the next time you run the image the database will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed.\n\n**Note!**\nIf you have already started using your database, follow the steps on\n[backing up](#backing-up-your-container) and [restoring](#restoring-a-backup) to pull the data from your running container down to your host.\n\nThe image exposes a volume at `/bitnami/mysql` for the MySQL data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/mysql-persistence:/bitnami/mysql bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  volumes:\n    - /path/to/mysql-persistence:/bitnami/mysql\n```\n\n# Linking\n\nIf you want to connect to your MySQL server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a MySQL client container to the MySQL server container\n\n### Step 1: Run the MySQL image with a specific name\n\nThe first step is to start our MySQL server.\n\nDocker's linking system uses container ids or names to reference containers. We can explicitly specify a name for our MySQL server to make it easier to connect to other containers.\n\n```bash\ndocker run --name mysql bitnami/mysql:latest\n```\n\n### Step 2: Run MySQL as a MySQL client and link to our server\n\nNow that we have our MySQL server running, we can create another container that links to it by giving Docker the `--link` option. This option takes the id or name of the container we want to link it to as well as a hostname to use inside the container, separated by a colon. For example, to have our MySQL server accessible in another container with `server` as it's hostname we would pass `--link mysql:server` to the Docker run command.\n\nThe Bitnami MySQL Docker Image also ships with a MySQL client. To start the client, we can override the default command Docker runs by stating a different command to run after the image name.\n\n```bash\ndocker run --rm -it --link mysql:server bitnami/mysql:latest mysql -h server -u root\n```\n\nWe started the MySQL client passing in the `-h` option that allows us to specify the hostname of the server, which we set to the hostname we created in the link.\n\n**Note!**\nYou can also run the MySQL client in the same container the server is running in using the Docker [exec](https://docs.docker.com/reference/commandline/cli/#exec) command.\n\n```bash\ndocker exec -it mysql mysql -u root\n```\n\n## Linking with Docker Compose\n\n### Step 1: Add a MySQL entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add MySQL to your application.\n\n```\nmysql:\n  image: bitnami/mysql:latest\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your MySQL server from to include a link to the `mysql` entry you added in Step 1.\n\n```\nmyapp:\n  image: myapp\n  links:\n    - mysql:mysql\n```\n\nInside `myapp`, use `mysql` as the hostname for the MySQL server.\n\n# Configuration\n\n## Setting the root password on first run\n\nPassing the `MYSQL_ROOT_PASSWORD` environment variable when running the image for the first time will set the password of the root user to the value of `MYSQL_ROOT_PASSWORD`.\n\n```bash\ndocker run --name mysql -e MYSQL_ROOT_PASSWORD=password123 bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  environment:\n    - MYSQL_ROOT_PASSWORD=password123\n```\n\n**Warning** The `root` user is always created with remote access. It's suggested that the `MYSQL_ROOT_PASSWORD` env variable is always specified to set a password for the `root` user.\n\n## Creating a database on first run\n\nBy passing the `MYSQL_DATABASE` environment variable when running the image for the first time, a database will be created. This is useful if your application requires that a database already exists, saving you from having to manually create the database using the MySQL client.\n\n```bash\ndocker run --name mysql -e MYSQL_DATABASE=my_database bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  environment:\n    - MYSQL_DATABASE=my_database\n```\n\n## Creating a database user on first run\n\nYou can create a restricted database user that only has permissions for the database created with the [`MYSQL_DATABASE`](#creating-a-database-on-first-run) environment variable. To do this, provide the `MYSQL_USER` environment variable and to set a password for the database user provide the `MYSQL_PASSWORD` variable.\n\n```bash\ndocker run --name mysql \\\n  -e MYSQL_USER=my_user -e MYSQL_PASSWORD=my_password \\\n  -e MYSQL_DATABASE=my_database \\\n  bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  environment:\n    - MYSQL_USER=my_user\n    - MYSQL_PASSWORD=my_password\n    - MYSQL_DATABASE=my_database\n```\n\n**Note!** The `root` user will still be created with remote access. Please ensure that you have specified a password for the `root` user using the `MYSQL_ROOT_PASSWORD` env variable.\n\n## Setting up a replication cluster\n\nA **zero downtime** MySQL master-slave [replication](https://dev.mysql.com/doc/refman/5.0/en/replication-howto.html) cluster can easily be setup with the Bitnami MySQL Docker image using the following environment variables:\n\n - `MYSQL_REPLICATION_MODE`: The replication mode. Possible values `master`/`slave`. No defaults.\n - `MYSQL_REPLICATION_USER`: The replication user created on the master on first run. No defaults.\n - `MYSQL_REPLICATION_PASSWORD`: The replication users password. No defaults.\n - `MYSQL_MASTER_HOST`: Hostname/IP of replication master (slave parameter). No defaults.\n - `MARIABD_MASTER_PORT`: Server port of the replication master (slave parameter). Defaults to `3306`.\n - `MYSQL_MASTER_USER`: User on replication master with access to `MYSQL_DATABASE` (slave parameter). Defaults to `root`\n - `MYSQL_MASTER_PASSWORD`: Password of user on replication master with access to `MYSQL_DATABASE` (slave parameter). No defaults.\n\nIn a replication cluster you can have one master and zero or more slaves. When replication is enabled the master node is in read-write mode, while the slaves are in read-only mode. For best performance its advisable to limit the reads to the slaves.\n\n### Step 1: Create the replication master\n\nThe first step is to start the MySQL master.\n\n```bash\ndocker run --name mysql-master \\\n  -e MYSQL_ROOT_PASSWORD=root_password \\\n  -e MYSQL_REPLICATION_MODE=master \\\n  -e MYSQL_REPLICATION_USER=my_repl_user \\\n  -e MYSQL_REPLICATION_PASSWORD=my_repl_password \\\n  -e MYSQL_USER=my_user \\\n  -e MYSQL_PASSWORD=my_password \\\n  -e MYSQL_DATABASE=my_database \\\n  bitnami/mysql:latest\n```\n\nIn the above command the container is configured as the `master` using the `MYSQL_REPLICATION_MODE` parameter. A replication user is specified using the `MYSQL_REPLICATION_USER` and `MYSQL_REPLICATION_PASSWORD` parameters.\n\n### Step 2: Create the replication slave\n\nNext we start a MySQL slave container.\n\n```bash\ndocker run --name mysql-slave --link mysql-master:master \\\n  -e MYSQL_ROOT_PASSWORD=root_password \\\n  -e MYSQL_REPLICATION_MODE=slave \\\n  -e MYSQL_REPLICATION_USER=my_repl_user \\\n  -e MYSQL_REPLICATION_PASSWORD=my_repl_password \\\n  -e MYSQL_MASTER_HOST=master \\\n  -e MYSQL_MASTER_USER=my_user \\\n  -e MYSQL_MASTER_PASSWORD=my_password \\\n  -e MYSQL_USER=my_user \\\n  -e MYSQL_PASSWORD=my_password \\\n  -e MYSQL_DATABASE=my_database \\\n  bitnami/mysql:latest\n```\n\nIn the above command the container is configured as a `slave` using the `MYSQL_REPLICATION_MODE` parameter. The `MYSQL_MASTER_HOST`, `MYSQL_MASTER_USER` and `MYSQL_MASTER_PASSWORD` parameters are used by the slave to connect to the master and take a dump of the existing data in the database identified by `MYSQL_DATABASE`. The replication user credentials are specified using the `MYSQL_REPLICATION_USER` and `MYSQL_REPLICATION_PASSWORD` parameters and should be the same as the one specified on the master.\n\n> **Note**! The cluster only replicates the database specified in the `MYSQL_DATABASE` parameter.\n\nYou now have a two node MySQL master/slave replication cluster up and running. You can scale the cluster by adding/removing slaves without incurring any downtime.\n\nWith Docker Compose the master/slave replication can be setup using:\n\n```yaml\nmaster:\n  image: bitnami/mysql:latest\n  environment:\n    - MYSQL_ROOT_PASSWORD=root_password\n    - MYSQL_REPLICATION_MODE=master\n    - MYSQL_REPLICATION_USER=my_repl_user\n    - MYSQL_REPLICATION_PASSWORD=my_repl_password\n    - MYSQL_USER=my_user\n    - MYSQL_PASSWORD=my_password\n    - MYSQL_DATABASE=my_database\n\nslave:\n  image: bitnami/mysql:latest\n  links:\n    - master:master\n  environment:\n    - MYSQL_ROOT_PASSWORD=root_password\n    - MYSQL_REPLICATION_MODE=slave\n    - MYSQL_REPLICATION_USER=my_repl_user\n    - MYSQL_REPLICATION_PASSWORD=my_repl_password\n    - MYSQL_MASTER_HOST=master\n    - MYSQL_MASTER_USER=my_user\n    - MYSQL_MASTER_PASSWORD=my_password\n    - MYSQL_USER=my_user\n    - MYSQL_PASSWORD=my_password\n    - MYSQL_DATABASE=my_database\n```\n\nScale the number of slaves using:\n\n```bash\ndocker-compose scale master=1 slave=3\n```\n\nThe above command scales up the number of slaves to `3`. You can scale down in the same manner.\n\n> **Note**: You should not scale up/down the number of master nodes. Always have only one master node running.\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/mysql`. As as mentioned in [Persisting your database](#persisting-your-data) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n### Step 1: Run the MySQL image\n\nRun the MySQL image, mounting a directory from your host.\n\n```bash\ndocker run --name mysql -v /path/to/mysql-persistence:/bitnami/mysql bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  volumes:\n    - /path/to/mysql-persistence:/bitnami/mysql\n```\n\n### Step 2: Edit the configuration\n\nEdit the configuration on your host using your favorite editor.\n\n```bash\nvi /path/to/mysql-persistence/conf/my.cnf\n```\n\n### Step 3: Restart MySQL\n\nAfter changing the configuration, restart your MySQL container for changes to take effect.\n\n```bash\ndocker restart mysql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose restart mysql\n```\n\n**Further Reading:**\n\n  - [Server Option and Variable Reference](https://dev.mysql.com/doc/refman/5.1/en/mysqld-option-tables.html)\n\n# Logging\n\nThe Bitnami MySQL Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs mysql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs mysql\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your container\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop mysql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop mysql\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm -v /path/to/mysql-backups:/backups --volumes-from mysql busybox \\\n  cp -a /bitnami/mysql:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm -v /path/to/mysql-backups:/backups --volumes-from `docker-compose ps -q mysql` busybox \\\n  cp -a /bitnami/mysql:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run -v /path/to/mysql-backups/latest:/bitnami/mysql bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```\nmysql:\n  image: bitnami/mysql:latest\n  volumes:\n    - /path/to/mysql-backups/latest:/bitnami/mysql\n```\n\n## Upgrade this image\n\nBitnami provides up-to-date versions of MySQL, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/mysql:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to\n`bitnami/mysql:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v mysql\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v mysql\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name mysql bitnami/mysql:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start mysql\n```\n\n# Testing\n\nThis image is tested for expected runtime behavior, using the [Bats](https://github.com/sstephenson/bats) testing framework. You can run the tests on your machine using the `bats` command.\n\n```\nbats test.sh\n```\n\n# Notable Changes\n\n## 10.1.13-r0\n\n- All volumes have been merged at `/bitnami/mysql`. Now you only need to mount a single volume at `/bitnami/mysql` for persistence.\n- The logs are always sent to the `stdout` and are no longer collected in the volume.\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an [issue](https://github.com/bitnami/bitnami-docker-mysql/issues), or submit a [pull request](https://github.com/bitnami/bitnami-docker-mysql/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an [issue](https://github.com/bitnami/bitnami-docker-mysql/issues). For us to provide better support, be sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive information)\n\n# License\n\nCopyright (c) 2015-2016 Bitnami\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\n\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_IMAGE_VERSION=5.7.14-r0 \\\n    BITNAMI_APP_NAME=mysql \\\n    BITNAMI_APP_USER=mysql\n\nRUN bitnami-pkg unpack mysql-5.7.14-0 --checksum 0f4849fad700923179f3d8b6fbb762d2c218a5b1b4b044632c291eaec6cf212e\nENV PATH=/opt/bitnami/mysql/sbin:/opt/bitnami/mysql/bin:$PATH\n\nCOPY rootfs/ /\nENTRYPOINT [\"/app-entrypoint.sh\"]\nCMD [\"nami\", \"start\", \"--foreground\", \"mysql\"]\n\nVOLUME [\"/bitnami/mysql\"]\n\nEXPOSE 3306\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      3306
    ],
    "volume": [
      "[\"/bitnami/mysql\"]"
    ],
    "run": [
      "bitnami-pkg unpack mysql-5.7.14-0 --checksum 0f4849fad700923179f3d8b6fbb762d2c218a5b1b4b044632c291eaec6cf212e"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_IMAGE_VERSION": "5.7.14-r0",
      "": "",
      "BITNAMI_APP_NAME": "mysql",
      "BITNAMI_APP_USER": "mysql",
      "PATH": "/opt/bitnami/mysql/sbin:/opt/bitnami/mysql/bin:$PATH"
    },
    "copy": "rootfs/ /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"mysql\"]"
  },
  "source_repository_url": "https://github.com/bitnami/bitnami-docker-mysql.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-mysql",
  "docker_repository": "bitnami/mysql",
  "docker_image": "bitnami/mysql",
  "parameters_schema": {
    "BITNAMI_IMAGE_VERSION": {
      "default": "5.7.14-r0",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_NAME": {
      "default": "mysql",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_USER": {
      "default": "mysql",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/mysql/sbin:/opt/bitnami/mysql/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        3306
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/mysql",
  "revision": "development",
  "uris": [
    "https://hub.docker.com/r/bitnami/mysql",
    "https://hub.docker.com/v2/repositories/bitnami/mysql",
    "https://github.com/bitnami/bitnami-docker-mysql.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Middleware/Data Store/Relational/MySQL"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/mysql",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}