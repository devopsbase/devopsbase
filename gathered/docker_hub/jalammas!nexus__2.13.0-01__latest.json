{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/jalammas/nexus",
    "repository_url": "https://hub.docker.com/v2/repositories/jalammas/nexus",
    "tags_url": "https://hub.docker.com/v2/repositories/jalammas/nexus/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/jalammas/nexus/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/jalammas/nexus/autobuild",
    "user": "jalammas",
    "name": "nexus",
    "namespace": "jalammas",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 24,
    "last_updated": "2016-09-19T12:15:18.057578Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "2.13.0-01",
        "full_size": 208001005,
        "id": 4864793,
        "repository": 918323,
        "creator": 16487,
        "last_updater": 16487,
        "last_updated": "2016-09-19T12:15:17.591458Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "jarielpa/openshift-cd-demo"
  },
  "name": "jalammas/nexus Docker container",
  "description": "Nexus image for openshift  with Fuse and RedHat  maven repositories",
  "readme": "# OpenShift 3 CI/CD Demo\n\nThis repository includes the infrastructure and pipeline definition for continuous delivery using Jenkins, Nexus and SonarQube on OpenShift. On every pipeline execution, the code goes through the following steps:\n\n1. Code is cloned from Git, built, tested and analyzed for bugs and bad patterns\n2. The WAR artifact is pushed to Nexus Repository manager\n3. A Docker image (_tasks:latest_) is built based on the _Tasks_ application WAR artifact deployed on JBoss EAP 6\n4. The _Tasks_ Docker image is deployed in a fresh new container in DEV project\n5. If tests successful, the DEV image is tagged with the application version (_tasks:6.4.0_) in the STAGE project\n6. The staged image is deployed in a fresh new container in the STAGE project\n\nThe following diagram shows the steps included in the deployment pipeline:\n\n![](https://github.com/OpenShiftDemos/openshift-cd-demo/blob/openshift-3.2/images/pipeline.png)\n\n# Setup\n\nCreate a new project for CI/CD components\n\n  ```\n  $ oc new-project cicd --display-name=\"CI/CD\"\n  ```\n\nCreate Dev and Stage projects for Tasks JAX-RS application\n\n  ```\n  $ oc new-project dev --display-name=\"Tasks - Dev\"\n  $ oc new-project stage --display-name=\"Tasks - Stage\"\n  ```\nJenkins needs to access OpenShift API to discover slave images as well accessing container images. Grant Jenkins service account enough privileges to invoke OpenShift API for the created projects:\n\n  ```\n  $ oc policy add-role-to-user edit system:serviceaccount:cicd:default -n cicd\n  $ oc policy add-role-to-user edit system:serviceaccount:cicd:default -n dev\n  $ oc policy add-role-to-user edit system:serviceaccount:cicd:default -n stage\n  ```\n\nCreate the CI/CD components based on the provided template (in cicd - project)\n\n  ```\n  $ oc process -f cicd-gogs-template.yaml | oc create -f -\n  ```\n\n\n# Demo Guide\n\n1. RunJenkins has the Pipeline plugin pre-installed. A Jenkins pipeline job is also pre-configured which clones Tasks JAX-RS application source code from GitHub, builds, deploys and promotes the result through the deployment pipeline. Click on ```tasks-cd-pipeline``` and _Configure_ and explore the pipeline definition.\n\n2. If using Gogs, modify the git repository url in the pipeline definition and set it to ```http://gogs:3000/gogs/openshift-tasks.git```.\n\n2. Run an instance of the pipeline by starting the ```tasks-cd-pipeline``` job.\n\n2. During pipeline execution, verify a new Jenkins slave pod is created withing _CI/CD_ project to execute the pipeline.\n\n3. After pipeline completion, demonstrate the following:\n  * Explore the ```snapshots``` repository in Nexus and verify ```openshift-tasks``` is pushed to the repository\n  * Explore SonarQube and verify a project is created with metrics, stats, code coverage, etc\n  * Explore _Tasks - Dev_ project in OpenShift console and verify the application is deployed in the DEV environment\n  * Explore _Tasks - Stage_ project in OpenShift console and verify the application is deployed in the STAGE environment  \n\n4. Add a webhook in [GitHub](https://developer.github.com/webhooks/creating/#setting-up-a-webhook) or [Gogs](https://gogs.io/docs/features/webhook) to trigger the pipeline whenever a change is pushed to the git repository. Use pipeline job's _Build Now_ url as the webhook url.\n\n  If using Gogs, webhooks configuration is in repository's _Settings &gt; Webhooks_ and the _tasks-cd-pipeline_ webhook url is http://jenkins:8080/job/tasks-cd-pipeline/build?delay=0sec.\n\n  _Note:_ if GitHub is used and Jenkins route is not accessible from the Internet, use SCM Polling instead of webhooks to trigger builds.\n\n5. Clone the ```openshift-tasks``` git repository and using an IDE (e.g. JBoss Developer Studio), remove the ```@Ignore``` annotation from ```src/test/java/org/jboss/as/quickstarts/tasksrs/service/UserResourceTest.java``` test methods to enable the unit tests. Commit and push to the git repo.\n\n6. Check out Jenkins, a pipeline instance is created and is being executed. The pipeline will fail during unit tests due to the enabled unit test.\n\n7. Check out the failed unit and test ```src/test/java/org/jboss/as/quickstarts/tasksrs/service/UserResourceTest.java``` and run it in the IDE.\n\n8. Fix the test by modifying ```src/main/java/org/jboss/as/quickstarts/tasksrs/service/UserResource.java``` and uncommenting the sort function in ```getUsers``` method.\n\n9. Run the unit test in the IDE. The unit test runs green. Commit and push the fix to the git repository and verify a pipeline instance is created in Jenkins and executes successfully.\n\n![](https://github.com/OpenShiftDemos/openshift-cd-demo/blob/openshift-3.2/images/jenkins-pipeline.png)\n",
  "dockerfile": "FROM sonatype/nexus:2.13.0-01\n\nMAINTAINER jlammassaari\n\nENV SONATYPE_WORK /nexus-data\n\nUSER root\nCOPY conf/nexus.xml ${SONATYPE_WORK}/conf/nexus.xml\nRUN chown -R nexus ${SONATYPE_WORK} && \\\n    chmod -R ugo+rw ${SONATYPE_WORK}\n\nUSER nexus\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "chown -R nexus ${SONATYPE_WORK} &&     chmod -R ugo+rw ${SONATYPE_WORK}"
    ],
    "workdir": [],
    "from": "sonatype/nexus:2.13.0-01",
    "maintainer": "jlammassaari",
    "env": {
      "SONATYPE_WORK": "/nexus-data"
    },
    "user": "nexus",
    "copy": "conf/nexus.xml ${SONATYPE_WORK}/conf/nexus.xml"
  },
  "source_repository_url": "https://github.com/jarielpa/openshift-cd-demo.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/jarielpa/openshift-cd-demo",
  "docker_repository": "jalammas/nexus",
  "docker_image": "jalammas/nexus",
  "parameters_schema": {
    "SONATYPE_WORK": {
      "default": "/nexus-data",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "jalammas/nexus",
  "revision": "2.13.0-01",
  "uris": [
    "https://hub.docker.com/r/jalammas/nexus",
    "https://hub.docker.com/v2/repositories/jalammas/nexus",
    "https://github.com/jarielpa/openshift-cd-demo.git"
  ],
  "labels": [
    "Docker",
    "Binding/Region/North America/US",
    "Mode/Executable/Image",
    "Type/Devopsware/Build/Java/Maven",
    "Type/Infrastructure/Operating System/Linux/RedHat"
  ],
  "info_url": "https://hub.docker.com/r/jalammas/nexus",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}