{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/blacklabelops/nginx",
    "repository_url": "https://hub.docker.com/v2/repositories/blacklabelops/nginx",
    "tags_url": "https://hub.docker.com/v2/repositories/blacklabelops/nginx/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/blacklabelops/nginx/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/blacklabelops/nginx/autobuild",
    "user": "blacklabelops",
    "name": "nginx",
    "namespace": "blacklabelops",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 2532,
    "last_updated": "2016-10-17T01:25:05.822267Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "1.10.1-r1",
        "full_size": 6858171,
        "id": 3585820,
        "repository": 427364,
        "creator": 207420,
        "last_updater": 207420,
        "last_updated": "2016-10-17T01:25:04.372749Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 6858131,
        "id": 1463034,
        "repository": 427364,
        "creator": 238671,
        "last_updater": 207420,
        "last_updated": "2016-10-17T01:20:11.251054Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.8.1-r0",
        "full_size": 7044752,
        "id": 3428476,
        "repository": 427364,
        "creator": 207420,
        "last_updater": 207420,
        "last_updated": "2016-06-23T05:49:12.087892Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.8.1",
        "full_size": 4616197,
        "id": 2068429,
        "repository": 427364,
        "creator": 207420,
        "last_updater": 207420,
        "last_updated": "2016-06-16T04:07:06.468559Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.0.1",
        "full_size": 167647368,
        "id": 1720522,
        "repository": 427364,
        "creator": 238671,
        "last_updater": 238671,
        "last_updated": "2016-02-18T15:24:53.535960Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "blacklabelops/nginx"
  },
  "name": "blacklabelops/nginx Docker container",
  "description": "Dockerized Nginx Reverse Proxy Server.",
  "readme": "# Dockerized Nginx\n\n[![Docker Stars](https://img.shields.io/docker/stars/blacklabelops/nginx.svg)](https://hub.docker.com/r/blacklabelops/nginx/) [![Docker Pulls](https://img.shields.io/docker/pulls/blacklabelops/nginx.svg)](https://hub.docker.com/r/blacklabelops/nginx/)\n\n## Important notice: The internal ports for this container changed from 8080 to 80 and 44300 to 443\n\n## Important notice:\n\nDue to some changes you have to omit a last \"/\" in your URL inside the parameter \"SERVERxREVERSE_PROXY_PASS1\"\n\nCorrect:\n\n~~~~\n-e \"SERVER1REVERSE_PROXY_PASS1=http://www.example.com\" \\\n~~~~\n\nIncorrect:\n\n~~~~\n-e \"SERVER1REVERSE_PROXY_PASS1=http://www.example.com/\" \\\n~~~~\n\n\n## Supported tags and respective Dockerfile links\n\n| Version     | Tag          | Dockerfile |\n|--------------|--------------|------------|\n| latest | latest | [Dockerfile](https://github.com/blacklabelops/nginx/blob/master/Dockerfile) |\n| 1.8.1-rc0 | 1.8.1-rc0 | [Dockerfile](https://github.com/blacklabelops/nginx/blob/master/Dockerfile) |\n\n# Features\n\n* Supports configuration of multiple servers with environment variables.\n* Supports an arbitrary amount of reverse proxies for every server.\n* Supports https and ad-hoc self-signed certificates\n* Supports ssl certificate specification for every server.\n* Supports letsencryt certificates.\n\n# Support & Feature Requests\n\nLeave a message and ask questions on Hipchat: [blacklabelops/hipchat](https://www.hipchat.com/geogBFvEM)\n\n# Make It Short!\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n> Default server installation will be available on port 80.\n\n# Configuration File\n\nYou can use your own configuration file which will override the auto-configuration feature of this image.\n\nExample:\n\n~~~~\n$ docker run -d \\\n    -v your_local_config_file.conf:/some/directory/nginx.conf \\\n    -e \"NGINX_CONFIG_FILE=/some/directory/nginx.conf\" \\\n    -p 80:80 \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n# Reverse Proxy Setup\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    blacklabelops/nginx\n~~~~\n\n> Reverse proxy will pass to site http://www.heise.de.\n\n# Multiple servers\n\nIt is possible to define an arbitrary amount of server definitions with environment variables. Each variable must be precede by the string \"SERVER\" and the number of the server.\n\nExample:\n\nServer 1 Reverse Proxy 1:\n\n* Location: /\n* Proxy Pass: http://www.heise.de\n\nServer 2 Reverse Proxy 1:\n\n* Server name: dummy.example.com\n* Location: /\n* Proxy Pass: http://www.alternate.de\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER2SERVER_NAME=dummy.example.com\"\n    -e \"SERVER2REVERSE_PROXY_LOCATION2=/alternate\" \\\n    -e \"SERVER2REVERSE_PROXY_PASS2=http://www.alternate.de\" \\\n    blacklabelops/nginx\n~~~~\n\n> Now try accessing http://localhost (When using docker tools replace localhost with the respective ip) in order to invoke the second proxy you will have to use a dns server for requests originating from dummy.example.com\n\n# Multiple Reverse Proxies\n\nIt is possible to define an arbitrary amount of reverse proxies for every server. Just precede each environment variable with the String \"SERVER\" and the number of the server and add a number behind each environment variable.\n\nExample:\n\nReverse Proxy 1:\n\n* Location: /\n* Proxy Pass: http://www.heise.de\n\nReverse Proxy 2:\n\n* Location: /alternate\n* Proxy Pass: http://www.alternate.de\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION2=/alternate\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS2=http://www.alternate.de\" \\\n    blacklabelops/nginx\n~~~~\n\n> Now try accessing http://localhost and https://localhost/alternate (When using docker tools replace localhost with the respective ip)\n\n# HTTPS Reverse Proxy\n\nThis container supports HTTPS. Just enter a DName with the environment variable CERTIFICATE_DNAME and the container creates a self-signed certificate. You have to pass Distinguished Name (DN). The certificate is generated with the Distinguished Name. This is a DN-Example:\n\n~~~~\n/CN=SBleul/OU=Blacklabelops/O=blacklabelops.net/L=Munich/C=DE\n~~~~\n\n  * CN = Your name\n  * OU = Your organizational unit.\n  * O = Organisation name.\n  * L = Location, e.g. town name.\n  * C = Locale of your county.\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1CERTIFICATE_DNAME=/CN=SBleul/OU=Blacklabelops/O=blacklabelops.com/L=Munich/C=DE\" \\\n    -e \"SERVER1HTTPS_ENABLED=true\" \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n> Note: Webserver will use same port for HTTPS!\n\n# Custom HTTPS Certificates\n\nUsing your own certificates: Mount them inside the\ncontainer define their location with the environment-variables CERTIFICATE_FILE and CERTIFICATE_KEY.\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -v /mycertificatepath/mycertificates:/opt/nginx/keys \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1HTTPS_ENABLED=true\" \\\n    -e \"SERVER1CERTIFICATE_FILE=/opt/nginx/keys/server.csr\" \\\n    -e \"SERVER1CERTIFICATE_KEY=/opt/nginx/keys/server.key\" \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n# Disable HTTP\n\nHTTP should be disabled when using HTTPS. Just disable the port and disable HTTP inside the config using the environment-variable HTTP_ENABLED.\n\nExample:\n\n~~~~\n$ docker run -d \\\n    -p 443:443 \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1HTTPS_ENABLED=true\" \\\n    -e \"SERVER1CERTIFICATE_DNAME=/CN=SBleul/OU=Blacklabelops/O=blacklabelops.com/L=Munich/C=DE\" \\\n    -e \"SERVER1HTTP_ENABLED=false\" \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n> The reverse proxy will now only offer HTTPS communication!\n\n# Set Http Header Fields\n\nApplications, like Jira and Jenkins, usually need proxy header fields when you use nginx as a reverse proxy. You can set custom header fields when you use an application that is not directly supported by this image.\n\nAs an example Jira reqires the following proxy header fields:\n\n1. `X-Forwarded-Host $host`\n1. `X-Forwarded-Server $host`\n1. `X-Forwarded-For $proxy_add_x_forwarded_for`\n\nThis image supports an arbitrary amount of header fields, the environment variables must enumerated, starting with index 1.\n\nSyntax environment variable: `SERVER<server-number>REVERSE_PROXY_HEADER<proxy-number>FIELD<field-number>`\n\n> Note: You must set `SERVER1PROXY_APPLICATION=custom` to `custom` otherwise the container will add default header fields by itself.\n\n> Note: Inside docker and docker-compose the environment variable has to be quoted with `''` rather with `\"\"`. This is also platform dependent, e.g. Mac and Linux. Please try and report how this behaves under Windows.\n\nExample with 1 server and 1 reverse proxy:\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e 'SERVER1PROXY_APPLICATION=custom' \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://jira.example.com\" \\\n    -e 'SERVER1REVERSE_PROXY_HEADER1FIELD1=X-Forwarded-Host $host' \\\n    -e 'SERVER1REVERSE_PROXY_HEADER1FIELD2=X-Forwarded-Server $host' \\\n    -e 'SERVER1REVERSE_PROXY_HEADER1FIELD3=X-Forwarded-For $proxy_add_x_forwarded_for' \\\n    blacklabelops/nginx\n~~~~\n\n> Use `''` quotes otherwise variables like `$host` will be interpreted!\n\n# Http2Https Redirection\n\nMeans that a call on the http adress will be redirected to https. Useful when users enter the http adress in browser and then will be redirected to the secured entry page.\n\nExample:\n\n1. Enter the URL `http://www.example.com`\n1. Your browser will be redirected to `https://www.example.com`\n\nThis setting will be activated for all servers and all servers must deactivate http.\n\nExample:\n\n1. `NGINX_REDIRECT_PORT80=true` activates https port redirection for all servers.\n1. `SERVER1HTTP_ENABLED=false` must be set for all servers.\n\nExample:\n\n~~~~\n$ docker run -d \\\n    -p 443:443 \\\n    -p 80:80 \\\n    -e \"NGINX_REDIRECT_PORT80=true\" \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1SERVER_NAME=localhost\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1HTTPS_ENABLED=true\" \\\n    -e \"SERVER1CERTIFICATE_DNAME=/CN=SBleul/OU=Blacklabelops/O=blacklabelops.com/L=Munich/C=DE\" \\\n    -e \"SERVER1HTTP_ENABLED=false\" \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n> You can now access http://localhost and https://localhost and http will be redirected to https.\n\n# Generating Green HTTPS Certificates with Letsencrypt\n\nYou can get and use free green certificates by [Letsencrypt](https://letsencrypt.org/). Here I will provide a manual way to generate and retrieve the certificate manually and use it inside the container. The full detailed letsencrypt documentation can be found here: [Documentation](https://community.letsencrypt.org/c/docs/)\n\nNote: This will not work inside boot2docker on your local comp. You will have to do this inside your target environment.\n\nFirst create a data volume where the certificate will be stored.\n\n~~~~\n$ docker volume create --name letsencrypt_certs\n~~~~\n\n> Needs at least Docker 1.10 volumes.\n\nThen start the letsencrypt container and create the certificate.\n\n~~~~\n$ docker run --rm \\\n    -p 80:80 \\\n    -p 443:443 \\\n    --name letsencrypt \\\n    -v letsencrypt_certs:/etc/letsencrypt \\\n    -e \"LETSENCRYPT_EMAIL=dummy@example.com\" \\\n    -e \"LETSENCRYPT_DOMAIN1=example.com\" \\\n    blacklabelops/letsencrypt install\n~~~~\n\n> This container will handshake with letsencrypt.org and install an account and the certificate when successful. Letsencrypt stores the certificates inside the folder /etc/letsencrypt.\n\nNow you can use the certificate for your reverse proxy!\n\n~~~~\n$ docker run -d \\\n    -p 443:443 \\\n    -v letsencrypt_certs:/etc/letsencrypt \\\n    -e \"SERVER1REVERSE_PROXY_LOCATION1=/\" \\\n    -e \"SERVER1REVERSE_PROXY_PASS1=http://www.heise.de\" \\\n    -e \"SERVER1HTTPS_ENABLED=true\" \\\n    -e \"SERVER1HTTP_ENABLED=false\" \\\n    -e \"SERVER1LETSENCRYPT_CERTIFICATES=true\" \\\n    -e \"SERVER1CERTIFICATE_FILE=/etc/letsencrypt/live/example.com/fullchain.pem\" \\\n    -e \"SERVER1CERTIFICATE_KEY=/etc/letsencrypt/live/example.com/privkey.pem\" \\\n    -e \"SERVER1CERTIFICATE_TRUSTED=/etc/letsencrypt/live/example.com/fullchain.pem\" \\\n    --name nginx \\\n    blacklabelops/nginx\n~~~~\n\n> LETSENCRYPT_CERTIFICATES switches on special configuration for their certificates.\n\n# Build The Image\n\nThe build process can take the following argument:\n\n* NGINX_VERSION: Takes keyword `latest` or specific NGINX version number. Default is `latest`.\n\nExamples:\n\nBuild image with the latest Jenkins release:\n\n~~~~\n$ docker build -t blacklabelops/nginx .\n~~~~\n\n> Note: Dockerfile must be inside the current directory!\n\nBuild image with a specific NGINX release:\n\n~~~~\n$ docker build --build-arg NGINX_VERSION=1.8.1-r0  -t blacklabelops/nginx .\n~~~~\n\n> Note: Dockerfile must be inside the current directory!\n\n# Using Docker Compose\n\nThe build configuration are specified inside the following area:\n\n~~~~\njenkins:\n  build:\n    context: .\n    dockerfile: Dockerfile\n    args:\n      NGINX_VERSION: latest\n~~~~\n\n> Adjust NGINX_VERSION for your personal needs.\n\nBuild the latest release with docker-compose:\n\n~~~~\n$ docker-compose build\n~~~~\n\n# Container Permissions\n\nSimply: You can set user-id and group-id matching to a user and group from your host machine!\n\nDue to security considerations this image is not running in root mode! The Jenkins process user inside the container is `nginx` and the user's group is `nginx`. This project offers a simplified mechanism for user- and group-mapping. You can set the uid of the user and gid of the user's group during build time.\n\nThe process permissions are relevant when using volumes and mounted folders from the host machine. NGINX need read and write permissions on the host machine. You can set UID and GID of the NGINX's process during build time! UID and GID should resemble credentials from your host machine.\n\nThe following build arguments can be used:\n\n* CONTAINER_UID: Set the user-id of the process. (default: 1000)\n* CONTAINER_GID: Set the group-id of the process. (default: 1000)\n\nExample:\n\n~~~~\n$ docker build --build-arg CONTAINER_UID=2000 --build-arg CONTAINER_GID=2000 -t blacklabelops/nginx .\n~~~~\n\n> The container will write and read files with UID 2000 and GID 2000.\n\n# Use Your Own Config File\n\nJust mount or place your file at the position `/home/nginx/config.json`!\n\nExample:\n\n~~~~\n$ docker run -d \\\n    -p 80:80 \\\n    --name nginx \\\n    -v config.json:/home/nginx/config.json \\\n    blacklabelops/nginx\n~~~~\n\n> File config.json is your local configuration file.\n\n# How To Extend This Image\n\nMinimal working example Dockerfile:\n\n~~~~\nFROM blacklabelops/nginx\nMAINTAINER Your Name <your@email.com>\n\nUSER root\nRUN echo \"Install Your Tools\"\n\nUSER nginx\n# Optional: Your config file\nCOPY config.json /home/nginx/config.json\n# Optional: Your entrypoint:\nCOPY entrypoint.sh /opt/nginx-scripts/\nENTRYPOINT [\"/opt/nginx-scripts/entrypoint.sh\"]\nCMD [\"nginx\"]\n~~~~\n\nMinimal working example entrypoint `entrypoint.sh`:\n\n~~~~\n#!/bin/bash -x\n\n# Your code\necho My script code\n\n# Then call image entrypoint\nexec /opt/nginx-scripts/docker-entrypoint.sh\n~~~~\n\n# Vagrant\n\nVagrant is fabulous tool for pulling and spinning up virtual machines like docker with containers. I can configure my development and test environment and simply pull it online. And so can you! Install Vagrant and Virtualbox and spin it up. Change into the project folder and build the project on the spot!\n\nFirst install:\n\n* [Vagrant](https://www.vagrantup.com/)\n* [Virtualbox](https://www.virtualbox.org/)\n\n~~~~\n$ vagrant up\n$ vagrant ssh\n[vagrant@localhost ~]$ cd /vagrant\n[vagrant@localhost ~]$ docker-compose up\n~~~~\n\n> Reverse Proxy will be available on localhost:80 on the host machine.\n\nVagrant does not leave any docker artifacts on your beloved desktop and the vagrant image can simply be destroyed and repulled if anything goes wrong. Test my project to your heart's content!\n\n## References\n\n* [NGINX](http://nginx.org/)\n* [Letsencrypt](https://letsencrypt.org/)\n* [Docker Homepage](https://www.docker.com/)\n* [Docker Compose](https://docs.docker.com/compose/)\n* [Docker Userguide](https://docs.docker.com/userguide/)",
  "dockerfile": "FROM blacklabelops/alpine:3.4\nMAINTAINER Steffen Bleul <sbl@blacklabelops.com>\n\n# Build time arguments\n#Values: latest or version number (e.g. 1.8.1-r0)\nARG NGINX_VERSION=latest\n#Permissions, set the linux user id and group id\nARG CONTAINER_UID=1000\nARG CONTAINER_GID=1000\n\n# install dev tools\nENV NGINX_DIRECTORY=/opt/nginx\n\nRUN export CONTAINER_USER=nginx && \\\n    export CONTAINER_GROUP=nginx && \\\n    # Add user\n    addgroup -g $CONTAINER_GID $CONTAINER_GROUP && \\\n    adduser -u $CONTAINER_UID -G $CONTAINER_GROUP -h /home/$CONTAINER_USER -s /bin/bash -S $CONTAINER_USER && \\\n    apk add --update \\\n      ca-certificates \\\n      curl \\\n      openssl && \\\n    if  [ \"${NGINX_VERSION}\" = \"latest\" ]; \\\n      then apk add nginx ; \\\n      else apk add \"nginx=${NGINX_VERSION}\" ; \\\n    fi && \\\n    mkdir -p /var/log/nginx && \\\n    touch /var/log/nginx/error.log && \\\n    mkdir -p ${NGINX_DIRECTORY}/default.d && \\\n    mkdir -p ${NGINX_DIRECTORY}/conf.d && \\\n    mkdir -p ${NGINX_DIRECTORY}/keys && \\\n    mkdir -p /var/run/nginx && \\\n    chown -R $CONTAINER_UID:$CONTAINER_GID ${NGINX_DIRECTORY} /var/log/nginx && \\\n    chown -R $CONTAINER_UID:$CONTAINER_GID ${NGINX_DIRECTORY} /var/lib/nginx && \\\n    chown -R $CONTAINER_UID:$CONTAINER_GID ${NGINX_DIRECTORY} /var/run/nginx && \\\n    # Install Tini Zombie Reaper And Signal Forwarder\n    export TINI_VERSION=0.9.0 && \\\n    export TINI_SHA=fa23d1e20732501c3bb8eeeca423c89ac80ed452 && \\\n    curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini && \\\n    echo 'Calculated checksum: '$(sha1sum /bin/tini) && \\\n    chmod +x /bin/tini && echo \"$TINI_SHA  /bin/tini\" | sha1sum -c - && \\\n    rm -rf /var/cache/apk/* && rm -rf /tmp/*\n\nEXPOSE 80 443\n\nUSER root\nCOPY imagescripts/*.sh /opt/nginx/\nENTRYPOINT [\"/bin/tini\",\"--\",\"/opt/nginx/docker-entrypoint.sh\"]\nVOLUME [\"/home/nginx\"]\nCMD [\"nginx\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [
      "[\"/home/nginx\"]"
    ],
    "run": [
      "export CONTAINER_USER=nginx &&     export CONTAINER_GROUP=nginx &&     # Add user"
    ],
    "workdir": [],
    "from": "blacklabelops/alpine:3.4",
    "maintainer": "Steffen Bleul <sbl@blacklabelops.com>",
    "arg": "CONTAINER_GID=1000",
    "env": {
      "NGINX_DIRECTORY": "/opt/nginx"
    },
    "user": "root",
    "copy": "imagescripts/*.sh /opt/nginx/",
    "entrypoint": "[\"/bin/tini\",\"--\",\"/opt/nginx/docker-entrypoint.sh\"]",
    "cmd": "[\"nginx\"]"
  },
  "source_repository_url": "https://github.com/blacklabelops/nginx.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/blacklabelops/nginx",
  "docker_repository": "blacklabelops/nginx",
  "docker_image": "blacklabelops/nginx",
  "parameters_schema": {
    "NGINX_DIRECTORY": {
      "default": "/opt/nginx",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "blacklabelops/nginx",
  "revision": "1.10.1-r1",
  "uris": [
    "https://hub.docker.com/r/blacklabelops/nginx",
    "https://hub.docker.com/v2/repositories/blacklabelops/nginx",
    "https://github.com/blacklabelops/nginx.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Web Server/Nginx",
    "Type/Middleware/Proxy"
  ],
  "info_url": "https://hub.docker.com/r/blacklabelops/nginx",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}