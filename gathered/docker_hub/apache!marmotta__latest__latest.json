{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/apache/marmotta",
    "repository_url": "https://hub.docker.com/v2/repositories/apache/marmotta",
    "tags_url": "https://hub.docker.com/v2/repositories/apache/marmotta/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/apache/marmotta/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/apache/marmotta/autobuild",
    "user": "apache",
    "name": "marmotta",
    "namespace": "apache",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 4,
    "pull_count": 178,
    "last_updated": "2016-09-22T14:41:34.350176Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 968497282,
        "id": 2846187,
        "repository": 660981,
        "creator": 33664,
        "last_updater": 33664,
        "last_updated": "2016-09-22T14:41:33.841106Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "develop",
        "full_size": 989799308,
        "id": 2844858,
        "repository": 660981,
        "creator": 33664,
        "last_updater": 33664,
        "last_updated": "2016-05-02T14:27:57.473579Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "apache/marmotta"
  },
  "name": "apache/marmotta Docker container",
  "description": "Apache Marmotta",
  "readme": "# Apache Marmotta\n\nThis repository contains the source code for [Apache Marmotta](https://marmotta.apache.org/)\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.apache.marmotta/marmotta-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.apache.marmotta/marmotta-core/)\n[![Docker Image](https://images.microbadger.com/badges/version/apache/marmotta.svg)](https://hub.docker.com/r/apache/marmotta/)\n[![Docker Image layers](https://images.microbadger.com/badges/image/apache/marmotta.svg)](https://microbadger.com/images/apache/marmotta)\n[![License](http://img.shields.io/:license-apache-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n\n\n## Building the Source Distribution\n\nApache Marmotta uses Maven to build, test, and install the software. A basic\nbuild requires downloading and installing Maven and then running:\n\n    mvn clean install\n\nThis will compile, package and test all Apache Marmotta modules and install\nit in your local Maven repository. In case you want to build your own\nprojects based on some of the libraries provided by Apache Marmotta, this\nusually suffices.\n\nThe default loglevel for most unit and integration tests executed during the\nbuild is INFO. To change the loglevel for either more or less output, you\ncan pass the loglevel as system property:\n\n    mvn clean install -Droot-level=TRACE|DEBUG|INFO|WARN|ERROR\n\nNote that some of the integration tests start up parts of the Marmotta\nplatform during execution. The log level for these tests cannot be\nchanged, as Marmotta is taking over the log configuration in these\ncases.\n\n## Building, Running and Deploying the Wep Application\n\nApache Marmotta also includes a default configuration for building a Java\nWeb Application that can be deployed in any Java Application Server. To\nbuild the web application, first run\n\n    mvn clean install\n\nin the project root. Then change to the launchers/marmotta-webapp directory\nand run\n\n    mvn package\n\nThis will create a marmotta.war file in the target/ directory. You can\ndeploy this archive to any Java Application Server by copying it into\nits deployment directory; [more details](http://marmotta.apache.org/installation.html).\n\nAlternatively, you can directly startup the Apache Marmotta Web Application\nfrom Maven with a default configuration suitable for development. To try this\nout, run\n\n    mvn tomcat7:run\n\nwait until the system is started up and point your browser to `http://localhost:8080`\n\nWhen developing it is sometimes useful to always start with a clean confi-\nguration of the system. Therefore, you can also start up the web application\nas follows:\n\n    mvn clean tomcat7:run -Pcleanall\n\nThis command will remove any existing configuration directory before startup.\n\n## Building the Standalone Installer\n\nThe build environment also offers to automatically build an installer package\nthat guides users through the installation with an easy-to-use installation\nwizard. The installer is based on izPack and dynamically assembled when\nbuilding the package. To build the installer, first run\n\n    mvn clean install\n\nin the project root. Then change to the launchers/marmotta-installer directory\nand run\n\n    mvn package -Pinstaller\n\nThe build process will automatically create an appropriate installer confi-\nguration from the Maven dependencies through the Apache Marmotta refpack\nbuild plugin.\n\nThe installer can then be tried out by running\n\n    java -jar target/marmotta-installer-x.x.x.jar\n\n\n## Building a Docker image\n\nMarmotta also comes with support for creating a Docker images that you can use for development \nor testing:\n\n1. Locate at the root of the source repository\n2. Build image: `docker build -t marmotta .`\n3. Run the container: `docker run -p 8080:8080 marmotta`\n4. Access Marmotta at [localhost:8080/marmotta](http://localhost:8080/marmotta) (IP address may \n   be different, see information bellow).\n\nAn official images is [available from Docker Hub](https://hub.docker.com/r/apache/marmotta/) as \nan automated build, so you just need to pull it from there to replace the second step above: \n\n    docker pull apache/marmotta\n\n\n## Building with a Clean Repository\n\nSometimes it is useful to check if the build runs properly on a clean local\nrepository, i.e. simulate what happens if a user downloads the source and\nruns the build. This can be achieved by running Maven as follows:\n\n    mvn clean install -Dmaven.repo.local=/tmp/testrepo\n\nThe command changes the local repository location from ~/.m2 to the\ndirectory passed as argument\n\n\n## Simulating a Release\n\nTo test the release build without actually deploying the software, we have\ncreated a profile that will deploy to the local file system. You can\nsimulate the release by running\n\n    mvn clean deploy -Pdist-local,marmotta-release,installer\n\nPlease keep in mind that building a release involves creating digital\nsignatures, so you will need a GPG key and a proper GPG configuration to run\nthis task.\n\nRead more about [our release process](https://wiki.apache.org/marmotta/ReleaseProcess).\n\n",
  "dockerfile": "# Dockerfile for Apache Marmotta\n\nFROM debian:jessie-backports\nMAINTAINER Sergio Fern√°ndez <wikier@apache.org>\n\nEXPOSE 8080\n\nWORKDIR /src\nADD . /src\n\n# configuration\nENV DEBIAN_FRONTEND noninteractive\nENV DB_NAME marmotta\nENV DB_USER marmotta\nENV DB_PASS s3cr3t\nENV PG_VERSION 9.4\nENV WAR_PATH /src/launchers/marmotta-webapp/target/marmotta.war\nENV CONF_PATH /var/lib/marmotta/system-config.properties\n\n# prepare the environment\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y \\\n\t\topenjdk-8-jdk \\\n\t\tmaven \\\n        tomcat7 \\\n    || apt-get install -y -f\n\n# build\nRUN mvn clean install -DskipTests -DskipITs\nRUN test -e $WAR_PATH || exit\n\n# install and configure postgres from the PGDG repo\nRUN apt-get update && apt-get install -y locales apt-utils \\\n\t&& localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG en_US.utf8\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n\t&& apt-get install -y postgresql-common \\\n\t&& sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n\t&& apt-get install -y \\\n\t\tpostgresql-$PG_VERSION \\\n\t\tpostgresql-contrib-$PG_VERSION\nRUN pg_createcluster $PG_VERSION main --start\nUSER postgres\nRUN service postgresql start \\\n    && psql --command \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';\" \\\n    && psql --command \"CREATE DATABASE $DB_NAME WITH OWNER $DB_USER;\"\nUSER root\nRUN service postgresql stop\nRUN echo \"host all  all    127.0.0.1/32  md5\" >> /etc/postgresql/$PG_VERSION/main/pg_hba.conf\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/$PG_VERSION/main/postgresql.conf\n\n# install the webapp\n#RUN dpkg --debug=2000 --install target/marmotta_*_all.deb <-- we'd need to fix the postinst\nRUN mkdir -p /usr/share/marmotta\nRUN cp $WAR_PATH /usr/share/marmotta/\nRUN chown tomcat7:tomcat7 /usr/share/marmotta/marmotta.war\nRUN cp /src/launchers/marmotta-webapp/src/deb/tomcat/marmotta.xml /var/lib/tomcat7/conf/Catalina/localhost/\nRUN chown tomcat7:tomcat7 /var/lib/tomcat7/conf/Catalina/localhost/marmotta.xml\nRUN mkdir -p \"$(dirname $CONF_PATH)\"\nRUN echo \"security.enabled = false\" > $CONF_PATH\nRUN echo \"database.type = postgres\" >> $CONF_PATH\nRUN echo \"database.url = jdbc:postgresql://localhost:5432/$DB_NAME?prepareThreshold=3\" >> $CONF_PATH\nRUN echo \"database.user = $DB_USER\" >> $CONF_PATH\nRUN echo \"database.password = $DB_PASS\" >> $CONF_PATH\nRUN chown -R tomcat7:tomcat7 \"$(dirname $CONF_PATH)\"\n\n# cleanup\nRUN mvn clean \\\n    && rm -rf ~/.m2 \\\n    && apt-get remove maven --purge -y \\\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && apt-get autoclean -y \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# entrypoint\nRUN cp /src/launchers/marmotta-webapp/src/docker/entrypoint.sh /usr/local/bin/marmotta.sh\nENTRYPOINT [\"/usr/local/bin/marmotta.sh\"]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": ".",
        "dest": "/src"
      }
    ],
    "expose": [
      8080
    ],
    "volume": [],
    "run": [
      "apt-get update     && apt-get upgrade -y     && apt-get install -y \t\topenjdk-8-jdk \t\tmaven         tomcat7     || apt-get install -y -f",
      "mvn clean install -DskipTests -DskipITs",
      "test -e $WAR_PATH || exit",
      "apt-get update && apt-get install -y locales apt-utils \t&& localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8",
      "apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8",
      "echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' > /etc/apt/sources.list.d/pgdg.list",
      "apt-get update \t&& apt-get install -y postgresql-common \t&& sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \t&& apt-get install -y \t\tpostgresql-$PG_VERSION \t\tpostgresql-contrib-$PG_VERSION",
      "pg_createcluster $PG_VERSION main --start",
      "service postgresql start     && psql --command \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';\"     && psql --command \"CREATE DATABASE $DB_NAME WITH OWNER $DB_USER;\"",
      "service postgresql stop",
      "echo \"host all  all    127.0.0.1/32  md5\" >> /etc/postgresql/$PG_VERSION/main/pg_hba.conf",
      "echo \"listen_addresses='*'\" >> /etc/postgresql/$PG_VERSION/main/postgresql.conf",
      "mkdir -p /usr/share/marmotta",
      "cp $WAR_PATH /usr/share/marmotta/",
      "chown tomcat7:tomcat7 /usr/share/marmotta/marmotta.war",
      "cp /src/launchers/marmotta-webapp/src/deb/tomcat/marmotta.xml /var/lib/tomcat7/conf/Catalina/localhost/",
      "chown tomcat7:tomcat7 /var/lib/tomcat7/conf/Catalina/localhost/marmotta.xml",
      "mkdir -p \"$(dirname $CONF_PATH)\"",
      "echo \"security.enabled = false\" > $CONF_PATH",
      "echo \"database.type = postgres\" >> $CONF_PATH",
      "echo \"database.url = jdbc:postgresql://localhost:5432/$DB_NAME?prepareThreshold=3\" >> $CONF_PATH",
      "echo \"database.user = $DB_USER\" >> $CONF_PATH",
      "echo \"database.password = $DB_PASS\" >> $CONF_PATH",
      "chown -R tomcat7:tomcat7 \"$(dirname $CONF_PATH)\"",
      "mvn clean     && rm -rf ~/.m2     && apt-get remove maven --purge -y     && apt-get autoremove -y     && apt-get clean -y     && apt-get autoclean -y     && apt-get autoremove -y     && rm -rf /var/lib/apt/lists/*",
      "cp /src/launchers/marmotta-webapp/src/docker/entrypoint.sh /usr/local/bin/marmotta.sh"
    ],
    "workdir": [
      "/src"
    ],
    "from": "debian:jessie-backports",
    "maintainer": "Sergio Fern√°ndez <wikier@apache.org>",
    "env": {
      "DEBIAN_FRONTEND": "noninteractive",
      "DB_NAME": "marmotta",
      "DB_USER": "marmotta",
      "DB_PASS": "s3cr3t",
      "PG_VERSION": "9.4",
      "WAR_PATH": "/src/launchers/marmotta-webapp/target/marmotta.war",
      "CONF_PATH": "/var/lib/marmotta/system-config.properties",
      "LANG": "en_US.utf8"
    },
    "user": "root",
    "entrypoint": "[\"/usr/local/bin/marmotta.sh\"]"
  },
  "source_repository_url": "https://github.com/apache/marmotta.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/apache/marmotta",
  "docker_repository": "apache/marmotta",
  "docker_image": "apache/marmotta",
  "parameters_schema": {
    "DEBIAN_FRONTEND": {
      "default": "noninteractive",
      "type": "string",
      "mapping": "environment_variable"
    },
    "DB_NAME": {
      "default": "marmotta",
      "type": "string",
      "mapping": "environment_variable"
    },
    "DB_USER": {
      "default": "marmotta",
      "type": "string",
      "mapping": "environment_variable"
    },
    "DB_PASS": {
      "default": "s3cr3t",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PG_VERSION": {
      "default": "9.4",
      "type": "string",
      "mapping": "environment_variable"
    },
    "WAR_PATH": {
      "default": "/src/launchers/marmotta-webapp/target/marmotta.war",
      "type": "string",
      "mapping": "environment_variable"
    },
    "CONF_PATH": {
      "default": "/var/lib/marmotta/system-config.properties",
      "type": "string",
      "mapping": "environment_variable"
    },
    "LANG": {
      "default": "en_US.utf8",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        8080
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "apache/marmotta",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/apache/marmotta",
    "https://hub.docker.com/v2/repositories/apache/marmotta",
    "https://github.com/apache/marmotta.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Web Server/Apache HTTP Server"
  ],
  "info_url": "https://hub.docker.com/r/apache/marmotta",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}