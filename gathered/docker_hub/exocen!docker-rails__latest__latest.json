{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/exocen/docker-rails",
    "repository_url": "https://hub.docker.com/v2/repositories/exocen/docker-rails",
    "tags_url": "https://hub.docker.com/v2/repositories/exocen/docker-rails/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/exocen/docker-rails/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/exocen/docker-rails/autobuild",
    "user": "exocen",
    "name": "docker-rails",
    "namespace": "exocen",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 79,
    "last_updated": "2016-06-21T13:42:00.258161Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 425171106,
        "id": 2526127,
        "repository": 617203,
        "creator": 707878,
        "last_updater": 707878,
        "last_updated": "2016-06-21T13:41:58.930367Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "Exocen/docker-rails"
  },
  "name": "exocen/docker-rails Docker container",
  "description": "Ruby on rails repo",
  "readme": "# Rails(+ Nginx, Unicorn) Dockerfile\n\n## Usage\n\n* Create `Dockerfile` to your project and paste below code.\n\n```\n# Dockerfile\nFROM exocen/docker-rails\nMAINTAINER Exocen\n\n# Add here your preinstall lib(e.g. imagemagick, mysql lib, pg lib, ssh config)\n\nEXPOSE 80\n```\n\n* Add `unicorn` gem(maybe uncomment `gem 'unicorn'` in `Gemfile`)\n\n## Build and run docker\n\n```\n\n# build your dockerfile\n$ docker build -t your/project .\n\n# run container\n$ docker run -d -p 80:80 -e SECRET_KEY_BASE=secretkey your/project\n\n\n```\n\n\n# Custom pre-install lib\n\nif your rails app required lib like imagemagick(or mysql) you must install that before `Install Rails App` section\n\n## Install imagemagick\n\n```\nRUN apt-get -qq -y install libmagickwand-dev imagemagick\n```\n\n## Install MySQL(for mysql, mysql2 gem)\n\n```\nRUN apt-get install -qq -y mysql-server mysql-client libmysqlclient-dev\n```\n\n## Install PostgreSQL lib(for pg gem)\n\n```\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\" > /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --force-yes libpq-dev\n```\n\n## Access bitbucket private repository\n\n```\nRUN mkdir /root/.ssh/\nADD id_rsa /root/.ssh/id_rsa\nRUN touch /root/.ssh/known_hosts\nRUN ssh-keyscan -t rsa bitbucket.org >> /root/.ssh/known_hosts\n```\n\nCopy your `~/.ssh/id_rsa` to `id_rsa` for bitbucket connection. if you don't need to bitbucket connection, create blank `id_rsa`. don't forget add `id_rsa` to `.gitignore`\n\n\n# Customize Nginx, Unicorn, foreman config\n\n## Nginx\n\n```\n# your Dockerfile\n...\nADD config/your-custom-nginx.conf /etc/nginx/sites-enabled/default\n...\n```\n\n## Unicorn\n\nplace your unicorn config to `config/unicorn.rb`\n\n\n## foreman\n\nplace your Procfile to app root\n",
  "dockerfile": "FROM exocen/docker-ruby:latest\nMAINTAINER Exo\n\nRUN apt-get update\n\n#Install imageMagic\nRUN apt-get install -qq -y imagemagick\n\n#Install Vim\nRUN apt-get install -qq -y vim\n\n# Install nodejs\nRUN apt-get install -qq -y nodejs\n\n# Intall software-properties-common for add-apt-repository\nRUN apt-get install -qq -y software-properties-common\n\n# Install Nginx.\nRUN add-apt-repository -y ppa:nginx/development\nRUN apt-get update -qq\nRUN apt-get install -qq -y nginx-extras\nRUN echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf\nRUN chown -R www-data:www-data /var/lib/nginx\n# Add default nginx config\nADD nginx-sites.conf /etc/nginx/sites-enabled/default\nADD nginx_https.conf /etc/nginx/default_https\n\n# Install foreman\nRUN gem install foreman\n\n# Install the latest postgresql lib for pg gem\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\" > /etc/apt/sources.list.d/pgdg.list && \\\n    apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --force-yes libpq-dev\n\n# Install MySQL(for mysql, mysql2 gem)\nRUN apt-get install -qq -y libmysqlclient-dev\n\n\n# Generate certificat\nWORKDIR  /etc/ssl/certs\nRUN openssl dhparam -dsaparam -out dhparam.pem 4096\n\n# Install Rails App\nWORKDIR /app\nONBUILD ADD Gemfile /app/Gemfile\nONBUILD ADD Gemfile.lock /app/Gemfile.lock\nONBUILD RUN bundle install --without development test\nONBUILD ADD . /app\n\n# Add letsEncrypt\nRUN wget https://dl.eff.org/certbot-auto\n\n# Add default unicorn config\nADD unicorn.rb /app/config/unicorn.rb\n\n# Add default foreman config\nADD Procfile /app/Procfile\n\nENV RAILS_ENV production\n\nCMD bundle exec rake assets:precompile && foreman start -f Procfile\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "nginx-sites.conf",
        "dest": "/etc/nginx/sites-enabled/default"
      },
      {
        "source": "nginx_https.conf",
        "dest": "/etc/nginx/default_https"
      },
      {
        "source": "unicorn.rb",
        "dest": "/app/config/unicorn.rb"
      },
      {
        "source": "Procfile",
        "dest": "/app/Procfile"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [
      "apt-get update",
      "apt-get install -qq -y imagemagick",
      "apt-get install -qq -y vim",
      "apt-get install -qq -y nodejs",
      "apt-get install -qq -y software-properties-common",
      "add-apt-repository -y ppa:nginx/development",
      "apt-get update -qq",
      "apt-get install -qq -y nginx-extras",
      "echo \"\\ndaemon off;\" >> /etc/nginx/nginx.conf",
      "chown -R www-data:www-data /var/lib/nginx",
      "gem install foreman",
      "echo \"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\" > /etc/apt/sources.list.d/pgdg.list &&     apt-get update &&     DEBIAN_FRONTEND=noninteractive     apt-get install -y --force-yes libpq-dev",
      "apt-get install -qq -y libmysqlclient-dev",
      "openssl dhparam -dsaparam -out dhparam.pem 4096",
      "wget https://dl.eff.org/certbot-auto"
    ],
    "workdir": [
      " /etc/ssl/certs",
      "/app"
    ],
    "from": "exocen/docker-ruby:latest",
    "maintainer": "Exo",
    "onbuild": "ADD . /app",
    "env": {
      "RAILS_ENV": "production"
    },
    "cmd": "bundle exec rake assets:precompile && foreman start -f Procfile"
  },
  "source_repository_url": "https://github.com/Exocen/docker-rails.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/Exocen/docker-rails",
  "docker_repository": "exocen/docker-rails",
  "docker_image": "exocen/docker-rails",
  "parameters_schema": {
    "RAILS_ENV": {
      "default": "production",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "exocen/docker-rails",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/exocen/docker-rails",
    "https://hub.docker.com/v2/repositories/exocen/docker-rails",
    "https://github.com/Exocen/docker-rails.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Ruby"
  ],
  "info_url": "https://hub.docker.com/r/exocen/docker-rails",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}