{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/tombull/haproxy",
    "repository_url": "https://hub.docker.com/v2/repositories/tombull/haproxy",
    "tags_url": "https://hub.docker.com/v2/repositories/tombull/haproxy/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/tombull/haproxy/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/tombull/haproxy/autobuild",
    "user": "tombull",
    "name": "haproxy",
    "namespace": "tombull",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 2455,
    "last_updated": "2016-09-27T01:54:49.855124Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "alpine",
        "full_size": 13143526,
        "id": 2476515,
        "repository": 602108,
        "creator": 567186,
        "last_updater": 567186,
        "last_updated": "2016-09-27T01:54:49.001941Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "debian-withconfd",
        "full_size": 60087152,
        "id": 2476371,
        "repository": 602108,
        "creator": 567186,
        "last_updater": 567186,
        "last_updated": "2016-09-27T01:54:27.061409Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "debian",
        "full_size": 60663705,
        "id": 2476601,
        "repository": 602108,
        "creator": 567186,
        "last_updater": 567186,
        "last_updated": "2016-09-27T01:50:55.311915Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "alpine-withconfd",
        "full_size": 13077504,
        "id": 2476336,
        "repository": 602108,
        "creator": 567186,
        "last_updater": 567186,
        "last_updated": "2016-09-27T01:49:58.442234Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 57964788,
        "id": 2450705,
        "repository": 602108,
        "creator": 567186,
        "last_updater": 567186,
        "last_updated": "2016-09-23T21:36:06.122523Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "tombull/haproxy"
  },
  "name": "tombull/haproxy Docker container",
  "description": "Docker container with HAProxy, transparent proxying enabled",
  "readme": "# HAProxy container - with transparent TCP proxying\n\nDocker container for HAProxy with transparent proxying and zero-downtime reloads\n\n## Zero-Downtime Reloads\n\nWhen HAProxy reloads using its 'graceful reload' feature, there's a tiny amount of time where a number of packets might be dropped in the process. This is well documented elsewhere around the internet. This container uses the 'drop syn packets' technique to mitigate that. There are more sophisticated techniques available which lead to lower delays on a restart. If you'd like to implement one of those (for example, a variation of [the Yelp qdisc technique](http://engineeringblog.yelp.com/2015/04/true-zero-downtime-haproxy-reloads.html) that works for incoming traffic or the [unbounce IP tableflip technique](http://inside.unbounce.com/product-dev/haproxy-reloads/)) in this container, feel free to fork. Pull requests gratefully received.\n\nBy default, the container assumes HAProxy will be listening on ports 80 & 443. If you're using HAProxy on different ports, you can alter the reload process using this environment variable when you run the container:\n\n```bash\ndocker run [your other options] -e \"HAPROXY_PORTS=1234,5678\" [capabilities options defined below] tombull/haproxy\n```\n\n## Transparent proxying\n\nYou can normally proxy HTTP and HTTPS transparently (appearing as if requests come from the original requesting IP address) ONLY if you terminate the request with HAProxy and then pass the request on with extra proxy headers. What about transparent TCP proxying? Where you just pass the request straight through to your web (or other TCP) server? Well HAProxy can do that. But it's a bit difficult with docker - you need some extra security capabilities.\n\n### Run the container with extra capabilities and host networking\n\nI've tried very hard to minimise the extra capabilities this container needs to function - but these are the absolute minimum unless you want to set some of the extra host settings outside the container.\n\n```bash\ndocker run [your other options] --volume=/proc/sys/net/ipv4/ip_nonlocal_bind:/var/proc/sys/net/ipv4/ip_nonlocal_bind --net=host --cap-add=SYS_MODULE --cap-add=NET_ADMIN --cap-add=NET_RAW tombull/haproxy\n```\n\nYou can remove the `--volume` directive if you set the following sysctl settings on the host:\n\n```bash\nnet.ipv4.ip_nonlocal_bind = 1\n```\n\nYou can remove the `--cap-add=SYS_MODULE` if you ensure the following kernel module is enabled on the host:\n\n```bash\nxt_TPROXY\n```\n\nRunning the container with `--net=host` and the capabilities `NET_ADMIN` and `NET_RAW` is completely unavoidable.\n\n**Final Note:** If you don't want transparent TCP proxying, and you just want graceful reloading, in theory you can just use the `NET_ADMIN` capability and nothing else. At best, you will get some odd but harmless iptables rules cropping up somewhere, at worst it's just going to break in weird and horrible ways. **I've not tested this, so I don't know what exactly will happen!**\n\n### When stopping the container\n\nAlways give the container enough time to shutdown. Otherwise you're going to be left with iptables rules and other stuff on your host system that you don't necessarily want.\n\n```bash\ndocker stop --time=300 your_container_name\n```\n\nThe time is in seconds and should be a little longer than your haproxy timeouts as set in your haproxy.cnf. Suggested: 300 seconds because there's a hard-coded timeout of 295 seconds in the container. The container will stop and remove iptables rules, etc before the end of the 300 seconds, guaranteed.\n",
  "dockerfile": "FROM haproxy:latest\n\nRUN apt-get update && apt-get install -y iptables && rm -rf /var/lib/apt/lists/*\n\nCOPY docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"haproxy\", \"-f\", \"/usr/local/etc/haproxy/haproxy.cfg\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "apt-get update && apt-get install -y iptables && rm -rf /var/lib/apt/lists/*"
    ],
    "workdir": [],
    "from": "haproxy:latest",
    "copy": "docker-entrypoint.sh /",
    "entrypoint": "[\"/docker-entrypoint.sh\"]",
    "cmd": "[\"haproxy\", \"-f\", \"/usr/local/etc/haproxy/haproxy.cfg\"]"
  },
  "source_repository_url": "https://github.com/tombull/haproxy.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/tombull/haproxy",
  "docker_repository": "tombull/haproxy",
  "docker_image": "tombull/haproxy",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "tombull/haproxy",
  "revision": "alpine",
  "uris": [
    "https://hub.docker.com/r/tombull/haproxy",
    "https://hub.docker.com/v2/repositories/tombull/haproxy",
    "https://github.com/tombull/haproxy.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://hub.docker.com/r/tombull/haproxy",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}