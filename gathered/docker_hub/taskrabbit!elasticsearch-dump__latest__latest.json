{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/taskrabbit/elasticsearch-dump",
    "repository_url": "https://hub.docker.com/v2/repositories/taskrabbit/elasticsearch-dump",
    "tags_url": "https://hub.docker.com/v2/repositories/taskrabbit/elasticsearch-dump/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/taskrabbit/elasticsearch-dump/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/taskrabbit/elasticsearch-dump/autobuild",
    "user": "taskrabbit",
    "name": "elasticsearch-dump",
    "namespace": "taskrabbit",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 2,
    "pull_count": 3718,
    "last_updated": "2016-09-25T23:43:55.740771Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 15060025,
        "id": 2945481,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-09-25T23:43:55.409501Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.4.2",
        "full_size": 14959273,
        "id": 4483597,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-08-24T12:19:14.830661Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.4.1",
        "full_size": 13762534,
        "id": 4413425,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-08-19T15:18:33.874690Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.4.0",
        "full_size": 13729654,
        "id": 3807796,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-07-12T19:23:25.908910Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.3.0",
        "full_size": 13727015,
        "id": 3545544,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-06-23T00:12:58.155327Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.2.2",
        "full_size": 13726033,
        "id": 3459366,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-06-16T18:34:40.906538Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.2.1",
        "full_size": 13725845,
        "id": 3455380,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-06-16T14:49:27.150339Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "v2.2.0",
        "full_size": 13723631,
        "id": 3331877,
        "repository": 677798,
        "creator": 816217,
        "last_updater": 816217,
        "last_updated": "2016-06-08T01:20:35.355052Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "taskrabbit/elasticsearch-dump"
  },
  "name": "taskrabbit/elasticsearch-dump Docker container",
  "description": "Import and export tools for elasticsearch",
  "readme": "elasticdump\n==================\n\n[![Join the chat at https://gitter.im/taskrabbit/elasticsearch-dump](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/taskrabbit/elasticsearch-dump?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nTools for moving and saving indicies.\n\n![picture](https://raw.github.com/taskrabbit/elasticsearch-dump/master/elasticdump.jpg)\n\n[![Nodei stats](https://nodei.co/npm/elasticdump.png?downloads=true)](https://npmjs.org/package/elasticdump)\n\n[![Build Status](https://secure.travis-ci.org/taskrabbit/elasticsearch-dump.png?branch=master)](http://travis-ci.org/taskrabbit/elasticsearch-dump)  [![Code Climate](https://codeclimate.com/github/taskrabbit/elasticsearch-dump/badges/gpa.svg)](https://codeclimate.com/github/taskrabbit/elasticsearch-dump)\n\n## Version Warnings!\n\n- Version `1.0.0` of Elasticdump changes the format of the files created by the dump.  Files created with version `0.x.x` of this tool are likely not to work with versions going forward.  To learn more about the breaking changes, vist the release notes for version [`1.0.0`](https://github.com/taskrabbit/elasticsearch-dump/releases/tag/v1.0.0).  If you recive an \"out of memory\" error, this is probaly the cause.\n- Version `2.0.0` of Elasticdump removes the `bulk` options.  These options were buggy, and differ between versions of Elasticsearch.  If you need to export multiple indexes, look for the `multielasticdump` section of the tool.\n- Version `2.1.0` of Elasticdump moves from using `scan/scroll` (ES 1.x) to just `scan` (ES 2.x).  This is a backwards-compatible change within Elasticsearch, but performance may suffer on Elasticsearch versions prior to 2.x.\n\n## Installing\n\n(local)\n```bash\nnpm install elasticdump\n./bin/elasticdump\n```\n\n(global)\n```bash\nnpm install elasticdump -g\nelasticdump\n```\n\n## Use\n\n### Standard Install\n\nelasticdump works by sending an `input` to an `output`.  Both can be either an elasticsearch URL or a File.\n\nElasticsearch:\n- format:  `{protocol}://{host}:{port}/{index}`\n- example: `http://127.0.0.1:9200/my_index`\n\nFile:\n- format:  `{FilePath}`\n- example: `/Users/evantahler/Desktop/dump.json`\n\nStdio:\n- format: stdin / stdout\n- format: `$`\n\nYou can then do things like:\n\n```bash\n# Copy an index from production to staging with analyzer and mapping:\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=http://staging.es.com:9200/my_index \\\n  --type=analyzer\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=http://staging.es.com:9200/my_index \\\n  --type=mapping\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=http://staging.es.com:9200/my_index \\\n  --type=data\n\n# Backup index data to a file:\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=/data/my_index_mapping.json \\\n  --type=mapping\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=/data/my_index.json \\\n  --type=data\n\n# Backup and index to a gzip using stdout:\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=$ \\\n  | gzip > /data/my_index.json.gz\n\n# Backup the results of a query to a file\nelasticdump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=query.json \\\n  --searchBody '{\"query\":{\"term\":{\"username\": \"admin\"}}}'\n```\n\n### Non-Standard Install\n\nIf Elasticsearch is not being served from the root directory the `--input-index` and\n`--output-index` are required. If they are not provided, the additional sub-directories will\nbe parsed for index and type.\n\nElasticsearch:\n- format:  `{protocol}://{host}:{port}/{sub}/{directory...}`\n- example: `http://127.0.0.1:9200/api/search`\n\n```bash\n# Copy a single index from a elasticsearch:\nelasticdump \\\n  --input=http://es.com:9200/api/search \\\n  --input-index=my_index \\\n  --output=http://es.com:9200/api/search \\\n  --output-index=my_index \\\n  --type=mapping\n\n# Copy a single type:\nelasticdump \\\n  --input=http://es.com:9200/api/search \\\n  --input-index=my_index/my_type \\\n  --output=http://es.com:9200/api/search \\\n  --output-index=my_index \\\n  --type=mapping\n\n# Copy a single type:\nelasticdump \\\n  --input=http://es.com:9200/api/search \\\n  --input-index=my_index/my_type \\\n  --output=http://es.com:9200/api/search \\\n  --output-index=my_index \\\n  --type=mapping\n```\n\n### Docker install\nIf you prefer using docker to use elasticdump, you can download this project from docker hub :\n```bash\ndocker pull taskrabbit/elasticsearch-dump\n```\nThen you can use it just by :\n- using `docker run --rm -ti taskrabbit/elasticsearch-dump`\n- remembering that you cannot use `localhost` or `127.0.0.1` as you ES host ;)\n- you'll need to mount your file storage dir `-v <your dumps dir>:<your mount point>` to your docker container\n\nExample:\n```bash\n# Copy an index from production to staging with mappings:\ndocker run --rm -ti taskrabbit/elasticsearch-dump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=http://staging.es.com:9200/my_index \\\n  --type=mapping\ndocker run --rm -ti taskrabbit/elasticsearch-dump \\\n  --input=http://production.es.com:9200/my_index \\\n  --output=http://staging.es.com:9200/my_index \\\n  --type=data\n```\n\n## Options\n\n```\nelasticdump: Import and export tools for elasticsearch\nversion: %%version%%\n\nUsage: elasticdump --input SOURCE --output DESTINATION [OPTIONS]\n\n--input\n                    Source location (required)\n--input-index\n                    Source index and type\n                    (default: all, example: index/type)\n--output\n                    Destination location (required)\n--output-index\n                    Destination index and type\n                    (default: all, example: index/type)\n--limit\n                    How many objects to move in batch per operation\n                    limit is approximate for file streams\n                    (default: 100)\n--debug\n                    Display the elasticsearch commands being used\n                    (default: false)\n--quiet\n                    Suppress all messages except for errors\n                    (default: false)\n--type\n                    What are we exporting?\n                    (default: data, options: [analyzer, data, mapping])\n--delete\n                    Delete documents one-by-one from the input as they are\n                    moved.  Will not delete the source index\n                    (default: false)\n--searchBody\n                    Preform a partial extract based on search results\n                    (when ES is the input,\n                    (default: '{\"query\": { \"match_all\": {} }, \"fields\": [\"*\"], \"_source\": true }'))\n--sourceOnly\n                    Output only the json contained within the document _source\n                    Normal: {\"_index\":\"\",\"_type\":\"\",\"_id\":\"\", \"_source\":{SOURCE}}\n                    sourceOnly: {SOURCE}\n                    (default: false)\n--ignore-errors\n                    Will continue the read/write loop on write error\n                    (default: false)\n--scrollTime\n                    Time the nodes will hold the requested search in order.\n                    (default: 10m)\n--maxSockets\n                    How many simultaneous HTTP requests can we process make?\n                    (default:\n                      5 [node <= v0.10.x] /\n                      Infinity [node >= v0.11.x] )\n--timeout\n                    Integer containing the number of milliseconds to wait for\n                    a request to respond before aborting the request. Passed\n                    directly to the request library. Mostly used when you don't\n                    care too much if you lose some data when importing\n                    but rather have speed.\n--offset\n                    Integer containing the number of rows you wish to skip\n                    ahead from the input transport.  When importing a large\n                    index, things can go wrong, be it connectivity, crashes,\n                    someone forgetting to `screen`, etc.  This allows you\n                    to start the dump again from the last known line written\n                    (as logged by the `offset` in the output).  Please be\n                    advised that since no sorting is specified when the\n                    dump is initially created, there's no real way to\n                    guarantee that the skipped rows have already been\n                    written/parsed.  This is more of an option for when\n                    you want to get most data as possible in the index\n                    without concern for losing some rows in the process,\n                    similar to the `timeout` option.\n                    (default: 0)\n--inputTransport\n                    Provide a custom js file to us as the input transport\n--outputTransport\n                    Provide a custom js file to us as the output transport\n--toLog\n                    When using a custom outputTransport, should log lines\n                    be appended to the output stream?\n                    (default: true, except for `$`)\n--awsAccessKeyId\n--awsSecretAccessKey\n                    When using Amazon Elasticsearch Service proteced by\n                    AWS Identity and Access Management (IAM), provide\n                    your Access Key ID and Secret Access Key\n--help\n                    This page\n```\n\n## Elasticsearch's Scroll API\nElasticsearch provides a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html) API to fetch all documents of an index starting form (and keeping) a consistent snapshot in time, which we use under the hood.  This method is safe to use for large exports since it will maintain the result set in cache for the given period of time.\n\nNOTE: only works for `--output`\n\n## MultiElasticDump\nThis package also ships with a second binary, `multielasticdump`.  This is a wrapper for the normal elasticdump binary, which provides a limited option set, but will run elasticdump in parallel across many indexes at once.  It runs a process which forks into `n` (default your running host's # of CPUs) subprocesses running elasticdump.\n\nThe limited option set includes:\n\n- `parallel`:   `os.cpus()`,\n- `match`:      `'^.*$'`,\n- `input`:      `null`,\n- `output`:     `null`,\n- `scrollTime`: `'10m'`,\n- `limit`:      `100`,\n- `offset`:     `0`,\n- `direction`:   `dump`\n\nIf the `--direction` is `dump`, which is the default, `--input` MUST be a URL for the base location of an ElasticSearch server (i.e. `http://localhost:9200`) and `--output` MUST be a directory. Each index that does match will have a data, mapping, and analyzer file created.\n\nFor loading files that you have dumped from multielasticsearch, `--direction` should be set to `load`, `--input` MUST be a directory of a multielasticsearch dump and `--output` MUST be a Elasticsearch server URL.\n\nThe new options, `--parallel` is how many forks should be run simultaneously and `--match` is used to filter which indexes should be dumped/loaded (regex).\n\n## Notes\n\n- this tool is likley to require Elasticsearch version 1.0.0 or higher\n- elasticdump (and elasticsearch in general) will create indices if they don't exist upon import\n- when exporting from elasticsearch, you can have export an entire index (`--input=\"http://localhost:9200/index\"`) or a type of object from that index (`--input=\"http://localhost:9200/index/type\"`).  This requires ElasticSearch 1.2.0 or higher\n- If elasticsearch is in a sub-directory, index and type must be provided with a separate argument (`--input=\"http://localhost:9200/sub/directory --input-index=index/type\"`). Using `--input-index=/` will include all indices and types.\n- we are using the `put` method to write objects.  This means new objects will be created and old objects with the same ID will be updated\n- the `file` transport will not overwrite any existing files, it will throw an exception of the file already exists\n- If you need basic http auth, you can use it like this: `--input=http://name:password@production.es.com:9200/my_index`\n- if you choose a stdio output (`--output=$`), you can also request a more human-readable output with `--format=human`\n- if you choose a stdio output (`--output=$`), all logging output will be suppressed\n\nInspired by https://github.com/crate/elasticsearch-inout-plugin and https://github.com/jprante/elasticsearch-knapsack\n\nBuilt at [TaskRabbit](https://www.taskrabbit.com)\n",
  "dockerfile": "FROM alpine:3.3\nMAINTAINER evan@evantahler.com\n\nRUN apk add --update nodejs\n\nRUN npm install elasticdump -g\n\nENTRYPOINT [\"/usr/lib/node_modules/elasticdump/bin/elasticdump\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "apk add --update nodejs",
      "npm install elasticdump -g"
    ],
    "workdir": [],
    "from": "alpine:3.3",
    "maintainer": "evan@evantahler.com",
    "entrypoint": "[\"/usr/lib/node_modules/elasticdump/bin/elasticdump\"]"
  },
  "source_repository_url": "https://github.com/taskrabbit/elasticsearch-dump.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/taskrabbit/elasticsearch-dump",
  "docker_repository": "taskrabbit/elasticsearch-dump",
  "docker_image": "taskrabbit/elasticsearch-dump",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "taskrabbit/elasticsearch-dump",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/taskrabbit/elasticsearch-dump",
    "https://hub.docker.com/v2/repositories/taskrabbit/elasticsearch-dump",
    "https://github.com/taskrabbit/elasticsearch-dump.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Search/Elasticsearch"
  ],
  "info_url": "https://hub.docker.com/r/taskrabbit/elasticsearch-dump",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}