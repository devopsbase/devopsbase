{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/rabbitmq",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/rabbitmq",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/rabbitmq/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/rabbitmq/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/rabbitmq/autobuild",
    "user": "bitnami",
    "name": "rabbitmq",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 1431,
    "last_updated": "2016-10-17T11:46:12.663561Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "development",
        "full_size": 141177406,
        "id": 3558556,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-10-17T11:46:12.316829Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "_",
        "full_size": 141175976,
        "id": 5450828,
        "repository": 762537,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T08:39:16.738997Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "3.6.5-r3",
        "full_size": 141174784,
        "id": 5049193,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T18:55:35.767257Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 141174661,
        "id": 3558590,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T18:52:57.757433Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.5-r2",
        "full_size": 138953945,
        "id": 4802571,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-12T18:51:14.390008Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.5-r1",
        "full_size": 138953539,
        "id": 4707656,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-07T07:45:31.782540Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.5-r0",
        "full_size": 136977751,
        "id": 4571566,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-08-30T04:58:54.484828Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.4-r0",
        "full_size": 136941699,
        "id": 4175007,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-08-05T09:29:45.860683Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.3-r0",
        "full_size": 136933917,
        "id": 3888184,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-18T17:10:56.477860Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.6.2-r0",
        "full_size": 136715059,
        "id": 3558663,
        "repository": 762537,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-06-23T16:13:10.200552Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-rabbitmq"
  },
  "name": "bitnami/rabbitmq Docker container",
  "description": "Bitnami Docker Image for RabbitMQ",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-rabbitmq/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-rabbitmq/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/rabbitmq)](https://hub.docker.com/r/bitnami/rabbitmq/)\n\n# What is RabbitMQ?\n\n> RabbitMQ is an open source message broker software that implements the Advanced Message Queuing Protocol (AMQP).\n> The RabbitMQ server is written in the Erlang programming language and is built on the Open Telecom Platform\n> framework for clustering and failover. Client libraries to interface with the broker are available for all major\n> programming languages.\n\n[https://www.rabbitmq.com/](https://www.rabbitmq.com/)\n\n# TLDR\n\n```bash\ndocker run --name rabbitmq bitnami/rabbitmq:latest\n```\n\n## Docker Compose\n\n```\nrabbitmq:\n  image: bitnami/rabbitmq:latest\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami RabbitMQ Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/rabbitmq).\n\n```bash\ndocker pull bitnami/rabbitmq:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the [list of available versions](https://hub.docker.com/r/bitnami/rabbitmq/tags/) in the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/rabbitmq:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/rabbitmq:latest https://github.com/bitnami/bitnami-docker-rabbitmq.git\n```\n\n# Persisting your application\n\nIf you remove every container and volume all your data will be lost, and the next time you run the image the application will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed. If you are using docker-compose your data will be persistent as long as you don't remove `rabbitmq*_data` data volumes. If you have run the containers manually or you want to mount the folders with persistent data in your host follow the next steps:\n\n> **Note:** If you have already started using your application, follow the steps on [backing](#backing-up-your-application) up to pull the data from your running container down to your host.\n\nThe image exposes a volume at /bitnami/rabbitmq for the RabbitMQ data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/rabbitmq-persistence:/bitnami/rabbitmq bitnami/rabbitmq:latest\n```\n\nor using Docker Compose:\n\n```\nrabbitmq:\n  image: bitnami/rabbitmq:latest\n  volumes:\n    - /path/to/rabbitmq-persistence:/bitnami/rabbitmq\n```\n\n# Linking\n\nIf you want to connect to your RabbitMQ server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a RabbitMQ node to a stats node\n\n### Step 1: Create a new network for the application:\n\n```\n$ docker network create rabbitmq_network\n```\n\n### Step 2: Run the RabbitMQ stats node:\n\n```\n$ docker run -d -p 15672:15672 --name rabbitmq-stats --net=rabbitmq_network -e RABBITMQ_NODE_NAME=rabbit@rabbitmq-stats -e RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3 bitnami/rabbitmq\n```\n\n*Note:* You need to give the container a name in order to RabbitMQ nodes to resolve the host\n\n### Step 3: Run the RabbitMQ queue nodes:\n\n```\n$ docker run -d --name rabbitmq-queue-disc1 --link rabbitmq-stats --net=rabbitmq_network -e RABBITMQ_NODE_TYPE=queue-disc -e RABBITMQ_NODE_NAME=rabbit@rabibitmq-queue-disc1 -e RABBITMQ_CLUSTER_NODE_NAME=rabbit@rabbitmq-stats -e RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3 bitnami/rabbitmq\n```\n\n*Note:* You can use a **ram** node by setting `RABBITMQ_NODE_TYPE=queue-ram` and `--name rabbitmq-queue-ramX`\n\n## Linking with Docker Compose\n\n### Step 1: Add a RabbitMQ entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add RabbitMQ to your application.\n\n```\nrabbitmq:\n  image: bitnami/rabbitmq:latest\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your RabbitMQ server from to include a link to the `rabbitmq` entry you added in Step 1.\n\n```\nmyapp:\n  image: myapp\n  links:\n    - rabbitmq:rabbitmq\n```\n\nInside `myapp`, use `rabbitmq` as the hostname for the RabbitMQ server.\n\n# Configuration\n\n## Environment variables\n\n When you start the rabbitmq image, you can adjust the configuration of the instance by passing one or more environment variables either on the docker-compose file or on the docker run command line. If you want to add a new environment variable:\n\n* For docker-compose add the variable name and value under the application section:\n\n```\napplication:\n  image: bitnami/rabbitmq:latest\n  ports:\n    - 15672:15672\n  environment:\n    - RABBITMQ_PASSWORD=my_password\n```\n\n * For manual execution add a `-e` option with each variable and value.\n\nAvailable variables:\n\n - `RABBITMQ_USERNAME`: RabbitMQ application username. Default: **user**\n - `RABBITMQ_PASSWORD`: RabbitMQ application password. Default: **bitnami**\n - `RABBITMQ_VHOST`: RabbitMQ application vhost. Default: **/**\n - `RABBITMQ_ERLANG_COOKIE`: Erlang cookie to determine whether different nodes are allowed to communicate with each other.\n - `RABBITMQ_NODE_TYPE`: Node Type. Valid values: *stats*, **queue-ram* or *queue-disc*. Default: **stats**\n - `RABBITMQ_NODE_NAME`: Node name. E.g.: *node@hostname* or *node* (If you don't specify the hostname, the env variables will be used.). Default **rabbit**\n - `RABBITMQ_NODE_PORT`: Node port. Default: **5672**\n - `RABBITMQ_CLUSTER_NODE_NAME`: Node name to cluster with. E.g.: **clusternode@hostname**\n - `RABBITMQ_MANAGER_PORT`: Manager port. Default: **15672**\n\n## Setting up a cluster\n\n### Docker Compose\n\nThis is the simplest way to run RabbitMQ with clustering configuration:\n\n#### Step 1: Add a stats node in your `docker-compose.yml`\n\nCopy the snippet below into your docker-compose.yml to add a RabbitMQ stats node to your cluster configuration.\n\n```\nversion: '2'\n\nservices:\n  stats:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=stats\n      - RABBITMQ_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    ports:\n      - '15672:15672'\n    volumes:\n      - 'rabbitmqstats_data:/bitnami/rabbitmq'\n```\n\n> **Note:** The name of the service (**stats**) is important so that a node could resolve the hostname to cluster with. (Note that the node name is `rabbit@stats`)\n\n#### Step 2: Add a queue node in your configuration\n\nUpdate the definitions for nodes you want your RabbitMQ stats node cluster with.\n\n```\n  queue-disc1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-disc\n      - RABBITMQ_NODE_NAME=rabbit@queue-disc1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqdisc1_data:/bitnami/rabbitmq'\n```\n\n> **Note:** Again, the name of the service (**queue-disc1**) is important so that each node could resolve the hostname of this one.\n\nWe are going to add a ram node too:\n\n```\n  queue-ram1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-ram\n      - RABBITMQ_NODE_NAME=rabbit@queue-ram1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqram1_data:/bitnami/rabbitmq'\n```\n\n#### Step 3: Add the volume description\n\n```\nvolumes:\n  rabbitmqstats_data:\n    driver: local\n  rabbitmqdisc1_data:\n    driver: local\n  rabbitmqram1_data:\n    driver: local\n```\n\nThe `docker-compose.yml` will look like this:\n\n```\nversion: '2'\n\nservices:\n  stats:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=stats\n      - RABBITMQ_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    ports:\n      - '15672:15672'\n    volumes:\n      - 'rabbitmqstats_data:/bitnami/rabbitmq'\n  queue-disc1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-disc\n      - RABBITMQ_NODE_NAME=rabbit@queue-disc1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqdisc1_data:/bitnami/rabbitmq'\n  queue-ram1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-ram\n      - RABBITMQ_NODE_NAME=rabbit@queue-ram1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERLANG_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqram1_data:/bitnami/rabbitmq'\n\nvolumes:\n  rabbitmqstats_data:\n    driver: local\n  rabbitmqdisc1_data:\n    driver: local\n  rabbitmqram1_data:\n    driver: local\n```\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/rabbitmq`. As mentioned in [Persisting your application](#persisting-your-application) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n# Logging\n\nThe Bitnami RabbitMQ Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs rabbitmq\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs rabbitmq\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your application\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop rabbitmq\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop rabbitmq\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm -v /path/to/rabbitmq-backups:/backups --volumes-from rabbitmq busybox \\\n  cp -a /bitnami/rabbitmq:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm -v /path/to/rabbitmq-backups:/backups --volumes-from `docker-compose ps -q rabbitmq` busybox \\\n  cp -a /bitnami/rabbitmq:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run -v /path/to/rabbitmq-backups/latest:/bitnami/rabbitmq bitnami/rabbitmq:latest\n```\n\nor using Docker Compose:\n\n```\nrabbitmq:\n  image: bitnami/rabbitmq:latest\n  volumes:\n    - /path/to/rabbitmq-backups/latest:/bitnami/rabbitmq\n```\n\n## Upgrade this application\n\nBitnami provides up-to-date versions of RabbitMQ, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/rabbitmq:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to\n`bitnami/rabbitmq:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v rabbitmq\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v rabbitmq\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name rabbitmq bitnami/rabbitmq:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start rabbitmq\n```\n\n# Notable changes\n\n## 3.6.5-r2\n\nThe following parameters have been renamed:\n\n|            From            |              To              |\n|----------------------------|------------------------------|\n| `RABBITMQ_ERLANGCOOKIE`    | `RABBITMQ_ERLANG_COOKIE`     |\n| `RABBITMQ_NODETYPE`        | `RABBITMQ_NODE_TYPE`         |\n| `RABBITMQ_NODEPORT`        | `RABBITMQ_NODE_PORT`         |\n| `RABBITMQ_NODENAME`        | `RABBITMQ_NODE_NAME`         |\n| `RABBITMQ_CLUSTERNODENAME` | `RABBITMQ_CLUSTER_NODE_NAME` |\n| `RABBITMQ_MANAGERPORT`     | `RABBITMQ_MANAGER_PORT`      |\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an\n[issue](https://github.com/bitnami/bitnami-docker-rabbitmq/issues), or submit a\n[pull request](https://github.com/bitnami/bitnami-docker-rabbitmq/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an\n[issue](https://github.com/bitnami/bitnami-docker-rabbitmq/issues). For us to provide better support,\nbe sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive\ninformation)\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\n\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_APP_NAME=rabbitmq \\\n    BITNAMI_IMAGE_VERSION=3.6.5-r3 \\\n    PATH=/opt/bitnami/erlang/bin:/opt/bitnami/rabbitmq/bin:$PATH\n\n# Additional modules required\nRUN bitnami-pkg install erlang-17.4-1 --checksum 944246e9367fccd0f92323004a9b9b92ff44d696356890d7ec93c18e759fe021\n\n# Install rabbitmq\nRUN bitnami-pkg unpack rabbitmq-3.6.5-1 --checksum e25fca74a7969fc868a6bea311a7c36bc538d15880bbba467434bf892a998879\n\nCOPY rootfs /\n\nVOLUME [\"/bitnami/rabbitmq\"]\n\n\nEXPOSE 4369 5672 25672 15672\n\nENTRYPOINT [\"/app-entrypoint.sh\"]\n\nCMD [\"nami\", \"start\", \"--foreground\", \"rabbitmq\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      4369
    ],
    "volume": [
      "[\"/bitnami/rabbitmq\"]"
    ],
    "run": [
      "bitnami-pkg install erlang-17.4-1 --checksum 944246e9367fccd0f92323004a9b9b92ff44d696356890d7ec93c18e759fe021",
      "bitnami-pkg unpack rabbitmq-3.6.5-1 --checksum e25fca74a7969fc868a6bea311a7c36bc538d15880bbba467434bf892a998879"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_APP_NAME": "rabbitmq",
      "": "",
      "BITNAMI_IMAGE_VERSION": "3.6.5-r3",
      "PATH": "/opt/bitnami/erlang/bin:/opt/bitnami/rabbitmq/bin:$PATH"
    },
    "copy": "rootfs /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"rabbitmq\"]"
  },
  "source_repository_url": "git@github.com:bitnami/bitnami-docker-rabbitmq.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-rabbitmq",
  "docker_repository": "bitnami/rabbitmq",
  "docker_image": "bitnami/rabbitmq",
  "parameters_schema": {
    "BITNAMI_APP_NAME": {
      "default": "rabbitmq",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_IMAGE_VERSION": {
      "default": "3.6.5-r3",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/erlang/bin:/opt/bitnami/rabbitmq/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        4369
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/rabbitmq",
  "revision": "development",
  "uris": [
    "https://hub.docker.com/r/bitnami/rabbitmq",
    "https://hub.docker.com/v2/repositories/bitnami/rabbitmq",
    "git@github.com:bitnami/bitnami-docker-rabbitmq.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Middleware/Messaging/RabbitMQ"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/rabbitmq",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}