{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/koding/mongo-auto",
    "repository_url": "https://hub.docker.com/v2/repositories/koding/mongo-auto",
    "tags_url": "https://hub.docker.com/v2/repositories/koding/mongo-auto/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/koding/mongo-auto/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/koding/mongo-auto/autobuild",
    "user": "koding",
    "name": "mongo-auto",
    "namespace": "koding",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 248,
    "last_updated": "2016-10-17T07:27:12.576934Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 139010883,
        "id": 5438825,
        "repository": 978052,
        "creator": 39958,
        "last_updater": 39958,
        "last_updated": "2016-10-17T07:27:12.260036Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "koding/koding"
  },
  "name": "koding/mongo-auto Docker container",
  "description": "Koding Mongo image auto build from master branch",
  "readme": "# Testing Node.js Code\n\nThis document aims to explain everything about running and writing tests for node.js code.\n\n## Infrastructure of Node.js testing\n\n[Mocha.js](http://mochajs.org/) is being used as the test framework. The assertion library that we use in our tests is [Chai.js](http://chaijs.com/).\n\n## Installation\n\nNo need to install anything to run tests within Koding repository.\nYou should be ready for testing when you clone Koding repository.\n\n## Running tests in local\n\nRunning tests in local is as easy as executing `./run $TEST_COMMAND`.\n`$TEST_COMMAND` can be `socialworkertests`, `nodeservertests`, and `nodetestfiles`.\nThese commands picks up the files with the extension `.test.coffee` and ignores the rest.\nSo be sure that your test files end with `.test.coffee`\n\n`socialworkertests` and `nodeservertests` are for the files in socialworker and servers directories.\nOn the other hand `nodetestfiles` can be used to run a single test file or all the files in directory.\nFor example `./run nodetestfiles pathToSingleFile.x.test.coffee` or `./run nodetestfiles aFolder`\n\n## Writing tests\n\nFor writing tests we have some rules to be followed:\n* [BDD api](http://chaijs.com/api/bdd/) with `expect` style of Chai.js should be used in tests.\n* [Coffee style guide](https://github.com/koding/styleguide-coffeescript) of Koding should be applied to test code.\n* Test files should be added to the same folder with the file being tested.\n* Adding separate test suites for main scenarios is strongly advised.\n```coffeescript\ndescribe 'servers.handlers.verifyslug', ->\n\n  describe 'when domain is available', ->\n  \n    it 'should send HTTP 200 if domain is valid', (done) ->\n      ...\n      \n  describe 'when domain is not available', ->\n  \n    it 'should send HTTP 400', (done) ->\n      ...\n```\n* Variables should be declared in test suite/case scope, global variables should be avoided.\n```coffeescript\n#NO\nverifySlugRequestParams = generateVerifySlugRequestParams\n      body   :\n        name : ''\n        \ndescribe 'servers.handlers.verifyslug', ->\n  \n  it 'should send HTTP 400 if team domain is not set', (done) ->\n    \n    request.post verifySlugRequestParams ...\n\n\n#YES\ndescribe 'servers.handlers.verifyslug', ->\n  \n  it 'should send HTTP 400 if team domain is not set', (done) ->\n\n    verifySlugRequestParams = generateVerifySlugRequestParams\n      body   :\n        name : ''\n        \n    request.post verifySlugRequestParams ...\n```\n\n## Testing process in wercker\n\nWercker connects to a test instance via ssh and calls\n`./run socialworkertests` and `./run nodeservertests` on the test instance.\n",
  "dockerfile": "FROM mongo:2.4\nMAINTAINER Sonmez Kartal <sonmez@koding.com>\n\nADD default-db-dump.tar.bz2 /opt/dump/\nRUN mkdir --parents /opt/db && \\\n    mongorestore --dbpath /opt/db /opt/dump/ && \\\n    chown --recursive mongodb:mongodb /opt/db && \\\n    rm --force --recursive /opt/dump\n\nCMD [\"--dbpath\", \"/opt/db\", \"--smallfiles\", \"--nojournal\"]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "default-db-dump.tar.bz2",
        "dest": "/opt/dump/"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [
      "mkdir --parents /opt/db &&     mongorestore --dbpath /opt/db /opt/dump/ &&     chown --recursive mongodb:mongodb /opt/db &&     rm --force --recursive /opt/dump"
    ],
    "workdir": [],
    "from": "mongo:2.4",
    "maintainer": "Sonmez Kartal <sonmez@koding.com>",
    "cmd": "[\"--dbpath\", \"/opt/db\", \"--smallfiles\", \"--nojournal\"]"
  },
  "source_repository_url": "https://github.com/koding/koding.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/koding/koding",
  "docker_repository": "koding/mongo-auto",
  "docker_image": "koding/mongo-auto",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "koding/mongo-auto",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/koding/mongo-auto",
    "https://hub.docker.com/v2/repositories/koding/mongo-auto",
    "https://github.com/koding/koding.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image",
    "Type/Devopsware/Build",
    "Type/Middleware/Data Store/Document-oriented/MongoDB"
  ],
  "info_url": "https://hub.docker.com/r/koding/mongo-auto",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}