{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/cassandra",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/cassandra",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/cassandra/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/cassandra/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/cassandra/autobuild",
    "user": "bitnami",
    "name": "cassandra",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 266,
    "last_updated": "2016-10-17T09:57:56.394161Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "development",
        "full_size": 221423748,
        "id": 3553088,
        "repository": 761849,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-10-17T09:57:55.788102Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "_",
        "full_size": 221423400,
        "id": 5450616,
        "repository": 761849,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T08:20:48.972069Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "latest",
        "full_size": 222615584,
        "id": 3553219,
        "repository": 761849,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-07T06:47:29.899166Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.7-r2",
        "full_size": 222615495,
        "id": 4706880,
        "repository": 761849,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-07T06:42:53.450699Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.7-r1",
        "full_size": 217073272,
        "id": 3797123,
        "repository": 761849,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-12T08:51:39.553013Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.7-r0",
        "full_size": 217009611,
        "id": 3553267,
        "repository": 761849,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-06-23T11:15:28.764283Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-cassandra"
  },
  "name": "bitnami/cassandra Docker container",
  "description": "Bitnami Docker Image for Cassandra",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-cassandra/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-cassandra/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/cassandra)](https://hub.docker.com/r/bitnami/cassandra/)\n# What is Cassandra?\n\n> [Apache Cassandra](http://cassandra.apache.org) is a free and open-source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients.\n\n# TLDR\n\n```bash\ndocker run --name cassandra bitnami/cassandra:latest\n```\n\n## Docker Compose\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami Cassandra Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/cassandra).\n\n```bash\ndocker pull bitnami/cassandra:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the [list of available versions](https://hub.docker.com/r/bitnami/cassandra/tags/) in the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/cassandra:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/cassandra:latest https://github.com/bitnami/bitnami-docker-cassandra.git\n```\n\n# Persisting your application\n\nIf you remove every container and volume all your data will be lost, and the next time you run the image the application will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed. If you are using docker-compose your data will be persistent as long as you don't remove `application_data` data volumes. If you have run the containers manually or you want to mount the folders with persistent data in your host follow the next steps:\n\n> **Note!** If you have already started using your application, follow the steps on [backing](#backing-up-your-application) up to pull the data from your running container down to your host.\n\nThe image exposes a volume at `/bitnami/cassandra` for the Cassandra data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/cassandra-persistence:/bitnami/cassandra bitnami/cassandra:latest\n```\n\nor using Docker Compose:\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n  volumes:\n    - /path/to/cassandra-persistence:/bitnami/cassandra\n```\n\n# Linking\n\nIf you want to connect to your Cassandra server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a Cassandra client container to the Cassandra server container\n\n### Step 1: Run the Cassandra image with a specific name\n\nThe first step is to start our Cassandra server.\n\nDocker's linking system uses container ids or names to reference containers. We can explicitly\nspecify a name for our Cassandra server to make it easier to connect to other containers.\n\n```bash\ndocker run --name cassandra bitnami/cassandra:latest\n```\n\n### Step 2: Run Cassandra as a client and link to our server\n\nNow that we have our Cassandra server running, we can create another container that links to it by\ngiving Docker the `--link` option. This option takes the id or name of the container we want to link\nit to as well as a hostname to use inside the container, separated by a colon. For example, to have\nour Cassandra server accessible in another container with `server` as it's hostname we would pass\n`--link cassandra:server` to the Docker run command.\n\nThe Bitnami Cassandra Docker Image also ships with a Cassandra client, but by default it will start a\nserver. To start the client instead, we can override the default command Docker runs by stating a\ndifferent command to run after the image name.\n\n```bash\ndocker run --rm -it --link cassandra:server bitnami/cassandra cqlsh server\n```\n\nWe started the Cassandra client passing in the `-h` option that allows us to specify the hostname of the\nserver, which we set to the hostname we created in the link.\n\n**Note!**\nYou can also run the Cassandra client in the same container the server is running in using the Docker\n[exec](https://docs.docker.com/reference/commandline/cli/#exec) command.\n\n```bash\ndocker exec -it cassandra-server cqlsh\n```\n\n## Linking with Docker Compose\n\n### Step 1: Add a Cassandra entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add Cassandra to your application.\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your Cassandra server from to include a link to the `cassandra` entry you added in Step 1.\n\n```\nmyapp:\n  image: myapp\n  links:\n    - cassandra:cassandra\n```\n\nInside `myapp`, use `cassandra` as the hostname for the Cassandra server.\n\n# Configuration\n\n## Environment variables\n When you start the cassandra image, you can adjust the configuration of the instance by passing one or more environment variables either on the docker-compose file or on the docker run command line. If you want to add a new environment variable:\n\n * For docker-compose add the variable name and value under the application section:\n```yaml\napplication:\n  image: bitnami/cassandra:latest\n  environment:\n    - CASSANDRA_TRANSPORT_PORT=7000\n```\n\n * For manual execution add a `-e` option with each variable and value:\n\n```\n $ docker run -d -e CASSANDRA_PORT=7000 -p 7000:7000 --name cassandra -v /your/local/path/bitnami/cassandra:/bitnami/cassandra --network=cassandra_network bitnami/cassandra\n```\n\nAvailable variables:\n\n - `CASSANDRA_TRANSPORT_PORT`: Inter-node cluster communication port. Default: **7000**\n - `CASSANDRA_SSL_TRANSPORT_PORT`: SSL inter-node cluster communication port. Default: **7001**\n - `CASSANDRA_JMX_PORT`: JMX connections port. Default: **7199**\n - `CASSANDRA_CQL_PORT`: Client port. Default: **9042**.\n - `CASSANDRA_RPC_PORT`: Thrift RPC service connection port. Default: **9160**\n - `CASSANDRA_USER`: Cassandra user name. Defaults: **cassandra**\n - `CASSANDRA_PASSWORD`: Cassandra user password. Default: **cassandra**\n - `CASSANDRA_HOST`: Hostname used to configure Cassandra. It can be either an IP or a domain. If left empty, it will be resolved to the machine IP.\n - `CASSANDRA_CLUSTER_NAME`: Cluster name to configure Cassandra.. Defaults: **My Cluster**\n - `CASSANDRA_SEEDS`: Hosts that will act as Cassandra seeds. No defaults.\n - `CASSANDRA_ENDPOINT_SNITCH`: Snitch name (which determines which data centers and racks nodes belong to). Default **SimpleSnitch**\n\n## Setting the server password on first run\n\nPassing the `CASSANDRA_PASSWORD` environment variable when running the image for the first time will set the Cassandra server password to the value of `CASSANDRA_PASSWORD`.\n\n```bash\ndocker run --name cassandra -e CASSANDRA_PASSWORD=password123 bitnami/cassandra:latest\n```\n\nor using Docker Compose:\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n  environment:\n    - CASSANDRA_PASSWORD=password123\n```\n\n## Setting up a cluster\n\nA cluster can easily be setup with the Bitnami Cassandra Docker Image using the following environment variables\n\n - `CASSANDRA_HOST`: Hostname used to configure Cassandra. It can be either an IP or a domain. If left empty, it will be resolved to the machine IP.\n - `CASSANDRA_CLUSTER_NAME`: Cluster name to configure Cassandra.. Defaults: **My Cluster**\n - `CASSANDRA_SEEDS`: Hosts that will act as Cassandra seeds. No defaults.\n - `CASSANDRA_ENDPOINT_SNITCH`: Snitch name (which determines which data centers and racks nodes belong to). Default **SimpleSnitch**\n\n### Step 1: Create a new network.\n\n```bash\ndocker network create cassandra_network\n```\n\n### Step 2: Create a first node.\n\n```bash\ndocker run --name cassandra-node1 \\\n  --net=cassandra_network \\\n  -p 9042:9042 \\\n  -e CASSANDRA_CLUSTER_NAME=cassandra-cluster \\\n  -e CASSANDRA_SEEDS=cassandra-node1,cassandra-node2 \\\n  bitnami/cassandra:latest\n```\nIn the above command the container is added to a cluster named `cassandra-cluster` using the `CASSANDRA_CLUSTER_NAME`. The `CASSANDRA_CLUSTER_HOSTS` parameter set the name of the nodes that set the cluster so we will need to launch other container for the second node. Finally the `CASSANDRA_NODE_NAME` parameter allows to indicate a known name for the node, otherwise cassandra will generate a randon one.\n\n\n### Step 3: Create a second node\n\n```bash\ndocker run --name cassandra-node2 \\\n  --net=cassandra_network \\\n  -e CASSANDRA_CLUSTER_NAME=cassandra-cluster \\\n  -e CASSANDRA_SEEDS=cassandra-node1,cassandra-node2 \\\n  bitnami/cassandra:latest\n```\n\nIn the above command a new cassandra node is being added to the cassandra cluster indicated by `CASSANDRA_CLUSTER_NAME`.\n\nYou now have a two node Cassandra cluster up and running which can be scaled by adding/removing nodes.\n\nWith Docker Compose the cluster configuration can be setup using:\n\n```yaml\nversion: '2'\nservices:\n  cassandra-node1:\n    image: bitnami/cassandra:latest\n    environment:\n      - CASSANDRA_CLUSTER_NAME=cassandra-cluster\n      - CASSANDRA_SEEDS=cassandra-node1,cassandra-node2\n\n  cassandra-node2:\n    image: bitnami/cassandra:latest\n    environment:\n      - CASSANDRA_CLUSTER_NAME=cassandra-cluster\n      - CASSANDRA_SEEDS=cassandra-node1,cassandra-node2\n```\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/cassandra`. As as mentioned in [Persisting your application](#persisting-your-application) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n### Step 1: Run the Cassandra image\n\nRun the Cassandra image, mounting a directory from your host.\n\n```bash\ndocker run --name cassandra -v /path/to/cassandra-persistence:/bitnami/cassandra bitnami/cassandra:latest\n```\n\nor using Docker Compose:\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n  volumes:\n    - /path/to/cassandra-persistence:/bitnami/cassandra\n```\n\n### Step 2: Edit the configuration\n\nEdit the configuration on your host using your favorite editor.\n\n```bash\nvi /path/to/cassandra-persistence/conf/cassandra.yaml\n```\n\n### Step 3: Restart Cassandra\n\nAfter changing the configuration, restart your Cassandra container for changes to take effect.\n\n```bash\ndocker restart cassandra\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose restart cassandra\n```\n\n**Further Reading:**\n\n  - [Cassandra Configuration Documentation](http://docs.datastax.com/en/cassandra/3.x/cassandra/configuration/configTOC.html)\n\n# Logging\n\nThe Bitnami Cassandra Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs cassandra\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs cassandra\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your container\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop cassandra\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop cassandra\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm -v /path/to/cassandra-backups:/backups --volumes-from cassandra busybox \\\n  cp -a /bitnami/cassandra:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm -v /path/to/cassandra-backups:/backups --volumes-from `docker-compose ps -q cassandra` busybox \\\n  cp -a /bitnami/cassandra:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run -v /path/to/cassandra-backups/latest:/bitnami/cassandra bitnami/cassandra:latest\n```\n\nor using Docker Compose:\n\n```\ncassandra:\n  image: bitnami/cassandra:latest\n  volumes:\n    - /path/to/cassandra-backups/latest:/bitnami/cassandra\n```\n\n## Upgrade this image\n\nBitnami provides up-to-date versions of Cassandra, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/cassandra:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to\n`bitnami/cassandra:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v cassandra\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v cassandra\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name cassandra bitnami/cassandra:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start cassandra\n```\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an [issue](https://github.com/bitnami/bitnami-docker-cassandra/issues), or submit a [pull request](https://github.com/bitnami/bitnami-docker-cassandra/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an [issue](https://github.com/bitnami/bitnami-docker-cassandra/issues). For us to provide better support, be sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive information)\n\n# License\nCopyright (c) 2016 Bitnami\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\n\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_APP_NAME=cassandra \\\n    BITNAMI_IMAGE_VERSION=3.9-r0 \\\n    PATH=/opt/bitnami/cassandra/bin:/opt/bitnami/java/bin:/opt/bitnami/python/bin:$PATH\n\n# Additional modules required\nRUN bitnami-pkg install python-2.7.12-1 --checksum 1ab49b32453c509cf6ff3abb9dbe8a411053e3b811753a10c7a77b4bc19606df\nRUN bitnami-pkg install java-1.8.0_101-0 --checksum 66b64f987634e1348141e0feac5581b14e63064ed7abbaf7ba5646e1908219f9\n\n# Install cassandra\nRUN bitnami-pkg unpack cassandra-3.9-0 --checksum bb0ff4d2e03e06e2141572c0068ce2fbfa6ec10bdbe4308a3a7a571b9cbde87f\n\nCOPY rootfs /\n\nVOLUME [\"/bitnami/cassandra\"]\n\nEXPOSE 7000 7001 9042 9160\n\nENTRYPOINT [\"/app-entrypoint.sh\"]\n\nCMD [\"nami\", \"start\", \"--foreground\", \"cassandra\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      7000
    ],
    "volume": [
      "[\"/bitnami/cassandra\"]"
    ],
    "run": [
      "bitnami-pkg install python-2.7.12-1 --checksum 1ab49b32453c509cf6ff3abb9dbe8a411053e3b811753a10c7a77b4bc19606df",
      "bitnami-pkg install java-1.8.0_101-0 --checksum 66b64f987634e1348141e0feac5581b14e63064ed7abbaf7ba5646e1908219f9",
      "bitnami-pkg unpack cassandra-3.9-0 --checksum bb0ff4d2e03e06e2141572c0068ce2fbfa6ec10bdbe4308a3a7a571b9cbde87f"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_APP_NAME": "cassandra",
      "": "",
      "BITNAMI_IMAGE_VERSION": "3.9-r0",
      "PATH": "/opt/bitnami/cassandra/bin:/opt/bitnami/java/bin:/opt/bitnami/python/bin:$PATH"
    },
    "copy": "rootfs /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"cassandra\"]"
  },
  "source_repository_url": "git@github.com:bitnami/bitnami-docker-cassandra.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-cassandra",
  "docker_repository": "bitnami/cassandra",
  "docker_image": "bitnami/cassandra",
  "parameters_schema": {
    "BITNAMI_APP_NAME": {
      "default": "cassandra",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_IMAGE_VERSION": {
      "default": "3.9-r0",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/cassandra/bin:/opt/bitnami/java/bin:/opt/bitnami/python/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        7000
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/cassandra",
  "revision": "development",
  "uris": [
    "https://hub.docker.com/r/bitnami/cassandra",
    "https://hub.docker.com/v2/repositories/bitnami/cassandra",
    "git@github.com:bitnami/bitnami-docker-cassandra.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Middleware/Data Store/Key-Value/Cassandra"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/cassandra",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}