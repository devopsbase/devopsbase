{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/trivago/gollum",
    "repository_url": "https://hub.docker.com/v2/repositories/trivago/gollum",
    "tags_url": "https://hub.docker.com/v2/repositories/trivago/gollum/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/trivago/gollum/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/trivago/gollum/autobuild",
    "user": "trivago",
    "name": "gollum",
    "namespace": "trivago",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 1153,
    "last_updated": "2016-10-12T20:24:38.497592Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 265317553,
        "id": 2926479,
        "repository": 617208,
        "creator": 643876,
        "last_updater": 643876,
        "last_updated": "2016-10-12T20:23:55.385522Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "base-latest",
        "full_size": 254636518,
        "id": 2526105,
        "repository": 617208,
        "creator": 403637,
        "last_updater": 643876,
        "last_updated": "2016-10-12T20:23:15.442957Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "trivago/gollum"
  },
  "name": "trivago/gollum Docker container",
  "description": "Gollum docker image",
  "readme": "![Gollum](docs/gollum.png)\n\n## Gollum\n\n[![GoDoc](https://godoc.org/github.com/trivago/gollum?status.svg)](https://godoc.org/github.com/trivago/gollum)\n[![Documentation Status](https://readthedocs.org/projects/gollum/badge/?version=latest)](http://gollum.readthedocs.org/en/latest/)\n[![Go Report Card](https://goreportcard.com/badge/github.com/trivago/gollum)](https://goreportcard.com/report/github.com/trivago/gollum)\n[![Build Status](https://travis-ci.org/trivago/gollum.svg?branch=v0.4.3dev)](https://travis-ci.org/trivago/gollum)\n[![License](https://img.shields.io/badge/license-apache%202.0-lightgrey.svg)](https://github.com/trivago/gollum/blob/master/LICENSE)\n\nGollum is a n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations.\n\nThere are a few basic terms used throughout Gollum:\n\n* \"Consumers\" read data from other services\n* \"Producers\" write data to other services\n* \"Streams\" route data between consumers and producers\n* A \"message\" is a set of data passed between consumers and producers\n* \"Formatters\" can transform the content of messages\n* \"Filters\" can block/pass messages based on their content\n\nWriting a custom plugin does not require you to change any additional code besides your new plugin file.\n\n## Documentation\n\nA how-to-use documentation can be found on [read the docs](http://gollum.readthedocs.org/en/latest/). Developers should use the [godoc pages](https://godoc.org/github.com/trivago/gollum) to get started. Plugin documentation is generated from the plugin source code. So if you feel that something is missing a look into the code may help.\n\n## Consumers (reading data)\n\n* `Console` read from stdin.\n* `File` read from a file (like tail).\n* `Http` read http requests.\n* `Kafka` read from a [Kafka](http://kafka.apache.org/) topic.\n* `Kinesis` read from a [Kinesis](https://aws.amazon.com/de/kinesis/) stream.\n* `Profiler` Generate profiling messages.\n* `Proxy` use in combination with a proxy producer to enable two-way communication.\n* `Socket` read from a socket (gollum specific protocol).\n* `Syslogd` read from a socket (syslogd protocol).\n* `SystemD` read from the SystemD journal.\n\n## Producers (writing data)\n\n* `Console` write to stdin or stdout.\n* `ElasticSearch` write to [elasticsearch](http://www.elasticsearch.org/) via http/bulk.\n* `File` write to a file. Supports log rotation and compression.\n* `Firehose` write data to a [Firehose](https://aws.amazon.com/de/firehose/) stream.\n* `HTTPRequest` HTTP request forwarder.\n* `InfluxDB` send data to an [InfluxDB](https://influxdb.com) server.\n* `Kafka` write to a [Kafka](http://kafka.apache.org/) topic.\n* `Kinesis` write data to a [Kinesis](https://aws.amazon.com/de/kinesis/) stream.\n* `Null` like /dev/null.\n* `Proxy` two-way communication proxy for simple protocols.\n* `S3` write data to [Amazon S3](https://aws.amazon.com/de/s3/) stream.\n* `Scribe` send messages to a [Facebook scribe](https://github.com/facebookarchive/scribe) server.\n* `Socket` send messages to a socket (gollum specific protocol).\n* `Spooling` write messages to disk and retry them later.\n* `Websocket` send messages to a websocket.\n\n## Streams (multiplexing)\n\n* `Broadcast` send to all producers in a stream.\n* `Random` send to a random producer in a stream.\n* `RoundRobin` switch the producer after each send in a round robin fashion.\n* `Route` convert streams to one or multiple others\n\n## Formatters (modifying data)\n\n* `Base64Encode` encode messages to base64.\n* `Base64Decode` decode messages from base64.\n* `Clear` clears a message\n* `CollectdToInflux08` convert [CollectD](https://collectd.org) 0.8 data to [InfluxDB](https://influxdb.com) compatible values.\n* `CollectdToInflux09` convert [CollectD](https://collectd.org) 0.9 data to [InfluxDB](https://influxdb.com) compatible values.\n* `CollectdToInflux10` convert [CollectD](https://collectd.org) 0.10 data to [InfluxDB](https://influxdb.com) compatible values.\n* `ExtractJSON` extracts a single field from a JSON object.\n* `Envelope` add a prefix and/or postfix string to a message.\n* `Forward` write the message without modifying it.\n* `Hostname` prepend the current machine's hostname to a message.\n* `Identifier` hash the message to generate a (mostly) unique id.\n* `JSON` write the message as a JSON object. Messages can be parsed to generate fields.\n* `ProcessJSON` Modify fields of a JSON encoded message.\n* `ProcessTSV` Modify fields of a TSV encoded message.\n* `Runlength` prepend the length of the message.\n* `Sequence` prepend the sequence number of the message.\n* `SplitToJSON` tokenize a message and put the values into JSON fields.\n* `StreamName` prepend the name of a stream to the payload.\n* `StreamRevert` route a message to the previous stream (e.g. after it has been routed).\n* `StreamRoute` route a message to another stream by reading a prefix.\n* `Timestamp` prepend a timestamp to the message.\n\n## Filters (filtering data)\n\n* `All` lets all message pass.\n* `JSON` blocks or lets json messages pass based on their content.\n* `None` blocks all messages.\n* `Rate` blocks messages that go over a given messages per second rate.\n* `RegExp` blocks or lets messages pass based on a regular expression.\n* `Stream` blocks or lets messages pass based on their stream name.\n\n## Installation\n\n### From source\n\nInstallation from source requires the installation of the [Go toolchain](http://golang.org/).  \nGollum supports the Go 1.5 vendor experiment that is automatically enabled when using the provided makefile.\nWith Go 1.6 and later you can also use `go build` directly without additional modifications.\nBuilds with Go 1.4 or earlier versions are not officially supported and might require additional steps and modifications.\n\n```\n$ make\n$ ./gollum --help\n```\n\nYou can use the make file coming with gollum to trigger cross platform builds.  \nMake will produce ready to deploy .zip files with the corresponding platform builds inside the dist folder.\n\n## Usage\n\nTo test gollum you can make a local profiler run with a predefined configuration:\n\n```\n$ gollum -c config/profile.conf -ps -ll 3\n```\n\nBy default this test profiles the theoretic maximum throughput of 256 Byte messages.  \nYou can enable different producers in that config to test the write performance of these producers, too.\n\n## Configuration\n\nConfiguration files are written in the YAML format and have to be loaded via command line switch.\nEach plugin has a different set of configuration options which are currently described in the plugin itself, i.e. you can find examples in the GoDocs.\n\n### Commandline\n\n#### `-c` or `--config` [file]\n\nUse a given configuration file.\n\n#### `-h` or `--help`\n\nPrint this help message.\n\n#### `-ll` or `--loglevel` [0-3]\n\nSet the loglevel [0-3]. Higher levels produce more messages as in 0=Errors, 1=Warnings, 2=Notes, 3=Debug.\n\n#### `-m` or `--metrics` [port]\n\nPort to use for metric queries. Set 0 to disable.\n\n#### `-n` or `--numcpu` [number]\n\nNumber of CPUs to use. Set 0 for all CPUs.\n\n#### `-p` or `--pidfile` [file]\n\nWrite the process id into a given file.\n\n#### `-pc` or `--profilecpu` [file]\n\nWrite CPU profiler results to a given file.\n\n#### `-pm` or `--profilemem` [file]\n\nWrite heap profile results to a given file.\n\n#### `-ps` or `--profilespeed`\n\nWrite msg/sec measurements to log.\n\n#### `-r` or `--report`\n\nPrint detailed version report and quit.\n\n#### `-tc` or `--testconfig` [file]\n\nTest a given configuration file and exit.\n\n#### `-tr` or `--trace` [file]\n\nWrite trace results to a given file.\n\n#### `-v` or `--version`\n\nPrint version information and quit.\n\n## Building\n\n### Mac OS X\n\nThe easiest way to install go is by using homebrew:  \n`brew install go`\n\n### Linux\n\nDownload Go from the [golang website](https://golang.org/dl/) and unzip it to e.g. /usr/local/go.  \nYou have to set the GOROOT environment variable to the folder you chose:  \n`export GOROOT=/usr/local/go`\n\n### Prerequisites\n\nIf you do not already have a GOPATH set up you need to create one.  \nThe location is free of choice, we prefer to put it into each users home folder:\n```\nmkdir -p ~/go\nexport GOPATH=$(HOME)/go\n```\n\nYou can download gollum via `go get github.com/trivago/gollum` or clone it directly into your GOPATH.  \nIf you choose this way you need to download your dependencies directly from that folder\n```\nmkdir -p $(GOPATH)/src/github.com/trivago\ncd $(GOPATH)/src/github.com/trivago\ngit clone https://github.com/trivago/gollum.git\ncd gollum\n```\n\n### Build\n\nBuilding gollum is as easy as `make` or `go build`.\nWhen using Go 1.5 make sure to enable the go vendor experiment by setting `export GO15VENDOREXPERIMENT=1` or use `make`.\nIf you want to do cross platform builds use `make all` or specify one of the following platforms instead of \"all\":\n * `current` build for current OS (default)\n * `freebsd` build for FreeBSD \n * `linux` build for Linux x64\n * `mac` build for MacOS X\n * `pi` build for Linux ARM\n * `win` build for Windows\n \nThere are also supplementary targets for make:\n * `clean` clean all artifacts created by the build process\n * `test` run unittests\n * `vendor` install gvt and update all dependencies\n * `aws` build for Linux x64 and generate an [Elastic Beanstalk](https://aws.amazon.com/de/elasticbeanstalk/) package\n \nIf you want to use native plugins (contrib/native) you will have to enable the corresponding imports in the file contrib/loader.go.\nDoing so will disable the possibility to do cross-platform builds for most users.\n\n### Dockerfile\n\nThe repository contains a `Dockerfile` which enables you to build and run gollum inside a Docker container.\n\n```\n$ docker build -t trivago/gollum .\n$ docker run -it --rm trivago/gollum -c config/profile.conf -ps -ll 3\n```\n\nTo use your own configuration you could run:\n\n```\n$ docker run -it --rm -v /path/to/config.conf:/etc/gollum/gollum.conf:ro trivago/gollum -c /etc/gollum/gollum.conf\n```\n\n## License\n\nThis project is released under the terms of the [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0).\n",
  "dockerfile": "FROM trivago/gollum:base-latest\n\nCOPY . /go/src/github.com/trivago/gollum\n\nRUN make\n\nRUN chmod +x /go/src/github.com/trivago/gollum/gollum\n\nENTRYPOINT [\"/go/src/github.com/trivago/gollum/gollum\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "make",
      "chmod +x /go/src/github.com/trivago/gollum/gollum"
    ],
    "workdir": [],
    "from": "trivago/gollum:base-latest",
    "copy": ". /go/src/github.com/trivago/gollum",
    "entrypoint": "[\"/go/src/github.com/trivago/gollum/gollum\"]"
  },
  "source_repository_url": "https://github.com/trivago/gollum.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/trivago/gollum",
  "docker_repository": "trivago/gollum",
  "docker_image": "trivago/gollum",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "trivago/gollum",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/trivago/gollum",
    "https://hub.docker.com/v2/repositories/trivago/gollum",
    "https://github.com/trivago/gollum.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/Container Image/Docker Image"
  ],
  "info_url": "https://hub.docker.com/r/trivago/gollum",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}