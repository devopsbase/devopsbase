{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/iitgdocker/apache",
    "repository_url": "https://hub.docker.com/v2/repositories/iitgdocker/apache",
    "tags_url": "https://hub.docker.com/v2/repositories/iitgdocker/apache/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/iitgdocker/apache/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/iitgdocker/apache/autobuild",
    "user": "iitgdocker",
    "name": "apache",
    "namespace": "iitgdocker",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 98,
    "last_updated": "2016-10-17T01:09:41.663863Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "5.6",
        "full_size": 108296910,
        "id": 5389383,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:09:41.300497Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.4.6",
        "full_size": 108296949,
        "id": 5472489,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:08:00.902344Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.5",
        "full_size": 108296925,
        "id": 5392077,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:06:14.327505Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "5.4",
        "full_size": 108296880,
        "id": 5392040,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:04:25.195335Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 108296982,
        "id": 5386215,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:02:34.608910Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "7.0",
        "full_size": 108296881,
        "id": 5391906,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-17T01:00:44.998410Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "7.1",
        "full_size": 126556196,
        "id": 5391941,
        "repository": 971659,
        "creator": 1140383,
        "last_updater": 1140383,
        "last_updated": "2016-10-12T04:19:07.890125Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "iitggithub/apache"
  },
  "name": "iitgdocker/apache Docker container",
  "description": "Hardened Apache SSL PHP AIDE mod_security provided as is or used as a base for production use.",
  "readme": "# Apache/PHP Based Docker Container\n\nThis image is a CentOS 7 based container which contains slightly more secure versions of Apache 2.4.6 w/ openssl and mod_security web application firewall and AIDE (Advanced Intrusion Detection Environment) file and directory integrity checker.\n\nVersions 5+ include a PHP (depending which version you use) complete with the PHP suhosin patch which was was designed to protect servers and users from known and unknown flaws in PHP applications and the PHP core.\n\n# Notes\n\nThe dockerfile is based on some hardening guides for php, apache and openssl.\n\n# Supported PHP versions\n\nPHP Version | Git branch | Tag name\n------------| ---------- |---------\n5.6         | master     | latest\n7.1         | 7.1        | 7.1\n7.0         | 7.0        | 7.0\n5.6         | 5.6        | 5.6\n5.5         | 5.5        | 5.5\n5.4         | 5.4        | 5.4\nnone        | 2.4.6      | 2.4.6\n\n\n# Getting Started\n\nThere's two ways to get up and running, the easy way and the hard way.\n\n## The Hard Way (Standalone)\n\nFire up apache\n\n```\ndocker run -d --name apache -p 80:80 -p 443:443 -v /data/apache/conf.d:/data/conf.d -v /data/apache/html:/var/www/html:ro -v /data/apache/ssl:/etc/httpd/ssl:ro -v /data/apache/aide:/var/lib/aide -v /data/apache/log:/var/log/httpd iitgdocker/apache:latest\n```\n\n## The Easy Way (Docker Compose)\n\nThe github repo contains a docker-compose.yml you can use as a base. The docker-compose.yml is compatible with docker-compose 1.5.2+.\n\n```\nweb-server:\n  image: iitgdocker/apache:latest\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n  volumes:\n    - /data/apache/conf.d:/data/conf.d\n    - /data/apache/html:/var/www/html:ro\n    - /data/apache/ssl:/etc/httpd/ssl:ro\n    - /data/apache/aide:/var/lib/aide\n    - /data/apache/log:/var/log/httpd\n  #environment:\n    #- APACHE_SERVERNAME=wingsof.chicken.com\n    - MOD_SECURITY_ENABLE=1\n```\n\nBy running 'docker-compose up -d' from within the same directory as your docker-compose.yml, you'll be able to bring the container up.\n\n# Volumes\n\n## SSL Certificates\n\nIf you want to use your own SSL certificates you'll need to mount a volume onto /etc/httpd/ssl. Your certificates MUST be named as follows:\n\n```\nserver.crt\nserver.key\nserver-chain.crt\nca-bundle.crt\n```\n\nrun.sh will check for each of those files before modifying /etc/httpd/conf.d/ssl.conf accordingly.\n\n## Apache Configuration Files /data/conf.d\n\nApache will look in /data/conf.d for any files that end in .conf. By mounting a volume onto /data/conf.d you can add your own application specific configuration files which will be loaded when the container starts.\n\n## Apache Document Root /var/www/html\n\nThe default /var/www/html directory is available for your web files. Stick them here. Using the default configuration above, these directories will be mounted read only (ro) meaning that they cannot be modified from within the container. Obviously, if you have dynamic content or you need to support file uploads within this directory, you can remove the :ro from the volume mount command.\n\n## Apache logs directory /var/log/httpd\n\nExposes the apache log directory. This is useful for palming the logs off to a centralised syslog server or something like fail2ban to automatically ban troublesome IPs.\n\n## AIDE Integrity Database /var/lib/aide\n\n/var/lib/aide contains the AIDE integrity database file aide.db.tar.gz. If this file does not exist when the container starts, it will be created automatically. It is strongly recommended that this file be backed up to a secure location. This database is your baseline from which all filesystem changes are compared against so keep a copy somewhere safe.\n\nIf run.sh finds a file called aide.conf in this directory, AIDE will use this instead of its default configuration file.\n\nIf changes are made to the container after its been started, you'll probably need to update the AIDE integrity database. You can do this from outside of the container by running the following command against your container:\n\nReplace container_name with the name/id of your running container.\n\n```\ndocker exec -it <container_name> /usr/sbin/aide --init\ndocker exec -it <container_name> mv -f /tmp/aide.db.new.gz /var/lib/aide/aide.db.gz\n```\n\n# Environment Variables\n\nOther than the standard mysql container environment variables which can be better explained on their respective docker pages, there aren't any to note (yet).\n\nVariable                 | Default Value (docker-compose) | Description\n------------------------ | ------------------------------ |------------\nAPACHE_SERVERNAME        | unset                          | Sets the Apache server name.\nMOD_SECURITY_ENABLE      | 1                              | Enables the mod_security web application firewall. 0 to disable.\n\n# Apache Mod Security\n\nThis docker image has apache mod_security enabled by default using the 2.2.6 ruleset. If you don't know, ModSecurity is one of the Apache server modules that provides website protection by defending from hackers and other malicious attacks. It is a set of rules with regular expressions that helps to instantly ex-filtrate the commonly known exploits. Modsecurity obstructs the processing of invalid data (code injection attacks) to reinforce and nourish server's security.\n\nSo in other words, don't disable it if you can help it!\n\nUnfortunately, i don't yet know of a way to make this more configurable. If you think of a way to do this, leave a comment below.\n\n# The End\n",
  "dockerfile": "FROM iitgdocker/aide:latest\n\nMAINTAINER \"The Ignorant IT Guy\" <iitg@gmail.com>\n\n# Make placeholder directories for the end user to mount against\nRUN mkdir -p /data/conf.d\n\nRUN yum -y --nogpgcheck install \\\n                                httpd \\\n                                mod_ssl \\\n                                mod_security \\\n                                mod_security_crs && \\\n                                yum clean all\n\nRUN sed -i -e 's/<Directory \"\\/var\\/www\\/html\">/<Directory \"\\/var\\/www\\/html\">\\n<LimitExcept GET POST HEAD>\\ndeny from all\\n<\\/LimitExcept>/1' \\\n           -e 's/Options Indexes.*/Options -Indexes -Includes +FollowSymLinks/g' /etc/httpd/conf/httpd.conf\n\n# Allow overrides. Surely, there's gotta be a better way to do this...\nRUN awk '/    AllowOverride None/{count++;if(count==2){sub(\"    AllowOverride None\",\"    AllowOverride All\")}}1' /etc/httpd/conf/httpd.conf >/etc/httpd/conf/httpd.conf.new\nRUN mv /etc/httpd/conf/httpd.conf.new /etc/httpd/conf/httpd.conf\n\n# Secure Apache server as much as we can\nCOPY secure.conf /etc/httpd/conf.d/secure.conf\n\n# Disable unused modules. It would be nice to disable more but\n# it may make this container less portable.\n# source: http://www.thegeekstuff.com/2011/03/apache-hardening/\nRUN sed -i \\\n           -e 's/LoadModule info_module/#LoadModule info_module/g' \\\n           -e 's/LoadModule userdir_module/#LoadModule userdir_module/g' \\\n           -e 's/LoadModule status_module/#LoadModule status_module/g' \\\n           -e 's/LoadModule env_module/#LoadModule env_module/g' \\\n           -e 's/LoadModule alias_module/#LoadModule alias_module/g' \\\n           -e 's/LoadModule include_module/#LoadModule include_module/g' \\\n           -e 's/LoadModule version_module/#LoadModule version_module/g' \\\n            /etc/httpd/conf.modules.d/00-base.conf\n\n# These files are also unnecessary\nRUN rm -vf /etc/httpd/conf.modules.d/00-systemd.conf /etc/httpd/conf.d/autoindex.conf /etc/httpd/conf.d/welcome.conf\n\n# Configure SSL\nRUN sed -i -e 's/SSLProtocol.*/SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1/g' \\\n           -e 's/^SSLCipherSuite.*/SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256/g' \\\n           -e 's/#SSLHonorCipherOrder on/SSLHonorCipherOrder on\\nHeader add Strict-Transport-Security \"max-age=15768000\"/g' \\\n           -e 's/Listen 443 https/Listen 443 https\\nSSLCompression off\\nSSLUseStapling on\\nSSLStaplingResponderTimeout 5\\nSSLStaplingReturnResponderErrors off\\nSSLStaplingCache shmcb:\\/var\\/run\\/ocsp\\(128000\\)\\n/g' \\\n           /etc/httpd/conf.d/ssl.conf\n\n# Include end user apache configuration files\nRUN echo -e '# Include custom apache configuration files\\nIncludeOptional /data/conf.d/*.conf' >/etc/httpd/conf.d/custom.conf\n\n# Make sure /var/www/html knows who's boss.\nRUN chown -R apache:apache /var/www/html\n\nEXPOSE 80\nEXPOSE 443\n\nCOPY run.sh /run.sh\nRUN chmod +x /run.sh\nCMD [\"/run.sh\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80,
      443
    ],
    "volume": [],
    "run": [
      "mkdir -p /data/conf.d",
      "yum -y --nogpgcheck install                                 httpd                                 mod_ssl                                 mod_security                                 mod_security_crs &&                                 yum clean all",
      "sed -i -e 's/<Directory \"\\/var\\/www\\/html\">/<Directory \"\\/var\\/www\\/html\">\\n<LimitExcept GET POST HEAD>\\ndeny from all\\n<\\/LimitExcept>/1'            -e 's/Options Indexes.*/Options -Indexes -Includes +FollowSymLinks/g' /etc/httpd/conf/httpd.conf",
      "awk '/    AllowOverride None/{count++;if(count==2){sub(\"    AllowOverride None\",\"    AllowOverride All\")}}1' /etc/httpd/conf/httpd.conf >/etc/httpd/conf/httpd.conf.new",
      "mv /etc/httpd/conf/httpd.conf.new /etc/httpd/conf/httpd.conf",
      "sed -i            -e 's/LoadModule info_module/#LoadModule info_module/g'            -e 's/LoadModule userdir_module/#LoadModule userdir_module/g'            -e 's/LoadModule status_module/#LoadModule status_module/g'            -e 's/LoadModule env_module/#LoadModule env_module/g'            -e 's/LoadModule alias_module/#LoadModule alias_module/g'            -e 's/LoadModule include_module/#LoadModule include_module/g'            -e 's/LoadModule version_module/#LoadModule version_module/g'             /etc/httpd/conf.modules.d/00-base.conf",
      "rm -vf /etc/httpd/conf.modules.d/00-systemd.conf /etc/httpd/conf.d/autoindex.conf /etc/httpd/conf.d/welcome.conf",
      "sed -i -e 's/SSLProtocol.*/SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1/g'            -e 's/^SSLCipherSuite.*/SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256/g'            -e 's/#SSLHonorCipherOrder on/SSLHonorCipherOrder on\\nHeader add Strict-Transport-Security \"max-age=15768000\"/g'            -e 's/Listen 443 https/Listen 443 https\\nSSLCompression off\\nSSLUseStapling on\\nSSLStaplingResponderTimeout 5\\nSSLStaplingReturnResponderErrors off\\nSSLStaplingCache shmcb:\\/var\\/run\\/ocsp\\(128000\\)\\n/g'            /etc/httpd/conf.d/ssl.conf",
      "echo -e '# Include custom apache configuration files\\nIncludeOptional /data/conf.d/*.conf' >/etc/httpd/conf.d/custom.conf",
      "chown -R apache:apache /var/www/html",
      "chmod +x /run.sh"
    ],
    "workdir": [],
    "from": "iitgdocker/aide:latest",
    "maintainer": "\"The Ignorant IT Guy\" <iitg@gmail.com>",
    "copy": "run.sh /run.sh",
    "cmd": "[\"/run.sh\"]"
  },
  "source_repository_url": "https://github.com/iitggithub/apache.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/iitggithub/apache",
  "docker_repository": "iitgdocker/apache",
  "docker_image": "iitgdocker/apache",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        80,
        443
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "iitgdocker/apache",
  "revision": "5.6",
  "uris": [
    "https://hub.docker.com/r/iitgdocker/apache",
    "https://hub.docker.com/v2/repositories/iitgdocker/apache",
    "https://github.com/iitggithub/apache.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Type/Middleware/Runtime/PHP",
    "Type/Middleware/Web Server/Apache HTTP Server"
  ],
  "info_url": "https://hub.docker.com/r/iitgdocker/apache",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}