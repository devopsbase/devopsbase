{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/migmartri/bitnami-docker-rails",
    "repository_url": "https://hub.docker.com/v2/repositories/migmartri/bitnami-docker-rails",
    "tags_url": "https://hub.docker.com/v2/repositories/migmartri/bitnami-docker-rails/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/migmartri/bitnami-docker-rails/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/migmartri/bitnami-docker-rails/autobuild",
    "user": "migmartri",
    "name": "bitnami-docker-rails",
    "namespace": "migmartri",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 72,
    "last_updated": "2016-10-17T08:27:19.268891Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 216071115,
        "id": 3475176,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-10-17T08:27:18.865637Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "stacksmith_update-dockerfile-pj0nqfa",
        "full_size": 216181126,
        "id": 5036467,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-09-23T18:49:25.369999Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "bump-rails-5",
        "full_size": 214115100,
        "id": 4615270,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-09-01T02:07:23.632224Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "stacksmith_update-dockerfile-u9fs9c0",
        "full_size": 193944711,
        "id": 4562059,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-08-29T17:34:59.082398Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "migmartri-patch-1",
        "full_size": 191967290,
        "id": 4539382,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-08-27T00:56:52.054462Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "rickspencer3-single-image",
        "full_size": 191958561,
        "id": 4502601,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-08-25T13:27:06.945697Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "che",
        "full_size": 192145578,
        "id": 4458451,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-08-23T13:53:11.216332Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "stacksmith_update-dockerfile-t4y3aqa",
        "full_size": 191373500,
        "id": 3790626,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-07-11T22:00:46.084682Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "remove-compose",
        "full_size": 191024337,
        "id": 3580785,
        "repository": 750782,
        "creator": 140130,
        "last_updater": 140130,
        "last_updated": "2016-06-24T20:59:57.241589Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-rails"
  },
  "name": "migmartri/bitnami-docker-rails Docker container",
  "description": "Bitnami Ruby on Rails Docker Image\n",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-rails/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-rails/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/rails)](https://hub.docker.com/r/bitnami/rails/)\n# Rails Application Development using Bitnami Docker Images\n\nWe increasingly see developers adopting two strategies for development. Using a so called “micro services” architecture and using containers for development. At Bitnami, we have developed tools and assets that dramatically lowers the overhead for developing with this approach.\n\nIf you’ve never tried to start a project with containers before, or you have tried it and found the advice, tools, and documentation to be chaotic, out of date, or wrong, then this tutorial may be for you.\n\nIn this tutorial we walk you through using the Bitnami docker images during the development lifecycle of a Ruby on Rails application.\n\n### Eclipse Che Developer Workspace\n\nYou can download this repository locally to your computer to start working with the tutorial or just click the link below to automatically create and launch a Rails on-demand Eclipse Che developer workspace on Codenvy:\n\n[![Contribute](http://beta.codenvy.com/factory/resources/codenvy-contribute.svg)](https://beta.codenvy.com/f/?url=https%3A%2F%2Fgithub.com%2Fbitnami%2Fbitnami-docker-rails%2Ftree%2Fche)\n\nYou can find the configuation files used on the previous link in the [Che branch](https://github.com/bitnami/bitnami-docker-rails/tree/che). For more information about Eclipse Che workspaces check  the [official documentation](https://eclipse-che.readme.io/docs/introduction)\n\nIf you want to start developing locally skip this step and follow the documentation below.\n\n# Why Docker?\n\nWe think developers are adopting containers for development because they offer many of the same advantages as developing in VMs, but with lower overhead in terms of developer effort and development machine resources. With Docker, you can create a development environment for your code, and teammates can pull the whole development environment, install it, and quickly get started writing code or fixing bugs.\n\nDocker development environments are more likely to be reproducible than VMs because the definition of each container and how to build it is captured in a Dockerfile.\n\nDocker also has a well known and standard API so tools and cloud services are readily available for docker containers.\n\n# The Bitnami Approach\n\nWhen we designed and built our development containers, we kept the following guiding principles in mind:\n\n1. Infrastructure should be effort free. By this, we mean, there are certain services in an application that are merely configured. For example, databases and web servers are essential parts of an application, but developers should depend on them like plumbing. They should be there ready to use, but developers should not be forced to waste time and effort creating the plumbing.\n\n2. Production deployment is a late bound decision. Containers are great for development. Sometimes they are great for production, sometimes they are not. If you choose to get started with Bitnami containers for development, it is an easy matter to decide later between monolithic and services architectures, between VMs and Containers, between Cloud and bare metal deployment. This is because Bitnami builds containers specifically with flexibility of production deployment in mind. We ensure that a service running in an immutable and well tested container will behave precisely the same as the same service running in a VM or bare metal.\n\n# Assumptions\n\nFirst, we assume that you have the following components properly setup:\n\n- [Docker Engine](https://www.docker.com/products/docker-engine)\n- [Docker Compose](https://www.docker.com/products/docker-compose)\n- [Docker Machine](https://www.docker.com/products/docker-machine)\n\n> The [Docker documentation](https://docs.docker.com/) walks you through installing each of these components.\n\nWe also assume that you have some beginner-level experience using these tools.\n\n> **Note**:\n>\n> If your host OS is Linux you may skip setting up Docker Machine since you'll be able to launch the containers directly in the host OS environment.\n\nFurther, we also assume that your application will be using a database. In fact, we assume that it will be using [MariaDB](http://mariadb.org/). Of course, for a real project you may be using a different database, or, in fact, no database. But, this is a common set up and will help you learn the development approach.\n\n## Download the Bitnami Orchestration File for Rails development\n\nWe assume that you're starting the development of the [Ruby on Rails](http://rubyonrails.org/) application from scratch. So lets begin by creating a directory for the application source where we'll be bootstrapping a Rails application:\n\n```bash\n$ mkdir ~/workdir/myapp\n$ cd ~/workdir/myapp\n```\n\nNext, download our Docker Compose orchestration file for Rails development:\n\n```bash\n$ curl -L \"https://raw.githubusercontent.com/bitnami/bitnami-docker-rails/master/docker-compose.yml\" > docker-compose.yml\n```\n\n> We encourage you to take a look at the contents of the orchestration file to get an idea of the services that will be started for Rails development.\n\n## Run\n\nLets put the orchestration file to the test:\n\n```bash\n$ docker-compose up\n```\n\nThis command reads the contents of the orchestration file and begins downloading the Docker images required to launch each of the services listed therein. Depending on the network speeds this can take anywhere from a few seconds to a couple minutes.\n\nAfter the images have been downloaded, each of the services listed in the orchestration file is started, which in this case are the `mariadb` and `myapp` services.\n\nAs mentioned earlier, the `mariadb` service provides a database backend which can be used for the development of a data-driven Rails application. The service is setup using the [bitnami/mariadb](https://github.com/bitnami/bitnami-docker-mariadb) docker image and is configured with the [default credentials](https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run).\n\nThe second service thats started is named `myapp` and uses the Bitnami Rails development image. The service mounts the current working directory (`~/workdir/myapp`) at the `/app` location in the container and provides all the necessary infrastucture to get you started developing a data-driven Rails application.\n\nOnce the WEBrick application server has been started, visit port `3000` of the Docker Machine in your favourite web browser and you'll be greeted by Rails welcome page.\n\nLets inspect the contents of the `~/workdir/myapp` directory:\n\n```bash\n~/workdir/myapp # ls\nGemfile             app/                db/                 public/\nGemfile.lock        bin/                docker-compose.yml  test/\nREADME.rdoc         config/             lib/                tmp/\nRakefile            config.ru           log/                vendor/\n```\n\nYou can see that we have a new Rails application bootstrapped in the `~/workdir/myapp` directory of the host and is being served by the WEBrick application server running inside the Bitnami Rails development container.\n\nSince the application source resides on the host, you can use your favourite IDE for developing the application. Only the execution of the application occurs inside the isolated container environment.\n\nThat’s all there is to it. Without actually installing a single Rails component on the host you have a completely isolated and highly reproducible Rails development environment which can be shared with the rest of the team to get them started building the next big feature without worrying about the plumbing involved in setting up the development environment. Let Bitnami do that for you.\n\nIn the next sections we take a look at some of the common tasks that are involved during the development of a Rails application and how we go about executing those tasks.\n\n## Executing commands\n\nYou may recall that we've not installed a single Rails component on the host and that the entire Rails development environment is running inside the `myapp` service container. This means that if we wanted to execute [rake](http://guides.rubyonrails.org/command_line.html#rake) or any other Rails command, we'd have to execute it inside the container.\n\nThis may sound like a complex task to achieve. But don't worry, Docker Compose makes it very simple to execute tasks inside a service container using the `exec` command. The general form of the command looks something like the following:\n\n```bash\n$ docker-compose exec <service> <command>\n```\n\nThis instructs Docker Compose to execute the command specified by `<command>` inside the service container specified by `<service>`. The return value of the `docker-compose` command will reflect that of the specified command.\n\nWith this information lets try listing the available rake tasks:\n\n```bash\n$ docker-compose exec myapp bundle exec rake -T\n```\n\nNext, lets try to get some information about our development environment by executing the `about` task:\n\n```bash\n$ docker-compose exec myapp bundle exec rake about\n```\n\nHow about loading the Rails `console`?\n\n```bash\n$ docker-compose exec myapp rails console\n```\n\nYou get the idea..\n\nBefore we wrap up this subject, lets take a look at one of the most common tasks that's performed during the development lifecycle of a Rails application. Yes, we're going to use `rails generate` to generate a scaffold.\n\n```bash\n$ docker-compose exec myapp rails generate scaffold User name:string email:string\n```\n\nThe above command will create the `User` model with `name` and `email` properties. Before we can start using this new scaffold we need to apply the migrations, to the `app_developmemt` database, that implement the `User` model.\n\n```bash\n$ docker-compose exec myapp bundle exec rake db:migrate\n```\n\nSure enough, we're executing the `db:migrate` rake task\n\n> **Note**\n>\n> Database migrations are automatically applied during the start up of the `myapp` service container. This means that the `myapp` service could also be restarted to apply the database migrations.\n> ```bash\n> $ docker-compose restart myapp\n> ```\n\nThats it! Visit the `/users` resource of the Rails application and you should be able to interact with the newly created `User` model.\n\n**Installing Gems**\n\nThe functionality of a Rails application can be augmented using Ruby gems. Thousands of gems developed by the Rails development community are available on [Rubygems.org](https://rubygems.org/) and can be used to quickly add functionality to our Rails applications. In this section, we look at adding new gems for our application.\n\nAs a Rails developer you must already be aware that additional gems required by a Rails application should be specified in the `Gemfile` of the Rails application.\n\nFor demonstration purposes we'll add the latest version of the `httparty` gem to our `Gemfile` using:\n\n```bash\n$ echo \"gem 'httparty'\" >> Gemfile\n```\n\nAfter making changes to the `Gemfile`, all we need to do is restart the `myapp` service using:\n\n```bash\n$ docker-compose restart myapp\n```\n\nWhen the `myapp` service is restarted, it checks to see if any new gems need to be installed using `bundle check`. If this is found to be the case, then `bundle install` command is invoked to install the missing gems.\n\nThat all there is to it. We hope that you find our Rails development image useful in your quest to world domination. Happy hacking!\n",
  "dockerfile": "## BUILDING\n##   (from project root directory)\n##   $ docker build -t ruby-for-bitnami-bitnami-docker-rails .\n##\n## RUNNING\n##   $ docker run -p 3000:3000 ruby-for-bitnami-bitnami-docker-rails\n##\n## CONNECTING\n##   Lookup the IP of your active docker host using:\n##     $ docker-machine ip $(docker-machine active)\n##   Connect to the container at DOCKER_IP:3000\n##     replacing DOCKER_IP for the IP of your active docker host\n\nFROM gcr.io/stacksmith-images/ubuntu-buildpack:14.04-r10\n\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV STACKSMITH_STACK_ID=\"hw4vyh1\" \\\n    STACKSMITH_STACK_NAME=\"Ruby for bitnami/bitnami-docker-rails\" \\\n    STACKSMITH_STACK_PRIVATE=\"1\"\n\nRUN bitnami-pkg install ruby-2.3.1-2 --checksum 041625b9f363a99b2e66f0209a759abe7106232e0fcc3a970958bf73d5a4d9b0\n\nENV PATH=/opt/bitnami/ruby/bin:$PATH\n\n## STACKSMITH-END: Modifications below this line will be unchanged when regenerating\n\n\nRUN bitnami-pkg install imagemagick-6.7.5-10-3 --checksum 617e85a42c80f58c568f9bc7337e24c03e35cf4c7c22640407a7e1e16880cf88\nRUN bitnami-pkg install mysql-libraries-10.1.13-0 --checksum 71ca428b619901123493503f8a99ccfa588e5afddd26e0d503a32cca1bc2a389\n\n# Ruby on Rails template\nRUN gem install rails -v 5.0.0.1 --no-document\n\n# Bundle the gems required for a new application\nRUN rails new /tmp/temp_app --database mysql --quiet && rm -r /tmp/temp_app\nRUN gem install therubyracer\n\nENV RAILS_ENV=development\nENV BITNAMI_APP_NAME=rails\nENV BITNAMI_IMAGE_VERSION=5.0.0.1-r1\n\nUSER bitnami\nWORKDIR /app\nEXPOSE 3000\n\nCOPY rootfs/ /\nENTRYPOINT [\"/app-entrypoint.sh\"]\nCMD [\"bundle\", \"exec\", \"rails\", \"server\", \"-b\", \"0.0.0.0\", \"-p\", \"3000\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      3000
    ],
    "volume": [],
    "run": [
      "bitnami-pkg install ruby-2.3.1-2 --checksum 041625b9f363a99b2e66f0209a759abe7106232e0fcc3a970958bf73d5a4d9b0",
      "bitnami-pkg install imagemagick-6.7.5-10-3 --checksum 617e85a42c80f58c568f9bc7337e24c03e35cf4c7c22640407a7e1e16880cf88",
      "bitnami-pkg install mysql-libraries-10.1.13-0 --checksum 71ca428b619901123493503f8a99ccfa588e5afddd26e0d503a32cca1bc2a389",
      "gem install rails -v 5.0.0.1 --no-document",
      "rails new /tmp/temp_app --database mysql --quiet && rm -r /tmp/temp_app",
      "gem install therubyracer"
    ],
    "workdir": [
      "/app"
    ],
    "from": "gcr.io/stacksmith-images/ubuntu-buildpack:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "STACKSMITH_STACK_ID": "\"hw4vyh1\"",
      "": "",
      "STACKSMITH_STACK_NAME": "\"Ruby",
      "for": "bitnami/bitnami-docker-rails\"",
      "STACKSMITH_STACK_PRIVATE": "\"1\"",
      "PATH": "/opt/bitnami/ruby/bin:$PATH",
      "RAILS_ENV": "development",
      "BITNAMI_APP_NAME": "rails",
      "BITNAMI_IMAGE_VERSION": "5.0.0.1-r1"
    },
    "user": "bitnami",
    "copy": "rootfs/ /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"bundle\", \"exec\", \"rails\", \"server\", \"-b\", \"0.0.0.0\", \"-p\", \"3000\"]"
  },
  "source_repository_url": "https://github.com/bitnami/bitnami-docker-rails.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-rails",
  "docker_repository": "migmartri/bitnami-docker-rails",
  "docker_image": "migmartri/bitnami-docker-rails",
  "parameters_schema": {
    "STACKSMITH_STACK_ID": {
      "default": "\"hw4vyh1\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "STACKSMITH_STACK_NAME": {
      "default": "\"Ruby",
      "type": "string",
      "mapping": "environment_variable"
    },
    "for": {
      "default": "bitnami/bitnami-docker-rails\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "STACKSMITH_STACK_PRIVATE": {
      "default": "\"1\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/ruby/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "RAILS_ENV": {
      "default": "development",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_NAME": {
      "default": "rails",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_IMAGE_VERSION": {
      "default": "5.0.0.1-r1",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        3000
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "migmartri/bitnami-docker-rails",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/migmartri/bitnami-docker-rails",
    "https://hub.docker.com/v2/repositories/migmartri/bitnami-docker-rails",
    "https://github.com/bitnami/bitnami-docker-rails.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Ruby",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image"
  ],
  "info_url": "https://hub.docker.com/r/migmartri/bitnami-docker-rails",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}