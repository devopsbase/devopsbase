{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/jfloff/alpine-python",
    "repository_url": "https://hub.docker.com/v2/repositories/jfloff/alpine-python",
    "tags_url": "https://hub.docker.com/v2/repositories/jfloff/alpine-python/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/jfloff/alpine-python/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/jfloff/alpine-python/autobuild",
    "user": "jfloff",
    "name": "alpine-python",
    "namespace": "jfloff",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 3,
    "pull_count": 11211,
    "last_updated": "2016-10-10T10:51:34.741581Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "2.7",
        "full_size": 71287860,
        "id": 1558698,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:51:34.354164Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7-slim",
        "full_size": 16933964,
        "id": 5196780,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:49:52.686916Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.4",
        "full_size": 79306741,
        "id": 1558697,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:49:14.885611Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7-onbuild",
        "full_size": 71289324,
        "id": 1564994,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:47:24.931075Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.4-slim",
        "full_size": 21859303,
        "id": 5196786,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:46:45.999090Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.4-onbuild",
        "full_size": 79308668,
        "id": 1565005,
        "repository": 387436,
        "creator": 488398,
        "last_updater": 488398,
        "last_updated": "2016-10-10T10:45:57.921190Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "jfloff/alpine-python"
  },
  "name": "jfloff/alpine-python Docker container",
  "description": "A small, more complete, Python Docker image based on Alpine Linux.",
  "readme": "# alpine-python\n\n[![Docker Stars](https://img.shields.io/docker/stars/jfloff/alpine-python.svg)][hub]\n[![Docker Pulls](https://img.shields.io/docker/pulls/jfloff/alpine-python.svg)][hub]\n\n[hub]: https://hub.docker.com/r/jfloff/alpine-python/\n\nA small Python Docker image based on [Alpine Linux](http://alpinelinux.org/).\n\n## Supported tags\n* **2.7 ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/2.7/Dockerfile))**\n* **2.7-onbuild ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/2.7/onbuild/Dockerfile))**\n* **2.7-slim ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/2.7/slim/Dockerfile))**\n* **3.4 ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/3.4/Dockerfile))**\n* **3.4-onbuild ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/3.4/onbuild/Dockerfile))**\n* **3.4-slim ([Dockerfile](https://github.com/jfloff/alpine-python/blob/master/3.4/slim/Dockerfile))**\n\n**NOTE:** `onbuild` images install the `requirements.txt` of your project from the get go. This allows you to cache your requirements right in the build. _Make sure you are in the same directory of your `requirements.txt` file_.\n\n## Why?\nThe default docker python images are too [big](https://github.com/docker-library/python/issues/45), much larger than they need to be. Hence I built this simple image based on [docker-alpine](https://github.com/gliderlabs/docker-alpine), that has everything needed for the most common python projects - including `python3-dev` (which is not common in most minimal alpine python packages).\n\n```\nREPOSITORY            TAG                SIZE\njfloff/alpine-python  2.7-slim           52.86 MB\npython                2.7-slim           180.8 MB\n\njfloff/alpine-python  2.7-onbuild        204 MB\njfloff/alpine-python  2.7                204 MB\npython                2.7                676.2 MB\n\njfloff/alpine-python  3.4-slim           63.93 MB\npython                3.4-slim           193.9 MB\n\njfloff/alpine-python  3.4-onbuild        226.8 MB\njfloff/alpine-python  3.4                226.8 MB\npython                3.4                681.5 MB\n```\n\nPerhaps this could be even more smaller, but I'm not an Alpine guru. **Feel free to post a PR.**\n\n## Details\n* Installs `build-base` and `python-dev`, allowing the use of more advanced packages such as `gevent`\n* Installs `bash` allowing interaction with the container\n* Just like the main `python` docker image, it creates useful symlinks that are expected to exist, e.g. `python3.4` > `python`, `pip2.7` > `pip`, etc.)\n* Added `testing` and `community` repositories to Alpine's `/etc/apk/repositories` file\n\n## Usage\n\nThis image runs `python` command on `docker run`. You can either specify your own command, e.g:\n```shell\ndocker run --rm -ti jfloff/alpine-python python hello.py\n```\n\nYou can also access `bash` inside the container:\n```shell\ndocker run --rm -ti jfloff/alpine-python bash\n```\n\n## Usage of `onbuild` images\n\nThese images can be used to bake your dependencies into an image by extending the plain python images. To do so, create a custom `Dockerfile` like this:\n```dockerfile\nFROM jfloff/alpine-python:3.4-onbuild\n\n# for a flask server\nEXPOSE 5000\nCMD python manage.py runserver\n```\n\nDon't forget to build that `Dockerfile`:\n```shell\ndocker build --rm=true -t jfloff/app .\n\ndocker run --rm -t jfloff/app\n```\n\nPersonally, I build an extended `Dockerfile` version (like shown above), and mount my specific application inside the container:\n```shell\ndocker run --rm -v \"$(pwd)\":/home/app -w /home/app -p 5000:5000 -ti jfloff/app\n```\n\n## Usage of `slim` images\n\nThese images are very small to download, and can install requirements at run-time via flags. The install only happens the first time the container is run, and dependencies can be baked in (see Creating Images).\n\n#### Via `docker run`\nThese images can be run in multiple ways. With no arguments, it will run `python` interactively:\n```shell\ndocker run --rm -ti jfloff/alpine-python:2.7-slim\n```\n\nIf you specify a command, they will run that:\n```shell\ndocker run --rm -ti jfloff/alpine-python:2.7-slim python hello.py\n```\n\n#### Pip Dependencies\nPip dependencies can be installed by the `-p` switch, or a `requirements.txt` file.\n\nIf the file is at `/requirements.txt` it will be automatically read for dependencies. If not, use the `-P` or `-r` switch to specify a file.\n```shell\n# This runs interactive Python with 'simplejson' and 'requests' installed\ndocker run --rm -ti jfloff/alpine-python:2.7-slim -p simplejson -p requests\n\n# Don't forget to add '--' after your dependencies to run a custom command:\ndocker run --rm -ti jfloff/alpine-python:2.7-slim -p simplejson -p requests -- python hello.py\n\n# This accomplishes the same thing by mounting a requirements.txt in:\necho 'simplejson' > requirements.txt\necho 'requests' > requirements.txt\ndocker run --rm -ti \\\n  -v requirements.txt:/requirements.txt \\\n  jfloff/alpine-python:2.7-slim python hello.py\n\n# This does too, but with the file somewhere else:\necho 'simplejson requests' > myapp/requirements.txt\ndocker run --rm -ti \\\n  -v myapp:/usr/src/app \\\n  jfloff/alpine-python:2.7-slim \\\n    -r /usr/src/app/requirements.txt \\\n    -- python /usr/src/app/hello.py\n```\n\n#### Run-Time Dependencies\nAlpine package dependencies can be installed by the `-a` switch, or an `apk-requirements.txt` file.\n\nIf the file is at `/apk-requirements.txt` it will be automatically read for dependencies. If not, use the `-A` switch to specify a file.\n\nYou can also try installing some Python modules via this method, but it is possible for Pip to interfere if it detects a version problem.\n```shell\n# Unknown why you'd need to do this, but you can!\ndocker run --rm -ti jfloff/alpine-python:2.7-slim -a openssl -- python hello.py\n\n# This installs libxml2 module faster than via Pip, but then Pip reinstalls it because Ajenti's dependencies make it think it's the wrong version.\ndocker run --rm -ti jfloff/alpine-python:2.7-slim -a py-libxml2 -p ajenti\n```\n\n#### Build-Time Dependencies\nBuild-time Alpine package dependencies (such as compile headers) can be installed by the `-b` switch, or a `build-requirements.txt` file. They will be removed after the dependencies are installed to save space.\n\nIf the file is at `/build-requirements.txt` it will be automatically read for dependencies. If not, use the `-B` switch to specify a file.\n\n`build-base`, `linux-headers` and `python-dev` are always build dependencies, you don't need to include them.\n```shell\ndocker run --rm -ti jfloff/alpine-python:2.7-slim \\\n  -p gevent \\\n  -p libxml2 \\\n  -b libxslt-dev \\\n  -b libxml-dev \\\n  -- python hello.py\n```\n\n#### Creating Images\nSimilar to the onbuild images, dependencies can be baked into a new image by using a custom `Dockerfile`, e.g:\n```dockerfile\nFROM jfloff/alpine-python:2.7-slim\nRUN /entrypoint.sh \\\n  -p ajenti-panel \\\n  -p ajenti.plugin.dashboard \\\n  -p ajenti.plugin.settings \\\n  -p ajenti.plugin.plugins \\\n  -b libxml2-dev \\\n  -b libxslt-dev \\\n  -b libffi-dev \\\n  -b openssl-dev \\\n&& echo\nCMD [\"ajenti-panel\"]\n# you won't be able to add more dependencies later though-- see 'Debugging'\n```\n\n#### Debugging\nThe `/entrypoint.sh` script that manages dependencies in the slim images creates an empty file, `/requirements.installed`, telling the script not to install any dependencies after the container's first run. Removing this file will allow the script to work again if it is needed.\n\nYou can also access `bash` inside the container:\n```shell\ndocker run --rm -ti jfloff/alpine-python:2.7-slim bash\n```\n\n## License\nThe code in this repository, unless otherwise noted, is MIT licensed. See the `LICENSE` file in this repository.\n",
  "dockerfile": "FROM alpine:3.4\n\nENV PYTHON_MAJOR_VERSION=2\n\n# Install needed packages. Notes:\n#   * dumb-init: a proper init system for containers, to reap zombie children\n#   * build-base: used so we include the basic development packages (gcc)\n#   * bash: so we can access /bin/bash\n#   * git: to ease up clones of repos\n#   * ca-certificates: for SSL verification during Pip and easy_install\n#   * python: the binaries themselves\n#   * python-dev: are used for gevent e.g.\n#   * py-setuptools: required only in major version 2, installs easy_install so we can install Pip.\nENV PACKAGES=\"\\\n  dumb-init \\\n  musl \\\n  build-base \\\n  bash \\\n  git \\\n  ca-certificates \\\n  python${PYTHON_MAJOR_VERSION} \\\n  python${PYTHON_MAJOR_VERSION}-dev \\\n  py-setuptools \\\n\"\n\nRUN echo \\\n# Figure out the minor version from the binary name\n# no real need for this variable at the moment\n#  && PYTHON_MINOR_VERSION=\"$(find /usr/bin -type f -name python\\* | sort | tail -n1 | cut -d'.' -f2 | cut -d'-' -f1)\" \\\n\n# Unfortunately the Alpine repositories are in a slightly inconsistent state for now-- python2 only exists in 'edge', not main.\n  && if [[ \"$PYTHON_MAJOR_VERSION\" == '2' ]]; then PACKAGES=\"$(echo $PACKAGES | sed -e 's/python2/python/g')\"; fi \\\n\n# Add testing and community repositories -- community is untagged as tagging it causes odd issues with the package index\n  && echo \"@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n  && echo \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n\n# Add the packages, with a CDN-breakage fallback if needed\n  && apk add --no-cache $PACKAGES || \\\n    (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories && apk add --no-cache $PACKAGES) \\\n\n# make some useful symlinks that are expected to exist\n  && if [[ ! -e /usr/bin/python ]];        then ln -sf /usr/bin/python${PYTHON_MAJOR_VERSION} /usr/bin/python; fi \\\n  && if [[ ! -e /usr/bin/python-config ]]; then ln -sf /usr/bin/python${PYTHON_MAJOR_VERSION}*-config /usr/bin/python-config; fi \\\n\n  && if [[ ! -e /usr/bin/easy_install ]];  then ln -sf /usr/bin/easy_install-${PYTHON_MAJOR_VERSION}.* /usr/bin/easy_install; fi \\\n\n# Install and upgrade Pip\n  && easy_install pip \\\n  && pip install --upgrade pip \\\n\n  && if [[ ! -e /usr/bin/pip ]];           then ln -sf /usr/bin/pip${PYTHON_MAJOR_VERSION} /usr/bin/pip; fi \\\n&& echo\n\n# since we will be \"always\" mounting the volume, we can set this up\nENTRYPOINT [\"/usr/bin/dumb-init\"]\nCMD [\"python\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "echo # Figure out the minor version from the binary name"
    ],
    "workdir": [],
    "from": "alpine:3.4",
    "env": {
      "PYTHON_MAJOR_VERSION": "2",
      "PACKAGES": "\"",
      "": "py-setuptools",
      "musl": "",
      "bash": "",
      "ca-certificates": "",
      "python${PYTHON_MAJOR_VERSION}-dev": ""
    },
    "entrypoint": "[\"/usr/bin/dumb-init\"]",
    "cmd": "[\"python\"]"
  },
  "source_repository_url": "https://github.com/jfloff/alpine-python.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/jfloff/alpine-python",
  "docker_repository": "jfloff/alpine-python",
  "docker_image": "jfloff/alpine-python",
  "parameters_schema": {
    "PYTHON_MAJOR_VERSION": {
      "default": "2",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PACKAGES": {
      "default": "\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "py-setuptools",
      "type": "string",
      "mapping": "environment_variable"
    },
    "musl": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "bash": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "ca-certificates": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "python${PYTHON_MAJOR_VERSION}-dev": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "jfloff/alpine-python",
  "revision": "2.7",
  "uris": [
    "https://hub.docker.com/r/jfloff/alpine-python",
    "https://hub.docker.com/v2/repositories/jfloff/alpine-python",
    "https://github.com/jfloff/alpine-python.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Python",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Infrastructure/Operating System/Linux"
  ],
  "info_url": "https://hub.docker.com/r/jfloff/alpine-python",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}