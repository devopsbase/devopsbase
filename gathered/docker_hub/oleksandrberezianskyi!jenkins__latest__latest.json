{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/oleksandrberezianskyi/jenkins",
    "repository_url": "https://hub.docker.com/v2/repositories/oleksandrberezianskyi/jenkins",
    "tags_url": "https://hub.docker.com/v2/repositories/oleksandrberezianskyi/jenkins/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/oleksandrberezianskyi/jenkins/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/oleksandrberezianskyi/jenkins/autobuild",
    "user": "oleksandrberezianskyi",
    "name": "jenkins",
    "namespace": "oleksandrberezianskyi",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 565,
    "last_updated": "2016-09-23T21:43:07.958763Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 529961330,
        "id": 56159,
        "repository": 185141,
        "creator": 277776,
        "last_updater": 277776,
        "last_updated": "2016-09-23T21:42:52.372730Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "OleksandrBerezianskyi/jenkins-ci.org-docker"
  },
  "name": "oleksandrberezianskyi/jenkins Docker container",
  "description": "Jenkins image build on Debian 8 with Oracle Java 8, node.js and Google Cloud SDK",
  "readme": "# The Jenkins Docker image optimized for Google Compute Engine, based on Debian 8 + Oracle Java 8 image with Google Cloud SDK, node.js 4.x and latest Docker\n\nThis image is created as the result of merging of:\n\nDebian 8 + Oracle Java 8: [https://registry.hub.docker.com/u/oleksandrberezianskyi/debian8-oraclejava8/](https://registry.hub.docker.com/u/oleksandrberezianskyi/debian8-oraclejava8/)\n\nJenkins: [https://registry.hub.docker.com/_/jenkins/](https://registry.hub.docker.com/_/jenkins/). **Please note** that jenkins user was removed and java process is started from root user to make image compatible with [Docker in Docker](https://github.com/jpetazzo/dind).\n\nDocker in Docker [https://registry.hub.docker.com/u/jpetazzo/dind/](https://registry.hub.docker.com/u/jpetazzo/dind/). **Please note** that wrapdocker.sh was modified to run Docker only as a daemon accessible by Jenkins.\n**Please note** that because we install latest stable docker (1.8.3 or later) dind is supported without additional magic.\n\nNode.js installation instructions: [https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories](https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories)\n\nGoogle Cloud SDK: [https://registry.hub.docker.com/u/google/cloud-sdk/](https://registry.hub.docker.com/u/google/cloud-sdk/)\n\n### On Google Compute Engine\n\nThe main idea of this image is to be able to spawn a new Jenkin on Google Compute Engine in a minute. Google Cloud SDK and Docker are installed in the image, so a user could build docker image and start it on Google Compute Engine infrastructure using custom automation scripts. However **you can use this image on a Docker instance hosted anywhere**.\n\nAssuming that you are using Google Compute Engine, you have installed [Google Cloud SDK](https://cloud.google.com/sdk/) locally and performed\n\n```\ngcloud auth login\n```\n\n```\ngcloud config set project YOUR_PROJECT_ID(e.g. crypto-gradient-12345)\n```\n\n```\ngcloud config set compute/zone YOUR_DEFAULT_ZONE_ID(e.g. europe-west1-d)\n```\n\nStarting Jenkins is really simple. Perform:\n\n```\ngcloud compute instances create \"docker-managed-jenkins\" --machine-type \"n1-standard-1\" --network \"default\" --scopes \"compute-rw\" \"cloud-platform\" \"storage-full\" \"logging-write\" --tags \"http-server\" --image \"container-vm\"\n```\n\nSSH to the new instance and run docker image as shown below or create yaml config for Kubernetes as shown in [the tutorial](https://cloud.google.com/compute/docs/containers/container_vms).\nRUN /usr/local/bin/plugins.sh /usr/share/jenkins/ref/plugins.txt\n\n## Installation\n\nRun docker image for Jenkins:\n\n```\ndocker run --privileged -d -p 80:8080 --name \"jenkins\" -v /jenkins/jenkins_home:/var/jenkins_home oleksandrberezianskyi/jenkins\n```\n\nNote that '--privileged' flag is used to run Docker in Docker, more information [here](https://github.com/jpetazzo/dind). ```sudo``` is requires to run Docker in some environments, e.g. GCE\n\nYou would want to do some additional configuration so please find additional Jenkins image related information on the [official repository](https://github.com/cloudbees/jenkins-ci.org-docker) page\n\nCurrent image could accept all parameters used by official Jenkins image\n",
  "dockerfile": "FROM oleksandrberezianskyi/debian8-oraclejava8-packages:latest\nMAINTAINER Oleksandr Berezianskyi <oleksandr.berezianskyi@gmail.com>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install dependencies of google-cloud-sdk and node.js \nRUN \\\n  apt-get update && \\\n  apt-get install -y --force-yes -qq --no-install-recommends \\\n    ca-certificates php5-mysql php5-cli php5-cgi openssh-client python-openssl \\\n    apt-transport-https build-essential lsb-release python-all rlwrap && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n\n### Google Cloud SDK\n# Install google-cloud-sdk\nRUN \\\n  wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && unzip google-cloud-sdk.zip && rm google-cloud-sdk.zip\nENV CLOUDSDK_PYTHON_SITEPACKAGES 1\nRUN \\\n  google-cloud-sdk/install.sh --usage-reporting=true --path-update=true --bash-completion=true --rc-path=/.bashrc --disable-installation-options\nRUN \\\n  google-cloud-sdk/bin/gcloud --quiet components update pkg-go pkg-python pkg-java preview app\nRUN \\\n  google-cloud-sdk/bin/gcloud --quiet config set component_manager/disable_update_check true\nRUN \\\n  mkdir /.ssh\n\n# Add google-cloud-sdk to PATH\nENV PATH /google-cloud-sdk/bin:$PATH\n\n# Create mount point for google-cloud-sdk config\nVOLUME [\"/.config\"]\n\n### node.js\n# Download and install latest Node\nRUN \\ \n  curl -sL https://deb.nodesource.com/setup_4.x | bash - && \\\n  apt-get install -y nodejs\n\n# Set NODE_ENV variable\nENV NODE_ENV development\n\n### Jenkins\n# Define JENKINS_HOME to use it as a mount and store all data externally\nENV JENKINS_HOME /var/jenkins_home\n\n# Jenkins home directoy is a volume, so configuration and build history\n# can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n\n# `/usr/share/jenkins/ref/` contains all reference configuration we want\n# to set on a fresh new installation. Use it to bundle additional plugins\n# or config file with your custom jenkins Docker image.\nRUN \\\n  mkdir -p /usr/share/jenkins/ref/init.groovy.d\n\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n\nENV JENKINS_VERSION latest\n\n# could use ADD but this one does not check Last-Modified header\n# see https://github.com/docker/docker/issues/8331\nRUN \\\n  curl -fL http://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war -o /usr/share/jenkins/jenkins.war\n\nENV JENKINS_UC https://updates.jenkins-ci.org\n\n\n# for main web interface:\nEXPOSE 8080\n\n# will be used by attached slave agents:\nEXPOSE 50000\n\nENV COPY_REFERENCE_FILE_LOG /var/log/copy_reference_file.log\nRUN \\\n  touch $COPY_REFERENCE_FILE_LOG \n\nADD ./jenkins.sh /usr/local/bin/jenkins.sh\nRUN \\\n  chmod +x /usr/local/bin/jenkins.sh\n\n### Docker\n# Install Docker\nRUN \\\n  curl -sSL https://get.docker.com/ | sh\n\n# Add explicit volume for internal docker\nVOLUME /var/lib/docker\n\n### Wrapdocker \n# Install wrapper run docker inside docker\nADD ./wrapdocker.sh /usr/local/bin/wrapdocker.sh\nRUN \\\n  chmod +x /usr/local/bin/wrapdocker.sh\n\n# Add wrapdockerjenkins.sh to run wrapdocker first and then run jenkins \nADD ./wrapdockerjenkins.sh /usr/local/bin/wrapdockerjenkins.sh\nRUN \\\n  chmod +x /usr/local/bin/wrapdockerjenkins.sh\n\n# Start wrapdockerjenkins.sh from root user as we need root permissions. This will also start jenkins itself\nENTRYPOINT [\"wrapdockerjenkins.sh\"]\n\n# from a derived Dockerfile, can use `RUN plugin.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "./jenkins.sh",
        "dest": "/usr/local/bin/jenkins.sh"
      },
      {
        "source": "./wrapdocker.sh",
        "dest": "/usr/local/bin/wrapdocker.sh"
      },
      {
        "source": "./wrapdockerjenkins.sh",
        "dest": "/usr/local/bin/wrapdockerjenkins.sh"
      }
    ],
    "expose": [
      8080,
      50000
    ],
    "volume": [
      "[\"/.config\"]",
      "/var/jenkins_home",
      "/var/lib/docker"
    ],
    "run": [
      "  apt-get update &&   apt-get install -y --force-yes -qq --no-install-recommends     ca-certificates php5-mysql php5-cli php5-cgi openssh-client python-openssl     apt-transport-https build-essential lsb-release python-all rlwrap &&   apt-get clean &&   rm -rf /var/lib/apt/lists/*",
      "  wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip && unzip google-cloud-sdk.zip && rm google-cloud-sdk.zip",
      "  google-cloud-sdk/install.sh --usage-reporting=true --path-update=true --bash-completion=true --rc-path=/.bashrc --disable-installation-options",
      "  google-cloud-sdk/bin/gcloud --quiet components update pkg-go pkg-python pkg-java preview app",
      "  google-cloud-sdk/bin/gcloud --quiet config set component_manager/disable_update_check true",
      "  mkdir /.ssh",
      "\\ ",
      "  mkdir -p /usr/share/jenkins/ref/init.groovy.d",
      "  curl -fL http://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war -o /usr/share/jenkins/jenkins.war",
      "  touch $COPY_REFERENCE_FILE_LOG ",
      "  chmod +x /usr/local/bin/jenkins.sh",
      "  curl -sSL https://get.docker.com/ | sh",
      "  chmod +x /usr/local/bin/wrapdocker.sh",
      "  chmod +x /usr/local/bin/wrapdockerjenkins.sh"
    ],
    "workdir": [],
    "from": "oleksandrberezianskyi/debian8-oraclejava8-packages:latest",
    "maintainer": "Oleksandr Berezianskyi <oleksandr.berezianskyi@gmail.com>",
    "env": {
      "DEBIAN_FRONTEND": "noninteractive",
      "CLOUDSDK_PYTHON_SITEPACKAGES": "1",
      "PATH": "/google-cloud-sdk/bin:$PATH",
      "NODE_ENV": "development",
      "JENKINS_HOME": "/var/jenkins_home",
      "JENKINS_VERSION": "latest",
      "JENKINS_UC": "https://updates.jenkins-ci.org",
      "COPY_REFERENCE_FILE_LOG": "/var/log/copy_reference_file.log"
    },
    "copy": "plugins.sh /usr/local/bin/plugins.sh",
    "entrypoint": "[\"wrapdockerjenkins.sh\"]"
  },
  "source_repository_url": "https://github.com/OleksandrBerezianskyi/jenkins-ci.org-docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/OleksandrBerezianskyi/jenkins-ci.org-docker",
  "docker_repository": "oleksandrberezianskyi/jenkins",
  "docker_image": "oleksandrberezianskyi/jenkins",
  "parameters_schema": {
    "DEBIAN_FRONTEND": {
      "default": "noninteractive",
      "type": "string",
      "mapping": "environment_variable"
    },
    "CLOUDSDK_PYTHON_SITEPACKAGES": {
      "default": "1",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/google-cloud-sdk/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "NODE_ENV": {
      "default": "development",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_HOME": {
      "default": "/var/jenkins_home",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_VERSION": {
      "default": "latest",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_UC": {
      "default": "https://updates.jenkins-ci.org",
      "type": "string",
      "mapping": "environment_variable"
    },
    "COPY_REFERENCE_FILE_LOG": {
      "default": "/var/log/copy_reference_file.log",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        8080,
        50000
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "oleksandrberezianskyi/jenkins",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/oleksandrberezianskyi/jenkins",
    "https://hub.docker.com/v2/repositories/oleksandrberezianskyi/jenkins",
    "https://github.com/OleksandrBerezianskyi/jenkins-ci.org-docker.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Java",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Binding/Provider/Google",
    "Mode/Executable/Image",
    "Mode/API/Toolkit",
    "Type/Devopsware/Build",
    "Type/Devopsware/Integration/Jenkins",
    "Type/Infrastructure/Operating System/Linux/Debian"
  ],
  "info_url": "https://hub.docker.com/r/oleksandrberezianskyi/jenkins",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}