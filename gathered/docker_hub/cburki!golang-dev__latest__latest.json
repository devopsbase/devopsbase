{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/cburki/golang-dev",
    "repository_url": "https://hub.docker.com/v2/repositories/cburki/golang-dev",
    "tags_url": "https://hub.docker.com/v2/repositories/cburki/golang-dev/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/cburki/golang-dev/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/cburki/golang-dev/autobuild",
    "user": "cburki",
    "name": "golang-dev",
    "namespace": "cburki",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 519,
    "last_updated": "2016-10-12T20:26:33.491627Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 302161393,
        "id": 1044231,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-10-12T20:26:00.557220Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.3.1",
        "full_size": 302160932,
        "id": 5199746,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-10-03T12:40:51.730846Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.3.0",
        "full_size": 302160824,
        "id": 5199092,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-10-03T11:51:53.659185Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.2.1",
        "full_size": 305213767,
        "id": 3316020,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-06-07T06:47:00.644842Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "1.2.0",
        "full_size": 306793944,
        "id": 2774987,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-04-25T08:31:41.930264Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.1.2",
        "full_size": 305116742,
        "id": 2401911,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-03-23T13:41:13.087300Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.1.1",
        "full_size": 305111467,
        "id": 2220428,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-03-07T12:59:37.857851Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.1.0",
        "full_size": 299060393,
        "id": 2200282,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-03-04T13:07:10.364802Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.0.0",
        "full_size": 298592419,
        "id": 2145480,
        "repository": 343918,
        "creator": 322994,
        "last_updater": 322994,
        "last_updated": "2016-02-29T11:06:00.499689Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "cburki/docker-golang-dev"
  },
  "name": "cburki/golang-dev Docker container",
  "description": "Golang development with SSH server.",
  "readme": "Summary\n-------\n\nDocker image for go development with SSH server. This image is the golang official\nplus a SSH server that let us connect to the container and build projects. The\ncodes of your projects are stored in a volume.\n\nAs the image is for development purpose, git is installed and usable. The git\nemail address and name recorded in any commits could be given in environment\nvariables when running the image. The git (ssh) key with it passphrase and\nhosts where are located remote repositories could also be given in environment\nvariables.\n\n\nBuild the image\n---------------\n\nTo create this image, execute the following command in the docker-golang-dev\nfolder.\n\n    docker build \\\n        -t cburki/golang-dev \\\n        .\n\n\nConfigure the image\n-------------------\n\nThe following environment variables could be used to configure the users.\n\n - SSH_PASSWORD : The password for root and given user. No password is set when not specified.\n - SSH_AUTHORIZED_KEY : Your public key that will be added to the authorized key file of the root and given user.\n - SSH_USER : An optional user that will be created.\n - GIT_EMAIL : The git email address recorded in any commits.\n - GIT_NAME : The git name recorded in any commits.\n - GIT_KEY_PASSPHRASE : The passphrase to protect the git key. A passphrase will be created for you if none is given.\n - GIT_HOSTS : The list of git hosts to connect to (user1@host1:port1,user2@host2:port2,...).\n \nYou will not be able to log into this container if you do not provide at\nleast SSH_PASSWORD or SSH_AUTHORIZED_KEY. Be careful to set a strong password\nfor the users because they have full access to the volumes you specify to mount\nwhen running the container. When the user SSH_USER is created, the SSH_PASSWORD\nand SSH_AUTHORIZED_KEY are also set for this user. If no SSH_PASSWORD is given\nwhen creating the user, a password will be created for you. The new password\nis written to the logs during the first startup.\n\nIf you do not want to use git simply do not fill the GIT_* variables. Otherwise\nyou need to fill them appropriately. If the use SSH_USER is created, the git\nsettings are pushed for this user too. Be careful to set a strong passphrase for\nthe git key because the key is used to push onto the remote repositories. The\ngenerated key must be added into your repositories settings (github or gitlab).\nTo get the key you could execute the following command when the image is running.\n\n    docker exec \\\n\t    -i \\\n\t\t-t \\\n\t\tgolang-dev \\\n\t\t/bin/cat /root/.ssh/id_rsa-git.pub\n\n\nRun the image\n-------------\n\nTo access the SSH server you need to bind the port 22. The directory where your\nprojects files reside could be mounted as a data volume.\n\n    docker run \\\n        --name golang-dev \\\n        -v <projects folder>:/data \\\n        -e SSH_PASSWORD=<your secret password> \\\n        -e SSH_AUTHORIZED_KEY=<your ssh public key> \\\n\t\t-e GIT_EMAIL=\"<your git email address> \\\n\t\t-e GIT_NAME=\"<your git name> \\\n\t\t-e GIT_KEY_PASSPHRASE=<your secret passphrase> \\\n\t\t-e GIT_HOSTS=user@host:port \\\n        -p <external port>:22 \\\n\t\t-d \\\n        cburki/golang-dev:latest\n\nWhen I'm not developping on my laptop, my development container is running on a\nserver and I'm using a data volume container where my codes are synchronized with\nGoogle Drive using Insync (see cburki/insync image). You could also run your\ndevelopment container and attach a data volume container where your codes are\nstored.\n\n    docker run \\\n        --name golang-dev \\\n        --volumes-from golang-dev-data \\\n        -e SSH_PASSWORD=<your secret password> \\\n        -e SSH_AUTHORIZED_KEY=<your ssh public key> \\\n\t\t-e GIT_EMAIL=\"<your git email address> \\\n\t\t-e GIT_NAME=\"<your git name> \\\n\t\t-e GIT_KEY_PASSPHRASE=<your secret passphrase> \\\n\t\t-e GIT_HOSTS=user@host:port \\\n        -p <external port>:22 \\\n\t\t-d \\\n        cburki/golang-dev:latest\n\nNote that any other synchronization technology like dropbox, bittorrent sync, etc\ncan be used to synchronize your project files. Just embed your synchronization\ntools in another container and attach the data volume container.",
  "dockerfile": "FROM golang:latest\nMAINTAINER Christophe Burki, christophe.burki@gmail.com\n\n# Install system requirements\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    emacs24-nox \\\n    less \\\n    locales \\\n    openssh-server \\\n    pwgen \\\n    tmux \\\n    xterm && \\\n    apt-get autoremove -y && \\\n    apt-get clean\n\n# Configure locales and timezone\nRUN locale-gen en_US.UTF-8 en_GB.UTF-8 fr_CH.UTF-8 && \\\n    cp /usr/share/zoneinfo/Europe/Zurich /etc/localtime && \\\n    echo \"Europe/Zurich\" > /etc/timezone\n\n# Configure sshd\nRUN mkdir /var/run/sshd && \\\n    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \\\n    sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config && \\\n    sed -ri 's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config && \\\n    mkdir /root/.ssh\n\n# s6 install and configs\nCOPY bin/* /usr/bin/\nCOPY configs/etc/s6 /etc/s6/\nRUN chmod a+x /usr/bin/s6-* && \\\n    chmod a+x /etc/s6/.s6-svscan/finish /etc/s6/sshd/run /etc/s6/sshd/finish\n\n# install setup scripts\nCOPY scripts/* /opt/\nRUN chmod a+x /opt/setupusers.sh /opt/setupgit.sh /opt/setupenv.sh\n\n# setup shell environment\nCOPY configs/bashrc /root/.bashrc\nCOPY configs/tmux/tmux.conf /root/.tmux.conf\nRUN echo 'export PAGER=less' >> /root/.bashrc && \\\n    echo 'export TERM=xterm' >> /root/.bashrc\n\nEXPOSE 22\n\nCMD [\"/usr/bin/s6-svscan\", \"/etc/s6\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      22
    ],
    "volume": [],
    "run": [
      "apt-get update && apt-get install -y --no-install-recommends     emacs24-nox     less     locales     openssh-server     pwgen     tmux     xterm &&     apt-get autoremove -y &&     apt-get clean",
      "locale-gen en_US.UTF-8 en_GB.UTF-8 fr_CH.UTF-8 &&     cp /usr/share/zoneinfo/Europe/Zurich /etc/localtime &&     echo \"Europe/Zurich\" > /etc/timezone",
      "mkdir /var/run/sshd &&     sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config &&     sed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config &&     sed -ri 's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config &&     mkdir /root/.ssh",
      "chmod a+x /usr/bin/s6-* &&     chmod a+x /etc/s6/.s6-svscan/finish /etc/s6/sshd/run /etc/s6/sshd/finish",
      "chmod a+x /opt/setupusers.sh /opt/setupgit.sh /opt/setupenv.sh",
      "echo 'export PAGER=less' >> /root/.bashrc &&     echo 'export TERM=xterm' >> /root/.bashrc"
    ],
    "workdir": [],
    "from": "golang:latest",
    "maintainer": "Christophe Burki, christophe.burki@gmail.com",
    "copy": "configs/tmux/tmux.conf /root/.tmux.conf",
    "cmd": "[\"/usr/bin/s6-svscan\", \"/etc/s6\"]"
  },
  "source_repository_url": "https://github.com/cburki/docker-golang-dev.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/cburki/docker-golang-dev",
  "docker_repository": "cburki/golang-dev",
  "docker_image": "cburki/golang-dev",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        22
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "cburki/golang-dev",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/cburki/golang-dev",
    "https://hub.docker.com/v2/repositories/cburki/golang-dev",
    "https://github.com/cburki/docker-golang-dev.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/Golang"
  ],
  "info_url": "https://hub.docker.com/r/cburki/golang-dev",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}