{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/zaggash/docker-haproxy",
    "repository_url": "https://hub.docker.com/v2/repositories/zaggash/docker-haproxy",
    "tags_url": "https://hub.docker.com/v2/repositories/zaggash/docker-haproxy/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/zaggash/docker-haproxy/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/zaggash/docker-haproxy/autobuild",
    "user": "zaggash",
    "name": "docker-haproxy",
    "namespace": "zaggash",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 116,
    "last_updated": "2016-10-16T21:12:07.766835Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 25971416,
        "id": 4384754,
        "repository": 863878,
        "creator": 586276,
        "last_updater": 586276,
        "last_updated": "2016-10-16T21:12:06.836439Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "zaggash/docker-haproxy"
  },
  "name": "zaggash/docker-haproxy Docker container",
  "description": "Haproxy container based on linuxserver.io",
  "readme": "Based on linuxserver.io baseimage but NOT SUPPORTED by them.\n\n# zaggash/docker-haproxy\n[![](https://images.microbadger.com/badges/image/zaggash/docker-haproxy.svg)](https://microbadger.com/images/zaggash/docker-haproxy \"Get your own image badge on microbadger.com\")\n[hub]: https://hub.docker.com/r/zaggash/docker-haproxy/\n\nThe Reliable, High Performance TCP/HTTP Load Balancer. [haproxy](http://www.haproxy.org/)\nThis container have LetsEncrypt support for multiple domain.\n\n[![haproxy](https://cdn.haproxy.com/static/img/slider1small.png)]\n\n## Usage\n\n```\ndocker create --name=haproxy \\\n-v <path to data>:/config \\\n-e TZ \\\n-e PGID=<gid> -e PUID=<uid> \\\n-e DOMAINS=<domain.name...> \\\n-e EMAIL=<email>\n-p 80:80 \\\n-p 443:443 \\\nzaggash/docker-haproxy\n```\n\n**Parameters**\n\n* `-p 80`\n* `-p 443` - the port(s)\n* `-v /config` - where it should store config files and logs\n* `-e PGID` for GroupID - see below for explanation\n* `-e PUID` for UserID - see below for explanation\n* `-e TZ` for timezone information\n* `-e DOMAINS` - domain to ask for a certificate, see below for more information\n* `-e EMAIL` - your email for the letsencrypt account\n\nIt is based on alpine linux with s6 overlay, for shell access whilst the container is running do `docker exec -it haproxy /bin/bash`.\n\n### User / Group Identifiers\n\nSometimes when using data volumes (`-v` flags) permissions issues can arise between the host OS and the container. We avoid this issue by allowing you to specify the user `PUID` and group `PGID`. Ensure the data volume directory on the host is owned by the same user you specify and it will \"just work\" â„¢.\n\n## Setting up the application \n\nYou can edit the config in /config/haproxy.cfg\nThere is default configuration which is working with an default auto-generated certificate.\n\nIn order to generate letsencrypt certificate, follow the rules :\n\nEach domain seperated by a coma (,) will be have its own certificate.\nIf you add multiple domain sperated by a space between the coma (,) all these domains will be on a single certificate, the certificate name will be the shortest domain name of the group\n\nDOMAINS=\"blah.domain.fr domains.fr, www.dom.com, blahblah.domdom.net www.domdom.net\"\n\n * blah.domain.fr and domains.fr will be in the same certificate named domains.fr\n * www.dom.com will have his own certificate named www.dom.com\n * blahblah.domdom.net and www.domdom.net  will be in the same certificate named  www.domdom.net.pem\n\n\n## Info\n\n* To monitor the logs of the container in realtime `docker logs -f haproxy`.\n",
  "dockerfile": "FROM lsiobase/alpine\nMAINTAINER zaggash\n\nENV DOMAINS=\"\"\nENV EMAIL=\"\"\n\nRUN \\\n  apk add --no-cache \\\n    coreutils \\\n    openssl \\\n    logrotate \\\n    certbot \\\n    inotify-tools && \\\n\n  apk add --no-cache --repository http://nl.alpinelinux.org/alpine/edge/main \\\n    haproxy && \\\n\n# cleanup\n  rm -rf /var/cache/apk/* /tmp/*\n\n# copy local files\nCOPY root/ /\n\n# ports and volumes\nEXPOSE 80 443\nVOLUME /config\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [
      "/config"
    ],
    "run": [
      "  apk add --no-cache     coreutils     openssl     logrotate     certbot     inotify-tools && "
    ],
    "workdir": [],
    "from": "lsiobase/alpine",
    "maintainer": "zaggash",
    "env": {
      "DOMAINS": "\"\"",
      "EMAIL": "\"\""
    },
    "copy": "root/ /"
  },
  "source_repository_url": "https://github.com/zaggash/docker-haproxy.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/zaggash/docker-haproxy",
  "docker_repository": "zaggash/docker-haproxy",
  "docker_image": "zaggash/docker-haproxy",
  "parameters_schema": {
    "DOMAINS": {
      "default": "\"\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "EMAIL": {
      "default": "\"\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "zaggash/docker-haproxy",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/zaggash/docker-haproxy",
    "https://hub.docker.com/v2/repositories/zaggash/docker-haproxy",
    "https://github.com/zaggash/docker-haproxy.git"
  ],
  "labels": [
    "Docker",
    "Type/Infrastructure/Operating System/Linux",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://hub.docker.com/r/zaggash/docker-haproxy",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}