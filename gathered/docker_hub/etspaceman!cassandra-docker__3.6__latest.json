{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/etspaceman/cassandra-docker",
    "repository_url": "https://hub.docker.com/v2/repositories/etspaceman/cassandra-docker",
    "tags_url": "https://hub.docker.com/v2/repositories/etspaceman/cassandra-docker/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/etspaceman/cassandra-docker/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/etspaceman/cassandra-docker/autobuild",
    "user": "etspaceman",
    "name": "cassandra-docker",
    "namespace": "etspaceman",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 779,
    "last_updated": "2016-08-06T18:46:36.442746Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "3.6",
        "full_size": 282883331,
        "id": 4195472,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-08-06T18:46:35.372785Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.4",
        "full_size": 281588721,
        "id": 4195460,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-08-06T18:43:31.943344Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.5",
        "full_size": 283699539,
        "id": 4195455,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-08-06T18:40:23.345233Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.3",
        "full_size": 278691873,
        "id": 4195447,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-08-06T18:37:25.040393Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.7",
        "full_size": 282900346,
        "id": 4195438,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-08-06T18:33:56.284709Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 272657526,
        "id": 953138,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-01-29T20:27:45.291903Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "2.1",
        "full_size": 272657353,
        "id": 1809869,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-01-29T19:45:38.274918Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "2.1.11",
        "full_size": 272603529,
        "id": 1833330,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-01-26T22:52:03.251833Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "3.0",
        "full_size": 269694790,
        "id": 1809779,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-01-24T22:38:12.557997Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "2.2",
        "full_size": 270817968,
        "id": 1809750,
        "repository": 330699,
        "creator": 333071,
        "last_updater": 333071,
        "last_updated": "2016-01-24T22:35:09.143525Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "medseek-engineering/cassandra-docker"
  },
  "name": "etspaceman/cassandra-docker Docker container",
  "description": "Cassandra docker (from poklet/cassandra)",
  "readme": "Cassandra on Docker\n===================\n\nThis is a collection of images and scripts to help you run Cassandra in Docker containers.\nThese images are great to provision ephemeral Cassandra topologies for testing and development purpose.\n\n- Currently supported:\n    - A single Cassandra node\n    - A client container to run tools such as cqlsh, nodetool, etc.\n    - A multi-node cluster - running on a single Docker host\n    - Monitored cluster using OpsCenter\n\n- Work in progress:\n    - A small cluster for production - running on multiple Docker hosts\n        - The missing puzzle piece here is how to expose Cassandra on the real outside network so that peers running on different hosts can connect.\n\nIf you'd like to help, please get in touch with me, and/or send me pull requests.\n\n\nPrerequisites\n-------------\n\n- Docker - See [https://www.docker.com](https://www.docker.com)\n- Verify that the docker command works. Try running 'docker ps' for example.\n- Build the cassandra and opscenter images (optional)\n\n        ./cassandra/build.sh\n        ./opscenter/build.sh\n\nThe last step is optional because Docker will automatically pull the images from [index.docker.io](https://index.docker.io) if you don't already have them. The build process needs an Internet connection, but it is executed only once and then cached on Docker. If you modify the scripts, this is also how you can re-build the images with your changes.\n\n\nSingle Cassandra node\n---------------------\n\n1. Launch a server called cass1:\n\n        docker run -d --name cass1 etspaceman/cassandra-docker\n\n    You can also add the `-p 9042:9042` option to bind container's 9042 port (CQL / native transport port) to host's 9042 port.\n\n2. Connect to it using `cqlsh` \n        \n        docker run -it --rm --link cass1:cass etspaceman/cassandra-docker cqlsh cass\n        \n\n    You should see something like:\n\n        Connected to Test Cluster at 172.17.0.25:9160.\n        [cqlsh 4.1.0 | Cassandra 2.0.3 | CQL spec 3.1.1 | Thrift protocol 19.38.0]\n        Use HELP for help.\n        cqlsh>\n\n3. __Pre-populate Cassandra with a script__\n\n    First we write a script that, for example, creates a table an inserts some data\n\n        mkdir -p /data/cassandra/scripts\n        vi /data/cassandra/scripts/init.cql\n\n    In this script, we will define a `Keyspace`, create a table and add some data:\n\n        CREATE KEYSPACE test_keyspace WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': 1};\n        USE test_keyspace;\n\n\n         CREATE TABLE test_table (\n          id text,\n          test_value text,\n          PRIMARY KEY (id)\n         );\n\n\n        INSERT INTO test_table (id, test_value) VALUES ('1', 'one');\n\n        INSERT INTO test_table (id, test_value) VALUES ('2', 'two');\n\n        INSERT INTO test_table (id, test_value) VALUES ('3', 'three');\n\n        SELECT * FROM test_table;\n\n    Then, we run our docker container mounting a volume where our script is saved and called it through `cqlsh`\n\n        docker run -it --rm --link cass1:cass1 -v /data/cassandra/scripts:/data etspaceman/cassandra-docker bash -c 'cqlsh $CASS1_PORT_9160_TCP_ADDR -f /data/init.cql'\n\n    You should see the result table:\n\n\n        -> % docker run -it --rm --link cass1:cass1 -v /data/cassandra/scripts:/data etspaceman/cassandra-docker bash -c 'cqlsh $CASS1_PORT_9160_TCP_ADDR -f /data/init.cql'\n\n        system  test_keyspace  system_traces\n\n\n         id | test_value\n        ----+------------\n          3 |      three\n          2 |        two\n          1 |        one\n\n        (3 rows)\n\n\n3-node Cassandra cluster\n------------------------\n\n1. Launch three containers:\n\n        docker run -d --name cass1 etspaceman/cassandra-docker start\n        docker run -d --name cass2 etspaceman/cassandra-docker start $(./scripts/ipof.sh cass1)\n        docker run -d --name cass3 etspaceman/cassandra-docker start $(./scripts/ipof.sh cass1)\n        # and so on...\n\n    The `start` script is passed the list of seeds - in this case, just the cass1's IP\n\n2. Connect to it using `nodetool`:\n\n        docker run -i -t etspaceman/cassandra-docker nodetool -h $(./scripts/ipof.sh cass1) status\n\n3. Create some data on the first container:\n\n    Launch `cqlsh`:\n\n        docker run -i -t etspaceman/cassandra-docker cqlsh $(./scripts/ipof.sh cass1)\n\n    Paste this in:\n\n        create keyspace demo with replication = {'class':'SimpleStrategy', 'replication_factor':2};\n        use demo;\n        create table names ( id int primary key, name text );\n        insert into names (id,name) values (1, 'gibberish');\n        quit\n\n4. Connect to the second container, and check if it can see your data:\n\n    Start up `cqlsh` (on cass2 this time):\n\n        docker run -i -t etspaceman/cassandra-docker cqlsh $(./scripts/ipof.sh cass2)\n\n    Paste in:\n\n        select * from demo.names;\n\n    You should see:\n\n        cqlsh> select * from demo.names;\n\n         id | name\n        ----+-----------\n          1 | gibberish\n\n        (1 rows)\n\n\n10-node Cassandra cluster (scripted!)\n-------------------------------------\n\n1. Right, lets dive right in with some shell scripts in the scripts directory to help us:\n\n        ./scripts/run.sh 10\n\n2. That will start 10 nodes. Lets see what they're called:\n\n        ./scripts/ips.sh\n\n        172.17.0.10 cass6\n        172.17.0.12 cass4\n        172.17.0.11 cass5\n        172.17.0.6 cass10\n        172.17.0.7 cass9\n        172.17.0.9 cass7\n        172.17.0.8 cass8\n        172.17.0.4 cass2\n        172.17.0.3 cass3\n        172.17.0.2 cass1\n\n3. Same, but with the nodetool:\n\n        ./scripts/nodetool.sh cass1 status\n\n        Datacenter: datacenter1\n        =======================\n        Status=Up/Down\n        |/ State=Normal/Leaving/Joining/Moving\n        --  Address      Load       Tokens  Owns (effective)  Host ID                               Rack\n        UN  172.17.0.11  74.19 KB   256     21.4%             dfd44ca5-bf73-4487-bcb2-db882d0a9231  rack1\n        UN  172.17.0.10  74.21 KB   256     19.6%             f479a4e6-55ac-4533-8ce5-d137a93f2cc4  rack1\n        UN  172.17.0.9   74.34 KB   256     20.4%             0bb389a0-f111-459c-9620-0faccc75cbc0  rack1\n        UN  172.17.0.8   74.19 KB   256     20.1%             2eb4a4dd-2bbc-46a3-9f64-4e761509307d  rack1\n        UN  172.17.0.12  74.14 KB   256     20.2%             a2547289-0c6a-458f-b982-823711c5293e  rack1\n        UN  172.17.0.3   74.19 KB   256     20.3%             3667cc1a-1f63-4cd1-bebc-841f428a0f4d  rack1\n        UN  172.17.0.2   74.24 KB   256     20.3%             2b48c8ac-ad68-48a0-9c41-c8f2fb7f38e6  rack1\n        UN  172.17.0.7   67.7 KB    256     19.2%             e361f6d8-28ef-4cf8-baa1-88c2d1fec094  rack1\n        UN  172.17.0.6   74.15 KB   256     19.6%             230f13b1-a27b-44e8-9b51-5ebdb1c4cb13  rack1\n        UN  172.17.0.4   74.18 KB   256     18.8%             6c90cbaa-e5b3-41de-a160-3ecaf59b8856  rack1\n\n4. When you're tired of your cluster, nuke it with:\n\n        ./scripts/nuke.sh 10\n\nSet snitch and node location\n----------------------------\n\nThe snitch type and node location information can be configured with environment variables.\nThe datacenter and rack configuration is only valid if using the GossipingPropertyFileSnitch type snitch.\nFor example:\n\n        docker run -d --name cass1 -e SNITCH=GossipingPropertyFileSnitch -e DC=SFO -e RACK=RAC3 etspaceman/cassandra-docker\n\nThis will set the snitch type and set the datacenter to **SFO** and the rack to **RAC3**\n\nAuto-detect seeds\n-----------------\n\nAny containers linked in the run command will also be added to the seed list.  The 3-node cluster example above may also be written as:\n\n        docker run -d --name cass1 etspaceman/cassandra-docker\n        docker run -d --name cass2 --link cass1:cass1 etspaceman/cassandra-docker\n        docker run -d --name cass3 --link cass1:cass1 etspaceman/cassandra-docker\n        # and so on...\n\nSpecifying clustering parameters\n--------------------------------\n\nWhen starting a container, you can pass the SEEDS, LISTEN_ADDRESS environment variables to override the defaults:\n\n    docker run -e SEEDS=a,b,c... -e LISTEN_ADDRESS=10.2.1.4 etspaceman/cassandra-docker\n\nNote that listen_address will also be used for broadcast_address\n\nCassandra cluster + OpsCenter monitoring\n----------------------------------------\n\n1. Start a Cassandra cluster with 3 nodes:\n\n        ./scripts/run.sh 3\n\n2. Start the OpsCenter container:\n\n        docker run -d --name opscenter etspaceman/opscenter-docker\n\n    You can also add the `-p 8888:8888` option to bind container's 8888 port to host's 8888 port\n\n3. Connect and configure OpsCenter:\n\n    - Open a browser and connect to [http://replace.me:8888](http://replace.me:8888) - replace the host by the result returned by `./scripts/ipof.sh opscenter`.\n    - Click on the \"Use Existing Cluster\" button and put at least the IP of one node in the cluster in the host text box. The result of `./scripts/ipof.sh cass1` is a good candidate. Click \"Save Cluster\" button. OpsCenter start gathering data from the cluster but you do not get full-set metrics yet.\n    - You should see a \"0 of 3 agents connected\" message on the top of the GUI. Click the \"Fix\" link aside.\n    - In the popup, click \"Enter Credentials\" link and fill form with username `opscenter` and password `opscenter`. Click \"Done\".\n    - Click \"Install on all nodes\" and then \"Accept Fingerprints\". OpsCenter installs agent on cluster'snodes remotly.\n    - Once done, you should see the \"All agents connected\" message.\n",
  "dockerfile": "# Cassandra\n#\n# VERSION               1.0\n\nFROM centos:centos7\n\n# Add source repositories\nADD src/epel7.repo /etc/yum.repos.d/epel7.repo\nADD src/datastax.repo /etc/yum.repos.d/datastax.repo\n\n# Install Java, Install packages (sshd + supervisord + monitoring tools + cassandra)\nRUN yum install -y wget tar openssh-server openssh-clients supervisor datastax-ddc sysstat sudo which openssl hostname && \\\n\tyum clean all && \\\n\twget --progress=dot:giga -O /tmp/jdk.rpm --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.rpm\" && \\\n\trpm -ivh /tmp/jdk.rpm && rm /tmp/jdk.rpm && \\\n\talternatives --install /usr/bin/java java /usr/java/default/bin/java 20000\n\n# Configure SSH server\n# Create OpsCenter account\nRUN mkdir -p /var/run/sshd && chmod -rx /var/run/sshd && \\\n\tssh-keygen -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key && \\\n\tsed -ri 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config && \\\n\tsed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \\\n\tsed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config && \\\n\tuseradd -m -G users,root -p $(openssl passwd -1 \"opscenter\") opscenter && \\\n\techo \"%root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n\n# Configure supervisord\nADD src/supervisord.conf /etc/supervisord.conf\nRUN mkdir -p /var/log/supervisor\n\n# Deploy startup script\nADD src/start.sh /usr/local/bin/start\n\n# Necessary since cassandra is trying to override the system limitations\n# See https://groups.google.com/forum/#!msg/docker-dev/8TM_jLGpRKU/dewIQhcs7oAJ\nRUN rm -f /etc/security/limits.d/cassandra.conf\n\n# Work around a nasty Cassandra packaging error\nRUN sed -i s/jamm-0.2.6.jar/jamm-0.2.8.jar/ /usr/share/cassandra/cassandra.in.sh\n\nEXPOSE 7199 7000 7001 9160 9042\nEXPOSE 22 8012 61621\nUSER root\nCMD start\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "src/epel7.repo",
        "dest": "/etc/yum.repos.d/epel7.repo"
      },
      {
        "source": "src/datastax.repo",
        "dest": "/etc/yum.repos.d/datastax.repo"
      },
      {
        "source": "src/supervisord.conf",
        "dest": "/etc/supervisord.conf"
      },
      {
        "source": "src/start.sh",
        "dest": "/usr/local/bin/start"
      }
    ],
    "expose": [
      7199,
      22
    ],
    "volume": [],
    "run": [
      "yum install -y wget tar openssh-server openssh-clients supervisor datastax-ddc sysstat sudo which openssl hostname && \tyum clean all && \twget --progress=dot:giga -O /tmp/jdk.rpm --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.rpm\" && \trpm -ivh /tmp/jdk.rpm && rm /tmp/jdk.rpm && \talternatives --install /usr/bin/java java /usr/java/default/bin/java 20000",
      "mkdir -p /var/run/sshd && chmod -rx /var/run/sshd && \tssh-keygen -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key && \tsed -ri 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config && \tsed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \tsed -ri 's/#UsePAM no/UsePAM no/g' /etc/ssh/sshd_config && \tuseradd -m -G users,root -p $(openssl passwd -1 \"opscenter\") opscenter && \techo \"%root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
      "mkdir -p /var/log/supervisor",
      "rm -f /etc/security/limits.d/cassandra.conf",
      "sed -i s/jamm-0.2.6.jar/jamm-0.2.8.jar/ /usr/share/cassandra/cassandra.in.sh"
    ],
    "workdir": [],
    "from": "centos:centos7",
    "user": "root",
    "cmd": "start"
  },
  "source_repository_url": "git@github.com:medseek-engineering/cassandra-docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/medseek-engineering/cassandra-docker",
  "docker_repository": "etspaceman/cassandra-docker",
  "docker_image": "etspaceman/cassandra-docker",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        7199,
        22
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "etspaceman/cassandra-docker",
  "revision": "3.6",
  "uris": [
    "https://hub.docker.com/r/etspaceman/cassandra-docker",
    "https://hub.docker.com/v2/repositories/etspaceman/cassandra-docker",
    "git@github.com:medseek-engineering/cassandra-docker.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Data Store/Key-Value/Cassandra"
  ],
  "info_url": "https://hub.docker.com/r/etspaceman/cassandra-docker",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}