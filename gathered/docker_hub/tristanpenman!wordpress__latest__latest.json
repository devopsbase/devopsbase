{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/tristanpenman/wordpress",
    "repository_url": "https://hub.docker.com/v2/repositories/tristanpenman/wordpress",
    "tags_url": "https://hub.docker.com/v2/repositories/tristanpenman/wordpress/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/tristanpenman/wordpress/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/tristanpenman/wordpress/autobuild",
    "user": "tristanpenman",
    "name": "wordpress",
    "namespace": "tristanpenman",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 167,
    "last_updated": "2016-09-26T21:30:25.465894Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 177781839,
        "id": 1106973,
        "repository": 358034,
        "creator": 460229,
        "last_updater": 460229,
        "last_updated": "2016-09-26T21:30:25.087322Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "tristanpenman/docker-wordpress"
  },
  "name": "tristanpenman/wordpress Docker container",
  "description": "A minimal WordPress development environment with support for WP-CLI",
  "readme": "# Docker Image for WordPress #\n\n## Overview ##\n\nThis repo contains an unofficial Docker image for WordPress. It differs from the [official image](https://hub.docker.com/_/wordpress/) by taking steps to make it easier to install and customise a WordPress installation while initialising a container.\n\nThis image also has [WP-CLI](http://wp-cli.org/) installed, to allow for easy installation and configuration of plugins.\n\nYou can find this image on [Docker Hub](https://hub.docker.com/r/tristanpenman/wordpress/).\n\n## Usage ##\n\nYou can pull the latest build from Docker Hub:\n\n    docker pull tristanpenman/wordpress\n\nAlternatively, you can grab the latest source and build the image yourself:\n\n    git clone https://github.com/tristanpenman/docker-wordpress.git\n    docker build -t wordpress docker-wordpress\n\nThis will create an image with a repository name of 'wordpress'.\n\nThis image expects MySQL to be available. To get a database up and running quickly, you can use the official MySQL Docker image:\n\n    docker run --name mysql \\\n        -d mysql:5.7 \\\n        -e MYSQL_USER=wordpress \\\n        -e MYSQL_PASSWORD=wordpress \\\n        -e MYSQL_ROOT_PASSWORD=root \\\n        -e MYSQL_DATABASE=wordpress\n\nYou can then start a WordPress container, configured to talk to the database created by your MySQL container:\n\n    docker run --link mysql:mysql \\\n        -p 8080:80 \\\n        -e WORDPRESS_DB_NAME=wordpress \\\n        -e WORDPRESS_DB_PASSWORD=wordpress \\\n        -e WORDPRESS_DB_USER=wordpress \\\n        tristanpenman/wordpress\n\nIf you are using an image that you built locally, you would want to the replace the repository name 'tristanpenman/wordpress' with the name that you have chosen.\n\n## Apache ##\n\nBy default, Apache will listen on port 80 in the container. In the example above, the `-p` option is used to map port 80 in the container to port 8080 on the host.\n\n## Database Configuration ##\n\nWhen not relying on Docker's linked container functionality, you can use the following environment variables to tell WordPress how to connect to its MySQL database:\n\n * `WORDPRESS_DB_HOST` (required)\n * `WORDPRESS_DB_PORT` (optional; default is port 3306)\n * `WORDPRESS_DB_NAME` (optional; default is 'wordpress')\n * `WORDPRESS_DB_USER` (optional; default is 'wordpress')\n * `WORDPRESS_DB_PASSWORD` (optional; default is 'wordpress')\n * `WORDPRESS_DB_TABLE_PREFIX` (optional)\n\nIf you link your container to an official Docker MySQL container, then the following environment variables will be used as a fallback:\n\n * MYSQL_PORT_3306_TCP_ADDR\n * MYSQL_PORT_3306_TCP_PORT\n * MYSQL_ENV_MYSQL_DATABASE\n * MYSQL_ENV_MYSQL_USER\n * MYSQL_ENV_MYSQL_PASSWORD\n\nAfter parsing the environment, the final configuration will be exported via the following environment variables:\n\n * `DB_DRIVER`\n * `DB_NAME`\n * `DB_HOST`\n * `DB_PORT`\n * `DB_USER`\n * `DB_PASS`\n\n## Debug Configuration ##\n\nIn addition to database configuration, you can also enable WordPress debug logging using the following environment variables:\n\n * `WP_DEBUG` (set to `true` to enable debugging; default is `false`)\n * `WP_DEBUG_DISPLAY` (set to `true` to display all errors in the browser; default is the value of `$WP_DEBUG`)\n * `WP_DEBUG_LOG` (set to `true` to have all errors logged to the PHP error log; default is `false`)\n\nYou can also disable external HTTP requests by setting `WP_HTTP_BLOCK_EXTERNAL` to `true.\n\nSee the Docker Compose example below for an example of how these are set.\n\n## Customisation ##\n\nThis image has been designed with customisation in mind.\n\nYou will notice that this repo includes a script called `docker-entrypoint.sh`, which is run by the container at startup. This script takes care of installing and configuring WordPress, and if necessary, running any additional installation scripts.\n\nWhen using this image as the base image for your own Dockerfile, you can provide your own installation scripts to be run before or after `docker-entrypoint.sh` installs/configures WordPress. Scripts that you want run before-hand should be placed in `/scripts/pre-install.d`, while scripts that you want executed after Wordpress has been installed and configured should be placed in `/scripts/post-install.d`.\n\n### Example ###\n\nAs an example, a post-install script could install a WordPress plugin such as WooCommerce:\n\n    #!/bin/bash\n    #\n    # /scripts/post-install.d/00-install-woocommerce\n    #\n    set -e   # (errexit) Exit if any subcommand or pipeline returns a non-zero status\n    set -u   # (nounset) Exit on any attempt to use an uninitialised variable\n\n    shopt -s expand_aliases\n    alias wp=\"wp --path=$DOCUMENT_ROOT --allow-root\"\n\n    if ! $(wp plugin is-installed woocommerce); then\n        wp plugin install woocommerce\n    fi\n\n### Environment Variables ###\n\nNote that in the example above, the `DOCUMENT_ROOT` environment variable is used to refer to the location of the WordPress installation.\n\n## Docker Compose ##\n\nA convenient way to capture the configuration of your MySQL and WordPress images is to use [Docker Compose](https://docs.docker.com/compose/).\n\n### Example ###\n\n    # docker-compose.yml\n\n    web:\n      build: tristanpenman/wordpress\n      ports: \n       - \"8080:80\"\n      environment:\n       - WORDPRESS_DB_NAME=wordpress\n       - WORDPRESS_DB_PASSWORD=wordpress\n       - WORDPRESS_DB_USER=wordpress\n       - WP_DEBUG=true\n       - WP_DEBUG_DISPLAY=false\n       - WP_DEBUG_LOG=true\n      links:\n       - mysql\n\n    mysql:\n      image: mysql:5.7\n      environment:\n       - MYSQL_USER=wordpress\n       - MYSQL_PASSWORD=wordpress\n       - MYSQL_ROOT_PASSWORD=root\n       - MYSQL_DATABASE=wordpress\n\n## Supported Versions ##\n\n### Docker ###\n\nThis image has been tested with Docker version 1.8.3, and will generally be tested against the latest version of Docker at the time that any changes are made.\n\n### WP-CLI ###\n\nThis image includes version 0.24.1 of WP-CLI.\n\n## License ##\n\nThis Docker image is licensed under the MIT License.\n\nSee the LICENSE file for more information.\n",
  "dockerfile": "FROM php:5.6-apache\n\nMAINTAINER tristan@tristanpenman.com\n\n# Enable URL rewriting in .htaccess files\nRUN a2enmod rewrite\n\n# install the PHP extensions we need\nRUN apt-get update \\\n&& apt-get install -y libpng12-dev libjpeg-dev mysql-client \\\n&& docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \\\n&& docker-php-ext-install gd \\\n&& docker-php-ext-install mbstring \\\n&& docker-php-ext-install mysqli \\\n&& docker-php-ext-install opcache \\\n&& apt-get clean \\\n&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Allow an existing WordPress install to be mapped into /var/www/html\nVOLUME /var/www/html\n\n# Install wp-cli\nRUN curl -L https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar -o /usr/local/bin/wp \\\n&& chmod +x /usr/local/bin/wp\n\n# Replace the default apache2-foreground script with one that relies on apache2ctl, so\n# that /etc/apache2/envvars can be used to configure the environment of the www-data user\nCOPY bin/apache2-foreground /usr/local/bin/apache2-foreground\nRUN chmod +x /usr/local/bin/apache2-foreground\n\n# Set up entrypoint script\nENV SCRIPTS_DIR /scripts\nRUN mkdir /scripts /scripts/pre-install.d /scripts/post-install.d\nCOPY docker-entrypoint.sh /scripts/entrypoint.sh\nRUN chmod +x /scripts/entrypoint.sh\nENTRYPOINT [\"/scripts/entrypoint.sh\"]\n\nCMD [\"apache2-foreground\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [
      "/var/www/html"
    ],
    "run": [
      "a2enmod rewrite",
      "apt-get update && apt-get install -y libpng12-dev libjpeg-dev mysql-client && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr && docker-php-ext-install gd && docker-php-ext-install mbstring && docker-php-ext-install mysqli && docker-php-ext-install opcache && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*",
      "curl -L https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar -o /usr/local/bin/wp && chmod +x /usr/local/bin/wp",
      "chmod +x /usr/local/bin/apache2-foreground",
      "mkdir /scripts /scripts/pre-install.d /scripts/post-install.d",
      "chmod +x /scripts/entrypoint.sh"
    ],
    "workdir": [],
    "from": "php:5.6-apache",
    "maintainer": "tristan@tristanpenman.com",
    "copy": "docker-entrypoint.sh /scripts/entrypoint.sh",
    "env": {
      "SCRIPTS_DIR": "/scripts"
    },
    "entrypoint": "[\"/scripts/entrypoint.sh\"]",
    "cmd": "[\"apache2-foreground\"]"
  },
  "source_repository_url": "https://github.com/tristanpenman/docker-wordpress.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/tristanpenman/docker-wordpress",
  "docker_repository": "tristanpenman/wordpress",
  "docker_image": "tristanpenman/wordpress",
  "parameters_schema": {
    "SCRIPTS_DIR": {
      "default": "/scripts",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "tristanpenman/wordpress",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/tristanpenman/wordpress",
    "https://hub.docker.com/v2/repositories/tristanpenman/wordpress",
    "https://github.com/tristanpenman/docker-wordpress.git"
  ],
  "labels": [
    "Docker",
    "Type/Devopsware/IDE",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/CLI"
  ],
  "info_url": "https://hub.docker.com/r/tristanpenman/wordpress",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}