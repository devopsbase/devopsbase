{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/garystafford/spring-music-docker-tomcat",
    "repository_url": "https://hub.docker.com/v2/repositories/garystafford/spring-music-docker-tomcat",
    "tags_url": "https://hub.docker.com/v2/repositories/garystafford/spring-music-docker-tomcat/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/garystafford/spring-music-docker-tomcat/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/garystafford/spring-music-docker-tomcat/autobuild",
    "user": "garystafford",
    "name": "spring-music-docker-tomcat",
    "namespace": "garystafford",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 193,
    "last_updated": "2016-09-18T14:22:42.962282Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 190882430,
        "id": 947886,
        "repository": 329241,
        "creator": 145277,
        "last_updater": 145277,
        "last_updated": "2016-09-18T14:22:42.594113Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "garystafford/spring-music-docker"
  },
  "name": "garystafford/spring-music-docker-tomcat Docker container",
  "description": "spring-music-docker-tomcat",
  "readme": "###### Build:\n\n[![Build Status](https://semaphoreci.com/api/v1/garystafford/spring-music/branches/springmusic_v2/badge.svg)](https://semaphoreci.com/garystafford/spring-music) [![Build Status](https://travis-ci.org/garystafford/spring-music.svg?branch=springmusic_v2)](https://travis-ci.org/garystafford/spring-music)\n\n## Spring Music Revisited: Java-Spring-MongoDB Web App with Docker 1.12\n\n_Build, deploy, test, and monitor a multi-container, MongoDB-backed, Java Spring web application, using the new Docker 1.12._\n\n![Project Architecture](https://programmaticponderings.files.wordpress.com/2016/08/spring-music-diagram3.png)\n\n### Introduction\n\n_This post and associated project code were updated 9/3/2016 to use Tomcat 8.5.4 with OpenJDK 8._\n\nThis post and the post's example project represent an update to a previous post, [Build and Deploy a Java-Spring-MongoDB Application using Docker](https://programmaticponderings.wordpress.com/2015/09/07/building-and-deploying-a-multi-container-java-spring-mongodb-application-using-docker/). This new post incorporates many improvements made in Docker 1.12, including the use of Docker Compose's v2 YAML format. The post's project was also updated to use Filebeat with ELK, as opposed to Logspout, which was used previously.\n\nIn this post, we will demonstrate how to build, test, deploy, and manage a Java Spring web application, hosted on Apache Tomcat, load-balanced by NGINX, monitored by ELK with Filebeat, and all containerized with Docker.\n\nWe will use a sample Java Spring application, [Spring Music](https://github.com/cloudfoundry-samples/spring-music), available on GitHub from Cloud Foundry. The Spring Music sample record album collection application was originally designed to demonstrate the use of database services on [Cloud Foundry](http://www.cloudfoundry.com), using the [Spring Framework](http://www.springframework.org). Instead of Cloud Foundry, we will host the Spring Music application locally, using Docker on VirtualBox, and optionally on AWS.\n\nAll files necessary to build this project are stored on the `docker_v2` branch of the [garystafford/spring-music-docker](https://github.com/garystafford/spring-music-docker/tree/docker_v2) repository on GitHub. The Spring Music source code is stored on the `springmusic_v2` branch of the [garystafford/spring-music](https://github.com/garystafford/spring-music/tree/springmusic_v2) repository, also on GitHub.\n\n![Spring Music Application](https://programmaticponderings.files.wordpress.com/2016/08/spring-music2.png)\n\n### Application Architecture\n\nThe Java Spring Music application stack contains the following technologies: [Java](http://openjdk.java.net), [Spring Framework](http://projects.spring.io/spring-framework), [NGINX](http://nginx.org), [Apache Tomcat](http://tomcat.apache.org), [MongoDB](http://mongoDB.com), the [ELK Stack](https://www.elastic.co/products), and [Filebeat](https://www.elastic.co/products/beats/filebeat). Testing frameworks include the [Spring MVC Test Framework](http://docs.spring.io/autorepo/docs/spring/4.3.x/spring-framework-reference/html/overview.html#overview-testing), [Mockito](http://mockito.org/), [Hamcrest](http://hamcrest.org/JavaHamcrest/), and [JUnit](http://junit.org/junit4/).\n\nA few changes were necessary to the original Spring Music application to make it work for this demonstration. At a high-level, the changes included:\n\n-   Move from Java 1.7 to 1.8 (including newer Tomcat version)\n-   Add unit tests for Continuous Integration demonstration purposes\n-   Modify MongoDB configuration class to work with non-local, containerized MongoDB instances\n-   Add Gradle `warNoStatic` task to build WAR without static assets\n-   Add Gradle `zipStatic` task to ZIP up the application's static assets for deployment to NGINX\n-   Add Gradle `zipGetVersion` task with a versioning scheme for build artifacts\n-   Add `context.xml` file and `MANIFEST.MF` file to the WAR file\n-   Add Log4j `RollingFileAppender` appender to send log entries to Filebeat\n-   Update versions of several dependencies, including Gradle, Spring, and Tomcat\n\nWe will use the following technologies to build, publish, deploy, and host the Java Spring Music application: [Gradle](https://gradle.org), [git](https://git-scm.com), [GitHub](https://github.com), [Travis CI](https://travis-ci.org) or [Semaphore](https://semaphoreci.com), [Oracle VirtualBox](https://www.virtualbox.org), [Docker](https://www.docker.com), [Docker Compose](https://www.docker.com/docker-compose), [Docker Machine](https://www.docker.com/docker-machine), [Docker Hub](https://hub.docker.com), and optionally, [Amazon Web Services (AWS)](http://aws.amazon.com).\n\n#### NGINX\n\nTo increase performance, the Spring Music web application's static content will be hosted by [NGINX](http://nginx.org). The application's WAR file will be hosted by [Apache Tomcat](http://tomcat.apache.org). Requests for non-static content will be proxied through NGINX on the front-end, to a set of three load-balanced Tomcat instances on the back-end. To further increase application performance, NGINX will also be configured for browser caching of the static content. In many enterprise environments, the use of a Java EE application server, like Tomcat, is still not uncommon.\n\nReverse proxying and caching are configured thought NGINX's `default.conf` file, in the `server` configuration section:\n\n```text\nserver {\n  listen        80;\n  server_name   proxy;\n\n  location ~* \\/assets\\/(css|images|js|template)\\/* {\n    root          /usr/share/nginx/;\n    expires       max;\n    add_header    Pragma public;\n    add_header    Cache-Control \"public, must-revalidate, proxy-revalidate\";\n    add_header    Vary Accept-Encoding;\n    access_log    off;\n  }\n```\n\nThe three Tomcat instances will be manually configured for load-balancing using NGINX's default round-robin load-balancing algorithm. This is configured through the `default.conf` file, in the `upstream` configuration section:\n\n```text\nupstream backend {\n  server music_app_1:8080;\n  server music_app_2:8080;\n  server music_app_3:8080;\n}\n```\n\nClient requests are received through port `80` on the NGINX server. NGINX redirects requests, which are not for non-static assets, to one of the three Tomcat instances on port `8080`.\n\n#### MongoDB\n\nThe Spring Music application was designed to work with a number of data stores, including [MySQL](https://www.mysql.com), [Postgres](https://www.postgresql.org), [Oracle](https://www.oracle.com/database/index.html), [MongoDB](https://www.mongodb.com), [Redis](http://redis.io), and [H2](http://www.h2database.com/html/main.html), an in-memory Java SQL database. Given the choice of both SQL and NoSQL databases, we will select MongoDB.\n\nThe Spring Music application, hosted by Tomcat, will store and modify record album data in a single instance of MongoDB. MongoDB will be populated with a collection of album data from a JSON file, when the Spring Music application first creates the MongoDB database instance.\n\n#### ELK\n\nLastly, the ELK Stack with Filebeat, will aggregate both Docker and Java Log4j log entries, providing debugging and analytics to our demonstration. A similar method for aggregating logs, using Logspout instead of Filebeat, can be found in this previous [post](https://programmaticponderings.wordpress.com/2015/08/02/log-aggregation-visualization-and-analysis-of-microservices-using-elk-stack-and-logspout/).\n\n![Kibana 4 Web Console](https://programmaticponderings.files.wordpress.com/2016/08/kibana4_output_filebeat1.png)\n\n### Continuous Integration\n\nIn this post's example, two build artifacts, a WAR file for the application and ZIP file for the static web content, are built automatically by [Travis CI](https://travis-ci.org), whenever source code changes are pushed to the `springmusic_v2` branch of the [garystafford/spring-music](https://github.com/garystafford/spring-music) repository on GitHub.\n\n![Travis CI Output](https://programmaticponderings.files.wordpress.com/2016/08/travisci1.png)\n\nFollowing a successful build and a small number of unit tests, Travis CI pushes the build artifacts to the `build-artifacts` branch on the same GitHub project. The `build-artifacts` branch acts as a pseudo [binary repository](https://en.wikipedia.org/wiki/Binary_repository_manager) for the project, much like JFrog's [Artifactory](https://www.jfrog.com/artifactory). These artifacts are used later by DockerHub to automatically build immutable Docker images.\n\n![Build Artifact Repository](https://programmaticponderings.files.wordpress.com/2016/08/build-artifacts.png)\n\n#### Build Notifications\n\nI've configured Travis CI pushes build notifications to my [Slack](https://slack.com) channel, which eliminates the need to actively monitor Travis CI.\n\n![Slack](https://programmaticponderings.files.wordpress.com/2016/08/travisci_slack.png)\n\n#### Automation Scripting\n\nThe `.travis.yaml` file, custom `gradle.build` Gradle tasks, and the `deploy_travisci.sh` script, handles the Travis CI automation described, above.\n\nTravis CI `.travis.yaml` file:\n\n```yaml\nlanguage: java\njdk: oraclejdk8\nbefore_install:\n- chmod +x gradlew\nbefore_deploy:\n- chmod ugo+x deploy.sh\nscript:\n- ./gradlew wrapper\n- ./gradlew clean build\n- ./gradlew warNoStatic warCopy zipGetVersion zipStatic\n- sh ./deploy_travisci.sh\nenv:\n  global:\n  - GH_REF: github.com/garystafford/spring-music.git\n  - secure: <GH_TOKEN_secure_hash_here>\n  - secure: <COMMIT_AUTHOR_EMAIL_secure_hash_here>\nnotifications:\n  slack:\n  - secure: <SLACK_secure_hash_here>\n```\n\nCustom `gradle.build` tasks:\n\n```groovy\n// versioning build artifacts\ndef major = '2'\ndef minor = System.env.TRAVIS_BUILD_NUMBER\nminor = (minor != 'null') ? minor : System.env.SEMAPHORE_BUILD_NUMBER\nminor = (minor != 'null') ? minor : '0'\ndef artifact_version = major + '.' + minor\n\n// new Gradle build tasks\ntask warNoStatic(type: War) {\n  // omit the version from the war file name\n  version = ''\n  exclude '**/assets/**'\n  manifest {\n    attributes\n      'Manifest-Version': '1.0',\n      'Created-By': currentJvm,\n      'Gradle-Version': GradleVersion.current().getVersion(),\n      'Implementation-Title': archivesBaseName + '.war',\n      'Implementation-Version': artifact_version,\n      'Implementation-Vendor': 'Gary A. Stafford'\n  }\n}\n\ntask warCopy(type: Copy) {\n  from 'build/libs'\n  into 'build/distributions'\n  include '**/*.war'\n}\n\ntask zipGetVersion (type: Task) {\n  ext.versionfile =\n    new File(\"${projectDir}/src/main/webapp/assets/buildinfo.properties\")\n  versionfile.text = 'build.version=' + artifact_version\n}\n\ntask zipStatic(type: Zip) {\n  from 'src/main/webapp/assets'\n  appendix = 'static'\n  version = ''\n}\n\ntomcatRun {\n    outputFile = file('tomcat.log')\n    configFile = file('src/main/webapp/META-INF/context.xml')\n}\n```\n\nThe `deploy_travisci.sh` file:\n\n```bash\n#!/bin/bash\n\nset -e # exit with nonzero exit code if anything fails\n\ncd build/distributions\ngit init\n\ngit config user.name \"travis-ci\"\ngit config user.email \"${COMMIT_AUTHOR_EMAIL}\"\n\ngit add .\ngit commit -m \"Deploy Travis CI Build #${TRAVIS_BUILD_NUMBER} artifacts to GitHub\"\n\ngit push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" \\\n  master:build-artifacts > /dev/null 2>&1\n```\n\nYou can easily replicate the project's continuous integration automation using your choice of toolchains. [GitHub](https://github.com) or [BitBucket](https://bitbucket.org) are good choices for distributed version control. For continuous integration and deployment, I recommend Travis CI, [Semaphore](https://semaphoreci.com), [Codeship](https://codeship.com), or [Jenkins](https://jenkins.io). Couple this with a good persistent chat application, such as Glider Labs' [Slack](https://slack.com) or Atlassian's [HipChat](https://www.atlassian.com/software/hipchat).\n\n### Building the Docker Environment\n\nMake sure VirtualBox, Docker, Docker Compose, and Docker Machine, are installed and running. At the time of this post, I have the following versions of software installed on my MacBook Pro:\n\n```text\nMac OS X 10.11.6\nVirtualBox 5.0.26\nDocker 1.12.1-beta25\nDocker Compose 1.8.0\nDocker Machine 0.8.1\n```\n\nTo clone the project, build the host VM, pull and build the Docker images, and build containers, run the build script, using the following command: `sh ./build_project.sh`. This script is useful when working with CI/CD automation tools, such as [Jenkins CI](https://jenkins-ci.org/) or [ThoughtWorks go](http://www.thoughtworks.com/products/go-continuous-delivery). However, I strongly suggest manually running each command, to gain a better understand the process.\n\n```bash\nset -ex\n\n# clone project\ngit clone -b docker_v2 --single-branch \\\n  https://github.com/garystafford/spring-music-docker.git music \\\n  && cd \"$_\"\n\n# provision VirtualBox VM\ndocker-machine create --driver virtualbox springmusic\n\n# set new environment\ndocker-machine env springmusic \\\n  && eval \"$(docker-machine env springmusic)\"\n\n# mount a named volume on host to store mongo and elk data\n# ** assumes your project folder is 'music' **\ndocker volume create --name music_data\ndocker volume create --name music_elk\n\n# create bridge network for project\n# ** assumes your project folder is 'music' **\ndocker network create -d bridge music_net\n\n# build images and orchestrate start-up of containers (in this order)\ndocker-compose -p music up -d elk && sleep 15 \\\n  && docker-compose -p music up -d mongodb && sleep 15 \\\n  && docker-compose -p music up -d app \\\n  && docker-compose scale app=3 && sleep 15 \\\n  && docker-compose -p music up -d proxy && sleep 15\n\n# optional: configure local DNS resolution for application URL\n#echo \"$(docker-machine ip springmusic)   springmusic.com\" | sudo tee --append /etc/hosts\n\n# run a simple connectivity test of application\nfor i in {1..9}; do curl -I $(docker-machine ip springmusic); done\n```\n\n#### Deploying to AWS\n\nBy simply changing the Docker Machine driver to AWS EC2 from VirtualBox, and providing your AWS credentials, the `springmusic` environment can also be built on AWS.\n\n#### Build Process\n\nDocker Machine provisions a single VirtualBox `springmusic` VM on which host the project's containers. VirtualBox provides a quick and easy solution that can be run locally for initial development and testing of the application.\n\nNext, two volumes and project-specific Docker bridge network are built.\n\nNext, using the project's individual Dockerfiles, Docker Compose pulls base Docker images from Docker Hub for NGINX, Tomcat, ELK, and MongoDB. Project-specific immutable Docker images are then built for NGINX, Tomcat, and MongoDB. While constructing the project-specific Docker images for NGINX and Tomcat, the latest Spring Music build artifacts are pulled and installed into the corresponding Docker images.\n\nFinally, Docker Compose builds and deploys (6) containers onto the VirtualBox VM, including (1) NGINX, (3) Tomcat, (1) MongoDB, and (1) ELK.\n\nThe NGINX `Dockerfile`:\n\n```text\n# NGINX image with build artifact\n\nFROM nginx:latest\n\nMAINTAINER Gary A. Stafford <garystafford@rochester.rr.com>\nENV REFRESHED_AT 2016-09-17\n\nENV GITHUB_REPO https://github.com/garystafford/spring-music/raw/build-artifacts\nENV STATIC_FILE spring-music-static.zip\n\nRUN apt-get update -qq \\\n  && apt-get install -qqy curl wget unzip nano \\\n  && apt-get clean \\\n  \\\n  && wget -O /tmp/${STATIC_FILE} ${GITHUB_REPO}/${STATIC_FILE} \\\n  && unzip /tmp/${STATIC_FILE} -d /usr/share/nginx/assets/\n\nCOPY default.conf /etc/nginx/conf.d/default.conf\n\n# tweak nginx image set-up, remove log symlinks\nRUN rm /var/log/nginx/access.log /var/log/nginx/error.log\n\n# install Filebeat\nENV FILEBEAT_VERSION=filebeat_1.2.3_amd64.deb\nRUN curl -L -O https://download.elastic.co/beats/filebeat/${FILEBEAT_VERSION} \\\n && dpkg -i ${FILEBEAT_VERSION} \\\n && rm ${FILEBEAT_VERSION}\n\n# configure Filebeat\nADD filebeat.yml /etc/filebeat/filebeat.yml\n\n# CA cert\nRUN mkdir -p /etc/pki/tls/certs\nADD logstash-beats.crt /etc/pki/tls/certs/logstash-beats.crt\n\n# start Filebeat\nADD ./start.sh /usr/local/bin/start.sh\nRUN chmod +x /usr/local/bin/start.sh\nCMD [ \"/usr/local/bin/start.sh\" ]\n```\n\nThe Tomcat `Dockerfile`:\n\n```text\n# Apache Tomcat image with build artifact\n\nFROM tomcat:8.5.4-jre8\n\nMAINTAINER Gary A. Stafford <garystafford@rochester.rr.com>\nENV REFRESHED_AT 2016-09-17\n\nENV GITHUB_REPO https://github.com/garystafford/spring-music/raw/build-artifacts\nENV APP_FILE spring-music.war\nENV TERM xterm\nENV JAVA_OPTS -Djava.security.egd=file:/dev/./urandom\n\nRUN apt-get update -qq \\\n  && apt-get install -qqy curl wget \\\n  && apt-get clean \\\n  \\\n  && touch /var/log/spring-music.log \\\n  && chmod 666 /var/log/spring-music.log \\\n  \\\n  && wget -q -O /usr/local/tomcat/webapps/ROOT.war ${GITHUB_REPO}/${APP_FILE} \\\n  && mv /usr/local/tomcat/webapps/ROOT /usr/local/tomcat/webapps/_ROOT\n\nCOPY tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml\n\n# install Filebeat\nENV FILEBEAT_VERSION=filebeat_1.2.3_amd64.deb\nRUN curl -L -O https://download.elastic.co/beats/filebeat/${FILEBEAT_VERSION} \\\n && dpkg -i ${FILEBEAT_VERSION} \\\n && rm ${FILEBEAT_VERSION}\n\n# configure Filebeat\nADD filebeat.yml /etc/filebeat/filebeat.yml\n\n# CA cert\nRUN mkdir -p /etc/pki/tls/certs\nADD logstash-beats.crt /etc/pki/tls/certs/logstash-beats.crt\n\n# start Filebeat\nADD ./start.sh /usr/local/bin/start.sh\nRUN chmod +x /usr/local/bin/start.sh\nCMD [ \"/usr/local/bin/start.sh\" ]\n```\n\n#### Docker Compose v2 YAML\n\nThis post was recently updated for Docker 1.12, and to use Docker Compose's v2 YAML file format. The post's `docker-compose.yml` takes advantage of improvements in Docker 1.12 and Docker Compose's v2 YAML. Improvements to the YAML file include eliminating the need to link containers and expose ports, and the addition of named networks and volumes.\n\n```yaml\nversion: '2'\n\nservices:\n  proxy:\n    build: nginx/\n    ports:\n    - 80:80\n    networks:\n    - net\n    depends_on:\n    - app\n    hostname: proxy\n    container_name: proxy\n\n  app:\n    build: tomcat/\n    ports:\n    - 8080\n    networks:\n    - net\n    depends_on:\n    - mongodb\n    hostname: app\n\n  mongodb:\n    build: mongodb/\n    ports:\n    - 27017:27017\n    networks:\n    - net\n    depends_on:\n    - elk\n    hostname: mongodb\n    container_name: mongodb\n    volumes:\n    - music_data:/data/db\n    - music_data:/data/configdb\n\n  elk:\n    image: sebp/elk:latest\n    ports:\n    - 5601:5601\n    - 9200:9200\n    - 5044:5044\n    - 5000:5000\n    networks:\n    - net\n    volumes:\n    - music_elk:/var/lib/elasticsearch\n    hostname: elk\n    container_name: elk\n\nvolumes:\n  music_data:\n    external: true\n  music_elk:\n    external: true\n\nnetworks:\n  net:\n    driver: bridge\n```\n\n### The Results\n\n![Project Architecture](https://programmaticponderings.files.wordpress.com/2016/08/spring-music-diagram3.png)\n\nBelow are the results of building the project.\n\n```text\n# Resulting Docker Machine VirtualBox VM:\n$ docker-machine ls\nNAME          ACTIVE   DRIVER       STATE     URL                         SWARM              DOCKER        ERRORS\nspringmusic   *        virtualbox   Running   tcp://192.168.99.100:2376                      v1.12.1\n\n# Resulting external volume:\n$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               music_data\nlocal               music_elk\n\n# Resulting bridge network:\n$ docker network ls\nNETWORK ID          NAME             DRIVER              SCOPE\nca901af3c4cd        music_net           bridge              local\n\n# Resulting Docker images - (4) base images and (3) project images:\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nmusic_proxy         latest              0c7103c814df        About a minute ago   250.3 MB\nmusic_app           latest              9334e69eb412        2 minutes ago        400.3 MB\nmusic_mongodb       latest              55d065b75ac9        3 minutes ago        366.4 MB\n\nnginx               latest              4a88d06e26f4        47 hours ago         183.5 MB\nsebp/elk            latest              2a670b414fba        2 weeks ago          887.2 MB\ntomcat              8.5.4-jre8          98cc750770ba        2 weeks ago          334.5 MB\nmongo               latest              48b8b08dca4d        2 weeks ago          366.4 MB\n\n# Resulting (6) Docker containers\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                                                                                      NAMES\n5b3715650db3        music_proxy         \"/usr/local/bin/start\"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp, 443/tcp                                                                                proxy\n9204f2959055        music_app           \"/usr/local/bin/start\"   2 minutes ago        Up 2 minutes        0.0.0.0:32780->8080/tcp                                                                                    music_app_3\nef97790a820c        music_app           \"/usr/local/bin/start\"   2 minutes ago        Up 2 minutes        0.0.0.0:32779->8080/tcp                                                                                    music_app_2\n3549fd082ca9        music_app           \"/usr/local/bin/start\"   2 minutes ago        Up 2 minutes        0.0.0.0:32778->8080/tcp                                                                                    music_app_1\n3da692c204da        music_mongodb       \"/entrypoint.sh mongo\"   4 minutes ago        Up 4 minutes        0.0.0.0:27017->27017/tcp                                                                                   mongodb\n2e41cbdbc8e0        sebp/elk:latest     \"/usr/local/bin/start\"   4 minutes ago        Up 4 minutes        0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:5601->5601/tcp, 0.0.0.0:9200->9200/tcp, 9300/tcp   elk\n```\n\n### Testing the Application\n\nBelow are partial results of the curl test, hitting the NGINX endpoint. Note the different IP addresses in the `Upstream-Address` field between requests. This test proves NGINX's round-robin load-balancing is working across the three Tomcat application instances, `music_app_1`, `music_app_2`, and `music_app_3`.\n\nAlso, note the sharp decrease in the `Request-Time` between the first three requests and subsequent three requests. The `Upstream-Response-Time` to the Tomcat instances doesn't change, yet the total `Request-Time` is much shorter, due to caching of the application's static assets by NGINX.\n\n```text\n$ for i in {1..6}; do curl -I $(docker-machine ip springmusic);done\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:50 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.575\nUpstream-Address: 172.18.0.4:8080\nUpstream-Response-Time: 1474137230.048\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:51 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.711\nUpstream-Address: 172.18.0.5:8080\nUpstream-Response-Time: 1474137230.865\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:52 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.326\nUpstream-Address: 172.18.0.6:8080\nUpstream-Response-Time: 1474137231.812\n\n# assets now cached...\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:53 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.012\nUpstream-Address: 172.18.0.4:8080\nUpstream-Response-Time: 1474137233.111\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:53 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.017\nUpstream-Address: 172.18.0.5:8080\nUpstream-Response-Time: 1474137233.350\n\nHTTP/1.1 200\nServer: nginx/1.11.4\nDate: Sat, 17 Sep 2016 18:33:53 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 2094\nConnection: keep-alive\nAccept-Ranges: bytes\nETag: W/\"2094-1473924940000\"\nLast-Modified: Thu, 15 Sep 2016 07:35:40 GMT\nContent-Language: en\nRequest-Time: 0.013\nUpstream-Address: 172.18.0.6:8080\nUpstream-Response-Time: 1474137233.594\n```\n\n### Spring Music Application Links\n\nAssuming the `springmusic` VM is running at `192.168.99.100`, the following links can be used to access various project endpoints. Note the Tomcat instances each map to randomly exposed ports. These ports are not required by NGINX, which maps to port `8080` for each instance. The port is only required if you want access to the Tomcat Web Console. The port shown below, `32771`, is merely used as an example.\n\n-   Spring Music Application: [192.168.99.100](http://192.168.99.100)\n-   NGINX Status: [192.168.99.100/nginx_status](http://192.168.99.100/nginx_status)\n-   Tomcat Web Console - music_app_1\\*: [192.168.99.100:32771/manager](http://192.168.99.100:32771/manager)\n-   Environment Variables - music_app_1: [192.168.99.100:32771/env](http://192.168.99.100:32771/env)\n-   Album List (RESTful endpoint) - music_app_1: [192.168.99.100:32771/albums](http://192.168.99.100:32771/albums)\n-   Elasticsearch Info: [192.168.99.100:9200](http://192.168.99.100:8082)\n-   Elasticsearch Status: [192.168.99.100:9200/\\_status?pretty](http://192.168.99.100:9200/_status?pretty)\n-   Kibana Web Console: [192.168.99.100:5601](http://192.168.99.100:5601)\n\n_\\* The Tomcat user name is `admin` and the password is `t0mcat53rv3r`._\n\n### TODOs\n\n-   Automate the Docker image build and publish processes\n-   Automate the Docker container build and deploy processes\n-   Automate post-deployment verification testing of project infrastructure\n-   Add Docker Swarm multi-host capabilities with overlay networking\n-   Update Spring Music with latest CF Spring Boot project revisions\n-   Include scripting example to stand-up project on AWS\n-   Add Consul and Consul Template for NGINX configuration\n\n### Helpful Links\n\n-   [Cloud Foundry's Spring Music Example](https://github.com/cloudfoundry-samples/spring-music)\n-   [Getting Started with Gradle for Java](https://gradle.org/getting-started-gradle-java)\n-   [Introduction to Gradle](https://semaphoreci.com/community/tutorials/introduction-to-gradle)\n-   [Spring Framework](http://projects.spring.io/spring-framework)\n-   [Understanding Nginx HTTP Proxying, Load Balancing, Buffering, and Caching](https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching)\n-   [Common conversion patterns for log4j's PatternLayout](http://www.codejava.net/coding/common-conversion-patterns-for-log4js-patternlayout)\n-   [Spring @PropertySource example](http://www.mkyong.com/spring/spring-propertysources-example)\n-   [Java log4j logging](http://help.papertrailapp.com/kb/configuration/java-log4j-logging/)\n-   [Spring Test MVC ResultMatchers](https://github.com/spring-projects/spring-test-mvc/tree/master/src/test/java/org/springframework/test/web/server/samples/standalone/resultmatchers)\n",
  "dockerfile": "# Apache Tomcat image with build artifact\n\nFROM tomcat:8.5.4-jre8\n\nMAINTAINER Gary A. Stafford <garystafford@rochester.rr.com>\nENV REFRESHED_AT 2016-09-17\n\nENV GITHUB_REPO https://github.com/garystafford/spring-music/raw/build-artifacts\nENV APP_FILE spring-music.war\nENV TERM xterm\nENV JAVA_OPTS -Djava.security.egd=file:/dev/./urandom\n\nRUN apt-get update -qq \\\n  && apt-get install -qqy curl wget \\\n  && apt-get clean \\\n  \\\n  && touch /var/log/spring-music.log \\\n  && chmod 666 /var/log/spring-music.log \\\n  \\\n  && wget -q -O /usr/local/tomcat/webapps/ROOT.war ${GITHUB_REPO}/${APP_FILE} \\\n  && mv /usr/local/tomcat/webapps/ROOT /usr/local/tomcat/webapps/_ROOT\n\nCOPY tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml\n\n# install Filebeat\nENV FILEBEAT_VERSION=filebeat_1.2.3_amd64.deb\nRUN curl -L -O https://download.elastic.co/beats/filebeat/${FILEBEAT_VERSION} \\\n && dpkg -i ${FILEBEAT_VERSION} \\\n && rm ${FILEBEAT_VERSION}\n\n# configure Filebeat\nADD filebeat.yml /etc/filebeat/filebeat.yml\n\n# CA cert\nRUN mkdir -p /etc/pki/tls/certs\nADD logstash-beats.crt /etc/pki/tls/certs/logstash-beats.crt\n\n# start Filebeat\nADD ./start.sh /usr/local/bin/start.sh\nRUN chmod +x /usr/local/bin/start.sh\nCMD [ \"/usr/local/bin/start.sh\" ]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "filebeat.yml",
        "dest": "/etc/filebeat/filebeat.yml"
      },
      {
        "source": "logstash-beats.crt",
        "dest": "/etc/pki/tls/certs/logstash-beats.crt"
      },
      {
        "source": "./start.sh",
        "dest": "/usr/local/bin/start.sh"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [
      "apt-get update -qq   && apt-get install -qqy curl wget   && apt-get clean     && touch /var/log/spring-music.log   && chmod 666 /var/log/spring-music.log     && wget -q -O /usr/local/tomcat/webapps/ROOT.war ${GITHUB_REPO}/${APP_FILE}   && mv /usr/local/tomcat/webapps/ROOT /usr/local/tomcat/webapps/_ROOT",
      "curl -L -O https://download.elastic.co/beats/filebeat/${FILEBEAT_VERSION}  && dpkg -i ${FILEBEAT_VERSION}  && rm ${FILEBEAT_VERSION}",
      "mkdir -p /etc/pki/tls/certs",
      "chmod +x /usr/local/bin/start.sh"
    ],
    "workdir": [],
    "from": "tomcat:8.5.4-jre8",
    "maintainer": "Gary A. Stafford <garystafford@rochester.rr.com>",
    "env": {
      "REFRESHED_AT": "2016-09-17",
      "GITHUB_REPO": "https://github.com/garystafford/spring-music/raw/build-artifacts",
      "APP_FILE": "spring-music.war",
      "TERM": "xterm",
      "JAVA_OPTS": "-Djava.security.egd",
      "FILEBEAT_VERSION": "filebeat_1.2.3_amd64.deb"
    },
    "copy": "tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml",
    "cmd": "[ \"/usr/local/bin/start.sh\" ]"
  },
  "source_repository_url": "https://github.com/garystafford/spring-music-docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/garystafford/spring-music-docker",
  "docker_repository": "garystafford/spring-music-docker-tomcat",
  "docker_image": "garystafford/spring-music-docker-tomcat",
  "parameters_schema": {
    "REFRESHED_AT": {
      "default": "2016-09-17",
      "type": "string",
      "mapping": "environment_variable"
    },
    "GITHUB_REPO": {
      "default": "https://github.com/garystafford/spring-music/raw/build-artifacts",
      "type": "string",
      "mapping": "environment_variable"
    },
    "APP_FILE": {
      "default": "spring-music.war",
      "type": "string",
      "mapping": "environment_variable"
    },
    "TERM": {
      "default": "xterm",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JAVA_OPTS": {
      "default": "-Djava.security.egd",
      "type": "string",
      "mapping": "environment_variable"
    },
    "FILEBEAT_VERSION": {
      "default": "filebeat_1.2.3_amd64.deb",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "garystafford/spring-music-docker-tomcat",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/garystafford/spring-music-docker-tomcat",
    "https://hub.docker.com/v2/repositories/garystafford/spring-music-docker-tomcat",
    "https://github.com/garystafford/spring-music-docker.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/Amazon/RDS",
    "Binding/Region/North America/US",
    "Type/Middleware/Application Server/Tomcat"
  ],
  "info_url": "https://hub.docker.com/r/garystafford/spring-music-docker-tomcat",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}