{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/maxexcloo/node",
    "repository_url": "https://hub.docker.com/v2/repositories/maxexcloo/node",
    "tags_url": "https://hub.docker.com/v2/repositories/maxexcloo/node/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/maxexcloo/node/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/maxexcloo/node/autobuild",
    "user": "maxexcloo",
    "name": "node",
    "namespace": "maxexcloo",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 54,
    "last_updated": "2016-10-03T22:58:07.345921Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 174937685,
        "id": 4523266,
        "repository": 879624,
        "creator": 17868,
        "last_updater": 17868,
        "last_updated": "2016-10-03T22:58:07.055047Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "maxexcloo/Docker"
  },
  "name": "maxexcloo/node Docker container",
  "description": "Framework container with Node.js installed.",
  "readme": "**Description**\nThis repository contains a collection of Docker configurations I've put together\nto meet my needs.\n\n**Directory Structure**\nAll frameworks have a simple directory structure that can be used to easily\ndeploy web applications. Try it for yourself. See below for an example (all\napplications & services follow this basic structure).\n\n    /app - application directory (web root, etc), not modified at runtime\n        index.html - example application\n    /config - configuration directory, not modified at runtime\n        /init - init file directory, not modified at runtime\n            application - executed at startup of application\n        fastcgi-*.conf - included by nginx\n        nginx-*.conf - included by nginx\n        php-*.conf - included by php-fpm\n    /data - data directory, modified at runtime (can be a volume)\n        /logs\n            nginx.log # nginx log file\n            php-fpm.log # php-fpm log file\n\n**Usage**\nThe following commands can be used to deploy some of the services offered by the\nDocker containers in this repository.\n\n- **Applications**\n\n    - **Adminer**\n\n            docker run --name=\"adminer\" -d -e \"VIRTUAL_HOST=adminer.example.com\" --link mariadb:mariadb --link postgresql:postgresql maxexcloo/adminer\n\n    - **phpMyAdmin**\n\n            docker run --name=\"phpmyadmin\" -d -e \"VIRTUAL_HOST=phpmyadmin.example.com\" --link mariadb:mariadb maxexcloo/phpmyadmin\n\n    - **Tiny Tiny RSS**\n\n            docker volume create --name=\"tiny-tiny-rss\"\n            docker run --name=\"tiny-tiny-rss\" -it -e \"VIRTUAL_HOST=tiny-tiny-rss.example.com\" --link postgresql:postgresql -v tiny-tiny-rss:/data maxexcloo/tiny-tiny-rss\n\n    - **Wordpress**\n\n            docker volume create --name=\"wordpress\"\n            docker run --name=\"wordpress\" -it -e \"VIRTUAL_HOST=wordpress.example.com\" --link mariadb:mariadb -v wordpress:/data maxexcloo/wordpress\n\n- **Base**\n\n    - **Debian**\n\n            docker run --name=\"debian\" -it maxexcloo/debian bash\n\n    - **Ubuntu**\n\n            docker run --name=\"ubuntu\" -it maxexcloo/ubuntu bash\n\n- **Frameworks**\n\n    - **EasyEngine**\n\n            docker run --name=\"easyengine\" -it -p 80:80 -p 443:443 maxexcloo/easyengine\n            docker exec -it easyengine bash\n\n    - **Java**\n\n            docker run --name=\"java\" -it maxexcloo/java bash\n\n    - **nginx**\n\n            docker volume create --name=\"nginx\"\n            docker volume create --name=\"nginx-data\"\n            docker run --name=\"nginx\" -it -e \"VIRTUAL_HOST=example.com,www.example.com\" -v nginx:/app -v nginx-data:/data maxexcloo/nginx\n\n    - **nginx + PHP-FPM**\n\n            docker volume create --name=\"nginx-php\"\n            docker volume create --name=\"nginx-php-data\"\n            docker run --name=\"nginx-php\" -it -e \"VIRTUAL_HOST=example.com,www.example.com\" -v nginx-php:/app -v nginx-php-data:/data maxexcloo/nginx-php\n\n    - **nginx + Phusion Passenger**\n\n            docker volume create --name=\"nginx-passenger\"\n            docker volume create --name=\"nginx-passenger-data\"\n            docker run --name=\"nginx-passenger\" -it -e \"VIRTUAL_HOST=example.com,www.example.com\" -v nginx-passenger:/app -v nginx-passenger-data:/data maxexcloo/nginx-passenger\n\n    - **Node.js**\n\n            docker run --name=\"node\" -it maxexcloo/node bash\n\n- **Services**\n\n    - **Certbot**\n\n            docker run --name=\"certbot\" -it -e \"EMAIL=mail@example.com\"-v docker-gen:/data maxexcloo/certbot\n\n    - **CouchPotato**\n\n            docker volume create --name=\"couchpotato\"\n            docker run --name=\"couchpotato\" -it -e \"VIRTUAL_HOST=couchpotato.example.com\" -e \"VIRTUAL_PORT=5050\" -v couchpotato:/data maxexcloo/couchpotato\n\n    - **Directory Listing**\n\n            docker volume create --name=\"directory-listing\"\n            docker run --name=\"directory-listing\" -it -v directory-listing:/data maxexcloo/directory-listing\n\n    - **Docker Gen**\n\n            docker volume create --name=\"docker-gen\"\n            docker run --name=\"docker-gen\" -it -v /var/run/docker.sock:/var/run/docker.sock -v docker-gen:/data maxexcloo/haproxy-config\n\n    - **HAProxy**\n\n            docker run --name=\"haproxy\" -it -p 80:80 -p 43:443 -v docker-gen:/data maxexcloo/haproxy\n\n    - **MariaDB**\n\n            docker volume create --name=\"mariadb\"\n            docker run --name=\"mariadb\" -it -e \"MARIADB_USER=docker\" -e \"MARIADB_PASS=docker\" -v mariadb:/data maxexcloo/mariadb\n\n    - **Minecraft**\n\n            docker volume create --name=\"minecraft\"\n            docker run --name=\"minecraft\" -it -e \"MEMORY=1024\" -p 25565:25565 -v minecraft:/data maxexcloo/minecraft\n\n    - **OpenSSH**\n\n            docker run --name=\"openssh\" -it -p 22:22 maxexcloo/openssh\n\n    - **OpenVPN**\n\n            docker volume create --name=\"openvpn\"\n            docker run --name=\"openvpn\" -it -p 443:443 -p 1194:1194/udp -v openvpn:/data maxexcloo/openvpn\n            docker run --name=\"openvpn\" -it -e \"VIRTUAL_HOST=openvpn.example.com\" --rm maxexcloo/openvpn -v openvpn:/data /app/host\n\n    - **Plex Media Server**\n\n            docker volume create --name=\"plexmediaserver\"\n            docker run --name=\"plexmediaserver\" -it -e \"VIRTUAL_HOST=plexmediaserver.example.com\" -e \"VIRTUAL_PORT=32400\" -p 32400:32400 -v plexmediaserver:/data maxexcloo/plexmediaserver\n\n    - **PostgreSQL**\n\n            docker volume create --name=\"postgresql\"\n            docker run --name=\"postgresql\" -it -v postgresql:/data maxexcloo/postgresql\n\n    - **ReadyMedia**\n\n            docker volume create --name=\"readymedia\"\n            docker run --name=\"readymedia\" -it -p 1900:1900/udp -p 8200:8200 -v readymedia:/data maxexcloo/readymedia\n\n    - **SABnzbd**\n\n            docker volume create --name=\"sabnzbd\"\n            docker run --name=\"sabnzbd\" -it -e \"VIRTUAL_HOST=sabnzbd.example.com\" -e \"VIRTUAL_PORT=8080\" -v sabnzbd:/data maxexcloo/sabnzbd\n\n    - **SickBeard**\n\n            docker volume create --name=\"sickbeard\"\n            docker run --name=\"sickbeard\" -it -e \"VIRTUAL_HOST=sickbeard.example.com\" -e \"VIRTUAL_PORT=8081\" -v sickbeard:/data maxexcloo/sickbeard\n\n    - **ZNC**\n\n            docker volume create --name=\"znc\"\n            docker run --name=\"znc\" -it -e \"VIRTUAL_HOST=znc.example.com\" -e \"VIRTUAL_PORT=6667\" -p 6667:6667 -v znc:/data maxexcloo/znc\n",
  "dockerfile": "FROM maxexcloo/debian:latest\nMAINTAINER Max Schaefer <max@excloo.com>\nRUN curl https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \\\n\techo \"deb https://deb.nodesource.com/node_6.x/ jessie main\" > /etc/apt/sources.list.d/node.list && \\\n\tapt-get update && \\\n\tapt-get install -y build-essential nodejs && \\\n\tapt-get clean && \\\n\techo -n > /var/lib/apt/extended_states && \\\n\trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [],
    "run": [
      "curl https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \techo \"deb https://deb.nodesource.com/node_6.x/ jessie main\" > /etc/apt/sources.list.d/node.list && \tapt-get update && \tapt-get install -y build-essential nodejs && \tapt-get clean && \techo -n > /var/lib/apt/extended_states && \trm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*"
    ],
    "workdir": [],
    "from": "maxexcloo/debian:latest",
    "maintainer": "Max Schaefer <max@excloo.com>"
  },
  "source_repository_url": "https://github.com/maxexcloo/Docker.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/maxexcloo/Docker",
  "docker_repository": "maxexcloo/node",
  "docker_image": "maxexcloo/node",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "maxexcloo/node",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/maxexcloo/node",
    "https://hub.docker.com/v2/repositories/maxexcloo/node",
    "https://github.com/maxexcloo/Docker.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Mode/API/Toolkit"
  ],
  "info_url": "https://hub.docker.com/r/maxexcloo/node",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}