{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/kibana",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/kibana",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/kibana/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/kibana/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/kibana/autobuild",
    "user": "bitnami",
    "name": "kibana",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 73,
    "last_updated": "2016-10-17T08:23:47.729796Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "_",
        "full_size": 117205319,
        "id": 5450592,
        "repository": 887211,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T08:23:46.624851Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "development",
        "full_size": 117205113,
        "id": 4625875,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-10-14T11:23:25.890826Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 116432684,
        "id": 4625733,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T01:10:57.925870Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "4.5.4-r2",
        "full_size": 116432686,
        "id": 5044555,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T01:07:55.397578Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "4.5.4-r1",
        "full_size": 114582832,
        "id": 4802694,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-12T18:57:31.956574Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "4.5.4-r0",
        "full_size": 114582871,
        "id": 4625956,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-01T14:27:25.051307Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "4.5.4",
        "full_size": 114582902,
        "id": 4625812,
        "repository": 887211,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-01T14:21:06.069658Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-kibana"
  },
  "name": "bitnami/kibana Docker container",
  "description": "Bitnami Docker Image for Kibana!",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-kibana/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-kibana/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/kibana)](https://hub.docker.com/r/bitnami/kibana/)\n# What is Kibana?\n\n> Kibana is an open source, browser based analytics and search dashboard for Elasticsearch. Kibana is a snap to setup and start using. Kibana strives to be easy to get started with, while also being flexible and powerful, just like Elasticsearch\n\n[elastic.co/products/kibana](https://www.elastic.co/products/kibana)\n\n# TLDR\n\n```bash\ndocker run --name kibana bitnami/kibana:latest\n```\n\n## Docker Compose\n\n```\nkibana:\n  image: bitnami/kibana:latest\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami Kibana Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/kibana).\n\n```bash\ndocker pull bitnami/kibana:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the [list of available versions](https://hub.docker.com/r/bitnami/kibana/tags/) in the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/kibana:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/kibana:latest https://github.com/bitnami/bitnami-docker-kibana.git\n```\n# How to use this image\n\n## Run the application using Docker Compose\n\nThis is the recommended way to run Kibana. You can use the following docker compose template:\n\n```\nversion: '2'\n\nservices:\n  application:\n    image: 'bitnami/kibana:latest'\n    ports:\n      - 5601:5601\n    environment:\n      - KIBANA_ELASTICSEARCH_URL=elasticsearch\n    volumes:\n      - 'kibana_data:/bitnami/kibana'\n  elasticsearch:\n    image: 'bitnami/elasticsearc:latest'\n    ports:\n      - 9200:9200\n    volumes:\n      - 'elasticsearch_data:/bitnami/elasticsearch'\nvolumes:\n  kibana_data:\n    driver:local\n  elasticsearch_data:\n    driver:local\n```\n\n## Run the application manually\n\nIf you want to run the application manually instead of using docker-compose, these are the basic steps you need to run:\n\n1. Create a new network for the application and the database:\n\n  ```\n  $ docker network create kibana_network\n  ```\n\n2. Run the Elasticsearch container:\n\n  ```\n  $ docker run -d -p 9200:9200 --name elasticsearch --net=kibana_network bitnami/elasticsearch\n  ```\n\n3. Run the Kibana container:\n\n  ```\n  $ docker run -d -p 5601:5601 -e KIBANA_ELASTICSEARCH_URL=elasticsearch --name kibana --net=kibana_network bitnami/kibana\n  ```\n\nThen you can access your application at http://your-ip:5601/\n\n\n# Persisting your database\n\nIf you remove the container all your data and configurations will be lost, and the next time you run the image the data and configurations will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed.\n\n**Note!**\nIf you have already started using your database, follow the steps on [backing up](#backing-up-your-container) and [restoring](#restoring-a-backup) to pull the data from your running container down to your host.\n\nThe image exposes a volume at `/bitnami/kibana` for the Kibana data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/kibana-persistence:/bitnami/kibana bitnami/kibana:latest\n```\n\nor using Docker Compose:\n\n```\nkibana:\n  image: bitnami/kibana:latest\n  volumes:\n    - /path/to/kibana-persistence:/bitnami/kibana\n```\n\n# Linking\n\nIf you want to connect to your Kibana server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a Kibana client container to the Kibana server container\n\n### Step 1: Run the Kibana image with a specific name\n\nThe first step is to start our Kibana server.\n\nDocker's linking system uses container ids or names to reference containers. We can explicitly specify a name for our Kibana server to make it easier to connect to other containers.\n\n```bash\ndocker run --name kibana bitnami/kibana:latest\n```\n\n### Step 2: Run Kibana as a client and link to our server\n\nNow that we have our Kibana server running, we can create another container that links to it by giving Docker the `--link` option. This option takes the id or name of the container we want to link it to as well as a hostname to use inside the container, separated by a colon. For example, to have our Kibana server accessible in another container with `server` as it's hostname we would pass `--link kibana:server` to the Docker run command.\n\nThe Bitnami Kibana Docker Image also ships with a Kibana client, but by default it will start a server. To start the client instead, we can override the default command Docker runs by stating a different command to run after the image name.\n\n```bash\ndocker run --rm -it --link kibana:server bitnami/kibana:latest kibana-cli -h server\n```\n\nWe started the Kibana client passing in the `-h` option that allows us to specify the hostname of the server, which we set to the hostname we created in the link.\n\n**Note!**\nYou can also run the Kibana client in the same container the server is running in using the Docker [exec](https://docs.docker.com/reference/commandline/cli/#exec) command.\n\n```bash\ndocker exec -it kibana kibana-cli\n```\n\n## Linking with Docker Compose\n\n### Step 1: Add a Kibana entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add Kibana to your application.\n\n```\nkibana:\n  image: bitnami/kibana:latest\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your Kibana server from to include a link to the `kibana` entry you added in Step 1.\n\n```\nmyapp:\n  image: myapp\n  links:\n    - kibana:kibana\n```\n\nInside `myapp`, use `kibana` as the hostname for the Kibana server.\n\n# Configuration\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/kibana`. As as mentioned in [Persisting your database](#persisting-your-data) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n### Step 1: Run the Kibana image\n\nRun the Kibana image, mounting a directory from your host.\n\n```bash\ndocker run --name kibana -v /path/to/kibana-persistence:/bitnami/kibana bitnami/kibana:latest\n```\n\nor using Docker Compose:\n\n```\nkibana:\n  image: bitnami/kibana:latest\n  volumes:\n    - /path/to/kibana-persistence:/bitnami/kibana\n```\n\n### Step 2: Edit the configuration\n\nEdit the configuration on your host using your favorite editor.\n\n```bash\nvi /path/to/kibana-persistence/conf/kibana.conf\n```\n\n### Step 3: Restart Kibana\n\nAfter changing the configuration, restart your Kibana container for changes to take effect.\n\n```bash\ndocker restart kibana\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose restart kibana\n```\n\n**Further Reading:**\n\n  - [Kibana Configuration Documentation](http://kibana.io/topics/config)\n\n# Logging\n\nThe Bitnami Kibana Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs kibana\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs kibana\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your container\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop kibana\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop kibana\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm -v /path/to/kibana-backups:/backups --volumes-from kibana busybox \\\n  cp -a /bitnami/kibana:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm -v /path/to/kibana-backups:/backups --volumes-from `docker-compose ps -q kibana` busybox \\\n  cp -a /bitnami/kibana:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run -v /path/to/kibana-backups/latest:/bitnami/kibana bitnami/kibana:latest\n```\n\nor using Docker Compose:\n\n```\nkibana:\n  image: bitnami/kibana:latest\n  volumes:\n    - /path/to/kibana-backups/latest:/bitnami/kibana\n```\n\n## Upgrade this image\n\nBitnami provides up-to-date versions of Kibana, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/kibana:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to\n`bitnami/kibana:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v kibana\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v kibana\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name kibana bitnami/kibana:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start kibana\n```\n\n# Notable Changes\n\n## 4.5.4-r1\n\n- `ELASTICSEARCH_URL` parameter has been renamed to `KIBANA_ELASTICSEARCH_URL`.\n- `ELASTICSEARCH_PORT` parameter has been renamed to `KIBANA_ELASTICSEARCH_PORT`.\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an [issue](https://github.com/bitnami/bitnami-docker-kibana/issues), or submit a [pull request](https://github.com/bitnami/bitnami-docker-kibana/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an [issue](https://github.com/bitnami/bitnami-docker-kibana/issues). For us to provide better support, be sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive information)\n\n# License\nCopyright 2016 Bitnami\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\n\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_APP_NAME=kibana \\\n    BITNAMI_IMAGE_VERSION=4.6.1-r0 \\\n    PATH=/opt/bitnami/kibana/bin:$PATH\n\n# Install kibana\nRUN bitnami-pkg unpack kibana-4.6.1-0 --checksum 665e7c0b55eea86af15d51d8eb2b9f06fd4eef5c2f1c63b74107b3853cb4765d\n\nCOPY rootfs /\n\nVOLUME [\"/bitnami/kibana\"]\n\nEXPOSE 5601\n\nENTRYPOINT [\"/app-entrypoint.sh\"]\n\nCMD [\"nami\", \"start\", \"--foreground\", \"kibana\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      5601
    ],
    "volume": [
      "[\"/bitnami/kibana\"]"
    ],
    "run": [
      "bitnami-pkg unpack kibana-4.6.1-0 --checksum 665e7c0b55eea86af15d51d8eb2b9f06fd4eef5c2f1c63b74107b3853cb4765d"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_APP_NAME": "kibana",
      "": "",
      "BITNAMI_IMAGE_VERSION": "4.6.1-r0",
      "PATH": "/opt/bitnami/kibana/bin:$PATH"
    },
    "copy": "rootfs /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"kibana\"]"
  },
  "source_repository_url": "git@github.com:bitnami/bitnami-docker-kibana.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-kibana",
  "docker_repository": "bitnami/kibana",
  "docker_image": "bitnami/kibana",
  "parameters_schema": {
    "BITNAMI_APP_NAME": {
      "default": "kibana",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_IMAGE_VERSION": {
      "default": "4.6.1-r0",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/kibana/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        5601
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/kibana",
  "revision": "_",
  "uris": [
    "https://hub.docker.com/r/bitnami/kibana",
    "https://hub.docker.com/v2/repositories/bitnami/kibana",
    "git@github.com:bitnami/bitnami-docker-kibana.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/kibana",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}