{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/dperson/nginx",
    "repository_url": "https://hub.docker.com/v2/repositories/dperson/nginx",
    "tags_url": "https://hub.docker.com/v2/repositories/dperson/nginx/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/dperson/nginx/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/dperson/nginx/autobuild",
    "user": "dperson",
    "name": "nginx",
    "namespace": "dperson",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 7,
    "pull_count": 13238,
    "last_updated": "2016-10-11T17:51:43.202268Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 55525365,
        "id": 52617,
        "repository": 62845,
        "creator": 102881,
        "last_updater": 102881,
        "last_updated": "2016-10-11T17:51:42.741115Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "dperson/nginx"
  },
  "name": "dperson/nginx Docker container",
  "description": "",
  "readme": "[![logo](https://raw.githubusercontent.com/dperson/nginx/master/logo.png)](http://nginx.org)\n\n# nginx\n\nnginx docker container\n\n## Fork of the main docker [\"nginx\"](https://registry.hub.docker.com/_/nginx/)\n\n### With the following changes:\n\n * Entrypoint script to take care of most normal configuration needs\n * Sets up a self-signed SSL cert\n\n# What is Nginx?\n\nNginx (pronounced \"engine-x\") is an open source reverse proxy server for HTTP,\nHTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache,\nand a web server (origin server). The nginx project started with a strong focus\non high concurrency, high performance and low memory usage. It is licensed under\nthe 2-clause BSD-like license and it runs on Linux, BSD variants, Mac OS X,\nSolaris, AIX, HP-UX, as well as on other \\*nix flavors. It also has a proof of\nconcept port for Microsoft Windows.\n\n[wikipedia.org/wiki/Nginx](https://wikipedia.org/wiki/Nginx)\n\n---\n\n# How to use this image\n\n## Exposing the port\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx\n\nThen you can hit `http://hostname:8080` or `http://host-ip:8080` in your\nbrowser.\n\n## Hosting some local simple static content\n\n    sudo docker run -it -p 80:80 -p 443:443 \\\n                -v /some/path:/srv/www:ro -d dperson/nginx\n\n## Complex configuration\n\n    sudo docker run -it --rm dperson/nginx -h\n\n    Usage: nginx.sh [-opt] [command]\n    Options (fields in '[]' are optional, '<>' are required):\n        -h          This help\n        -B  \"[on|off]\" Enables/disables the proxy request buffer,\n                    so that requests are passed through [on/off] (Default on)\n        -b \"[location]\" Configure basic auth for \"location\"\n                    possible arg: [location] (defaults to '/')\n                    [location] is the URI in nginx (IE: /wiki)\n        -c \"<max_size>\" Configure the client_max_body_size for uploads\n        -e \"\"       Configure EXPIRES header on static assets\n                    possible arg: \"[timeout]\" - timeout for cached files\n        -f \"<server;location>\" Configure fastcgi proxy and location\n                    required arg: \"<server[:port]>;</location>\"\n                    <server> is hostname or IP to connect to\n                    <location> is the URI in nginx (IE: /mediatomb)\n        -g \"\"       Generate a selfsigned SSL cert\n                    possible args: \"[domain][;country][;state][;locality][;org]\"\n                        domain - FQDN for server\n                        country - 2 letter country code\n                        state - state of server location\n                        locality - city\n                        org - company\n        -p          Configure PFS (Perfect Forward Secrecy)\n                    NOTE: DH keygen is slow\n        -P          Configure Production mode (no server tokens)\n        -H          Configure HSTS (HTTPS Strict Transport Security)\n        -i          Enable SSI (Server Side Includes)\n        -n          set server_name <name>[:oldname]\n        -q          quick (don't create certs)\n        -R \"\"       set header to stop robot indexing\n                    possible arg: \"[tag]\"\n                        all           no restrictions (default)\n                        noindex       don't show in search results or \"Cached\" link\n                        nofollow      don't follow the links on this page\n                        none          equivalent to noindex, nofollow\n                        noarchive     don't show a \"Cached\" link in search results\n                        nosnippet     don't show a snippet in the search results\n                        noodp         don't use Open Directory project metadata\n                        notranslate   don't offer translation of this page\n                        noimageindex  don't index images on this page\n                        unavailable_after: [RFC-850 date/time] don't show after\n                                    the specified date/time (RFC 850 format)\n        -r \"<service;location>\" Redirect a hostname to a URL\n                    required arg: \"<hostname>;<https://destination/URI>\"\n                    <hostname> to listen for (Fully Qualified Domain Name)\n                    <destination> where to send the requests\n        -s \"<cert>\" Configure SSL stapling\n                    required arg: cert(s) your CA uses for the OCSP check\n        -S \"\"       Configure SSL sessions\n                    possible arg: \"[timeout]\" - timeout for session reuse, IE 5m\n        -t \"\"       Configure timezone\n                    possible arg: \"[timezone]\" - zoneinfo timezone for container\n        -U \"<username;password>\" Configure a HTTP auth user\n                    required arg: \"username;password\"\n                    <username> is the name the user enters for authorization\n                    <password> is the password the user enters for authorization\n        -u \"<service;location>\" Configure UWSGI proxy and location\n                    required arg: \"<server:port|unix:///path/to.sock>;</location>\"\n                    <service> is how to contact UWSGI\n                    <location> is the URI in nginx (IE: /wiki)\n        -w \"<service;location>\" Configure web proxy and location\n                    required arg: \"http://<server[:port]>;</location>\"\n                    <service> is how to contact the HTTP service\n                    <location> is the URI in nginx (IE: /mediatomb)\n                    possible third arg: \"[header value]\"\n                    [header value] set \"header\" to \"value\" on traffic going\n                                through the proxy\n\n    The 'command' (if provided and valid) will be run instead of nginx\n\nENVIRONMENT VARIABLES (only available with `docker run`)\n\n * `BASIC` - As above, setup basic auth for URI location, IE `/path`\n * `EXPIRES` - As above, configure EXPIRES header on static assets\n * `FASTCGI` - As above, configure a fastcgi proxy\n * `GENCERT` - As above, make selfsigned SSL cert\n * `PFS` - As above, configure Perfect Forward Secracy\n * `PROD` - As above, production server flags\n * `HSTS` - As above, HTTPS Strict Transport Security\n * `SSI` - As above, setup basic auth for URI location, IE `/path`\n * `NAME` - As above, set servername\n * `OUICK` - As above, don't generate SSL cert\n * `REDIRECT` - As above, configure redirect `port;hostname;https://dest/url`\n * `ROBOT` - As above, set header to stop robot indexing\n * `STAPLING` - As above, configure SSL stapling\n * `SSL_SESSIONS` - As above, setup SSL session reuse\n * `TZ` - As above, configure the zoneinfo timezone, IE `EST5EDT`\n * `HTTPUSER` - As above, configure HTTP user `username;password`\n * `USWGI` - As above, configure UWSGI app `http://dest:port/url;/path`\n * `PROXY` - As above, configure proxy to app `http://dest/url;/path`\n * `PROXYBUFFER` - Enables or disabled the proxy request buffer `[on|off]`\n * `USERID` - Set the UID for the webserver user\n * `GROUPID` - Set the GID for the webserver user\n * `CLIENTMAXBODYSIZE` - Set the max file size for uploads\n\n**NOTE**: The `-r`/`REDIRECT` no longer require the port be specified.\n\n## Examples\n\nAny of the commands can be run at creation with `docker run` or later with\n`docker exec -it nginx.sh` (as of version 1.3 of docker).\n\n### Start nginx with your real CA certs and setup SSL stapling:\n\n    sudo docker run -it --name web -p 80:80 -p 443:443 -d dperson/nginx -q\n    sudo docker exec -it web nginx.sh -q -s echo Stapling configured\n\nWill get you the same settings as\n\n    sudo docker run -it --name web -p 80:80 -p 443:443 -d dperson/nginx -q -s\n\nThen run\n\n    cat /path/to/your.cert.file | \\\n                sudo docker exec -it web tee /etc/nginx/ssl/fullchain.pem\n    cat /path/to/your.key.file | \\\n                sudo docker exec -it web tee /etc/nginx/ssl/privkey.pem\n    cat /path/to/your.ocsp.file | \\\n                sudo docker exec -it web tee /etc/nginx/ssl/chain.pem\n    sudo docker restart web\n\n### Start a wiki running in an uwsgi container behind nginx:\n\n    sudo docker run -it --name wiki -d dperson/moinmoin\n    sudo docker run -it -p 80:80 -p 443:443 --link wiki:wiki -d dperson/nginx \\\n                -u \"wiki:3031;/wiki\"\n\nOR\n\n    sudo docker run -it --name wiki -d dperson/moinmoin\n    sudo docker run -it -p 80:80 -p 443:443 --link wiki:wiki \\\n                -e UWSGI=\"wiki:3031;/wiki\" -d dperson/nginx\n\n### Start nginx with a redirect:\n\nnginx will listen on a port for the hostname, and redirect to a different URL\nformat (port;hostname;destination)\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx \\\n                -r \"80;myapp.example.com;https://myapp.herokuapp.com\" \\\n                -r \"443;myapp.example.com;https://myapp.herokuapp.com\"\n\nENVIRONMENT variables don't support multiple values, use args as above\n\n### Start nginx with a web proxy:\n\n    sudo docker run -it --name smokeping -d dperson/smokeping\n    sudo docker run -it -p 80:80 -p 443:443 --link smokeping:smokeping \\\n                -d dperson/nginx -w \"http://smokeping/smokeping;/smokeping\"\n\nOR\n\n    sudo docker run -it --name smokeping -d dperson/smokeping\n    sudo docker run -it -p 80:80 -p 443:443 --link smokeping:smokeping \\\n                 -e PROXY=\"http://smokeping/smokeping;/smokeping\" \\\n                 -d dperson/nginx\n\n### Start nginx with a specified zoneinfo timezone:\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -t EST5EDT\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e TZ=EST5EDT -d dperson/nginx\n\n### Start nginx with a defined hostname (instead of 'localhost'):\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -n \"example.com\"\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e NAME=\"example.com\" \\\n                -d dperson/nginx\n\n### Start nginx with server tokens disabled (Production mode):\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -P\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e PROD=y -d dperson/nginx\n\n### Start nginx with X-Robots-Tag header (block indexing):\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -R\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e ROBOT=y -d dperson/nginx\n\n### Start nginx with SSI (Server Side Includes) enabled:\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -i\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e SSI=y -d dperson/nginx\n\n### Start nginx with Perfect Forward Secrecy and HTTP Strict Transport Security:\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -p -H\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e PFS=1 -e HSTS=y -d dperson/nginx\n\n### Start nginx with SSL Sessions (better performance for clients):\n\n    sudo docker run -it -p 80:80 -p 443:443 -d dperson/nginx -S \"\"\n\nOR\n\n    sudo docker run -it -p 80:80 -p 443:443 -e SSL_SESSIONS=5m -d dperson/nginx\n\n---\n\nFor information on the syntax of the Nginx configuration files, see\n[the official documentation](http://nginx.org/en/docs/) (specifically the\n[Beginner's Guide](http://nginx.org/en/docs/beginners_guide.html#conf_structure)).\n\nIf you wish to adapt the default configuration, use something like the following\nto copy it from a running container:\n\n    sudo docker cp web:/etc/nginx/nginx.conf /some/nginx.conf\n\n# User Feedback\n\n## Issues\n\nIf you have any problems with or questions about this image, please contact me\nthrough a [GitHub issue](https://github.com/dperson/nginx/issues).",
  "dockerfile": "FROM debian:jessie\nMAINTAINER David Personette <dperson@gmail.com>\n\n# Install nginx\nRUN export DEBIAN_FRONTEND='noninteractive' && \\\n    apt-key adv --keyserver pgp.mit.edu --recv-keys \\\n                573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 && \\\n    /bin/echo -n \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" \\\n                >>/etc/apt/sources.list && \\\n    apt-get update -qq && \\\n    apt-get install -qqy --no-install-recommends apache2-utils openssl nginx \\\n                $(apt-get -s dist-upgrade|awk '/^Inst.*ecurity/ {print $2}') &&\\\n    apt-get clean && \\\n    sed -i 's/#gzip/gzip/' /etc/nginx/nginx.conf && \\\n    sed -i \"/http_x_forwarded_for\\\"';/s/';/ '/\" /etc/nginx/nginx.conf && \\\n    sed -i \"/http_x_forwarded_for/a \\\\\\\n                      '\\$request_time \\$upstream_response_time';\" \\\n                /etc/nginx/nginx.conf && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* && \\\n    ln -sf /dev/stdout /var/log/nginx/access.log && \\\n    ln -sf /dev/stderr /var/log/nginx/error.log\n# Forward request and error logs to docker log collector\n\nCOPY default.conf /etc/nginx/conf.d/\nCOPY nginx.sh /usr/bin/\n\nVOLUME [\"/srv/www\", \"/etc/nginx\"]\n\nEXPOSE 80 443\n\nENTRYPOINT [\"nginx.sh\"]",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [
      "[\"/srv/www\", \"/etc/nginx\"]"
    ],
    "run": [
      "export DEBIAN_FRONTEND='noninteractive' &&     apt-key adv --keyserver pgp.mit.edu --recv-keys                 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 &&     /bin/echo -n \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\"                 >>/etc/apt/sources.list &&     apt-get update -qq &&     apt-get install -qqy --no-install-recommends apache2-utils openssl nginx                 $(apt-get -s dist-upgrade|awk '/^Inst.*ecurity/ {print $2}') &&    apt-get clean &&     sed -i 's/#gzip/gzip/' /etc/nginx/nginx.conf &&     sed -i \"/http_x_forwarded_for\\\"';/s/';/ '/\" /etc/nginx/nginx.conf &&     sed -i \"/http_x_forwarded_for/a \\\\                      '\\$request_time \\$upstream_response_time';\"                 /etc/nginx/nginx.conf &&     rm -rf /var/lib/apt/lists/* /tmp/* &&     ln -sf /dev/stdout /var/log/nginx/access.log &&     ln -sf /dev/stderr /var/log/nginx/error.log"
    ],
    "workdir": [],
    "from": "debian:jessie",
    "maintainer": "David Personette <dperson@gmail.com>",
    "copy": "nginx.sh /usr/bin/",
    "entrypoint": "[\"nginx.sh\"]"
  },
  "source_repository_url": "https://github.com/dperson/nginx.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/dperson/nginx",
  "docker_repository": "dperson/nginx",
  "docker_image": "dperson/nginx",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "dperson/nginx",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/dperson/nginx",
    "https://hub.docker.com/v2/repositories/dperson/nginx",
    "https://github.com/dperson/nginx.git"
  ],
  "labels": [
    "Docker",
    "Type/Middleware/Web Server/Nginx"
  ],
  "info_url": "https://hub.docker.com/r/dperson/nginx",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}