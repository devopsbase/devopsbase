{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/marcelhuberfoo/jenkins",
    "repository_url": "https://hub.docker.com/v2/repositories/marcelhuberfoo/jenkins",
    "tags_url": "https://hub.docker.com/v2/repositories/marcelhuberfoo/jenkins/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/marcelhuberfoo/jenkins/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/marcelhuberfoo/jenkins/autobuild",
    "user": "marcelhuberfoo",
    "name": "jenkins",
    "namespace": "marcelhuberfoo",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 296,
    "last_updated": "2016-10-17T10:36:55.428843Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "2.26-1",
        "full_size": 495364108,
        "id": 5495964,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-10-17T10:36:54.039513Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "latest",
        "full_size": 495364108,
        "id": 769966,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-10-17T10:36:41.157660Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.25-1",
        "full_size": 495323478,
        "id": 5337822,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-10-10T01:36:58.206686Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.24-1",
        "full_size": 495305348,
        "id": 5194633,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-10-03T05:36:28.546333Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.23-1",
        "full_size": 492769804,
        "id": 4915082,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-09-18T23:36:52.786977Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.21-1",
        "full_size": 492551577,
        "id": 4665904,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-09-04T16:36:39.860632Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.20-1",
        "full_size": 492470817,
        "id": 4552121,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-08-29T06:36:41.389956Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.19-1",
        "full_size": 495110219,
        "id": 4430974,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-08-21T21:30:51.320421Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.18-1",
        "full_size": 495080040,
        "id": 4335703,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-08-16T04:37:10.118277Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "2.17-1",
        "full_size": 496217384,
        "id": 4192736,
        "repository": 293157,
        "creator": 226984,
        "last_updater": 226984,
        "last_updated": "2016-08-06T06:36:40.813933Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      }
    ],
    "build_name": "marcelhuberfoo/docker-jenkins"
  },
  "name": "marcelhuberfoo/jenkins Docker container",
  "description": "jenkins build server docker image",
  "readme": "[![](https://badge.imagelayers.io/marcelhuberfoo/jenkins.svg)](https://imagelayers.io/?images=marcelhuberfoo/jenkins 'Get your own badge on imagelayers.io') \n[![CircleCI](https://circleci.com/gh/marcelhuberfoo/docker-jenkins.svg?style=svg)](https://circleci.com/gh/marcelhuberfoo/docker-jenkins)\n[![Stories in Ready](https://badge.waffle.io/marcelhuberfoo/docker-jenkins.svg?label=ready&title=Ready)](http://waffle.io/marcelhuberfoo/docker-jenkins)\n\n# Latest Jenkins Docker image \n\nThe Jenkins Continuous Integration and Delivery server.\n\nThis is a fully functional Jenkins server, based on the Latest release\n[http://jenkins.io/](http://jenkins.io/).\n\n\n<img src=\"http://jenkins-ci.org/sites/default/files/jenkins_logo.png\"/>\n\n\n# Usage\n\n```\ndocker run -p 8080:8080 -p 50000:50000 jenkins\n```\n\nNOTE: read below the _build executors_ part for the role of the `50000` port mapping.\n\nThis will store the workspace in /var/lib/jenkins. All Jenkins data lives in there - including plugins and configuration.\nYou will probably want to make that a persistent volume (recommended):\n\n```\ndocker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/lib/jenkins jenkins\n```\n\nThis will store the jenkins data in `/your/home` on the host.\nEnsure that `/your/home` is accessible by the jenkins user in container (jenkins user - uid 1000) or use `-u some_other_user` parameter with `docker run`.\n\n\nYou can also use a volume container:\n\n```\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/lib/jenkins jenkins\n```\n\nThen myjenkins container has the volume (please do read about docker volume handling to find out more).\n\n## Backing up data\n\nIf you bind mount in a volume - you can simply back up that directory\n(which is jenkins_home) at any time.\n\nThis is highly recommended. Treat the jenkins_home directory as you would a database - in Docker you would generally put a database on a volume.\n\nIf your volume is inside a container - you can use ```docker cp $ID:/var/lib/jenkins``` command to extract the data, or other options to find where the volume data is.\nNote that some symlinks on some OSes may be converted to copies (this can confuse jenkins with lastStableBuild links etc)\n\nFor more info check Docker docs section on [Managing data in containers](https://docs.docker.com/userguide/dockervolumes/)\n\n# Setting the number of executors\n\nYou can specify and set the number of executors of your Jenkins master instance using a groovy script. By default its set to 2 executors, but you can extend the image and change it to your desired number of executors :\n\n`executors.groovy`\n```\nimport jenkins.model.*\nJenkins.instance.setNumExecutors(5)\n```\n\nand `Dockerfile`\n\n```\nFROM jenkins\nCOPY executors.groovy $JENKINS_REFDIR/init.groovy.d/executors.groovy\n```\n\n\n# Attaching build executors\n\nYou can run builds on the master out of the box.\n\nBut if you want to attach build slave servers **through JNLP (Java Web Start)**: make sure you map the port: ```-p 50000:50000``` - which will be used when you connect a slave agent.\n\nIf you are only using [SSH slaves](https://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin), then you do **NOT** need to put that port mapping.\n\n# Passing JVM parameters\n\nYou might need to customize the JVM running Jenkins, typically to pass system properties or tweak heap memory settings. Use JAVA_OPTS environment\nvariable for this purpose :\n\n```\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 --env JAVA_OPTS=-Dhudson.footerURL=http://mycompany.com jenkins\n```\n\n# Configuring logging\n\nJenkins logging can be configured through a properties file and `java.util.logging.config.file` Java property.\nFor example:\n\n```\nmkdir data\ncat > data/log.properties <<EOF\nhandlers=java.util.logging.ConsoleHandler\njenkins.level=FINEST\njava.util.logging.ConsoleHandler.level=FINEST\nEOF\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 --env JAVA_OPTS='-Djava.util.logging.config.file=$JENKINS_HOME/log.properties' -v `pwd`/data:/var/lib/jenkins jenkins\n```\n\n\n# Passing Jenkins launcher parameters\n\nArgument you pass to docker running the jenkins image are passed to jenkins launcher, so you can run for sample :\n```\ndocker run jenkins --version\n```\nThis will dump Jenkins version, just like when you run jenkins as an executable war.\n\nYou also can define jenkins arguments as `JENKINS_OPTS`. This is usefull to define a set of arguments to pass to jenkins launcher as you\ndefine a derived jenkins image based on the official one with some customized settings. The following sample Dockerfile uses this option\nto force use of HTTPS with a certificate included in the image\n\n```\nFROM jenkins:1.565.3\n\nCOPY https.pem $JENKINS_HOME/cert\nCOPY https.key $JENKINS_HOME/pk\nENV JENKINS_OPTS --httpPort=-1 --httpsPort=8083 --httpsCertificate=$JENKINS_HOME/cert --httpsPrivateKey=$JENKINS_HOME/pk\nEXPOSE 8083\n```\n\nYou can also change the default slave agent port for jenkins by defining `JENKINS_SLAVE_AGENT_PORT` in a sample Dockerfile.\n\n```\nFROM jenkins:1.565.3\nENV JENKINS_SLAVE_AGENT_PORT 50001\n```\nor as a parameter to docker,\n```\ndocker run --name myjenkins -p 8080:8080 -p 50001:50001 --env JENKINS_SLAVE_AGENT_PORT=50001 jenkins\n```\n\n# Installing more tools\n\nYou can run your container as root - and install via apt-get, install as part of build steps via jenkins tool installers, or you can create your own Dockerfile to customise, for example:\n\n```\nFROM jenkins\n# if we want to install via apt\nUSER root\nRUN apt-get update && apt-get install -y ruby make more-thing-here\nUSER jenkins # drop back to the regular jenkins user - good practice\n```\n\nIn such a derived image, you can customize your jenkins instance with hook scripts or additional plugins.\nFor this purpose, use `$JENKINS_REFDIR` as a place to define the default JENKINS_HOME content you\nwish the target installation to look like :\n\n```\nFROM jenkins\nCOPY plugins.txt $JENKINS_REFDIR/\nCOPY custom.groovy $JENKINS_REFDIR/init.groovy.d/custom.groovy\nRUN /usr/local/bin/plugins.sh $JENKINS_REFDIR/plugins.txt\n```\n\nWhen jenkins container starts, it will check JENKINS_HOME has this reference content, and copy them\nthere if required. It will not override such files, so if you upgraded some plugins from UI they won't\nbe reverted on next start.\n\nIn case you *do* want to override, append '.override' to the name of the reference file. E.g. a file named\n`$JENKINS_REFDIR/config.xml.override` will overwrite an existing `config.xml` file in JENKINS_HOME.\n\nAlso see [JENKINS-24986](https://issues.jenkins-ci.org/browse/JENKINS-24986)\n\n## Preinstalling plugins\n\nFor your convenience, you also can use a plain text file to define plugins to be installed\n(using core-support plugin format).\nAll plugins need to be listed in the form `pluginID:version` as there is no transitive dependency resolution.\n\n```\ncredentials:latest\nmaven-plugin:2.7.1\n...\n```\n\nAnd in derived Dockerfile just invoke the utility `plugins.sh` script\n\n```\nFROM jenkins\nCOPY plugins.txt /usr/share/jenkins/plugins.txt\nRUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt\n```\n\nHere is an example to get the list of plugins from an existing server you can use the following `curl` command:\n\n```\nJENKINS_HOST='https://username:password@myhost.com:port'\ncurl -sSL \\\n  \"$JENKINS_HOST/pluginManager/api/xml?depth=1&xpath=/*/*/shortName|/*/*/version&wrapper=plugins\" | \\\n  sed 's/<shortName>/\\n\\0/g' | sed -nre 's/^<shortName>([^<]+).*<version>([^<]+).*$/\\1:\\2/p' | sort\n```\n\nExample Output:\n\n```\ncucumber-testresult-plugin:0.8.2\nmatrix-project:1.4.1\npam-auth:1.1\nscript-security:1.13\n...\n```\n\nFor 2.x-derived images, you may also want to\n\n    RUN echo 2.0 > $JENKINS_REFDIR/jenkins.install.UpgradeWizard.state\n\nto indicate that this Jenkins installation is fully configured.\nOtherwise a banner will appear prompting the user to install additional plugins,\nwhich may be inappropriate.\n\n# Upgrading\n\nAll the data needed is in the /var/lib/jenkins directory - so depending on how you manage that - depends on how you upgrade. Generally - you can copy it out - and then \"docker pull\" the image again - and you will have the latest LTS - you can then start up with -v pointing to that data (/var/lib/jenkins) and everything will be as you left it.\n\nAs always - please ensure that you know how to drive docker - especially volume handling!\n\n# Building\n\nBuild with the usual\n\n    docker build -t jenkins .\n\nTests are written using [bats](https://github.com/sstephenson/bats) under the `tests` dir\n\n    bats tests\n\nBats can be easily installed with `brew install bats` on OS X\n\n# Questions?\n\nJump on irc.freenode.net and the #jenkins room. Ask!\n",
  "dockerfile": "FROM marcelhuberfoo/arch-openjdk8\nMAINTAINER Marcel Huber <marcelhuberfoo@gmail.com>\n\nUSER root\n\nRUN pacman -Syy --noconfirm python2 git doxygen graphviz gtk2 openssh && \\\n    printf \"y\\\\ny\\\\n\" | pacman -Scc\n\nARG JENKINS_VERSION=2.6\nARG JENKINS_PKGREL=2\nENV JENKINS_HOME=/var/lib/jenkins \\\n    JENKINS_INSTALLDIR=/usr/share/java/jenkins \\\n    JENKINS_BACKUPDIR=/var/backup/jenkins \\\n    JENKINS_WEBROOT=/var/cache/jenkins \\\n    JENKINS_REFDIR=/refdata \\\n    JENKINS_PORT=8080 \\\n    JENKINS_SLAVE_AGENT_PORT=50000 \\\n    JENKINS_UC=https://updates.jenkins.io \\\n    JENKINS_VERSION=$JENKINS_VERSION \\\n    JENKINS_PKGREL=$JENKINS_PKGREL \\\n    JENKINS_OPTS='--webroot=$JENKINS_WEBROOT --httpPort=$JENKINS_PORT' \\\n    JAVA_OPTS=\"-Djenkins.security.ArtifactsPermission=true\"\n\n# `$JENKINS_REFDIR/` contains all reference configuration we want \n# to set on a fresh new installation. Use it to bundle additional plugins \n# or config file with your custom jenkins Docker image.\nRUN mkdir -p $JENKINS_INSTALLDIR $JENKINS_REFDIR/init.groovy.d $JENKINS_WEBROOT $JENKINS_BACKUPDIR $JENKINS_HOME\n\n# Indicate jenkins is fully configured for 2.x releases\nRUN echo 2.0 > $JENKINS_REFDIR/jenkins.install.UpgradeWizard.state\n\nCOPY init.groovy $JENKINS_REFDIR/init.groovy.d/tcp-slave-agent-port.groovy\n\n# could use ADD but this one does not check Last-Modified header \n# see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL http://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war -o $JENKINS_INSTALLDIR/jenkins.war\n\nRUN chown -R $UNAME:$GNAME $JENKINS_HOME $JENKINS_REFDIR $JENKINS_INSTALLDIR $JENKINS_BACKUPDIR $JENKINS_WEBROOT\n\n# As we use the base containers user to work with, set it's home directory\n# to $JENKINS_HOME to also persist modifications for this user (~/.ssh for example)\nRUN usermod --home $JENKINS_HOME $UNAME\n\n# Jenkins home directory is a volume, so configuration and build history \n# can be persisted and survive image upgrades\n# Jenkins is run with as user `$UNAME`\n# If you bind mount a volume from host/volume from a data container,\n# ensure you use same uid\nVOLUME [\"$JENKINS_HOME\", \"$JENKINS_REFDIR\", \"$JENKINS_BACKUPDIR\"]\nWORKDIR $JENKINS_HOME\n\n# main web interface and slave agents port\nEXPOSE $JENKINS_PORT $JENKINS_SLAVE_AGENT_PORT\n\n# - from a derived Dockerfile, use `RUN plugins.sh plugins.txt` to setup $JENKINS_REFDIR/plugins from a support bundle\n# - using a temporary container and mounting the refdata volume, use `bash -c \"plugins.sh plugins.txt\"` to setup $JENKINS_REFDIR/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENV REFCOPY_LOGFILE=$JENKINS_HOME/reference_copy.log\n\nENTRYPOINT [\"/usr/local/bin/jenkins.sh\"]\n\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      "$JENKINS_PORT $JENKINS_SLAVE_AGENT_PORT"
    ],
    "volume": [
      "[\"$JENKINS_HOME\", \"$JENKINS_REFDIR\", \"$JENKINS_BACKUPDIR\"]"
    ],
    "run": [
      "pacman -Syy --noconfirm python2 git doxygen graphviz gtk2 openssh &&     printf \"y\\\\ny\\\\n\" | pacman -Scc",
      "mkdir -p $JENKINS_INSTALLDIR $JENKINS_REFDIR/init.groovy.d $JENKINS_WEBROOT $JENKINS_BACKUPDIR $JENKINS_HOME",
      "echo 2.0 > $JENKINS_REFDIR/jenkins.install.UpgradeWizard.state",
      "curl -fsSL http://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war -o $JENKINS_INSTALLDIR/jenkins.war",
      "chown -R $UNAME:$GNAME $JENKINS_HOME $JENKINS_REFDIR $JENKINS_INSTALLDIR $JENKINS_BACKUPDIR $JENKINS_WEBROOT",
      "usermod --home $JENKINS_HOME $UNAME"
    ],
    "workdir": [
      "$JENKINS_HOME"
    ],
    "from": "marcelhuberfoo/arch-openjdk8",
    "maintainer": "Marcel Huber <marcelhuberfoo@gmail.com>",
    "user": "root",
    "arg": "JENKINS_PKGREL=2",
    "env": {
      "JENKINS_HOME": "/var/lib/jenkins",
      "": "JAVA_OPTS",
      "JENKINS_INSTALLDIR": "/usr/share/java/jenkins",
      "JENKINS_BACKUPDIR": "/var/backup/jenkins",
      "JENKINS_WEBROOT": "/var/cache/jenkins",
      "JENKINS_REFDIR": "/refdata",
      "JENKINS_PORT": "8080",
      "JENKINS_SLAVE_AGENT_PORT": "50000",
      "JENKINS_UC": "https://updates.jenkins.io",
      "JENKINS_VERSION": "$JENKINS_VERSION",
      "JENKINS_PKGREL": "$JENKINS_PKGREL",
      "JENKINS_OPTS": "'--webroot",
      "$JENKINS_WEBROOT": "--httpPort",
      "$JENKINS_PORT'": "",
      "\"-Djenkins.security.ArtifactsPermission": "true\"",
      "REFCOPY_LOGFILE": "$JENKINS_HOME/reference_copy.log"
    },
    "copy": "jenkins.sh /usr/local/bin/jenkins.sh",
    "entrypoint": "[\"/usr/local/bin/jenkins.sh\"]"
  },
  "source_repository_url": "https://github.com/marcelhuberfoo/docker-jenkins.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/marcelhuberfoo/docker-jenkins",
  "docker_repository": "marcelhuberfoo/jenkins",
  "docker_image": "marcelhuberfoo/jenkins",
  "parameters_schema": {
    "JENKINS_HOME": {
      "default": "/var/lib/jenkins",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "JAVA_OPTS",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_INSTALLDIR": {
      "default": "/usr/share/java/jenkins",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_BACKUPDIR": {
      "default": "/var/backup/jenkins",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_WEBROOT": {
      "default": "/var/cache/jenkins",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_REFDIR": {
      "default": "/refdata",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_PORT": {
      "default": "8080",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_SLAVE_AGENT_PORT": {
      "default": "50000",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_UC": {
      "default": "https://updates.jenkins.io",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_VERSION": {
      "default": "$JENKINS_VERSION",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_PKGREL": {
      "default": "$JENKINS_PKGREL",
      "type": "string",
      "mapping": "environment_variable"
    },
    "JENKINS_OPTS": {
      "default": "'--webroot",
      "type": "string",
      "mapping": "environment_variable"
    },
    "$JENKINS_WEBROOT": {
      "default": "--httpPort",
      "type": "string",
      "mapping": "environment_variable"
    },
    "$JENKINS_PORT'": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\"-Djenkins.security.ArtifactsPermission": {
      "default": "true\"",
      "type": "string",
      "mapping": "environment_variable"
    },
    "REFCOPY_LOGFILE": {
      "default": "$JENKINS_HOME/reference_copy.log",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        "$JENKINS_PORT $JENKINS_SLAVE_AGENT_PORT"
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "marcelhuberfoo/jenkins",
  "revision": "2.26-1",
  "uris": [
    "https://hub.docker.com/r/marcelhuberfoo/jenkins",
    "https://hub.docker.com/v2/repositories/marcelhuberfoo/jenkins",
    "https://github.com/marcelhuberfoo/docker-jenkins.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Devopsware/Build",
    "Type/Devopsware/Integration/Jenkins"
  ],
  "info_url": "https://hub.docker.com/r/marcelhuberfoo/jenkins",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}