{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/htmlgraphic/apache",
    "repository_url": "https://hub.docker.com/v2/repositories/htmlgraphic/apache",
    "tags_url": "https://hub.docker.com/v2/repositories/htmlgraphic/apache/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/htmlgraphic/apache/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/htmlgraphic/apache/autobuild",
    "user": "htmlgraphic",
    "name": "apache",
    "namespace": "htmlgraphic",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 6090,
    "last_updated": "2016-08-18T03:59:09.773985Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "staging",
        "full_size": 269044582,
        "id": 1324866,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-08-18T03:59:09.458119Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 269015906,
        "id": 552243,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-07-26T15:55:44.489650Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "master",
        "full_size": 269020437,
        "id": 3993718,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-07-26T15:54:23.797785Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "develop",
        "full_size": 269031540,
        "id": 3993512,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-07-26T04:04:50.413282Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.4.0",
        "full_size": 269014901,
        "id": 3992503,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-07-25T20:04:07.367849Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.3.1",
        "full_size": 269032597,
        "id": 2289185,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-03-12T20:11:47.181802Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.2.6",
        "full_size": 175763339,
        "id": 2035905,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2016-02-17T21:13:26.811357Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.2.5",
        "full_size": 175899259,
        "id": 1268904,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2015-11-03T19:34:40.720548Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.2.4",
        "full_size": 175899103,
        "id": 849862,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": "2015-11-03T19:34:20.726695Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "1.2.3",
        "full_size": 174286741,
        "id": 552377,
        "repository": 252968,
        "creator": 134081,
        "last_updater": 134081,
        "last_updated": null,
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "htmlgraphic/Apache"
  },
  "name": "htmlgraphic/apache Docker container",
  "description": "Docker container running Apache running on Ubuntu",
  "readme": "##Apache Docker\n\nThis repo will give you a turn key, build of a Docker container for use in production OR local development. The setup includes an Apache web service, linked MySQL instance and a data container volume.\n\n\nIf you found this repo you are probably looking into Docker or already have knowledge as to what Docker can help you with. In this repo you will find a number of complete Dockerfile builds used in **development** and **production** environments. Listed below is an explanation of each file\n\n---\n\n####Apache Web Server - Build Breakdown\n* **app/apache-config.conf** - Default configuration used by Apache\n* **app/index.php** - Default web page, enter the IP address `docker-machine ls` to load this page.\n* **app/mac-permissions.sh** - Run manually on container to match uid / gid permissions of local docker container to Mac OS X\n* **app/postfix-local-setup.sh** - Run manually on container to direct email to a gated email relay server, no emails are sent out to actual inboxes\n* **app/postfix.sh** - Used by *supervisord.conf* to start Postfix\n* **app/run.sh** - Setup apache, conf files, and start process on container\n* **app/sample.conf** - This file will exist on the container `/data/apache2/sites-enabled` duplicate / edit to host various domains\n* **app/supervisord.conf** - Supervisor is a client / server system which monitors and controls a number of processes on UNIX-like operating systems\n* **tests/build_tests.sh** - Build test processes\n* **.dockerignore** - Files that should be ignored during the build process - [best practice](https://docs.docker.com/articles/dockerfile_best-practices/#use-a-dockerignore-file)\n* **circle.yml** - CircleCI conf\n* **docker-compose.\\*** - (various composer files for local and production builds)\n* **Dockerfile** - Uses a basefile build to help speed up the docker container build process\n* **Makefile** - A helpful file used to streamline build commands\n* **shippable.yml** - Shippable conf\n\n\n\n---\n\n[![](https://badge.imagelayers.io/htmlgraphic/apache:latest.svg)](https://imagelayers.io/?images=htmlgraphic/apache:latest 'Get your own badge on imagelayers.io') Visualize Docker images and the layers that compose them.\n\n---\n\n##Docker Compose\n\nBuild the **Apache** instance locally and setup a local MySQL database container for persistant database data, the goal is to create a easy to use development environment.\n\n```bash\n\t$ git clone https://github.com/htmlgraphic/Apache.git && cd Apache\n\t$ make run\n```\n\n---\n\n[![Deploy to Tutum](https://s.tutum.co/deploy-to-tutum.svg)](https://dashboard.tutum.co/stack/deploy/)\n\n\n---\n\n##Build Apache Image\n\nBuild a working **Apache** instance using a `Makefile` and a few terminal commands\n\n```bash\n\t$ git clone https://github.com/htmlgraphic/Apache.git && cd Apache\n\t$ make\n\t$ make build\n```\n\n---\n\n##Test Driven Development\n\n**[CircleCI](https://circleci.com/gh/htmlgraphic/Apache)** - Test **production** and **dev** Docker builds, can the container be built the without error? Verify each build process using docker-compose. Code can be tested using ```lxc-attach / docker inspect``` inside the running container.\n\n[![Circle CI](https://circleci.com/gh/htmlgraphic/Apache/tree/develop.svg?style=svg)](https://circleci.com/gh/htmlgraphic/Apache/tree/develop)\n\nUsing **CircleCI** review the `circle.yml` file. \n\n---\n\n**[Shippable](https://shippable.com)** - Test **production** and **dev** Docker builds, can the container be built the without error? The ```/tests/build_tests.sh``` file ensures the can run with parameters defined. Shippable allows the use of [matrix environment variables](http://docs.shippable.com/ci_configure/#using-environment-variables) reducing build time and offer a more robust tests. If any test(s) fail the system should be reviewed closer.\n\n[![Run Status](https://api.shippable.com/projects/54cf015b5ab6cc13528a7b6a/badge?branch=develop)](https://app.shippable.com/projects/54cf015b5ab6cc13528a7b6a)\n\nUsing **Shippable** review the `shippable.yml` file. This continuous integration service will fully test the creation of your container and can push the complete image to your private Docker repo if you desire.\n",
  "dockerfile": "FROM htmlgraphic/base\nMAINTAINER Jason Gegere <jason@htmlgraphic.com>\n\n# Install packages then remove cache package list information\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get -yq install openssh-client \\\n\tapache2 \\\n\twget \\\n\tlibapache2-mod-php5 \\\n\tphp5-mcrypt \\\n\tphp5-mysql \\\n\tphp5-sqlite \\\n\tphp5-gd \\\n\tphp5-curl \\\n\tphp-pear \\\n\tphp-apc \\\n\tphp5-dev \\\n\tlibmagickwand-dev \\\n\tsupervisor \\\n\trsyslog \\\n\tpostfix && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n\n# Copy files to build app, add coming page to root apache dir, include self\n# signed SHA256 certs, unit tests to check over the setup\nRUN mkdir -p /opt\nCOPY ./app /opt/app\nCOPY ./tests /opt/tests\n\n\n# SUPERVISOR\nRUN chmod -R 755 /opt/* && \\\n\tmkdir -p /var/log/supervisor && \\\n\tcp /opt/app/supervisord /etc/supervisor/conf.d/supervisord.conf\n\n\n# SSH\n# Add public key for root access\nRUN mkdir -p /root/.ssh\nCOPY ./authorized_keys /root/.ssh/authorized_keys\n\n\n# APACHE\nRUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer\n\n# PEAR Package needed for a web app\nRUN pear install HTML_QuickForm\n\n# Install imagick into Apache\nRUN pecl install imagick\n\n# Enable Apache mods.\nRUN a2enmod php5 && a2enmod suexec && a2enmod userdir && a2enmod rewrite && a2enmod ssl && php5enmod mcrypt\n\n# Environment variables contained within build container.\nENV APACHE_RUN_USER=www-data \\\n\tAPACHE_RUN_GROUP=www-data \\\n\tAPACHE_LOG_DIR=/var/log/apache2 \\\n\tAPACHE_LOCK_DIR=/var/lock/apache2 \\\n\tAPACHE_PID_FILE=/var/run/apache2.pid \\\n\tNODE_ENVIRONMENT=$NODE_ENVIRONMENT \\\n\tSASL_USER=$SASL_USER \\\n\tSASL_PASS=$SASL_PASS \\\n\tLOG_TOKEN=$LOG_TOKEN\n\n\n# Add VOLUMEs to allow backup of config and databases\nVOLUME  [\"/data\"]\n\n# Note that EXPOSE only works for inter-container links. It doesn't make ports\n# accessible from the host. To expose port(s) to the host, at runtime, use the -p flag.\nEXPOSE 80 443\n\n\nCMD [\"/opt/app/run.sh\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [
      " [\"/data\"]"
    ],
    "run": [
      "apt-get update && apt-get -yq install openssh-client \tapache2 \twget \tlibapache2-mod-php5 \tphp5-mcrypt \tphp5-mysql \tphp5-sqlite \tphp5-gd \tphp5-curl \tphp-pear \tphp-apc \tphp5-dev \tlibmagickwand-dev \tsupervisor \trsyslog \tpostfix && apt-get clean && rm -rf /var/lib/apt/lists/*",
      "mkdir -p /opt",
      "chmod -R 755 /opt/* && \tmkdir -p /var/log/supervisor && \tcp /opt/app/supervisord /etc/supervisor/conf.d/supervisord.conf",
      "mkdir -p /root/.ssh",
      "curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer",
      "pear install HTML_QuickForm",
      "pecl install imagick",
      "a2enmod php5 && a2enmod suexec && a2enmod userdir && a2enmod rewrite && a2enmod ssl && php5enmod mcrypt"
    ],
    "workdir": [],
    "from": "htmlgraphic/base",
    "maintainer": "Jason Gegere <jason@htmlgraphic.com>",
    "env": {
      "DEBIAN_FRONTEND": "noninteractive",
      "APACHE_RUN_USER": "www-data",
      "\tAPACHE_RUN_GROUP": "www-data",
      "\tAPACHE_LOG_DIR": "/var/log/apache2",
      "\tAPACHE_LOCK_DIR": "/var/lock/apache2",
      "\tAPACHE_PID_FILE": "/var/run/apache2.pid",
      "\tNODE_ENVIRONMENT": "$NODE_ENVIRONMENT",
      "\tSASL_USER": "$SASL_USER",
      "\tSASL_PASS": "$SASL_PASS",
      "\tLOG_TOKEN": "$LOG_TOKEN"
    },
    "copy": "./authorized_keys /root/.ssh/authorized_keys",
    "cmd": "[\"/opt/app/run.sh\"]"
  },
  "source_repository_url": "https://github.com/htmlgraphic/Apache.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/htmlgraphic/Apache",
  "docker_repository": "htmlgraphic/apache",
  "docker_image": "htmlgraphic/apache",
  "parameters_schema": {
    "DEBIAN_FRONTEND": {
      "default": "noninteractive",
      "type": "string",
      "mapping": "environment_variable"
    },
    "APACHE_RUN_USER": {
      "default": "www-data",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tAPACHE_RUN_GROUP": {
      "default": "www-data",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tAPACHE_LOG_DIR": {
      "default": "/var/log/apache2",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tAPACHE_LOCK_DIR": {
      "default": "/var/lock/apache2",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tAPACHE_PID_FILE": {
      "default": "/var/run/apache2.pid",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tNODE_ENVIRONMENT": {
      "default": "$NODE_ENVIRONMENT",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tSASL_USER": {
      "default": "$SASL_USER",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tSASL_PASS": {
      "default": "$SASL_PASS",
      "type": "string",
      "mapping": "environment_variable"
    },
    "\tLOG_TOKEN": {
      "default": "$LOG_TOKEN",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "htmlgraphic/apache",
  "revision": "staging",
  "uris": [
    "https://hub.docker.com/r/htmlgraphic/apache",
    "https://hub.docker.com/v2/repositories/htmlgraphic/apache",
    "https://github.com/htmlgraphic/Apache.git"
  ],
  "labels": [
    "Docker",
    "Type/Infrastructure/Operating System/Linux/Ubuntu",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Store/Graph"
  ],
  "info_url": "https://hub.docker.com/r/htmlgraphic/apache",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}