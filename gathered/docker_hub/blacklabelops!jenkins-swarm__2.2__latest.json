{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/blacklabelops/jenkins-swarm",
    "repository_url": "https://hub.docker.com/v2/repositories/blacklabelops/jenkins-swarm",
    "tags_url": "https://hub.docker.com/v2/repositories/blacklabelops/jenkins-swarm/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/blacklabelops/jenkins-swarm/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/blacklabelops/jenkins-swarm/autobuild",
    "user": "blacklabelops",
    "name": "jenkins-swarm",
    "namespace": "blacklabelops",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 3,
    "pull_count": 5427,
    "last_updated": "2016-10-17T03:09:01.800394Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "2.2",
        "full_size": 280068613,
        "id": 5177481,
        "repository": 277679,
        "creator": 207420,
        "last_updater": 207420,
        "last_updated": "2016-10-17T03:09:00.995450Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 280068398,
        "id": 687900,
        "repository": 277679,
        "creator": 238671,
        "last_updater": 207420,
        "last_updated": "2016-10-17T03:07:10.157617Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.0",
        "full_size": 281253707,
        "id": 1630322,
        "repository": 277679,
        "creator": 238671,
        "last_updater": 207420,
        "last_updated": "2016-08-15T03:05:36.729213Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "blacklabelops/jenkins-swarm"
  },
  "name": "blacklabelops/jenkins-swarm Docker container",
  "description": "Jenkins Swarm Slave Dockerized and Parameterized! Easy to Use and Extend!",
  "readme": "# Dockerized Jenkins Swarm-Slave\n\n[![Circle CI](https://circleci.com/gh/blacklabelops/jenkins-swarm/tree/master.svg?style=svg)](https://circleci.com/gh/blacklabelops/jenkins-swarm/tree/master)\n[![Image Layers](https://badge.imagelayers.io/blacklabelops/jenkins-swarm:latest.svg)](https://imagelayers.io/?images=blacklabelops/jenkins-swarm:latest 'Get your own badge on imagelayers.io')\n\n## What's Inside\n\nInstalled Software:\n\n  * Java 8\n  * Subversion\n  * Git\n  * Github LFS\n  * Mercurial\n  * [Git LFS](https://git-lfs.github.com/)\n\nPerfectly working with the following container: [blacklabelops/jenkins](https://github.com/blacklabelops/jenkins)\n\nBlacklabelops swarm slaves can be found here: [blacklabelops/swarm](https://github.com/blacklabelops/swarm)\n\n## Make It Short\n\nIn short, this container can be started arbitrary times and connect as build slaves to\na Jenkins master instance. You need 10 Java JDK 8 build slaves? You want to start 6 build slaves on your co-workers machine? Use this!\n\nFirst start a master!\n\n~~~~\n$ docker run -d -p 8090:8080 --name jenkins blacklabelops/jenkins\n~~~~\n\n> This will pull the my jenkins container ready with swarm plugin and ready-to-use!\n\nNow swarm the place!\n\n~~~~\n$ docker run -d --link jenkins blacklabelops/jenkins-swarm\n$ docker run -d --link jenkins blacklabelops/jenkins-swarm\n$ docker run -d --link jenkins blacklabelops/jenkins-swarm\n~~~~\n\n> This will start 3 Java JDK 8 build slaves, each with 4 build processors! This setup will\nneed no further setup as the swarm slave automatically connects to the linked jenkins.\n\n## Setting Jenkins Master URL\n\nDefine your Jenkins master URL. This setup does not need linking. The URL can be specified\nby the `SWARM_MASTER_URL` environment variable.\n\nExample:\n\n~~~~\n$ docker run -d \\\n  -e \"SWARM_MASTER_URL=http://192.168.59.103:8090/\" \\\n  blacklabelops/jenkins-swarm\n~~~~\n\n> Connects to Jenkins Master at http://192.168.59.103:8090/\n\n## Setting Jenkins-Swarm Parameters\n\nYou can define additional swarm parameters specified in the swarm client documentation\n[Swarm Plugin Homepage](https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin). The swarm\nparameters are simply attached and should not override parameters that are controlled by\nenvironment variables, e.g. `SWARM_MASTER_URL`!\n\nExample defining the title and description of a swarm client with the environment variable\n`SWARM_CLIENT_PARAMETERS`:\n\n~~~~\n$ docker run -d \\\n  --link jenkins:jenkins \\\n\t-e \"SWARM_CLIENT_PARAMETERS=-name 'Super-Build' -description 'Super Client'\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n## Setting Jenkins Authentication\n\nAuthentication for the Jenkins master instance. Define username and password with the\nfollowing environment variables:\n\n* `SWARM_JENKINS_USER`\n* `SWARM_JENKINS_PASSWORD`\n\nExample:\n\n~~~~\n$ docker run -d \\\n  --link jenkins_jenkins_1:jenkins \\\n\t-e \"SWARM_JENKINS_USER=jenkins\" \\\n  -e \"SWARM_JENKINS_PASSWORD=swordfish\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n> Note: Must be a valid Jenkins User for the Jenkins master instance.\n\nWanna try? Here, use this command for a suitable master:\n\n~~~~\n$ docker run -d --name jenkins_jenkins_1 \\\n\t-e \"SWARM_JENKINS_USER=jenkins\" \\\n\t-e \"SWARM_JENKINS_PASSWORD=swordfish\"  \\\n\t-p 8090:8080 \\\n\tblacklabelops/jenkins\n~~~~\n\n## Setting Executors\n\nYou can limit or extending the number of build processors. Define the environment\nvariable `SWARM_CLIENT_EXECUTORS`. Default is 4.\n\nExample:\n\n~~~~\n$ docker run -d \\\n  --link jenkins_jenkins_1:jenkins \\\n\t-e \"SWARM_CLIENT_EXECUTORS=8\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n## Setting Swarm Labels\n\nLabels are necessary when your swarm slaves run on different tools and JKDs. Define the environment\nvariable `SWARM_CLIENT_LABELS` for your swarm-clients labels. Afterwards you can\ndefine which jobs should run on which labels.\n\nLabel are defined as a Whitespace-separated list to be assigned for this slave. Multiple options are allowed.\n\nExample:\n\n~~~~\n$ docker run -d \\\n  --link jenkins:jenkins \\\n\t-e \"SWARM_CLIENT_LABELS=jdk8 java\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n## Using Jenkins With HTTPS\n\nYes, this all works perfectly with HTTPS. Your communication and artifacts are safe!\n\n~~~~\n$ docker run \\\n  --link jenkins:jenkins \\\n\t-e \"SWARM_MASTER_URL=https://jenkins:8080/\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n> SSL verification is disabled by default. So you do not to place certificates inside\nthe swarm client.\n\nWanna try? Here, use this command for a suitable master:\n\n~~~~\n$ docker run -d --name jenkins \\\n\t-e \"JENKINS_KEYSTORE_PASSWORD=swordfish\" \\\n\t-e \"JENKINS_CERTIFICATE_DNAME=CN=SBleul,OU=Blacklabelops,O=blacklabelops.net,L=Munich,S=Bavaria,C=DE\" \\\n\t-p 8090:8080 \\\n\tblacklabelops/jenkins\n~~~~\n\n> Master is available under https://docker-ip:8090\n\n## Setting Java-VM Parameters\n\nYou can define start up parameters for the Java Virtual Machine, e.g. setting the memory size.\n\n~~~~\n$ docker run \\\n  --link jenkins:jenkins \\\n\t-e \"SWARM_VM_PARAMETERS=-Xmx512m -Xms256m\" \\\n\tblacklabelops/jenkins-swarm\n~~~~\n\n> You will have to use Java 8 parameters.\n\n## Passing Slave Parameters\n\nYou can run the swarm slave solely with command line parameters!\n\nExample:\n\n~~~~\n$ docker run \\\n    --link jenkins:jenkins \\\n\t   blacklabelops/jenkins-swarm -master http://jenkins:8080\n~~~~\n\n> Will connect with linked master.\n\nExample list parameters:\n~~~~\n$ docker run blacklabelops/jenkins-swarm -help\n~~~~\n\n> Lists jenkins-swarm plugin parameters.\n\nExample with jvm parameters:\n\n~~~~\n$ docker run \\\n    --link jenkins:jenkins \\\n    -e \"SWARM_VM_PARAMETERS=-Xmx512m -Xms256m\" \\\n\t   blacklabelops/jenkins-swarm -master http://jenkins:8080\n~~~~\n\n> Will connect with linked master.\n\n## How To Extend This Image\n\nImport the image inside your Dockerfile then just install all the tools you need. Start\nthe container with the parameters described in this readme.\n\nExample:\n\n~~~~\nFROM blacklabelops/jenkins-swarm\nMAINTAINER Your Name <youremail@yourhost.com>\n\n# Need root to install tools via yum\nUSER root\n\n# install toolset\nRUN ...\n\n# Switch back to container user\nUSER $CONTAINER_USER\n\nCMD [\"swarm\"]\n~~~~\n\n## Container User & Permissions\n\n> Note: First check out this project!\n\nSimply: You can match user, user id, group and group id to any user and groups on your host machine!\n\nDue to security considerations this image is not running in root mode! The default process user inside the container is `swarmslave` and the user's group is `swarmslave`. This project offers a simplified mechanism for user- and group-mapping. You can set the user, user id, group and group id during build time.\n\nThe process permissions are relevant when using volumes and mounted folders from the host machine. Jenkins need read and write permissions on the host machine for correct mounting of host volumes. You can set this during build time.\n\nThe following build arguments can be used:\n\n* CONTAINER_USER: Set the user's name of the image user. (default: swarmslave)\n* CONTAINER_GROUP: Set the group's name of the image user. (default: swarmslave)\n* CONTAINER_UID: Set the user-id of the Jenkins process. (default: 1000)\n* CONTAINER_GID: Set the group-id of the Jenkins process. (default: 1000)\n\nExample:\n\n~~~~\n$ docker build \\\n    --build-arg CONTAINER_USER=swarm \\\n    --build-arg CONTAINER_GROUP=swarm \\\n    --build-arg CONTAINER_UID=2000 \\\n    --build-arg CONTAINER_GID=2000 \\\n    -t blacklabelops/jenkins-swarm .\n~~~~\n\n> The container will write and read files with user swarm with UID 2000 and group swarm with GID 2000.\n\nCheck It Out:\n\n~~~~\n$ docker run -it --rm blacklabelops/jenkins-swarm id\n~~~~\n\n> Prints its user details on console. `uid=2000(swarm) gid=2000(swarm) groups=2000(swarm)`\n\n## Vagrant\n\n> Note: First check out this project!\n\nVagrant is fabulous tool for pulling and spinning up virtual machines like docker with containers. I can configure my development and test environment and simply pull it online. And so can you! Install Vagrant and Virtualbox and spin it up. Change into the project folder and build the project on the spot!\n\n~~~~\n$ vagrant up\n$ vagrant ssh\n[vagrant@localhost ~]$ cd /vagrant\n[vagrant@localhost ~]$ ./scripts/build.sh\n~~~~\n\n> Builds the container with standard settings.\n\nVagrant does not leave any docker artifacts on your beloved desktop and the vagrant image can simply be destroyed and repulled if anything goes wrong. Test my project to your heart's content!\n\nFirst install:\n\n* [Vagrant](https://www.vagrantup.com/)\n* [Virtualbox](https://www.virtualbox.org/)\n\n## Support & Feature Requests\n\nLeave a message and ask questions on Hipchat: [blacklabelops/hipchat](https://www.hipchat.com/geogBFvEM)\n\n## References\n\n* [Jenkins Homepage](http://jenkins-ci.org/)\n* [Jenkins Swarm Plugin Homepage](https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin)\n* [Docker Homepage](https://www.docker.com/)\n* [Docker Compose](https://docs.docker.com/compose/)\n* [Docker Userguide](https://docs.docker.com/userguide/)\n* [Oracle Java8](https://java.com/de/download/)\n",
  "dockerfile": "FROM blacklabelops/java:centos.jre8\nMAINTAINER Steffen Bleul <sbl@blacklabelops.com>\n\n# Jenkins Swarm Version\nARG SWARM_VERSION=2.0\n# Container User\nARG CONTAINER_USER=swarmslave\nARG CONTAINER_UID=1000\nARG CONTAINER_GROUP=swarmslave\nARG CONTAINER_GID=1000\n\n# Container Internal Environment Variables\nENV SWARM_HOME=/opt/jenkins-swarm \\\n    SWARM_JAVA_HOME=/opt/java/jre${JAVA_VERSION} \\\n    SWARM_WORKDIR=/opt/jenkins\n\nRUN /usr/sbin/groupadd --gid $CONTAINER_GID $CONTAINER_GROUP && \\\n    /usr/sbin/useradd --uid $CONTAINER_UID --gid $CONTAINER_GID --shell /bin/bash $CONTAINER_USER && \\\n    # Install Development Tools\n    yum install -y \\\n        wget \\\n        tar \\\n        gzip \\\n        svn \\\n        mercurial \\\n        git && \\\n    yum clean all && rm -rf /var/cache/yum/* && \\\n    # Install Git-LFS\n    export GIT_LFS_VERSION=1.1.2 && \\\n    wget -O /tmp/git-lfs-linux-amd64.tar.gz https://github.com/github/git-lfs/releases/download/v${GIT_LFS_VERSION}/git-lfs-linux-amd64-${GIT_LFS_VERSION}.tar.gz && \\\n    tar xfv /tmp/git-lfs-linux-amd64.tar.gz -C /tmp && \\\n    cd /tmp/git-lfs-${GIT_LFS_VERSION}/ && bash -c \"/tmp/git-lfs-${GIT_LFS_VERSION}/install.sh\" && \\\n    git lfs install && \\\n    # Install Tini Zombie Reaper And Signal Forwarder\n    export TINI_VERSION=0.9.0 && \\\n    export TINI_SHA=fa23d1e20732501c3bb8eeeca423c89ac80ed452 && \\\n    curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini && \\\n    chmod +x /bin/tini && \\\n    echo \"$TINI_SHA /bin/tini\" | sha1sum -c - && \\\n    # Install Jenkins Swarm-Slave\n    mkdir -p ${SWARM_HOME} && \\\n    wget --directory-prefix=${SWARM_HOME} \\\n      http://maven.jenkins-ci.org/content/repositories/releases/org/jenkins-ci/plugins/swarm-client/${SWARM_VERSION}/swarm-client-${SWARM_VERSION}-jar-with-dependencies.jar  && \\\n    mv ${SWARM_HOME}/swarm-client-${SWARM_VERSION}-jar-with-dependencies.jar ${SWARM_HOME}/swarm-client-jar-with-dependencies.jar && \\\n    mkdir -p ${SWARM_WORKDIR} && \\\n    chown -R ${CONTAINER_USER}:${CONTAINER_GROUP} ${SWARM_HOME} ${SWARM_WORKDIR} && \\\n    chmod +x ${SWARM_HOME}/swarm-client-jar-with-dependencies.jar\n\n# Entrypoint Environment Variables\nENV SWARM_VM_PARAMETERS= \\\n    SWARM_MASTER_URL= \\\n    SWARM_VM_PARAMETERS= \\\n    SWARM_JENKINS_USER= \\\n    SWARM_JENKINS_PASSWORD= \\\n    SWARM_CLIENT_EXECUTORS= \\\n    SWARM_CLIENT_LABELS= \\\n    SWARM_CLIENT_NAME=\n\nUSER $CONTAINER_USER\nWORKDIR $SWARM_WORKDIR\nVOLUME $SWARM_WORKDIR\nCOPY imagescripts/docker-entrypoint.sh ${SWARM_HOME}/docker-entrypoint.sh\nENTRYPOINT [\"/bin/tini\",\"--\",\"/opt/jenkins-swarm/docker-entrypoint.sh\"]\nCMD [\"swarm\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [
      "$SWARM_WORKDIR"
    ],
    "run": [
      "/usr/sbin/groupadd --gid $CONTAINER_GID $CONTAINER_GROUP &&     /usr/sbin/useradd --uid $CONTAINER_UID --gid $CONTAINER_GID --shell /bin/bash $CONTAINER_USER &&     # Install Development Tools"
    ],
    "workdir": [
      "$SWARM_WORKDIR"
    ],
    "from": "blacklabelops/java:centos.jre8",
    "maintainer": "Steffen Bleul <sbl@blacklabelops.com>",
    "arg": "CONTAINER_GID=1000",
    "env": {
      "SWARM_HOME": "/opt/jenkins-swarm",
      "": "",
      "SWARM_JAVA_HOME": "/opt/java/jre${JAVA_VERSION}",
      "SWARM_WORKDIR": "/opt/jenkins",
      "SWARM_VM_PARAMETERS": "",
      "SWARM_MASTER_URL": "",
      "SWARM_JENKINS_USER": "",
      "SWARM_JENKINS_PASSWORD": "",
      "SWARM_CLIENT_EXECUTORS": "",
      "SWARM_CLIENT_LABELS": "",
      "SWARM_CLIENT_NAME": ""
    },
    "user": "$CONTAINER_USER",
    "copy": "imagescripts/docker-entrypoint.sh ${SWARM_HOME}/docker-entrypoint.sh",
    "entrypoint": "[\"/bin/tini\",\"--\",\"/opt/jenkins-swarm/docker-entrypoint.sh\"]",
    "cmd": "[\"swarm\"]"
  },
  "source_repository_url": "https://github.com/blacklabelops/jenkins-swarm.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/blacklabelops/jenkins-swarm",
  "docker_repository": "blacklabelops/jenkins-swarm",
  "docker_image": "blacklabelops/jenkins-swarm",
  "parameters_schema": {
    "SWARM_HOME": {
      "default": "/opt/jenkins-swarm",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_JAVA_HOME": {
      "default": "/opt/java/jre${JAVA_VERSION}",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_WORKDIR": {
      "default": "/opt/jenkins",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_VM_PARAMETERS": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_MASTER_URL": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_JENKINS_USER": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_JENKINS_PASSWORD": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_CLIENT_EXECUTORS": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_CLIENT_LABELS": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "SWARM_CLIENT_NAME": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "blacklabelops/jenkins-swarm",
  "revision": "2.2",
  "uris": [
    "https://hub.docker.com/r/blacklabelops/jenkins-swarm",
    "https://hub.docker.com/v2/repositories/blacklabelops/jenkins-swarm",
    "https://github.com/blacklabelops/jenkins-swarm.git"
  ],
  "labels": [
    "Docker",
    "Binding/Region/North America/US",
    "Type/Devopsware/Integration/Jenkins"
  ],
  "info_url": "https://hub.docker.com/r/blacklabelops/jenkins-swarm",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}