{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/_/jenkins",
    "repository_url": "https://hub.docker.com/v2/repositories/library/jenkins",
    "tags_url": "https://hub.docker.com/v2/repositories/library/jenkins/tags",
    "user": "library",
    "name": "jenkins",
    "namespace": "library",
    "status": 1,
    "is_private": false,
    "is_automated": false,
    "star_count": 2084,
    "pull_count": 10842763,
    "last_updated": "2016-10-11T19:56:29.575503Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "2.7.4-alpine",
        "full_size": 144097424,
        "id": 4829539,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:56:17.668276Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7.4",
        "full_size": 312854260,
        "id": 4829527,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:56:04.677970Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.19.1-alpine",
        "full_size": 144784904,
        "id": 5312905,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:55:48.521189Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "alpine",
        "full_size": 144784904,
        "id": 2646245,
        "repository": 35802,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:55:38.508548Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.19.1",
        "full_size": 313221284,
        "id": 5312878,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:55:26.438965Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 313221284,
        "id": 38853,
        "repository": 35802,
        "creator": 7,
        "last_updater": 621950,
        "last_updated": "2016-10-11T19:55:16.035210Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7.3",
        "full_size": 312864632,
        "id": 4632001,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-07T21:21:07.485971Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7.3-alpine",
        "full_size": 144093562,
        "id": 4632009,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-07T21:20:07.632295Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7.2",
        "full_size": 312859386,
        "id": 4220175,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-08-31T20:51:02.173187Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "2.7.2-alpine",
        "full_size": 144088329,
        "id": 4220186,
        "repository": 35802,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-08-31T20:50:33.467778Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ]
  },
  "docker_image": "jenkins",
  "name": "jenkins Docker container",
  "description": "Official Jenkins Docker image",
  "readme": "# Supported tags and respective `Dockerfile` links\n\n-\t[`latest`, `2.19.1` (*Dockerfile*)](https://github.com/jenkinsci/jenkins-ci.org-docker/blob/2fb0684fe6eb11a3c1145d71e0cb50bf2dda8d11/Dockerfile)\n-\t[`2.7.4` (*Dockerfile*)](https://github.com/jenkinsci/jenkins-ci.org-docker/blob/6eaa9b15926232310317490a3b9975ef61be763c/Dockerfile)\n-\t[`alpine`, `2.19.1-alpine` (*Dockerfile*)](https://github.com/jenkinsci/jenkins-ci.org-docker/blob/3fc5d6038dc717055b15001cd7e039e965f24542/Dockerfile)\n-\t[`2.7.4-alpine` (*Dockerfile*)](https://github.com/jenkinsci/jenkins-ci.org-docker/blob/d2eeb20813164526f0443599fd82fd79fadee77e/Dockerfile)\n\nFor more information about this image and its history, please see [the relevant manifest file (`library/jenkins`)](https://github.com/docker-library/official-images/blob/master/library/jenkins). This image is updated via [pull requests to the `docker-library/official-images` GitHub repo](https://github.com/docker-library/official-images/pulls?q=label%3Alibrary%2Fjenkins).\n\nFor detailed information about the virtual/transfer sizes and individual layers of each of the above supported tags, please see [the `repos/jenkins/tag-details.md` file](https://github.com/docker-library/repo-info/blob/master/repos/jenkins/tag-details.md) in [the `docker-library/repo-info` GitHub repo](https://github.com/docker-library/repo-info).\n\n# Jenkins\n\nThe Jenkins Continuous Integration and Delivery server.\n\nThis is a fully functional Jenkins server, based on the Long Term Support release [http://jenkins.io/](http://jenkins.io/).\n\nFor weekly releases check out [`jenkinsci/jenkins`](https://hub.docker.com/r/jenkinsci/jenkins/)\n\n![logo](https://raw.githubusercontent.com/docker-library/docs/3ab4dafb41dd0e959ff9322b3c50af2519af6d85/jenkins/logo.png)\n\n# How to use this image\n\n```console\ndocker run -p 8080:8080 -p 50000:50000 jenkins\n```\n\nThis will store the workspace in /var/jenkins_home. All Jenkins data lives in there - including plugins and configuration. You will probably want to make that a persistent volume (recommended):\n\n```console\ndocker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins\n```\n\nThis will store the jenkins data in `/your/home` on the host. Ensure that `/your/home` is accessible by the jenkins user in container (jenkins user - uid 1000) or use `-u some_other_user` parameter with `docker run`.\n\nYou can also use a volume container:\n\n```console\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins\n```\n\nThen myjenkins container has the volume (please do read about docker volume handling to find out more).\n\n## Backing up data\n\nIf you bind mount in a volume - you can simply back up that directory (which is jenkins_home) at any time.\n\nThis is highly recommended. Treat the jenkins_home directory as you would a database - in Docker you would generally put a database on a volume.\n\nIf your volume is inside a container - you can use `docker cp $ID:/var/jenkins_home` command to extract the data, or other options to find where the volume data is. Note that some symlinks on some OSes may be converted to copies (this can confuse jenkins with lastStableBuild links etc)\n\nFor more info check Docker docs section on [Managing data in containers](https://docs.docker.com/userguide/dockervolumes/)\n\n# Setting the number of executors\n\nYou can specify and set the number of executors of your Jenkins master instance using a groovy script. By default its set to 2 executors, but you can extend the image and change it to your desired number of executors :\n\n`executors.groovy`\n\n\timport jenkins.model.*\n\tJenkins.instance.setNumExecutors(5)\n\nand `Dockerfile`\n\n```console\nFROM jenkins\nCOPY executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy\n```\n\n# Attaching build executors\n\nYou can run builds on the master (out of the box) but if you want to attach build slave servers: make sure you map the port: `-p 50000:50000` - which will be used when you connect a slave agent.\n\n# Passing JVM parameters\n\nYou might need to customize the JVM running Jenkins, typically to pass system properties or tweak heap memory settings. Use JAVA_OPTS environment variable for this purpose :\n\n```console\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 --env JAVA_OPTS=-Dhudson.footerURL=http://mycompany.com jenkins\n```\n\n# Configuring logging\n\nJenkins logging can be configured through a properties file and `java.util.logging.config.file` Java property. For example:\n\n```console\nmkdir data\ncat > data/log.properties <<EOF\nhandlers=java.util.logging.ConsoleHandler\njenkins.level=FINEST\njava.util.logging.ConsoleHandler.level=FINEST\nEOF\ndocker run --name myjenkins -p 8080:8080 -p 50000:50000 --env JAVA_OPTS=\"-Djava.util.logging.config.file=/var/jenkins_home/log.properties\" -v `pwd`/data:/var/jenkins_home jenkins\n```\n\n# Passing Jenkins launcher parameters\n\nArguments you pass to docker running the jenkins image are passed to jenkins launcher, so you can run for example :\n\n```console\n$ docker run jenkins --version\n```\n\nThis will dump Jenkins version, just like when you run jenkins as an executable war.\n\nYou also can define jenkins arguments as `JENKINS_OPTS`. This is useful to define a set of arguments to pass to jenkins launcher as you define a derived jenkins image based on the official one with some customized settings. The following sample Dockerfile uses this option to force use of HTTPS with a certificate included in the image\n\n```console\nFROM jenkins:1.565.3\n\nCOPY https.pem /var/lib/jenkins/cert\nCOPY https.key /var/lib/jenkins/pk\nENV JENKINS_OPTS --httpPort=-1 --httpsPort=8083 --httpsCertificate=/var/lib/jenkins/cert --httpsPrivateKey=/var/lib/jenkins/pk\nEXPOSE 8083\n```\n\nYou can also change the default slave agent port for jenkins by defining `JENKINS_SLAVE_AGENT_PORT` in a sample Dockerfile.\n\n```console\nFROM jenkins:1.565.3\nENV JENKINS_SLAVE_AGENT_PORT 50001\n```\n\nor as a parameter to docker,\n\n```console\n$ docker run --name myjenkins -p 8080:8080 -p 50001:50001 --env JENKINS_SLAVE_AGENT_PORT=50001 jenkins\n```\n\n# Installing more tools\n\nYou can run your container as root - and install via apt-get, install as part of build steps via jenkins tool installers, or you can create your own Dockerfile to customise, for example:\n\n```console\nFROM jenkins\n# if we want to install via apt\nUSER root\nRUN apt-get update && apt-get install -y ruby make more-thing-here\nUSER jenkins # drop back to the regular jenkins user - good practice\n```\n\nIn such a derived image, you can customize your jenkins instance with hook scripts or additional plugins. For this purpose, use `/usr/share/jenkins/ref` as a place to define the default JENKINS_HOME content you wish the target installation to look like :\n\n```console\nFROM jenkins\nCOPY plugins.txt /usr/share/jenkins/ref/\nCOPY custom.groovy /usr/share/jenkins/ref/init.groovy.d/custom.groovy\nRUN /usr/local/bin/plugins.sh /usr/share/jenkins/ref/plugins.txt\n```\n\nWhen jenkins container starts, it will check JENKINS_HOME has this reference content, and copy them there if required. It will not override such files, so if you upgraded some plugins from UI they won't be reverted on next start.\n\nAlso see [JENKINS-24986](https://issues.jenkins-ci.org/browse/JENKINS-24986)\n\nFor your convenience, you also can use a plain text file to define plugins to be installed (using core-support plugin format). All plugins need to be listed as there is no transitive dependency resolution.\n\n```console\npluginID:version\ncredentials:1.18\nmaven-plugin:2.7.1\n...\n```\n\nAnd in derived Dockerfile just invoke the utility plugin.sh script\n\n```console\nFROM jenkins\nCOPY plugins.txt /usr/share/jenkins/plugins.txt\nRUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt\n```\n\n# Upgrading\n\nAll the data needed is in the /var/jenkins_home directory - so depending on how you manage that - depends on how you upgrade. Generally - you can copy it out - and then \"docker pull\" the image again - and you will have the latest LTS - you can then start up with -v pointing to that data (/var/jenkins_home) and everything will be as you left it.\n\nAs always - please ensure that you know how to drive docker - especially volume handling!\n\n# Image Variants\n\nThe `jenkins` images come in many flavors, each designed for a specific use case.\n\n## `jenkins:<version>`\n\nThis is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of.\n\n## `jenkins:alpine`\n\nThis image is based on the popular [Alpine Linux project](http://alpinelinux.org), available in [the `alpine` official image](https://hub.docker.com/_/alpine). Alpine Linux is much smaller than most distribution base images (~5MB), and thus leads to much slimmer images in general.\n\nThis variant is highly recommended when final image size being as small as possible is desired. The main caveat to note is that it does use [musl libc](http://www.musl-libc.org) instead of [glibc and friends](http://www.etalabs.net/compare_libcs.html), so certain software might run into issues depending on the depth of their libc requirements. However, most software doesn't have an issue with this, so this variant is usually a very safe choice. See [this Hacker News comment thread](https://news.ycombinator.com/item?id=10782897) for more discussion of the issues that might arise and some pro/con comparisons of using Alpine-based images.\n\nTo minimize image size, it's uncommon for additional related tools (such as `git` or `bash`) to be included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the [`alpine` image description](https://hub.docker.com/_/alpine/) for examples of how to install packages if you are unfamiliar).\n\n# Supported Docker versions\n\nThis image is officially supported on Docker version 1.12.2.\n\nSupport for older versions (down to 1.6) is provided on a best-effort basis.\n\nPlease see [the Docker installation documentation](https://docs.docker.com/installation/) for details on how to upgrade your Docker daemon.\n\n# User Feedback\n\n## Issues\n\nIf you have any problems with or questions about this image, please contact us through a [GitHub issue](https://github.com/cloudbees/jenkins-ci.org-docker/issues). If the issue is related to a CVE, please check for [a `cve-tracker` issue on the `official-images` repository first](https://github.com/docker-library/official-images/issues?q=label%3Acve-tracker).\n\nYou can also reach many of the official image maintainers via the `#docker-library` IRC channel on [Freenode](https://freenode.net).\n\n## Contributing\n\nYou are invited to contribute new features, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.\n\nBefore you start to code, we recommend discussing your plans through a [GitHub issue](https://github.com/cloudbees/jenkins-ci.org-docker/issues), especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing.\n\n## Documentation\n\nDocumentation for this image is stored in the [`jenkins/` directory](https://github.com/docker-library/docs/tree/master/jenkins) of the [`docker-library/docs` GitHub repo](https://github.com/docker-library/docs). Be sure to familiarize yourself with the [repository's `README.md` file](https://github.com/docker-library/docs/blob/master/README.md) before attempting a pull request.",
  "type": "docker",
  "docker_name": "jenkins",
  "revision": "2.7.4-alpine",
  "uris": [
    "https://hub.docker.com/r/_/jenkins",
    "https://hub.docker.com/v2/repositories/library/jenkins"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Devopsware/Integration/Jenkins"
  ],
  "info_url": "https://hub.docker.com/r/_/jenkins",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}