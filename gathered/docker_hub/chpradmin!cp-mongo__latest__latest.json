{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/chpradmin/cp-mongo",
    "repository_url": "https://hub.docker.com/v2/repositories/chpradmin/cp-mongo",
    "tags_url": "https://hub.docker.com/v2/repositories/chpradmin/cp-mongo/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/chpradmin/cp-mongo/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/chpradmin/cp-mongo/autobuild",
    "user": "chpradmin",
    "name": "cp-mongo",
    "namespace": "chpradmin",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 5243,
    "last_updated": "2016-10-11T12:52:15.361602Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 195375562,
        "id": 3535204,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-10-11T12:52:15.073749Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "update_website_api_url",
        "full_size": 195375597,
        "id": 5372451,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-10-11T11:19:16.353054Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "addpreprod_ashley",
        "full_size": 195286626,
        "id": 5033304,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-23T16:31:52.714426Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "update-gaia-geofixes-es-version",
        "full_size": 195183683,
        "id": 4841775,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-14T12:03:19.294694Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "TRAN-5426_add_redtie_machine_token_env_variable",
        "full_size": 195183781,
        "id": 4823801,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-14T09:53:38.098729Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "TECH-wallet",
        "full_size": 195182341,
        "id": 4757957,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-09T10:28:56.731647Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "add_idp_url_website",
        "full_size": 195179521,
        "id": 4693201,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-07T09:20:51.313043Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "update_amqp_url",
        "full_size": 195176908,
        "id": 4647280,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-09-02T14:02:01.113606Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "TRAN-4454_add_red_tie_AMQP_URL",
        "full_size": 195157402,
        "id": 4596198,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-08-31T08:32:17.090553Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "TECH_optimized_Dockerfiles",
        "full_size": 195084627,
        "id": 4466810,
        "repository": 759486,
        "creator": 860144,
        "last_updater": 860144,
        "last_updated": "2016-08-23T17:31:25.701256Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "transcovo/environments-tech"
  },
  "name": "chpradmin/cp-mongo Docker container",
  "description": "mongo",
  "readme": "# environments-tech\n\n## TLDR;\nThe tests will be run for you current local setup for both __`API-Node` and `cp_lib`__, so you still need to make sure that the test will be run against the desired codebase.\n\n__Attention:__ the `cp_lib` used by `API-Node` for the tests will be __your__ `cp_lib` not the one in `API_node/node_modules`.\n\n```\ncd ./docker\n./build_test.sh\n# build the docker test image\n\nvim ./run_test.sh\n# update the API_PATH and CP_LIB_PATH variables based on your local configuration\n\n./run_test.sh\n# start the tests on your local API-Node version\n```\n\n## Get started\n\nThis tutorial will help you setup your working environments; they contain everything you need to run, **on your machine**, the following projects, locally, and in a preproduction or production scenarios:\n - the API (`API-Node`),\n - the old website/backoffice (`website-backoffice`),\n - the new backoffice (`Backoffice`).\n\nThe projects need to connect to a couple of external *dependencies* : MongoDB, RabbitMQ, redis, so the main goal of this tutorial is actually about them, more than about the projects themselves.\n\n## The local environment\n\nIn order to run the projects on your machine only (by running both the servers and the other dependencies), you need to fire up an instance of the aforementionned services. We use a Docker image that contains all the services for this.\n\n### Get Docker on Ubuntu:\nRead it [here](https://docs.docker.com/installation/ubuntulinux#installation).\n\n - Verify that you have curl installed.\n  ```\n  which curl\n  ```\n\n  If curl isn’t installed, install it after updating your manager:\n\n  ```\n  sudo apt-get update\n  sudo apt-get install curl\n  ```\n\n - Get the latest Docker package.\n  ```\n  curl -sSL https://get.docker.com/ | sh\n  ```\n  The system prompts you for your sudo password. Then, it downloads and installs Docker and its dependencies.\n\n  Once you're through, restart your machine.\n\n### Get Docker on Mac OS X:\n\nRead it [here](https://docs.docker.com/installation/mac/#installation).\n\n - Install [Docker Toolbox](https://www.docker.com/toolbox).\n\nOn Mac OS X, Docker must run within a Linux virtual machine (thought VirtualBox); if you need explanation about that, you can read it at the previous link.\n\nPort forwarding to your localhost should be done by running:\n\n```\nVBoxManage controlvm \"machine-name\" natpf1 \"MongoDB,tcp,,27017,,27017\"\nVBoxManage controlvm \"machine-name\" natpf1 \"RabbitMQ,tcp,,5672,,5672\"\nVBoxManage controlvm \"machine-name\" natpf1 \"Redis,tcp,,6379,,6379\"\n```\n\n### Build and run the Docker image\n\nNote: if the internet connection sucks, you'd probably be better off loading it from a dump rather than building it from the Dockerfile.\n\nThe Dockerfile is a file that describes which packages must be installed and run; go to the `docker/` folder in `environements-tech`, and run `./build.sh`.\n\nNote: it seems that build process hangs on \"Setting up ca-certificates-java\" on the docker-machine's default machine. To get around this issue create another machine with the `--engine-storage-driver` set to `cp-machine`.\n\n```\ndocker-machine create -d virtualbox --engine-storage-driver overlay machine-name\ndocker-machine start machine-name\neval $(docker-machine env machine-name)\n./build.sh\n```\n\nOnce the image is built, you can run it by firing up `./run.sh`. Congratulations, you have MongoDB, RabbitMQ, and redis running on your system. From then on, the steps are very similar.\n\n## Running the projects\n\nWhether your are starting them locally or remotely, it's a piece of cake.\n\nProvided you've got the following directory structure:\n\n```\n.\n├── API-Node\n│   ├── server.js\n│   └── ...\n├── Backoffice\n│   ├── Gruntfile.js\n│   └── ...\n├── environments-tech\n│   ├── README.md\n│   ├── docker\n│   ├── preproduction-api.sh\n│   ├── preproduction-backoffice.sh\n│   ├── preproduction-idp.sh\n│   └── preproduction-website-backoffice.sh\n└── website-backoffice\n    ├── server.js\n    └── ...\n```\n\n### Fully local\n\nYou must first start a Docker process using the command introduced above. Then:\n\n - Start `API-Node`:\n```\ncd API-Node/\nnode server.js\n```\n\n - Start `website-backoffice`:\n```\ncd website-backoffice/\nnode server.js\n```\n\n - Start `Identity Provider`:\n```\ncd identity-provider/\nnpm run start (or nodemon --harmony server/index.js)\n```\n\n### In preproduction mode\n\nWhen doing this you will plug your local node server to the preprod Mongo, Redis and RabbitMQ.\nYou should consider dumping the preprod database on your computer so you can have preprod data\nwithout messing with them (see next session).\n\n - Start `API-Node`:\n```\nsource ./environments-tech/preproduction-api.sh\ncd API-Node/\nnode server.js\n```\n\n - Start `website-backoffice`:\n```\nsource ./environments-tech/preproduction-website-backoffice.sh\ncd website-backoffice/\nnode server.js\n```\n\n - Start `Backoffice`:\n```\nsource ./environments-tech/preproduction-backoffice.sh\ncd Backoffice/\ngrunt serve\n```\n\n - Start `Identity Provider`:\n```\nsource ./environments-tech/preproduction-idp.sh\ncd identity-provider/\nnpm run start (or nodemon --harmony server/index.js)\n```\n\n### In preproduction dump mode\n\nYou will extract a mongo database from preprod and use it locally.\nGo to [compose](https://app.compose.io/transcovo/mongodb/prod/backups) and download a backup.\n\nExtract this backup in `~/data/dump-preprod/`. Then run the dump preprod docker`./run-dumpprepprod.sh`\n\n - Start `API-Node`:\n```\ncd API-Node/\nsource ./environments/dump-preprod.sh\nnode server.js\n```\n\n - Start `website-backoffice`:\n```\ncd website-backoffice/\nsource ./environments/dump-preprod.sh\nnode server.js\n```\n\n - Start `Backoffice`:\n```\ncd Backoffice/\nsource ./environments/dump-preprod.sh\ngrunt serve\n```\n\n - Start `Identity Provider`:\n```\ncd identity-provider/\nsource ./environments/dump-preprod.sh\nnpm run start (or nodemon --harmony server/index.js)\n```\n\n##### :rocket: Fasten your seat belts. This is going to be a bumpy ride !\n",
  "dockerfile": "FROM ubuntu:16.04\n\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \\\n    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list && \\\n    apt-get update -qy && \\\n    apt-get install mongodb-org=2.6.9 -qy && \\\n    mkdir -p /data/db /tmp/logs\n\nVOLUME /data/db\n\nCMD mongod > /tmp/logs/mongo.log 2> /tmp/logs/mongo.error.log\n",
  "dockerfile_json": {
    "add": [],
    "expose": [],
    "volume": [
      "/data/db"
    ],
    "run": [
      "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 &&     echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list &&     apt-get update -qy &&     apt-get install mongodb-org=2.6.9 -qy &&     mkdir -p /data/db /tmp/logs"
    ],
    "workdir": [],
    "from": "ubuntu:16.04",
    "cmd": "mongod > /tmp/logs/mongo.log 2> /tmp/logs/mongo.error.log"
  },
  "source_repository_url": "git@github.com:transcovo/environments-tech.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/transcovo/environments-tech",
  "docker_repository": "chpradmin/cp-mongo",
  "docker_image": "chpradmin/cp-mongo",
  "parameters_schema": {
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "chpradmin/cp-mongo",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/chpradmin/cp-mongo",
    "https://hub.docker.com/v2/repositories/chpradmin/cp-mongo",
    "git@github.com:transcovo/environments-tech.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/HP",
    "Type/Middleware/Data Store/Document-oriented/MongoDB"
  ],
  "info_url": "https://hub.docker.com/r/chpradmin/cp-mongo",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}