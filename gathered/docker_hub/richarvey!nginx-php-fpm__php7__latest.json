{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/richarvey/nginx-php-fpm",
    "repository_url": "https://hub.docker.com/v2/repositories/richarvey/nginx-php-fpm",
    "tags_url": "https://hub.docker.com/v2/repositories/richarvey/nginx-php-fpm/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/richarvey/nginx-php-fpm/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/richarvey/nginx-php-fpm/autobuild",
    "user": "richarvey",
    "name": "nginx-php-fpm",
    "namespace": "richarvey",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 286,
    "pull_count": 310873,
    "last_updated": "2016-10-15T10:57:14.816899Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "php7",
        "full_size": 87550911,
        "id": 3436226,
        "repository": 129671,
        "creator": 30608,
        "last_updater": 30608,
        "last_updated": "2016-10-15T10:57:14.464661Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "php5",
        "full_size": 79510554,
        "id": 3437092,
        "repository": 129671,
        "creator": 30608,
        "last_updater": 30608,
        "last_updated": "2016-09-28T09:19:23.077188Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 79510350,
        "id": 135414,
        "repository": 129671,
        "creator": 30608,
        "last_updater": 30608,
        "last_updated": "2016-09-28T09:19:22.237289Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "ngineered/nginx-php-fpm"
  },
  "name": "richarvey/nginx-php-fpm Docker container",
  "description": "Container running Nginx + PHP-FPM capable of pulling application code from git",
  "readme": "## Introduction\nThis is a Dockerfile to build a container image for nginx and php-fpm, with the ability to pull website code from git. The container also has the ability to update templated files with variables passed to docker in order to update your settings. There is also support for lets encrypt SSL support.\n\n### Git repository\nThe source files for this project can be found here: [https://github.com/ngineered/nginx-php-fpm](https://github.com/ngineered/nginx-php-fpm)\n\nIf you have any improvements please submit a pull request.\n### Docker hub repository\nThe Docker hub build can be found here: [https://registry.hub.docker.com/u/richarvey/nginx-php-fpm/](https://registry.hub.docker.com/u/richarvey/nginx-php-fpm/)\n## Versions\n| Tag | Nginx | PHP | Alpine |\n|-----|-------|-----|--------|\n| latest | 1.11.3 | 5.6.26 | 3.4 |\n| php5 | 1.11.3 | 5.6.26 | 3.4 |\n| php7 | 1.11.3 | 7.0.11 | 3.4 |\n\n## Building from source\nTo build from source you need to clone the git repo and run docker build:\n```\ngit clone https://github.com/ngineered/nginx-php-fpm\n.git\ndocker build -t nginx-php-fpm:latest .\n```\n\n## Pulling from Docker Hub\n```\ndocker pull richarvey/nginx-php-fpm\n```\n\n## Running\nTo simply run the container:\n```\nsudo docker run -d richarvey/nginx-php-fpm\n```\n\nYou can then browse to ```http://<DOCKER_HOST>``` to view the default install files. To find your ```DOCKER_HOST``` use the ```docker inspect``` to get the IP address.\n\n### Available Configuration Parameters\nThe following flags are a list of all the currently supported options that can be changed by passing in the variables to docker with the -e flag.\n\n - **GIT_REPO** : URL to the repository containing your source code. If you are using a personal token, this is the https URL without https://, e.g github.com/project/ for ssh prepend with git@ e.g git@github.com:project.git\n - **GIT_BRANCH** : Select a specific branch (optional)\n - **GIT_EMAIL** : Set your email for code pushing (required for git to work)\n - **GIT_NAME** : Set your name for code pushing (required for git to work)\n - **SSH_KEY** : Private SSH deploy key for your repository base64 encoded (requires write permissions for pushing)\n - **GIT_PERSONAL_TOKEN** : Personal access token for your git account (required for HTTPS git access)\n - **GIT_USERNAME** : Git username for use with personal tokens. (required for HTTPS git access)\n - **WEBROOT** : Change the default webroot directory from `/var/www/html` to your own setting\n - **ERRORS** : Set to 1 to display PHP Errors in the browser\n - **HIDE_NGINX_HEADERS** : Disable by setting to 0, default behaviour is to hide nginx + php version in headers\n - **PHP_MEM_LIMIT** : Set higher PHP memory limit, default is 128 Mb\n - **PHP_POST_MAX_SIZE** : Set a larger post_max_size, default is 100 Mb\n - **PHP_UPLOAD_MAX_FILESIZE** : Set a larger upload_max_filesize, default is 100 Mb\n - **DOMAIN** : Set domain name for Lets Encrypt scripts\n - **RUN_SCRIPTS** : Set to 1 to execute scripts\n\n### Dynamically Pulling code from git\nOne of the nice features of this container is its ability to pull code from a git repository with a couple of environmental variables passed at run time. Please take a look at our recommended [repo layout guidelines](https://github.com/ngineered/nginx-php-fpm/blob/master/docs/repo_layout.md).\n\nThere are two methods of pulling code from git, you can either use a Personal Token (recommended method) or an SSH key.\n\n**Note:** We would recommend using a git personal token over an SSH key as it simplifies the set up process. To create a personal access token on Github follow this [guide](https://help.github.com/articles/creating-an-access-token-for-command-line-use/).\n\n#### Personal Access token\n\nYou can pass the container your personal access token from your git account using the __GIT_PERSONAL_TOKEN__ flag. This token must be setup with the correct permissions in git in order to push and pull code.\n\nSince the access token acts as a password with limited access, the git push/pull uses HTTPS to authenticate. You will need to specify your __GIT_USERNAME__ and __GIT_PERSONAL_TOKEN__ variables to push and pull. You'll need to also have the __GIT_EMAIL__, __GIT_NAME__ and __GIT_REPO__ common variables defined.\n\n```\ndocker run -d -e 'GIT_EMAIL=email_address' -e 'GIT_NAME=full_name' -e 'GIT_USERNAME=git_username' -e 'GIT_REPO=github.com/project' -e 'GIT_PERSONAL_TOKEN=<long_token_string_here>' richarvey/nginx-php-fpm:latest\n```\n\nTo pull a repository and specify a branch add the __GIT_BRANCH__ environment variable:\n```\ndocker run -d -e 'GIT_EMAIL=email_address' -e 'GIT_NAME=full_name' -e 'GIT_USERNAME=git_username' -e 'GIT_REPO=github.com/project' -e 'GIT_PERSONAL_TOKEN=<long_token_string_here>' -e 'GIT_BRANCH=stage' richarvey/nginx-php-fpm:latest\n```\n#### SSH keys\n\n##### Preparing your SSH key\nThe container has the option for you to pass it the __SSH_KEY__ variable with a **base64** encoded private key. First generate your key and then make sure to add it to github and give it write permissions if you want to be able to push code from the container. Then run:\n```\nbase64 -w 0 /path_to_your_key\n```\n**Note:** Copy the output, but be careful not to copy your prompt\n\n##### Running with SSH Keys\n\nTo run the container and pull code simply specify the GIT_REPO URL including *git@* and then make sure you have also supplied your base64 version of your ssh deploy key:\n```\nsudo docker run -d -e 'GIT_NAME=full_name' -e 'GIT_USERNAME=git_username' -e 'GIT_REPO=github.com/project' -e 'SSH_KEY=BIG_LONG_BASE64_STRING_GOES_IN_HERE' richarvey/nginx-php-fpm:latest\n```\n\nTo pull a repository and specify a branch add the GIT_BRANCH environment variable:\n```\nsudo docker run -d -e 'GIT_NAME=full_name' -e 'GIT_USERNAME=git_username' -e 'GIT_REPO=github.com/project' -e 'SSH_KEY=BIG_LONG_BASE64_STRING_GOES_IN_HERE' -e 'GIT_BRANCH=stage' richarvey/nginx-php-fpm:latest\n```\n\n### Custom Nginx Config files\nSometimes you need a custom config file for nginx to achieve this read the [Nginx config guide](https://github.com/ngineered/nginx-php-fpm/blob/master/docs/nginx_configs.md) \n\n### Scripting and Templating\nPlease see the [Scripting and templating guide](https://github.com/ngineered/nginx-php-fpm/blob/master/docs/scripting_templating.md) for more details.\n\n### Lets Encrypt support\nThis container includes support to easily manage lets encrypt certificates. Please see the [Lets Encrypt guide](https://github.com/ngineered/nginx-php-fpm/blob/master/docs/lets_encrypt.md) for more details.\n\n## Special Git Features\nSpecify the ```GIT_EMAIL``` and ```GIT_NAME``` variables for this to work. They are used to set up git correctly and allow the following commands to work.\n\n### Push code to Git\nTo push code changes made within the container back to git run:\n```\nsudo docker exec -t -i <CONTAINER_NAME> /usr/bin/push\n```\n\n### Pull code from Git (Refresh)\nIn order to refresh the code in a container and pull newer code from git run:\n```\nsudo docker exec -t -i <CONTAINER_NAME> /usr/bin/pull\n```\n## Logging and Errors\n\n### Logging\nAll logs should now print out in stdout/stderr and are available via the docker logs command:\n```\ndocker logs <CONTAINER_NAME>\n```\n### WebRoot\nYou can set your webroot in the container to anything you want using the ```WEBROOT``` variable e.g -e \"WEBROOT=/var/www/html/public\". By default code is checked out into /var/www/html/ so if your git repository does not have code in the root you'll need to use this variable.\n",
  "dockerfile": "FROM nginx:mainline-alpine\n\nMAINTAINER ngineered <support@ngineered.co.uk>\n\nENV php_conf /etc/php7/php.ini \nENV fpm_conf /etc/php7/php-fpm.d/www.conf\nENV composer_hash e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae\n\nRUN sed -i -e \"s/v3.4/edge/\" /etc/apk/repositories && apk update && \\\n    apk add --no-cache bash \\\n    openssh-client \\\n    wget \\\n    nginx \\\n    supervisor \\\n    curl \\\n    git \\\n    php7-fpm \\\n    php7-pdo \\\n    php7-pdo_mysql \\\n    php7-mysqlnd \\\n    php7-mysqli \\\n    php7-mcrypt \\\n    php7-ctype \\\n    php7-zlib \\\n    php7-gd \\\n    php7-exif \\\n    php7-intl \\\n    php7-sqlite3 \\\n    php7-pdo_pgsql \\\n    php7-pgsql \\\n    php7-xml \\\n    php7-xsl \\\n    php7-curl \\\n    php7-openssl \\\n    php7-iconv \\\n    php7-json \\\n    php7-phar \\\n    php7-soap \\\n    php7-dom \\\n    php7-zip \\\n    php7-session \\\n    python \\\n    python-dev \\\n    py2-pip \\\n    augeas-dev \\\n    openssl-dev \\\n    ca-certificates \\\n    dialog \\\n    gcc \\\n    musl-dev \\\n    linux-headers \\\n    libffi-dev &&\\\n    mkdir -p /etc/nginx && \\\n    mkdir -p /var/www/app && \\\n    mkdir -p /run/nginx && \\\n    mkdir -p /var/log/supervisor && \\\n    php7 -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" && \\\n    php7 -r \"if (hash_file('SHA384', 'composer-setup.php') === '${composer_hash}') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" && \\\n    php7 composer-setup.php --install-dir=/usr/bin --filename=composer && \\\n    php7 -r \"unlink('composer-setup.php');\" && \\\n    pip install -U certbot && \\\n    mkdir -p /etc/letsencrypt/webrootauth && \\\n    apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev\n\nADD conf/supervisord.conf /etc/supervisord.conf\n\n# Copy our nginx config\nRUN rm -Rf /etc/nginx/nginx.conf\nADD conf/nginx.conf /etc/nginx/nginx.conf\n\n# nginx site conf\nRUN mkdir -p /etc/nginx/sites-available/ && \\\nmkdir -p /etc/nginx/sites-enabled/ && \\\nmkdir -p /etc/nginx/ssl/ && \\\nrm -Rf /var/www/* && \\\nmkdir /var/www/html/\nADD conf/nginx-site.conf /etc/nginx/sites-available/default.conf\nADD conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n\n# tweak php-fpm config\nRUN sed -i \\\n        -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\" \\\n        -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g\" \\\n        -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" \\\n        -e \"s/variables_order = \\\"GPCS\\\"/variables_order = \\\"EGPCS\\\"/g\" \\\n        ${php_conf} && \\\n    sed -i \\\n        -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" \\\n        -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" \\\n        -e \"s/pm.max_children = 4/pm.max_children = 4/g\" \\\n        -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" \\\n        -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" \\\n        -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" \\\n        -e \"s/pm.max_requests = 500/pm.max_requests = 200/g\" \\\n        -e \"s/user = nobody/user = nginx/g\" \\\n        -e \"s/group = nobody/group = nginx/g\" \\\n        -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" \\\n        -e \"s/;listen.owner = nobody/listen.owner = nginx/g\" \\\n        -e \"s/;listen.group = nobody/listen.group = nginx/g\" \\\n        -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" \\\n        -e \"s/^;clear_env = no$/clear_env = no/\" \\\n        ${fpm_conf} && \\\n    ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini && \\\n    find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n\n\n# Add Scripts\nADD scripts/start.sh /start.sh\nADD scripts/pull /usr/bin/pull\nADD scripts/push /usr/bin/push\nADD scripts/letsencrypt-setup /usr/bin/letsencrypt-setup\nADD scripts/letsencrypt-renew /usr/bin/letsencrypt-renew\nRUN chmod 755 /usr/bin/pull && chmod 755 /usr/bin/push && chmod 755 /usr/bin/letsencrypt-setup && chmod 755 /usr/bin/letsencrypt-renew && chmod 755 /start.sh\n\n# copy in code\nADD src/ /var/www/html/\nADD errors/ /var/www/errors\n\nVOLUME /var/www/html\n\nEXPOSE 443 80\n\n#CMD [\"/usr/bin/supervisord\", \"-n\", \"-c\",  \"/etc/supervisord.conf\"]\nCMD [\"/start.sh\"]\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "conf/supervisord.conf",
        "dest": "/etc/supervisord.conf"
      },
      {
        "source": "conf/nginx.conf",
        "dest": "/etc/nginx/nginx.conf"
      },
      {
        "source": "conf/nginx-site.conf",
        "dest": "/etc/nginx/sites-available/default.conf"
      },
      {
        "source": "conf/nginx-site-ssl.conf",
        "dest": "/etc/nginx/sites-available/default-ssl.conf"
      },
      {
        "source": "scripts/start.sh",
        "dest": "/start.sh"
      },
      {
        "source": "scripts/pull",
        "dest": "/usr/bin/pull"
      },
      {
        "source": "scripts/push",
        "dest": "/usr/bin/push"
      },
      {
        "source": "scripts/letsencrypt-setup",
        "dest": "/usr/bin/letsencrypt-setup"
      },
      {
        "source": "scripts/letsencrypt-renew",
        "dest": "/usr/bin/letsencrypt-renew"
      },
      {
        "source": "src/",
        "dest": "/var/www/html/"
      },
      {
        "source": "errors/",
        "dest": "/var/www/errors"
      }
    ],
    "expose": [
      443
    ],
    "volume": [
      "/var/www/html"
    ],
    "run": [
      "sed -i -e \"s/v3.4/edge/\" /etc/apk/repositories && apk update &&     apk add --no-cache bash     openssh-client     wget     nginx     supervisor     curl     git     php7-fpm     php7-pdo     php7-pdo_mysql     php7-mysqlnd     php7-mysqli     php7-mcrypt     php7-ctype     php7-zlib     php7-gd     php7-exif     php7-intl     php7-sqlite3     php7-pdo_pgsql     php7-pgsql     php7-xml     php7-xsl     php7-curl     php7-openssl     php7-iconv     php7-json     php7-phar     php7-soap     php7-dom     php7-zip     php7-session     python     python-dev     py2-pip     augeas-dev     openssl-dev     ca-certificates     dialog     gcc     musl-dev     linux-headers     libffi-dev &&    mkdir -p /etc/nginx &&     mkdir -p /var/www/app &&     mkdir -p /run/nginx &&     mkdir -p /var/log/supervisor &&     php7 -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" &&     php7 -r \"if (hash_file('SHA384', 'composer-setup.php') === '${composer_hash}') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" &&     php7 composer-setup.php --install-dir=/usr/bin --filename=composer &&     php7 -r \"unlink('composer-setup.php');\" &&     pip install -U certbot &&     mkdir -p /etc/letsencrypt/webrootauth &&     apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev",
      "rm -Rf /etc/nginx/nginx.conf",
      "mkdir -p /etc/nginx/sites-available/ && mkdir -p /etc/nginx/sites-enabled/ && mkdir -p /etc/nginx/ssl/ && rm -Rf /var/www/* && mkdir /var/www/html/",
      "ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf",
      "sed -i         -e \"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g\"         -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g\"         -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\"         -e \"s/variables_order = \\\"GPCS\\\"/variables_order = \\\"EGPCS\\\"/g\"         ${php_conf} &&     sed -i         -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\"         -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\"         -e \"s/pm.max_children = 4/pm.max_children = 4/g\"         -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\"         -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\"         -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\"         -e \"s/pm.max_requests = 500/pm.max_requests = 200/g\"         -e \"s/user = nobody/user = nginx/g\"         -e \"s/group = nobody/group = nginx/g\"         -e \"s/;listen.mode = 0660/listen.mode = 0666/g\"         -e \"s/;listen.owner = nobody/listen.owner = nginx/g\"         -e \"s/;listen.group = nobody/listen.group = nginx/g\"         -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\"         -e \"s/^;clear_env = no$/clear_env = no/\"         ${fpm_conf} &&     ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini &&     find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;",
      "chmod 755 /usr/bin/pull && chmod 755 /usr/bin/push && chmod 755 /usr/bin/letsencrypt-setup && chmod 755 /usr/bin/letsencrypt-renew && chmod 755 /start.sh"
    ],
    "workdir": [],
    "from": "nginx:mainline-alpine",
    "maintainer": "ngineered <support@ngineered.co.uk>",
    "env": {
      "php_conf": "/etc/php7/php.ini",
      "fpm_conf": "/etc/php7/php-fpm.d/www.conf",
      "composer_hash": "e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae"
    },
    "cmd": "[\"/start.sh\"]"
  },
  "source_repository_url": "git@github.com:ngineered/nginx-php-fpm.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/ngineered/nginx-php-fpm",
  "docker_repository": "richarvey/nginx-php-fpm",
  "docker_image": "richarvey/nginx-php-fpm",
  "parameters_schema": {
    "php_conf": {
      "default": "/etc/php7/php.ini",
      "type": "string",
      "mapping": "environment_variable"
    },
    "fpm_conf": {
      "default": "/etc/php7/php-fpm.d/www.conf",
      "type": "string",
      "mapping": "environment_variable"
    },
    "composer_hash": {
      "default": "e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        443
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "richarvey/nginx-php-fpm",
  "revision": "php7",
  "uris": [
    "https://hub.docker.com/r/richarvey/nginx-php-fpm",
    "https://hub.docker.com/v2/repositories/richarvey/nginx-php-fpm",
    "git@github.com:ngineered/nginx-php-fpm.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/HP",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Version Control/Git",
    "Type/Middleware/Runtime/PHP",
    "Type/Middleware/Web Server/Nginx"
  ],
  "info_url": "https://hub.docker.com/r/richarvey/nginx-php-fpm",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}