{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/maybebtc/go-ipfs",
    "repository_url": "https://hub.docker.com/v2/repositories/maybebtc/go-ipfs",
    "tags_url": "https://hub.docker.com/v2/repositories/maybebtc/go-ipfs/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/maybebtc/go-ipfs/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/maybebtc/go-ipfs/autobuild",
    "user": "maybebtc",
    "name": "go-ipfs",
    "namespace": "maybebtc",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 91,
    "last_updated": "2015-10-10T23:24:13.527904Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 199035611,
        "id": 91958,
        "repository": 75437,
        "creator": 131679,
        "last_updater": 131679,
        "last_updated": null,
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "master",
        "full_size": 176979249,
        "id": 91950,
        "repository": 75437,
        "creator": 131679,
        "last_updater": 131679,
        "last_updated": null,
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "stable",
        "full_size": 179850567,
        "id": 91941,
        "repository": 75437,
        "creator": 131679,
        "last_updater": 131679,
        "last_updated": null,
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "jbenet/go-ipfs"
  },
  "name": "maybebtc/go-ipfs Docker container",
  "description": "",
  "readme": "# ipfs implementation in go.\n[![GoDoc](https://godoc.org/github.com/jbenet/go-ipfs?status.svg)](https://godoc.org/github.com/jbenet/go-ipfs) [![Build Status](https://travis-ci.org/jbenet/go-ipfs.svg?branch=master)](https://travis-ci.org/jbenet/go-ipfs)\n\nIpfs is a global, versioned, peer-to-peer filesystem. It combines good ideas from\nGit, BitTorrent, Kademlia, SFS, and the Web. It is like a single bittorrent swarm,\nexchanging git objects. IPFS provides an interface as simple as the HTTP web, but\nwith permanence built in. You can also mount the world at /ipfs.\n\nFor more info see: https://github.com/jbenet/ipfs\n\nPlease put all issues regarding IPFS _design_ in the\n[ipfs repo issues](https://github.com/jbenet/ipfs/issues).\nPlease put all issues regarding go IPFS _implementation_ in [this repo](https://github.com/jbenet/go-ipfs/issues).\n\n## Install\n\n[Install Go 1.4+](http://golang.org/doc/install). Then simply:\n\n```\ngo get -u github.com/jbenet/go-ipfs/cmd/ipfs\n```\n\nNOTES:\n\n* `git` is required in order for `go get` to fetch\nall dependencies.\n* Package managers often contain out-of-date `golang` packages.\n  Compilation from source is recommended.\n* If you are interested in development, please install the development\ndependencies as well.\n* *WARNING: older versions of OSX FUSE (for Mac OS X) can cause kernel panics when mounting!*\n  We strongly recommend you use the [latest version of OSX FUSE](http://osxfuse.github.io/).\n  (See https://github.com/jbenet/go-ipfs/issues/177)\n* For more details on setting up FUSE (so that you can mount the filesystem), see the docs folder\n* Shell command completion is available by running `source misc/completion/ipfs-completion.bash`.\n\n\n## Usage\n\n```\n    ipfs - global p2p merkle-dag filesystem\n\n    ipfs [<flags>] <command> [<arg>] ...\n\n    Basic commands:\n    \n        init          Initialize ipfs local configuration\n        add <path>    Add an object to ipfs\n        cat <ref>     Show ipfs object data\n        ls <ref>      List links from an object\n    \n    Tool commands:\n    \n        config        Manage configuration\n        update        Download and apply go-ipfs updates\n        version       Show ipfs version information\n        commands      List all available commands\n        id            Show info about ipfs peers\n    \n    Advanced Commands:\n    \n        daemon        Start a long-running daemon process\n        mount         Mount an ipfs read-only mountpoint\n        serve         Serve an interface to ipfs\n        diag          Print diagnostics\n    \n    Plumbing commands:\n    \n        block         Interact with raw blocks in the datastore\n        object        Interact with raw dag nodes\n    \n    Use 'ipfs <command> --help' to learn more about each command.\n```\n\n## Getting Started\nTo start using ipfs, you must first initialize ipfs's config files on your\nsystem, this is done with `ipfs init`. See `ipfs init --help` for information on\nthe optional arguments it takes. After initialization is complete, you can use\n`ipfs mount`, `ipfs add` and any of the other commands to explore!\n\n### Some things to try\n\nBasic proof of 'ipfs working' locally:\n\n\techo \"hello world\" > hello\n\tipfs add hello\n\t# This should output a hash string that looks something like:\n\t# QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o\n\tipfs cat <that hash>\n\n\n### Troubleshooting\nIf you have previously installed ipfs before and you are running into\nproblems getting a newer version to work, try deleting (or backing up somewhere\nelse) your ipfs config directory (~/.go-ipfs by default) and rerunning `ipfs init`.\nThis will reinitialize the config file to its defaults and clear out the local\ndatastore of any bad entries.\n\nFor any other problems, check the [issues list](http://github.com/jbenet/go-ipfs/issues)\nand if you dont see your problem there, either come talk to us on irc (freenode #ipfs) or\nfile an issue of your own!\n\n\n## Contributing\n\ngo-ipfs is MIT licensed open source software. We welcome contributions big and\nsmall! Please make sure to check the\n[issues](https://github.com/jbenet/go-ipfs/issues). Search the closed ones\nbefore reporting things, and help us with the open ones.\n\nGuidelines:\n\n- see the [dev pseudo-roadmap](dev.md)\n- please adhere to the protocol described in [the main ipfs repo](https://github.com/jbenet/ipfs) and [paper](http://static.benet.ai/t/ipfs.pdf).\n- please make branches + pull-request, even if working on the main repository\n- ask questions or talk about things in [Issues](https://github.com/jbenet/go-ipfs/issues) or #ipfs on freenode.\n- ensure you are able to contribute (no legal issues please-- we'll probably setup a CLA)\n- run `go fmt` before pushing any code\n- run `golint` and `go vet` too -- some things (like protobuf files) are expected to fail.\n- if you'd like to work on ipfs part-time (20+ hrs/wk) or full-time (40+ hrs/wk), contact [@jbenet](https://github.com/jbenet)\n- have fun!\n\n## Todo\n\nIPFS is nearing an alpha release. Things left to be done are all marked as [Issues](https://github.com/jbenet/go-ipfs/issues)\n\n## Development Dependencies\n\nIf you make changes to the protocol buffers, you will need to install the [protoc compiler](https://code.google.com/p/protobuf/downloads/list).\n\n## License\n\nMIT\n",
  "dockerfile": "FROM golang:1.4\nMAINTAINER Brian Tiger Chow <btc@perfmode.com>\n\nADD . /go/src/github.com/jbenet/go-ipfs\nRUN cd /go/src/github.com/jbenet/go-ipfs/cmd/ipfs && go install\n\nRUN cp /go/src/github.com/jbenet/go-ipfs/bin/container_daemon /usr/local/bin/start_ipfs && \\\n    chmod 755 /usr/local/bin/start_ipfs\n\nEXPOSE 4001 5001 8080\n# 4001 = Swarm, 5001 = API, 8080 = HTTP transport\n\nENTRYPOINT [\"/usr/local/bin/start_ipfs\"]\n\n# build:    docker build -t go-ipfs .\n# run:      docker run -p 4001:4001 -p 5001:5001 go-ipfs:latest\n# run:      docker run -p 8080:8080 -p 4001:4001 -p 5001:5001 go-ipfs:latest\n",
  "dockerfile_json": {
    "add": [
      {
        "source": ".",
        "dest": "/go/src/github.com/jbenet/go-ipfs"
      }
    ],
    "expose": [
      4001
    ],
    "volume": [],
    "run": [
      "cd /go/src/github.com/jbenet/go-ipfs/cmd/ipfs && go install",
      "cp /go/src/github.com/jbenet/go-ipfs/bin/container_daemon /usr/local/bin/start_ipfs &&     chmod 755 /usr/local/bin/start_ipfs"
    ],
    "workdir": [],
    "from": "golang:1.4",
    "maintainer": "Brian Tiger Chow <btc@perfmode.com>",
    "entrypoint": "[\"/usr/local/bin/start_ipfs\"]"
  },
  "source_repository_url": "https://github.com/jbenet/go-ipfs.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/jbenet/go-ipfs",
  "docker_repository": "maybebtc/go-ipfs",
  "docker_image": "maybebtc/go-ipfs",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        4001
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "maybebtc/go-ipfs",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/maybebtc/go-ipfs",
    "https://hub.docker.com/v2/repositories/maybebtc/go-ipfs",
    "https://github.com/jbenet/go-ipfs.git"
  ],
  "labels": [
    "Docker"
  ],
  "info_url": "https://hub.docker.com/r/maybebtc/go-ipfs",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}