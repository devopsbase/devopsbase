{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/danielsreichenbach/mariadb",
    "repository_url": "https://hub.docker.com/v2/repositories/danielsreichenbach/mariadb",
    "tags_url": "https://hub.docker.com/v2/repositories/danielsreichenbach/mariadb/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/danielsreichenbach/mariadb/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/danielsreichenbach/mariadb/autobuild",
    "user": "danielsreichenbach",
    "name": "mariadb",
    "namespace": "danielsreichenbach",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 0,
    "pull_count": 1564,
    "last_updated": "2016-09-22T23:44:12.592801Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "5.5",
        "full_size": 47447493,
        "id": 2162838,
        "repository": 555468,
        "creator": 451205,
        "last_updater": 451205,
        "last_updated": "2016-09-22T23:44:12.236249Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "10.1",
        "full_size": 55572283,
        "id": 2163176,
        "repository": 555468,
        "creator": 451205,
        "last_updater": 451205,
        "last_updated": "2016-09-22T23:36:05.986861Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 55572294,
        "id": 2176059,
        "repository": 555468,
        "creator": 451205,
        "last_updater": 451205,
        "last_updated": "2016-09-22T23:34:39.014928Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "danielsreichenbach/docker-mariadb"
  },
  "name": "danielsreichenbach/mariadb Docker container",
  "description": "Minimal MariaDB container to be used as composed service in Dockerized builds",
  "readme": "[![][image-layers-status]][img-layers]\n\n# Build container providing MariaDB as a service\n\nA build container providing [MariaDB][mariadb] as service. Originally it was\ncreated for building projects using the [Drone][drone] continuous integration\nplatform but should work in other CI environments, too.\n\nContrary to the official [MariaDB docker image][docker-mariadb], this image is\nbased on [Alpine Linux][alpine] version 3.2 / 3.3, and builds upon the\n[Gliderlabs Alpine image][docker-gliderlabs].\n\nTags for MariaDB 5.5 and 10.1 are available.\n\n## What is MariaDB?\nMariaDB is a community-developed fork of the MySQL relational database management\nsystem intended to remain free under the GNU GPL. Being a fork of a leading open\nsource software system, it is notable for being led by the original developers of\nMySQL, who forked it due to concerns over its acquisition by Oracle. Contributors\nare required to share their copyright with the MariaDB Foundation.\n\nThe intent is also to maintain high compatibility with MySQL, ensuring a \"drop-in\"\nreplacement capability with library binary equivalency and exact matching with\nMySQL APIs and commands. It includes the **XtraDB** storage engine for replacing\n**InnoDB**, as well as a new storage engine, **Aria**, that intends to be both a\ntransactional and non-transactional engine perhaps even included in future\nversions of MySQL.\n\n> https://en.wikipedia.org/wiki/MariaDB\n\n![MariaDB][mariadb-logo]\n\n## How to use this image\n\n### Start a `mariadb` server instance\n\n```\n$ docker run --name some-mariadb -e MYSQL_ROOT_PASSWORD=my-secret-pw -d danielsreichenbach/mariadb:tag\n```\n\n... where `some-mariadb` is the name you want to assign to your container,\n`my-secret-pw` is the password to be set for the MariaDB root user and `tag` is\nthe tag specifying the MariaDB version you want. See the tag list on Docker Hub\nfor available tags.\n\n### Connect to MariaDB from an application in another Docker container\n\nSince MariaDB is intended as a drop-in replacement for MariaDB, it can be used\nwith many applications. This image exposes the standard MySQL port (3306), so\ncontainer linking makes the MariaDB instance available to other application\ncontainers. Start your application container like this in order to link it to\nthe MariaDB container:\n\n```\n$ docker run --name some-app --link some-mariadb:mysql -d application-that-uses-mysql\n```\n\n### Connect to MariaDB from the MariaDB command line client\n\nThe following command starts another MariaDB container instance and runs the\n`mysql` command line client against your original MariaDB container, allowing you\nto execute SQL statements against your database instance:\n\n```\n$ docker run -it --link some-mariadb:mysql --rm mariadb sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n```\n\n... where `some-mariadb` is the name of your original MariaDB container.\n\nMore information about the MySQL command line client can be found in the\n[MariaDB documentation][mariadb-doc].\n\n### Container shell access and viewing logs\n\nThe `docker exec` command allows you to run commands inside a Docker container.\nThe following command line will give you a sh shell inside your MariaDB\ncontainer:\n\n```\n$ docker exec -it some-mariadb sh\n```\n\nThe MariaDB Server log is available through Docker's container log:\n\n```\n$ docker logs some-mariadb\n```\n### Using a custom MariaDB configuration file\n\nThe MariaDB startup configuration is specified in the file `/etc/mysql/my.cnf`,\nand that file in turn includes any files found in the `/etc/mysql/conf.d`\ndirectory that end with `.cnf`. Settings in files in this directory will augment\nand/or override settings in `/etc/mysql/my.cnf`. If you want to use a customized\nMariaDB configuration, you can create your alternative configuration file in a\ndirectory on the host machine and then mount that directory location as\n`/etc/mysql/conf.d` inside the MariaDB container.\n\nIf `/my/custom/config-file.cnf` is the path and name of your custom configuration\nfile, you can start your MariaDB container like this (note that only the directory\npath of the custom config file is used in this command):\n\n```\n$ docker run --name some-mariadb -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mariadb:tag\n```\n\nThis will start a new container `some-mariadb` where the MariaDB instance uses\nthe combined startup settings from `/etc/mysql/my.cnf` and\n`/etc/mysql/conf.d/config-file.cnf`, with settings from the latter taking\nprecedence.\n\nNote that users on host systems with SELinux enabled may see issues with this.\nThe current workaround is to assign the relevant SELinux policy type to your new\nconfig file so that the container will be allowed to mount it:\n\n```\n$ chcon -Rt svirt_sandbox_file_t /my/custom\n```\n\n### Environment Variables\n\nWhen you start the `mariadb` image, you can adjust the configuration of the MariaDB\ninstance by passing one or more environment variables on the docker run command line.\nDo note that none of the variables below will have any effect if you start the container\nwith a data directory that already contains a database: any pre-existing database will\nalways be left untouched on container startup.\n\n#### `MYSQL_ROOT_PASSWORD`\n\nThis variable is mandatory and specifies the password that will be set for the\nMariaDB root superuser account. In the above example, it was set to `my-secret-pw`.\n\n#### `MYSQL_DATABASE`\n\nThis variable is optional and allows you to specify the name of a database to be\ncreated on image startup. If a user/password was supplied (see below) then that\nuser will be granted superuser access (corresponding to `GRANT ALL`) to this database.\n\n#### `MYSQL_USER, MYSQL_PASSWORD`\n\nThese variables are optional, used in conjunction to create a new user and to set\nthat user's password. This user will be granted superuser permissions (see above)\nfor the database specified by the `MYSQL_DATABASE` variable. Both variables are\nrequired for a user to be created.\n\nDo note that there is no need to use this mechanism to create the root superuser,\nthat user gets created by default with the password specified by the\n`MYSQL_ROOT_PASSWORD` variable.\n\n#### `MYSQL_ALLOW_EMPTY_PASSWORD`\n\nThis is an optional variable. Set to yes to allow the container to be started\nwith a blank password for the root user. NOTE: Setting this variable to yes is\nnot recommended unless you really know what you are doing, since this will leave\nyour MariaDB instance completely unprotected, allowing anyone to gain complete\nsuperuser access.\n\n### Initializing a fresh instance\n\nWhen a container is started for the first time, a new database `mysql` will be\ninitialized with the provided configuration variables. Furthermore, it will\nexecute files with extensions `.sh` and `.sql` that are found in\n`/docker-entrypoint-initdb.d`. You can easily populate your `mariadb` services\nby [mounting a SQL dump into that directory][docker-mount] and provide\n[custom images][docker-builder] with contributed data.\n\n### Caveats Where to Store Data\n\nImportant note: There are several ways to store data used by applications that\nrun in Docker containers. We encourage users of the `mariadb` images to\nfamiliarize themselves with the options available, including:\n\n* Let Docker manage the storage of your database data by writing the database\n  files to disk on the host system using its own internal [volume management][docker-volumes].\n  This is the default and is easy and fairly transparent to the user. The\n  downside is that the files may be hard to locate for tools and applications\n  that run directly on the host system, i.e. outside containers.\n* Create a data directory on the host system (outside the container) and [mount][docker-mount]\n  this to a directory visible from inside the container. This places the database\n  files in a known location on the host system, and makes it easy for tools and\n  applications on the host system to access the files. The downside is that the\n  user needs to make sure that the directory exists, and that e.g. directory\n  permissions and other security mechanisms on the host system are set up correctly.\n\nThe Docker documentation is a good starting point for understanding the different\nstorage options and variations, and there are multiple blogs and forum postings\nthat discuss and give advice in this area. We will simply show the basic procedure\nhere for the latter option above:\n\n1. Create a data directory on a suitable volume on your host system, e.g. `/my/own/datadir`.\n2. Start your `mariadb` container like this:\n\n  ```\n  $ docker run --name some-mariadb -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mariadb:tag\n  ```\n\nThe `-v /my/own/datadir:/var/lib/mysql` part of the command mounts the `/my/own/datadir`\ndirectory from the underlying host system as `/var/lib/mysql` inside the container,\nwhere MariaDB by default will write its data files.\n\nNote that users on host systems with SELinux enabled may see issues with this.\nThe current workaround is to assign the relevant SELinux policy type to the new\ndata directory so that the container will be allowed to access it:\n\n```\n$ chcon -Rt svirt_sandbox_file_t /my/own/datadir\n```\n\n### No connections until MariaDB init completes\n\nIf there is no database initialized when the container starts, then a default\ndatabase will be created. While this is the expected behavior, this means that it\nwill not accept incoming connections until such initialization completes. This\nmay cause issues when using automation tools, such as `docker-compose`, which\nstart several containers simultaneously.\n\n### Usage against an existing database\n\nIf you start your `mariadb` container instance with a data directory that already\ncontains a database (specifically, a `mysql` subdirectory), the `$MYSQL_ROOT_PASSWORD`\nvariable should be omitted from the run command line; it will in any case be\nignored, and the pre-existing database will not be changed in any way.\n\n## Supported Docker versions\n\nThis image is officially supported on Docker version 1.9.0.\n\nSupport for older versions (down to 1.6) is provided on a best-effort basis.\n\nPlease see the [Docker installation documentation][docker-install-docs] for\ndetails on how to upgrade your Docker daemon.\n\n## Usage\n\nThe container can be used to compose services in Drone, as shown in the\nfollowing example:\n\n```yaml\ncompose:\n  mysql:\n    image: danielsreichenbach/mariadb:10.1\n    environment:\n      - MYSQL_DATABASE=test\n      - MYSQL_ALLOW_EMPTY_PASSWORD=yes\n```\n\nThis would connect a running MariaDB instance to your container, providing\npassword-less access, and an empty `test` database.\n\n[drone]:                https://github.com/drone/\n\n[mariadb]:              https://mariadb.org/\n[mariadb-logo]:         https://raw.githubusercontent.com/docker-library/docs/master/mariadb/logo.png\n[mariadb-doc]:          https://mariadb.com/kb/en/mariadb/documentation/\n[docker-mariadb]:       https://hub.docker.com/r/library/mariadb/\n\n[docker-install-docs]:  https://docs.docker.com/installation/\n[docker-mount]:         https://docs.docker.com/userguide/dockervolumes/#mount-a-host-file-as-a-data-volume\n[docker-builder]:       https://docs.docker.com/reference/builder/\n[docker-volumes]:       https://docs.docker.com/userguide/dockervolumes/#adding-a-data-volume\n\n[alpine]:               http://alpinelinux.org/\n[docker-gliderlabs]:    https://hub.docker.com/r/gliderlabs/alpine/\n\n[img-layers]:          https://imagelayers.io/?images=danielsreichenbach/mariadb:latest \"Get your own badge on imagelayers.io\"\n[image-layers-status]: https://badge.imagelayers.io/danielsreichenbach/mariadb:latest.svg\n",
  "dockerfile": "FROM gliderlabs/alpine:3.2\nMAINTAINER Daniel S. Reichenbach <daniel@kogitoapp.com>\n\n# Provide volume directory for initalizing databases\nRUN set -ex \\\n\t&& mkdir /docker-entrypoint-initdb.d\n\n# Install MariaDB\nRUN set -ex \\\n\t&& apk add --update bash tzdata mariadb mariadb-client && rm -rf /var/cache/apk/* rm -rf /var/lib/mysql && mkdir /var/lib/mysql\n\n# Configure default behavior and users\nCOPY my.cnf /etc/mysql/my.cnf\nCOPY docker-entrypoint.sh /\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\n# Add VOLUMEs to allow backup of config and databases\nVOLUME  [\"/etc/mysql\", \"/var/lib/mysql\"]\n\n# Expose default MySQL port\nEXPOSE 3306\n\n# ... and of course, the daemon itself\nCMD [\"mysqld\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      3306
    ],
    "volume": [
      " [\"/etc/mysql\", \"/var/lib/mysql\"]"
    ],
    "run": [
      "set -ex \t&& mkdir /docker-entrypoint-initdb.d",
      "set -ex \t&& apk add --update bash tzdata mariadb mariadb-client && rm -rf /var/cache/apk/* rm -rf /var/lib/mysql && mkdir /var/lib/mysql"
    ],
    "workdir": [],
    "from": "gliderlabs/alpine:3.2",
    "maintainer": "Daniel S. Reichenbach <daniel@kogitoapp.com>",
    "copy": "docker-entrypoint.sh /",
    "entrypoint": "[\"/docker-entrypoint.sh\"]",
    "cmd": "[\"mysqld\"]"
  },
  "source_repository_url": "https://github.com/danielsreichenbach/docker-mariadb.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/danielsreichenbach/docker-mariadb",
  "docker_repository": "danielsreichenbach/mariadb",
  "docker_image": "danielsreichenbach/mariadb",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        3306
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "danielsreichenbach/mariadb",
  "revision": "5.5",
  "uris": [
    "https://hub.docker.com/r/danielsreichenbach/mariadb",
    "https://hub.docker.com/v2/repositories/danielsreichenbach/mariadb",
    "https://github.com/danielsreichenbach/docker-mariadb.git"
  ],
  "labels": [
    "Docker",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Type/Devopsware/Build",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Store/Relational/MariaDB"
  ],
  "info_url": "https://hub.docker.com/r/danielsreichenbach/mariadb",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}