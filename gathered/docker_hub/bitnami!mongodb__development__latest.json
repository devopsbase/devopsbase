{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/bitnami/mongodb",
    "repository_url": "https://hub.docker.com/v2/repositories/bitnami/mongodb",
    "tags_url": "https://hub.docker.com/v2/repositories/bitnami/mongodb/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/bitnami/mongodb/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/bitnami/mongodb/autobuild",
    "user": "bitnami",
    "name": "mongodb",
    "namespace": "bitnami",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 5,
    "pull_count": 5201,
    "last_updated": "2016-10-17T08:28:17.113981Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "development",
        "full_size": 158472426,
        "id": 766516,
        "repository": 292444,
        "creator": 140130,
        "last_updater": 257375,
        "last_updated": "2016-10-17T08:28:16.769228Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "_",
        "full_size": 158472815,
        "id": 5450691,
        "repository": 292444,
        "creator": 342683,
        "last_updater": 342683,
        "last_updated": "2016-10-17T08:25:36.022587Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "latest",
        "full_size": 158472373,
        "id": 766534,
        "repository": 292444,
        "creator": 140130,
        "last_updater": 257375,
        "last_updated": "2016-09-24T00:28:26.376884Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.9-r1",
        "full_size": 158472383,
        "id": 5043737,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-24T00:25:42.600114Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.9-r0",
        "full_size": 156622259,
        "id": 4967503,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-21T07:36:36.173662Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.7-r5",
        "full_size": 156467676,
        "id": 4800727,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-12T17:29:51.159996Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.7-r4",
        "full_size": 156467675,
        "id": 4707375,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-09-07T07:22:43.536196Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.7-r2",
        "full_size": 154490530,
        "id": 3796425,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-12T08:01:35.190175Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.7-r1",
        "full_size": 154455147,
        "id": 3785470,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-07-11T17:05:28.174972Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "3.2.7-r0",
        "full_size": 154455046,
        "id": 3542020,
        "repository": 292444,
        "creator": 257375,
        "last_updater": 257375,
        "last_updated": "2016-06-22T20:07:59.237002Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "bitnami/bitnami-docker-mongodb"
  },
  "name": "bitnami/mongodb Docker container",
  "description": "Bitnami MongoDB Docker Image",
  "readme": "[![CircleCI](https://circleci.com/gh/bitnami/bitnami-docker-mongodb/tree/master.svg?style=shield)](https://circleci.com/gh/bitnami/bitnami-docker-mongodb/tree/master)\n[![Docker Hub Automated Build](http://container.checkforupdates.com/badges/bitnami/mongodb)](https://hub.docker.com/r/bitnami/mongodb/)\n\n# What is MongoDB?\n\n> [MongoDB](https://www.mongodb.org/) is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure in favor of JSON-like documents with dynamic schemas, making the integration of data in certain types of applications easier and faster.\n\n# TLDR\n\n```bash\ndocker run --name mongodb bitnami/mongodb:latest\n```\n\n## Docker Compose\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n```\n\n# Get this image\n\nThe recommended way to get the Bitnami MongoDB Docker Image is to pull the prebuilt image from the [Docker Hub Registry](https://hub.docker.com/r/bitnami/mongodb).\n\n```bash\ndocker pull bitnami/mongodb:latest\n```\n\nTo use a specific version, you can pull a versioned tag. You can view the [list of available versions](https://hub.docker.com/r/bitnami/mongodb/tags/) in the Docker Hub Registry.\n\n```bash\ndocker pull bitnami/mongodb:[TAG]\n```\n\nIf you wish, you can also build the image yourself.\n\n```bash\ndocker build -t bitnami/mongodb:latest https://github.com/bitnami/bitnami-docker-mongodb.git\n```\n\n# Persisting your database\n\nIf you remove the container all your data and configurations will be lost, and the next time you run the image the database will be reinitialized. To avoid this loss of data, you should mount a volume that will persist even after the container is removed.\n\n**Note!**\nIf you have already started using your database, follow the steps on\n[backing up](#backing-up-your-container) and [restoring](#restoring-a-backup) to pull the data from your running container down to your host.\n\nThe image exposes a volume at `/bitnami/mongodb` for the MongoDB data and configurations. For persistence you can mount a directory at this location from your host. If the mounted directory is empty, it will be initialized on the first run.\n\n```bash\ndocker run -v /path/to/mongodb-persistence:/bitnami/mongodb bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n  volumes:\n    - /path/to/mongodb-persistence:/bitnami/mongodb\n```\n\n# Linking\n\nIf you want to connect to your MongoDB server inside another container, you can use the linking system provided by Docker.\n\n## Connecting a Mongo client container to the MongoDB server container\n\n### Step 1: Run the MongoDB image with a specific name\n\nThe first step is to start our MongoDB server.\n\nDocker's linking system uses container ids or names to reference containers. We can explicitly specify a name for our MongoDB server to make it easier to connect to other containers.\n\n```bash\ndocker run --name mongodb bitnami/mongodb:latest\n```\n\n### Step 2: Run MongoDB as a Mongo client and link to our server\n\nNow that we have our MongoDB server running, we can create another container that links to it by giving Docker the `--link` option. This option takes the id or name of the container we want to link it to as well as a hostname to use inside the container, separated by a colon. For example, to have our MongoDB server accessible in another container with `server` as it's hostname we would pass `--link mongodb:server` to the Docker run command.\n\nThe Bitnami MongoDB Docker Image also ships with a Mongo client, but by default it will start a server. To start the client instead, we can override the default command Docker runs by stating a different command to run after the image name.\n\n```bash\ndocker run --rm -it --link mongodb:server bitnami/mongodb:latest mongo --host server\n```\n\nWe started the Mongo client passing in the `--host` option that allows us to specify the hostname of the server, which we set to the hostname we created in the link.\n\n**Note!**\nYou can also run the Mongo client in the same container the server is running in using the Docker [exec](https://docs.docker.com/reference/commandline/cli/#exec) command.\n\n```bash\ndocker exec -it mongodb mongo\n```\n\n## Linking with Docker Compose\n\n### Step 1: Add a MongoDB entry in your `docker-compose.yml`\n\nCopy the snippet below into your `docker-compose.yml` to add MongoDB to your application.\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n```\n\n### Step 2: Link it to another container in your application\n\nUpdate the definitions for containers you want to access your MongoDB server from to include a link to the `mongodb` entry you added in Step 1.\n\n```yaml\nmyapp:\n  image: myapp\n  links:\n    - mongodb:mongodb\n```\n\nInside `myapp`, use `mongodb` as the hostname for the MongoDB server.\n\n# Configuration\n\n## Setting the root password on first run\n\nPassing the `MONGODB_ROOT_PASSWORD` environment variable when running the image for the first time will set the password of the root user to the value of `MONGODB_ROOT_PASSWORD` and enabled authentication on the MongoDB server.\n\n```bash\ndocker run --name mongodb \\\n  -e MONGODB_ROOT_PASSWORD=password123 bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n  environment:\n    - MONGODB_ROOT_PASSWORD=password123\n```\n\nThe `root` user is configured to have full administrative access to the MongoDB server. When `MONGODB_ROOT_PASSWORD` is not specified the server allows unauthenticated and unrestricted access.\n\n## Creating a user and database on first run\n\nYou can create a user with restricted access to a database while starting the container for the first time. To do this, provide the `MONGODB_USERNAME`, `MONGO_PASSWORD` and `MONGODB_DATABASE` environment variables.\n\n```bash\ndocker run --name mongodb \\\n  -e MONGODB_USERNAME=my_user -e MONGODB_PASSWORD=password123 \\\n  -e MONGODB_DATABASE=my_database bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n  environment:\n    - MONGODB_USERNAME=my_user\n    - MONGODB_PASSWORD=password123\n    - MONGODB_DATABASE=my_database\n```\n\n**Note!**\nCreation of a user enables authentication on the MongoDB server and as a result unauthenticated access by *any* user is not permitted.\n\n## Setting up a replication\n\nA [replication](https://docs.mongodb.com/manual/replication/) cluster can easily be setup with the Bitnami MongoDB Docker Image using the following environment variables:\n\n - `MONGODB_REPLICA_SET_MODE`: The replication mode. Possible values `primary`/`secondary`/`arbiter`. No defaults.\n - `MONGODB_REPLICA_SET_NAME`: MongoDB replica set name. Default: **replicaset**\n - `MONGODB_PRIMARY_HOST`: MongoDB primary host. No defaults.\n - `MONGODB_PRIMARY_PORT`: MongoDB primary port. No defaults.\n\nIn a replication cluster you can have one primary node, zero or more secondary nodes and zero or one arbiter node.\n\n> **Note**: The total number of nodes on a replica set sceneraio cannot be higher than 8 (1 primary, 6 secondaries and 1 arbiter)\n\n### Step 1: Create the replication primary\n\nThe first step is to start the MongoDB primary.\n\n```bash\ndocker run --name mongodb-primary \\\n  -e MONGODB_REPLICA_SET_MODE=primary \\\n   bitnami/mongodb:latest\n```\n\nIn the above command the container is configured as the `primary` using the `MONGODB_REPLICA_SET_MODE` parameter.\n\n### Step 2: Create the replication secondary node\n\nNext we start a MongoDB secondary container.\n\n```bash\ndocker run --name mongodb-secondary \\\n  --link mongodb-primary:primary \\\n  -e MONGODB_REPLICA_SET_MODE=secondary \\\n  -e MONGODB_PRIMARY_HOST=primary \\\n  -e MONGODB_PRIMARY_PORT=27017 \\\n  bitnami/mongodb:latest\n```\n\nIn the above command the container is configured as a `secondary` using the `MONGODB_REPLICA_SET_MODE` parameter. The `MONGODB_PRIMARY_HOST` and `MONGODB_PRIMARY_PORT` parameters are used connect and with the MongoDB primary.\n\n### Step 3: Create a replication arbiter node\n\nFinally we start a MongoDB arbiter container.\n\n```bash\ndocker run --name mongodb-arbiter \\\n  --link mongodb-primary:primary \\\n  -e MONGODB_REPLICA_SET_MODE=arbiter \\\n  -e MONGODB_PRIMARY_HOST=primary \\\n  -e MONGODB_PRIMARY_PORT=27017 \\\n  bitnami/mongodb:latest\n```\n\nIn the above command the container is configured as a `arbiter` using the `MONGODB_REPLICA_SET_MODE` parameter. The `MONGODB_PRIMARY_HOST` and `MONGODB_PRIMARY_PORT` parameters are used connect and with the MongoDB primary.\n\nYou now have a three node MongoDB replication cluster up and running which can be scaled by adding/removing secondarys.\n\nWith Docker Compose the primary/secondary/arbiter replication can be setup using:\n\n```yaml\nprimary:\n  image: bitnami/mongodb:latest\n  environment:\n    - MONGODB_REPLICA_SET_MODE=primary\n\nsecondary:\n  image: bitnami/mongodb:latest\n  links:\n    - primary:primary\n  environment:\n    - MONGODB_REPLICA_SET_MODE=secondary\n    - MONGODB_PRIMARY_HOST=primary\n    - MONGODB_PRIMARY_PORT=27017\n\narbiter:\n  image: bitnami/mongodb:latest\n  links:\n    - primary:primary\n  environment:\n    - MONGODB_REPLICA_SET_MODE=arbiter\n    - MONGODB_PRIMARY_HOST=primary\n    - MONGODB_PRIMARY_PORT=27017\n```\n\nScale the number of secondary nodes using:\n\n```bash\ndocker-compose scale primary=1 secondary=3 arbiter=1\n```\n\nThe above command scales up the number of secondary nodes to `3`. You can scale down in the same way.\n\n> **Note**: You should not scale up/down the number of primary nodes. Always have only one primary node running.\n\n## Configuration file\n\nThe image looks for configuration in the `conf/` directory of `/bitnami/mongodb`. As as mentioned in [Persisting your database](#persisting-your-data) you can mount a volume at this location and copy your own configurations in the `conf/` directory. The default configuration will be copied to the `conf/` directory if it's empty.\n\n### Step 1: Run the MongoDB image\n\nRun the MongoDB image, mounting a directory from your host.\n\n```bash\ndocker run --name mongodb -v /path/to/mongodb-persistence:/bitnami/mongodb bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n  volumes:\n    - /path/to/mongodb-persistence:/bitnami/mongodb\n```\n\n### Step 2: Edit the configuration\n\nEdit the configuration on your host using your favorite editor.\n\n```bash\nvi /path/to/mongodb-persistence/conf/mongodb.conf\n```\n\n### Step 3: Restart MongoDB\n\nAfter changing the configuration, restart your MongoDB container for changes to take effect.\n\n```bash\ndocker restart mongodb\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose restart mongodb\n```\n\n**Further Reading:**\n\n  - [Configuration File Options](http://docs.mongodb.org/v2.4/reference/configuration-options/)\n\n# Logging\n\nThe Bitnami MongoDB Docker image sends the container logs to the `stdout`. To view the logs:\n\n```bash\ndocker logs mongodb\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose logs mongodb\n```\n\nYou can configure the containers [logging driver](https://docs.docker.com/engine/admin/logging/overview/) using the `--log-driver` option if you wish to consume the container logs differently. In the default configuration docker uses the `json-file` driver.\n\n# Maintenance\n\n## Backing up your container\n\nTo backup your data, configuration and logs, follow these simple steps:\n\n### Step 1: Stop the currently running container\n\n```bash\ndocker stop mongodb\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose stop mongodb\n```\n\n### Step 2: Run the backup command\n\nWe need to mount two volumes in a container we will use to create the backup: a directory on your host to store the backup in, and the volumes from the container we just stopped so we can access the data.\n\n```bash\ndocker run --rm \\\n  -v /path/to/mongodb-backups:/backups \\\n  --volumes-from mongodb busybox \\\n    cp -a /bitnami/mongodb:latest /backups/latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker run --rm \\\n  -v /path/to/mongodb-backups:/backups \\\n  --volumes-from `docker-compose ps -q mongodb` busybox \\\n    cp -a /bitnami/mongodb:latest /backups/latest\n```\n\n## Restoring a backup\n\nRestoring a backup is as simple as mounting the backup as volumes in the container.\n\n```bash\ndocker run \\\n  -v /path/to/mongodb-backups/latest:/bitnami/mongodb bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```yaml\nmongodb:\n  image: bitnami/mongodb:latest\n  volumes:\n    - /path/to/mongodb-backups/latest:/bitnami/mongodb\n```\n\n## Upgrade this image\n\nBitnami provides up-to-date versions of MongoDB, including security patches, soon after they are made upstream. We recommend that you follow these steps to upgrade your container.\n\n### Step 1: Get the updated image\n\n```bash\ndocker pull bitnami/mongodb:latest\n```\n\nor if you're using Docker Compose, update the value of the image property to `bitnami/mongodb:latest`.\n\n### Step 2: Stop and backup the currently running container\n\nBefore continuing, you should backup your container's data, configuration and logs.\n\nFollow the steps on [creating a backup](#backing-up-your-container).\n\n### Step 3: Remove the currently running container\n\n```bash\ndocker rm -v mongodb\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose rm -v mongodb\n```\n\n### Step 4: Run the new image\n\nRe-create your container from the new image, [restoring your backup](#restoring-a-backup) if necessary.\n\n```bash\ndocker run --name mongodb bitnami/mongodb:latest\n```\n\nor using Docker Compose:\n\n```bash\ndocker-compose start mongodb\n```\n\n# Testing\n\nThis image is tested for expected runtime behavior, using the [Bats](https://github.com/sstephenson/bats) testing framework. You can run the tests on your machine using the `bats` command.\n\n```bash\nbats test.sh\n```\n\n# Notable Changes\n\n## 3.2.7-r5\n\n- `MONGODB_USER` parameter has been renamed to `MONGODB_USERNAME`.\n\n## 3.2.6-r0\n\n- All volumes have been merged at `/bitnami/mongodb`. Now you only need to mount a single volume at `/bitnami/mongodb` for persistence.\n- The logs are always sent to the `stdout` and are no longer collected in the volume.\n\n# Contributing\n\nWe'd love for you to contribute to this container. You can request new features by creating an [issue](https://github.com/bitnami/bitnami-docker-mongodb/issues), or submit a [pull request](https://github.com/bitnami/bitnami-docker-mongodb/pulls) with your contribution.\n\n# Issues\n\nIf you encountered a problem running this container, you can file an [issue](https://github.com/bitnami/bitnami-docker-mongodb/issues). For us to provide better support, be sure to include the following information in your issue:\n\n- Host OS and version\n- Docker version (`docker version`)\n- Output of `docker info`\n- Version of this container (`echo $BITNAMI_IMAGE_VERSION` inside the container)\n- The command you used to run the container, and any relevant output you saw (masking any sensitive information)\n\n# License\n\nCopyright (c) 2015-2016 Bitnami\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "dockerfile": "FROM gcr.io/stacksmith-images/ubuntu:14.04-r10\nMAINTAINER Bitnami <containers@bitnami.com>\n\nENV BITNAMI_IMAGE_VERSION=3.2.9-r1 \\\n    BITNAMI_APP_NAME=mongodb \\\n    BITNAMI_APP_USER=mongo\n\n# Install mongodb\nRUN bitnami-pkg unpack mongodb-3.2.9-0 --checksum 367db26aa2b687e8a389073809602412bde95d5800f655f4221ab39dc251cd1f\nENV PATH=/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH\n\nCOPY rootfs/ /\nENTRYPOINT [\"/app-entrypoint.sh\"]\nCMD [\"nami\", \"start\", \"--foreground\", \"mongodb\"]\n\nVOLUME [\"/bitnami/$BITNAMI_APP_NAME\"]\n\nEXPOSE 27017\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      27017
    ],
    "volume": [
      "[\"/bitnami/$BITNAMI_APP_NAME\"]"
    ],
    "run": [
      "bitnami-pkg unpack mongodb-3.2.9-0 --checksum 367db26aa2b687e8a389073809602412bde95d5800f655f4221ab39dc251cd1f"
    ],
    "workdir": [],
    "from": "gcr.io/stacksmith-images/ubuntu:14.04-r10",
    "maintainer": "Bitnami <containers@bitnami.com>",
    "env": {
      "BITNAMI_IMAGE_VERSION": "3.2.9-r1",
      "": "",
      "BITNAMI_APP_NAME": "mongodb",
      "BITNAMI_APP_USER": "mongo",
      "PATH": "/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH"
    },
    "copy": "rootfs/ /",
    "entrypoint": "[\"/app-entrypoint.sh\"]",
    "cmd": "[\"nami\", \"start\", \"--foreground\", \"mongodb\"]"
  },
  "source_repository_url": "https://github.com/bitnami/bitnami-docker-mongodb.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/bitnami/bitnami-docker-mongodb",
  "docker_repository": "bitnami/mongodb",
  "docker_image": "bitnami/mongodb",
  "parameters_schema": {
    "BITNAMI_IMAGE_VERSION": {
      "default": "3.2.9-r1",
      "type": "string",
      "mapping": "environment_variable"
    },
    "": {
      "default": "",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_NAME": {
      "default": "mongodb",
      "type": "string",
      "mapping": "environment_variable"
    },
    "BITNAMI_APP_USER": {
      "default": "mongo",
      "type": "string",
      "mapping": "environment_variable"
    },
    "PATH": {
      "default": "/opt/bitnami/$BITNAMI_APP_NAME/sbin:/opt/bitnami/$BITNAMI_APP_NAME/bin:$PATH",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [
        27017
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "bitnami/mongodb",
  "revision": "development",
  "uris": [
    "https://hub.docker.com/r/bitnami/mongodb",
    "https://hub.docker.com/v2/repositories/bitnami/mongodb",
    "https://github.com/bitnami/bitnami-docker-mongodb.git"
  ],
  "labels": [
    "Docker",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Type/Middleware/Data Store/Document-oriented/MongoDB"
  ],
  "info_url": "https://hub.docker.com/r/bitnami/mongodb",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}