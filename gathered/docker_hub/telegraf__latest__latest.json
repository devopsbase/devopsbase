{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/_/telegraf",
    "repository_url": "https://hub.docker.com/v2/repositories/library/telegraf",
    "tags_url": "https://hub.docker.com/v2/repositories/library/telegraf/tags",
    "user": "library",
    "name": "telegraf",
    "namespace": "library",
    "status": 1,
    "is_private": false,
    "is_automated": false,
    "star_count": 46,
    "pull_count": 1160160,
    "last_updated": "2016-10-13T23:47:19.803789Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 81049641,
        "id": 2997674,
        "repository": 684465,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-13T23:47:19.504734Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.0.1",
        "full_size": 81049641,
        "id": 5445591,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-13T23:47:09.822684Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.0",
        "full_size": 81049641,
        "id": 4723748,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-13T23:47:02.602836Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.13.1",
        "full_size": 79616596,
        "id": 3370096,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-10-13T23:46:35.622684Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.13",
        "full_size": 79616596,
        "id": 3003324,
        "repository": 684465,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-10-13T23:46:34.269813Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.13.1-alpine",
        "full_size": 8932775,
        "id": 3370102,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-29T06:30:54.755060Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.0-alpine",
        "full_size": 10496364,
        "id": 4723668,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-29T06:04:37.349046Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.0.1-alpine",
        "full_size": 10496364,
        "id": 5130100,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-28T22:41:48.478146Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "0.13-alpine",
        "full_size": 8932775,
        "id": 3131202,
        "repository": 684465,
        "creator": 2215,
        "last_updater": 621950,
        "last_updated": "2016-09-28T22:39:19.608729Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "1.0.0",
        "full_size": 81049714,
        "id": 4723658,
        "repository": 684465,
        "creator": 621950,
        "last_updater": 621950,
        "last_updated": "2016-09-26T22:52:06.565402Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ]
  },
  "docker_image": "telegraf",
  "name": "telegraf Docker container",
  "description": "Telegraf is an agent for collecting metrics and writing them to InfluxDB or other outputs.",
  "readme": "# Supported tags and respective `Dockerfile` links\n\n-\t[`0.13`, `0.13.1` (*telegraf/0.13/Dockerfile*)](https://github.com/influxdata/influxdata-docker/blob/ec08f02c8a4a15bcea2a6c46517eceb9284633a2/telegraf/0.13/Dockerfile)\n-\t[`0.13-alpine`, `0.13.1-alpine` (*telegraf/0.13/alpine/Dockerfile*)](https://github.com/influxdata/influxdata-docker/blob/ec08f02c8a4a15bcea2a6c46517eceb9284633a2/telegraf/0.13/alpine/Dockerfile)\n-\t[`1.0`, `1.0.1`, `latest` (*telegraf/1.0/Dockerfile*)](https://github.com/influxdata/influxdata-docker/blob/a86d1ecbaa12a696c10ed66bf4390c42fe733582/telegraf/1.0/Dockerfile)\n-\t[`1.0-alpine`, `1.0.1-alpine`, `alpine` (*telegraf/1.0/alpine/Dockerfile*)](https://github.com/influxdata/influxdata-docker/blob/a86d1ecbaa12a696c10ed66bf4390c42fe733582/telegraf/1.0/alpine/Dockerfile)\n\nFor more information about this image and its history, please see [the relevant manifest file (`library/telegraf`)](https://github.com/docker-library/official-images/blob/master/library/telegraf). This image is updated via [pull requests to the `docker-library/official-images` GitHub repo](https://github.com/docker-library/official-images/pulls?q=label%3Alibrary%2Ftelegraf).\n\nFor detailed information about the virtual/transfer sizes and individual layers of each of the above supported tags, please see [the `repos/telegraf/tag-details.md` file](https://github.com/docker-library/repo-info/blob/master/repos/telegraf/tag-details.md) in [the `docker-library/repo-info` GitHub repo](https://github.com/docker-library/repo-info).\n\n# Telegraf\n\nTelegraf is an open source agent written in Go for collecting metrics and data on the system it's running on or from other services. Telegraf writes data it collects to InfluxDB in the correct format.\n\n[Telegraf Official Docs](https://docs.influxdata.com/telegraf/latest/introduction/getting-started-telegraf/)\n\n![logo](https://raw.githubusercontent.com/docker-library/docs/43d87118415bb75d7bb107683e79cd6d69186f67/telegraf/logo.png)\n\n## Using this image\n\n### Exposed Ports\n\n-\t8125 StatsD\n-\t8092 UDP\n-\t8094 TCP\n\n### Using the default configuration\n\nThe default configuration requires a running InfluxDB instance as an output plugin. Ensure that InfluxDB is running on port 8086 before starting the Telegraf container.\n\nMinimal example to start an InfluxDB container:\n\n```console\n$ docker run -d --name influxdb -p 8083:8083 -p 8086:8086 influxdb\n```\n\nStarting Telegraf using the default config, which connects to InfluxDB at `http://localhost:8086/`:\n\n```console\n$ docker run --net=container:influxdb telegraf\n```\n\n### Using a custom config file\n\nFirst, generate a sample configuration and save it as `telegraf.conf` on the host:\n\n```console\n$ docker run --rm telegraf -sample-config > telegraf.conf\n```\n\nOnce you've customized `telegraf.conf`, you can run the Telegraf container with it mounted in the expected location:\n\n```console\n$ docker run -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro telegraf\n```\n\nModify `$PWD` to the directory where you want to store the configuration file.\n\nRead more about the Telegraf configuration [here](https://docs.influxdata.com/telegraf/latest/introduction/configuration/).\n\n### Using the container with input plugins\n\nThese examples assume you are using a custom configuration file that takes advantage of Docker's built-in service discovery capability. In order to do so, we'll first create a new network:\n\n```console\n$ docker network create influxdb\n```\n\nNext, we'll start our InfluxDB container named `influxdb`:\n\n```console\n$ docker run -d --name=influxdb \\\n      --net=influxdb \\\n      influxdb\n```\n\nThe `telegraf.conf` configuration can now resolve the `influxdb` container by name:\n\n```toml\n[[outputs.influxdb]]\n\turls = [\"http://influxdb:8086\"]\n```\n\nFinally, we start our Telegraf container and verify functionality:\n\n```console\n$ docker run -d --name=telegraf \\\n      --net=influxdb \\\n      -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\\n      telegraf\n$ docker logs -f telegraf\n```\n\n#### Aerospike\n\nStart an instance of aerospike:\n\n```console\n$ docker run -d --name aerospike \\\n      --net=influxdb \\\n      -p 3000-3003:3000-3003 \\\n      aerospike\n```\n\nEdit your Telegraf config file and set the correct connection parameter for Aerospike:\n\n```toml\n[[inputs.aerospike]]\n\tservers = [\"aerospike:3000\"]\n```\n\nRestart your `telegraf` container to pick up the changes:\n\n```console\n$ docker restart telegraf\n```\n\n#### Nginx\n\nCreate an `nginx_status.conf` configuration file to expose metric data:\n\n```nginx\nserver {\n    listen 8090;\n    location /nginx_status {\n        stub_status on;\n        access_log on;\n    }\n}\n```\n\nStart an Nginx container utilizing it:\n\n```console\n$ docker run -d --name=nginx \\\n      --net=influxdb \\\n      -p 8090:8090 -p 8080:80 \\\n      -v $PWD/nginx_status.conf:/etc/nginx/conf.d/nginx_status.conf:ro \\\n      nginx\n```\n\nVerify the status page: [http://localhost:8090/nginx_status](http://localhost:8090/nginx_status).\n\nConfigure the nginx input plugin in your Telegraf configuration file:\n\n```toml\n[[inputs.nginx]]\n  urls = [\"http://nginx:8090/nginx_status\"]\n```\n\nRestart your `telegraf` container to pick up the changes:\n\n```console\n$ docker restart telegraf\n```\n\n#### StatsD\n\nTelegraf has a StatsD plugin, allowing Telegraf to run as a StatsD server that metrics can be sent to. In order for this to work, you must first configure the [StatsD plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd) in your config file.\n\nRun Telegraf with the UDP port 8125 exposed:\n\n```console\n$ docker run -d --name=telegraf \\\n      --net=influxdb \\\n      -p 8125:8125/udp \\\n      -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro \\\n      telegraf\n```\n\nSend Mock StatsD data:\n\n```console\n$ for i in {1..50}; do echo $i;echo \"foo:1|c\" | nc -u -w0 127.0.0.1 8125; done\n```\n\nCheck that the measurement `foo` is added in the DB.\n\n### Supported Plugins Reference\n\n-\t[Input Plugins](https://docs.influxdata.com/telegraf/latest/inputs/)\n\n-\t[Output Plugins](https://docs.influxdata.com/telegraf/latest/outputs/)\n\n# Image Variants\n\nThe `telegraf` images come in many flavors, each designed for a specific use case.\n\n## `telegraf:<version>`\n\nThis is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of. This tag is based off of [`buildpack-deps`](https://registry.hub.docker.com/_/buildpack-deps/). `buildpack-deps` is designed for the average user of docker who has many images on their system. It, by design, has a large number of extremely common Debian packages. This reduces the number of packages that images that derive from it need to install, thus reducing the overall size of all images on your system.\n\n## `telegraf:alpine`\n\nThis image is based on the popular [Alpine Linux project](http://alpinelinux.org), available in [the `alpine` official image](https://hub.docker.com/_/alpine). Alpine Linux is much smaller than most distribution base images (~5MB), and thus leads to much slimmer images in general.\n\nThis variant is highly recommended when final image size being as small as possible is desired. The main caveat to note is that it does use [musl libc](http://www.musl-libc.org) instead of [glibc and friends](http://www.etalabs.net/compare_libcs.html), so certain software might run into issues depending on the depth of their libc requirements. However, most software doesn't have an issue with this, so this variant is usually a very safe choice. See [this Hacker News comment thread](https://news.ycombinator.com/item?id=10782897) for more discussion of the issues that might arise and some pro/con comparisons of using Alpine-based images.\n\nTo minimize image size, it's uncommon for additional related tools (such as `git` or `bash`) to be included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the [`alpine` image description](https://hub.docker.com/_/alpine/) for examples of how to install packages if you are unfamiliar).\n\n# License\n\nView [license information](https://github.com/influxdata/telegraf/blob/master/LICENSE) for the software contained in this image.\n\n# Supported Docker versions\n\nThis image is officially supported on Docker version 1.12.2.\n\nSupport for older versions (down to 1.6) is provided on a best-effort basis.\n\nPlease see [the Docker installation documentation](https://docs.docker.com/installation/) for details on how to upgrade your Docker daemon.\n\n# User Feedback\n\n## Issues\n\nIf you have any problems with or questions about this image, please contact us through a [GitHub issue](https://github.com/influxdata/influxdata-docker/issues). If the issue is related to a CVE, please check for [a `cve-tracker` issue on the `official-images` repository first](https://github.com/docker-library/official-images/issues?q=label%3Acve-tracker).\n\nYou can also reach many of the official image maintainers via the `#docker-library` IRC channel on [Freenode](https://freenode.net).\n\n## Contributing\n\nYou are invited to contribute new features, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.\n\nBefore you start to code, we recommend discussing your plans through a [GitHub issue](https://github.com/influxdata/influxdata-docker/issues), especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing.\n\n## Documentation\n\nDocumentation for this image is stored in the [`telegraf/` directory](https://github.com/docker-library/docs/tree/master/telegraf) of the [`docker-library/docs` GitHub repo](https://github.com/docker-library/docs). Be sure to familiarize yourself with the [repository's `README.md` file](https://github.com/docker-library/docs/blob/master/README.md) before attempting a pull request.",
  "type": "docker",
  "docker_name": "telegraf",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/_/telegraf",
    "https://hub.docker.com/v2/repositories/library/telegraf"
  ],
  "labels": [
    "Docker"
  ],
  "info_url": "https://hub.docker.com/r/_/telegraf",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}