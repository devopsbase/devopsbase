{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/laktak/consul-haproxy-dyconf",
    "repository_url": "https://hub.docker.com/v2/repositories/laktak/consul-haproxy-dyconf",
    "tags_url": "https://hub.docker.com/v2/repositories/laktak/consul-haproxy-dyconf/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/laktak/consul-haproxy-dyconf/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/laktak/consul-haproxy-dyconf/autobuild",
    "user": "laktak",
    "name": "consul-haproxy-dyconf",
    "namespace": "laktak",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 1,
    "pull_count": 135,
    "last_updated": "2016-06-02T00:20:49.848027Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "latest",
        "full_size": 11574883,
        "id": 1819792,
        "repository": 497583,
        "creator": 602553,
        "last_updater": 602553,
        "last_updated": "2016-06-02T00:20:49.447259Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      }
    ],
    "build_name": "laktak/consul-haproxy-dyconf"
  },
  "name": "laktak/consul-haproxy-dyconf Docker container",
  "description": "Runs HAProxy and dynamically updates its configuration with data from Consul using dyconf.",
  "readme": "# consul-haproxy-dyconf\n\n*consul-haproxy-dyconf* is a Docker container that runs [*HAProxy*](http://haproxy.org/) and dynamically updates its configuration with data from [*Consul*](http://consul.io/) using [*dyconf*](https://github.com/laktak/dyconf).\n\nLogs from HAProxy are routed so you can see them with the `docker logs` command or collect them with [logspout](https://hub.docker.com/r/gliderlabs/logspout/).\n\n\n## Usage\n\n```\nusage: -host=HOSTNAME [-port=PORT] -tag=TAGNAME\n\n  -host     Consul host\n  -port     Consul port, default 8500\n  -tag      tag of the docker containers to include\n\n  -config   path to the template configuration\n  -dump     dumps the generated template to the console\n  -q        quiet, no logs\n```\n\nSee https://github.com/laktak/dyconf for details.\n\nYou would usually run the container with\n\n```\ndocker run -d -p 5900:80 laktak/consul-haproxy-dyconf -host=10.1.1.1 -tag=rest\n```\n\nThis collects all nodes that are tagged with `rest` from Consul (10.1.1.1 in this sample) and sets up HAProxy to route to them.\n\nE.g. if you have a container running that is named `foo` you can `curl http://HAPROXY/foo/`.\n\nFYI tags can be set manually or by using `env SERVICE_TAGS=...` in combination with [registrator](https://github.com/gliderlabs/registrator).\n\nIf you have other requirements you can either fork this repo or supply your own configuraton with `docker run -v $PWD/yourConfig.hjson:/app/config.hjson ...`.\n\n# config.hjson\n\n```\n#hjson (go to http://hjson.org for details)\n{\n  # define the controller that fetches the configuration and produces the content for outputFile\n  controller: controller.js\n  outputFile: /etc/haproxy/haproxy.cfg\n\n  # refresh interval in seconds\n  refreshInterval: 5\n\n  # start a syslog server listening on port 514\n  # to redirect logs for Docker\n  syslog: true\n\n  # run on start/restart to configure rsyslog and launch haproxy\n  startup:\n    '''\n    # launch haproxy (will log to syslog from which it's printed to the console)\n    haproxy -f /etc/haproxy/haproxy.cfg\n    '''\n\n  # to reload a new configuration with minimal service impact and without breaking existing sessions\n  reload: haproxy -f /etc/haproxy/haproxy.cfg -sf $(cat /var/run/haproxy.pid)\n\n  # kill haproxy on shutdown\n  shutdown:\n    '''\n    PID=$(cat /var/run/haproxy.pid)\n    kill -9 $PID\n    wait $PID\n    '''\n\n  # define the template to generate the haproxy.cfg\n  /*\n  services was generated by the code in controller.js and contains data in\n  the following format:\n  [ {\n    name: 'MyService',\n    tags: [ 'rest' ],\n    nodes: [ {\n      node: 'hostname',\n      address: '10.1.1.2',\n      serviceID: 'hostname:foo:80',\n      serviceName: 'foo-bar-80',\n      serviceTags: [],\n      serviceAddress: '10.0.0.42',\n      servicePort: 80,\n      }, ... ]\n    }, ... ]\n  */\n  template:\n    '''\n    global\n      daemon\n      chroot      /var/lib/haproxy\n      pidfile     /var/run/haproxy.pid\n      maxconn     4000\n      user        haproxy\n      group       haproxy\n      log 127.0.0.1 format rfc5424 local0 info\n\n    defaults\n      mode http\n      log global\n      option httplog\n      option dontlognull\n      retries 3\n      timeout http-request    10s\n      timeout queue           1m\n      timeout connect         10s\n      timeout client          1m\n      timeout server          1m\n      timeout http-keep-alive 10s\n      timeout check           10s\n      maxconn                 3000\n\n    frontend http-in\n      bind *:80\n    <% services.forEach(svc => {\n    %>  acl app_<%=svc.name%> path_beg -i /<%=svc.name%>/\n      use_backend svr_<%=svc.name%> if app_<%=svc.name%>\n    <% }); %>\n\n    <% services.forEach(svc => {\n    %>backend svr_<%=svc.name%>\n      mode http\n      balance roundrobin\n      option forwardfor\n      option httpchk HEAD /health HTTP/1.1\\r\\nHost:localhost\n      reqrep ^([^\\ ]*\\ /)<%=svc.name%>[/]?(.*)   \\1\\2\n    <%   svc.nodes.forEach(node => {\n    %>  server <%=node.node%>_<%=node.servicePort%> <%=node.serviceAddress%>:<%=node.servicePort%> check\n    <%   }); %>\n    <% });\n    %>\n    listen stats\n      bind *:1936\n      mode http\n      stats enable\n      stats uri /\n      stats hide-version\n      stats auth stat:view\n    '''\n}\n```",
  "dockerfile": "FROM alpine\nMAINTAINER Christian Zangl, http://github.com/laktak/\n\nEXPOSE 80 1936\n\n# install node & haproxy\nRUN apk --update add nodejs=4.3.0-r0 haproxy=1.6.2-r0\n\nCOPY config.hjson controller.js package.json /app/\n\n# install dyconf & dependencies\nRUN npm i dyconf@1.0.0 -g && cd /app && npm i\n\nENTRYPOINT [\"/usr/bin/dyconf\", \"-config=/app/config.hjson\"]\n",
  "dockerfile_json": {
    "add": [],
    "expose": [
      80
    ],
    "volume": [],
    "run": [
      "apk --update add nodejs=4.3.0-r0 haproxy=1.6.2-r0",
      "npm i dyconf@1.0.0 -g && cd /app && npm i"
    ],
    "workdir": [],
    "from": "alpine",
    "maintainer": "Christian Zangl, http://github.com/laktak/",
    "copy": "config.hjson controller.js package.json /app/",
    "entrypoint": "[\"/usr/bin/dyconf\", \"-config=/app/config.hjson\"]"
  },
  "source_repository_url": "https://github.com/laktak/consul-haproxy-dyconf.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/laktak/consul-haproxy-dyconf",
  "docker_repository": "laktak/consul-haproxy-dyconf",
  "docker_image": "laktak/consul-haproxy-dyconf",
  "parameters_schema": {
    "exposed_ports": {
      "default": [
        80
      ],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "laktak/consul-haproxy-dyconf",
  "revision": "latest",
  "uris": [
    "https://hub.docker.com/r/laktak/consul-haproxy-dyconf",
    "https://hub.docker.com/v2/repositories/laktak/consul-haproxy-dyconf",
    "https://github.com/laktak/consul-haproxy-dyconf.git"
  ],
  "labels": [
    "Docker",
    "Binding/Region/North America/US",
    "Mode/Executable/Image/VM Image/AMI",
    "Type/Devopsware/Orchestration/Consul",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://hub.docker.com/r/laktak/consul-haproxy-dyconf",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}