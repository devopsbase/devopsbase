{
  "dockerhub": {
    "web_url": "https://hub.docker.com/r/l3iggs/owncloud",
    "repository_url": "https://hub.docker.com/v2/repositories/l3iggs/owncloud",
    "tags_url": "https://hub.docker.com/v2/repositories/l3iggs/owncloud/tags",
    "dockerfile_url": "https://hub.docker.com/v2/repositories/l3iggs/owncloud/dockerfile",
    "autobuild_url": "https://hub.docker.com/v2/repositories/l3iggs/owncloud/autobuild",
    "user": "l3iggs",
    "name": "owncloud",
    "namespace": "l3iggs",
    "status": 1,
    "is_private": false,
    "is_automated": true,
    "star_count": 114,
    "pull_count": 494696,
    "last_updated": "2016-10-03T19:12:46.694818Z",
    "permissions": {
      "read": true,
      "write": false,
      "admin": false
    },
    "tags": [
      {
        "name": "daily",
        "full_size": 806872152,
        "id": 3215717,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-10-03T19:12:45.991180Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "latest",
        "full_size": 798600512,
        "id": 128742,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-08-21T17:25:30.086384Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.1.0-1",
        "full_size": 798638802,
        "id": 4309024,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-08-21T17:24:47.179876Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          5
        ]
      },
      {
        "name": "9.0.2-2",
        "full_size": 783007047,
        "id": 3243416,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-06-01T09:17:18.320660Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "9.0.2-1",
        "full_size": 807861321,
        "id": 2965553,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-05-13T12:37:06.696809Z",
        "image_id": null,
        "v2": true,
        "platforms": [
          1
        ]
      },
      {
        "name": "dev",
        "full_size": 765467808,
        "id": 1810003,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-05-01T12:00:28.856130Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "9.0.1-1",
        "full_size": 717248825,
        "id": 2771241,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-04-24T18:36:09.087848Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "9.0.0-1",
        "full_size": 914115887,
        "id": 2247075,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-03-24T13:04:45.228390Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "8.2.2-2",
        "full_size": 846224316,
        "id": 2015190,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-02-17T14:07:27.831198Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      },
      {
        "name": "8.2.2-1",
        "full_size": 851117615,
        "id": 1663097,
        "repository": 126857,
        "creator": 71936,
        "last_updater": 71936,
        "last_updated": "2016-01-06T11:23:07.474322Z",
        "image_id": null,
        "v2": true,
        "platforms": []
      }
    ],
    "build_name": "l3iggs/docker-owncloud"
  },
  "name": "l3iggs/owncloud Docker container",
  "description": "Bleeding edge ownCloud container with the latest stable release. Now with PHP7!",
  "readme": "docker-owncloud\n===============\nSimple to use Docker container with the latest ownCloud server release, complete with all the bells and whistles. This project is 100% transparent and trustable, every file in the resulting docker image is traceable and inspectable by following up the docker image depenancy tree which starts with [my Arch Linux base image](https://github.com/greyltc/docker-archlinux).\n\nPlease report any issues or improvement ideas here:  \nhttps://github.com/l3iggs/docker-owncloud/issues\nPull requests welcome! Let's work together!\n\nSay thanks by adding a comment or a star here:  \nhttps://registry.hub.docker.com/u/l3iggs/owncloud/\n\n__Check out [the wiki](https://github.com/l3iggs/docker-owncloud/wiki)__ for some stuff that I didn't include here because I thought the readme was getting too big. Feel free to add new content to the wiki as you see fit.\n\n### Features\n- Streamlined [Let's Encrypt](https://letsencrypt.org/) functionality built right in\n  - This will fetch valid, trusted and free SSL certs for your domain and install them into the image!\n  - Hurray for green lock icons!\n- __Superfast__\n  - Uses PHP7 with APCu and Zend OpCache for maximum performance\n- Now with [image version tags](https://hub.docker.com/r/l3iggs/owncloud/tags/) corresponding to OwnCloud release versions\n  - So you won't get unexpectedly upgraded and you can safely stay on an OC version you know is working for you\n- Built in (optional) MySQL database server (faster than sqlite default)\n  - Or specify your own pre-existing database server during setup\n- Web GUI driven initial setup of user/password/database\n- Based on Arch Linux ensuring __everything__ is cutting edge & up to date\n- SSL (HTTPS) encryption works out-of-the-box\n  - Tweaked for maximum security while maintaining compatibility\n- Optionally enable automatic SSL certificate regeneration at runtime for maximum security\n  - Or easily incorporate your own SSL certificates\n- In-browser document viewing and editing ready (.odt, .doc, and .docx)\n- In-browser media viewing ready (pretty much everything I think)\n- Comes complete with all of the official ownCloud apps pre-installed:\n - Bookmarks\n - Calendar\n - Contacts\n - Documents\n - Gallery\n- Or install your own 3rd party apps\n\n### Usage\n\n1. [**Install docker**](https://docs.docker.com/installation/)\n1. **Download and start the owncloud server instance**  \n\n  ```\ndocker run --name oc -p 80:80 -p 443:443 -d l3iggs/owncloud\n```\n  __NOTE:__ In case you have an outdated version of `l3iggs/owncloud` you can update it with `docker pull l3iggs/owncloud` before you run the server via the above `docker run...` command\n1. **Access your ownCloud server**  \nPoint your web browser to __https://localhost/owncloud__\n1. **Setup ownCloud**  \nFollow the on-screen instructions to perform the initial setup of your server.\n1. **[Optional] Harden security**  \nThis image comes complete with a self-signed ssl certificate already built in, so https access is ready to go out of the box. I've provided this pre-generated certificate for convienence and testing purposes only. It affords greatly reduced security (compared to using secret certificates) since the \"private\" key is not actually private; anyone can download this image and inspect the keys and then decrypt your ownCloud traffic (sniffing your login credentials for example). To make the ssl connection to this ownCloud server secure, you can:  \n(A) provide your own (secret) ssl certificate files  \n(B) use the script provided here to generate new, self-signed certificate files  \nor  \n(C) use the script provided here to fetch (free) certificates for your domain from the [Let's Encrypt project](https://letsencrypt.org/)  \nAll of these will provide equal security (since the encryption key will be kept secret) but (B) will result in browser warnings whenever somone visits your site since the web browser will likely not trust your self-generated and self-signed keys.\n\n  ---\n_For option (A) (providing your own SSL cert files):_  \n  Put your `server.crt` and `server.key` files (named exactly that) in a directory `~/sslCert` on your host machine, then run (also on your host machine):   \n\n  ```\nsudo chown -R root ~/sslCert\nsudo chgrp -R root ~/sslCert  \nsudo chmod 400 ~/sslCert/server.key\n```  \n Then insert the following into the docker startup command (from step 2. above) between `run` and `--name`:  \n\n  ```\n-v ~/sslCert:/root/sslKeys\n```  \n\n  ---\n_For option (B) (using the built-in script to re-generate your own self-sigend ssl certificate):_  \n  - The image includes a bash script (`/usr/sbin/setup-apache-ssl-key`) that generates new ssl cert files on command (and overwrites the pregenerated ones included in this image). You can use this script to regenerate a new SSL key anytime, on the fly. After starting the docker image as described above, run the following command:  \n  ```\ndocker exec -it oc sh -c 'SUBJECT=\"/C=US/ST=CA/L=CITY/O=ORGANIZATION/OU=UNIT/CN=localhost\" DO_SSL_SELF_GENERATION=true setup-apache-ssl-key'  \n```\n  - To have a new ssl certificate generated automatically _every time_ the image is started, insert the following into the docker startup command (from step 2. above) between `run` and `--name`:  \n  ```\n-e DO_SSL_SELF_GENERATION=true -e SUBJECT=/C=US/ST=CA/L=CITY/O=ORGANIZATION/OU=UNIT/CN=localhost\n```\n  The `SUBJECT` variable is actually optional here, but I put it in there to show how to change the generated certificate to your liking, especially important if you don't want your certificate to be for `localhost`  \n\n  ---\n_For option (C) (fetching a free, trusted cert from letsencrypt.org):_  \n  For this to work, __this container must be reachable from the internet by visiting http://your.domain.tld__ (where \"your.domain.tld\" will obviously be unique to you). In fact, a Let's Encrypt robot will attempt to visit this address via port 80 to read files served up by the apache server in this container during the certificate fetching process to verify your ownership of the domain.  \n  Start the docker image as described above, except you must specify your hostname: add `--hostname=your.domain.tld` between `run` and `--name`. Then once the container is running, issue the following command (substituting your proper email address):  \n  ```\ndocker exec -it oc sh -c 'EMAIL=youremail@addre.ss DO_SSL_LETS_ENCRYPT_FETCH=true setup-apache-ssl-key'  \n```\n  ~30 seconds later you should get a green lock in your browser when visiting your OC server at https://your.domain.tld/owncloud  \n  Now save your newly fetched certificate files somewhere safe:\n  ```\ndocker cp oc:/etc/letsencrypt/archive/your.domain.tld ~/letsencryptFor_your.domain.tld\n```\n  and next time you use docker to start your OC server container, use option (A) to feed your `.key` and `.crt` files into the image when it starts.  \n  __NOTE:__ Let's Encrypt gives you a certificate that's valid for three months, afterwhich it needs to be renewed if you'd like to continue getting green locks in your browser. If you run the above `DO_SSL_LETS_ENCRYPT_FETCH=true setup-apache-ssl-key` command, and then you leave your server running without restarting for three months or longer, your certificate *should* be auto-renewed forever. If you restart the container, you'll probably need to re-issue the `DO_SSL_LETS_ENCRYPT_FETCH=true setup-apache-ssl-key` command again manually if you don't want your certificate to expire three months after you first fetched it.  \n  __NOTE #2:__ Let's Encrypt has a strict rate limiting policy; it will only grant 5 certificates / 7 days / domain so be very careful with how often you issue the `DO_SSL_LETS_ENCRYPT_FETCH=true setup-apache-ssl-key` command above\n\n1. **[Optional] Stop the docker-owncloud server instance**\n\n  ```\ndocker stop oc\n```\nYou can restart the container later with `docker start oc`\n1. **[Optional] Delete the docker-owncloud server instance (after stopping it)**  \n\n  ```\ndocker rm oc #<--WARNING: this will delete anything stored inside the container\n```\n1. **Profit.**\n\n### Updating your ownCloud server in this container\nPeriodically new ownCloud server versions will be released. You should probably keep your server on whatever the latest stable version is. When a new update is released you'll see a banner appear across the top of the ownCloud web interface indicating that it's time to upgrade.  \nYou should follow [the official ownCloud instructions](https://doc.owncloud.org/server/9.0/admin_manual/maintenance/update.html) for updating your ownCloud server using the updater app built into this container. You'll need to change the permissions of some files in the container to allow them to be updated. I've tried to make this straightforward by including a script to manage the permissions for you. Before you run the updater app (as described in the official instructions), run `docker exec -it oc sh -c 'set-oc-perms upgrade'`. Then after you've completed the upgrade, set the permissions back to their \"safer\" default values like this: `docker exec -it oc sh -c 'set-oc-perms runtime'`.\n",
  "dockerfile": "FROM greyltc/lamp-aur\nMAINTAINER Grey Christoforo <grey@christoforo.net>\n# Report issues with this to the GitHub project: https://github.com/l3iggs/docker-owncloud/issues\n# Say thanks by adding a star or a comment here: https://registry.hub.docker.com/u/l3iggs/owncloud/\n# and/or staring the project on GitHub\n\n# uncomment this to update the container's mirrorlist\n#RUN get-new-mirrors\n\n# set environmnt variable defaults\nENV TARGET_SUBDIR owncloud\nENV ALLOW_INSECURE false\nENV OC_VERSION '*'\n\n# do the install things\nADD installOwnCloud.sh /usr/sbin/install-owncloud\nRUN install-owncloud\n\n# add our config.php stub\nADD configs/config.php /usr/share/webapps/owncloud/config/config.php\nRUN chown http:http /usr/share/webapps/owncloud/config/config.php; \\\n    chmod 0640 /usr/share/webapps/owncloud/config/config.php\n\n# add our cron stub\nADD configs/cron.conf /etc/cron.d/owncloud\n\n# add our apache config stub\nADD configs/apache.conf /etc/httpd/conf/extra/owncloud.conf\n\n# expose some important directories as volumes\n#VOLUME [\"/usr/share/webapps/owncloud/data\"]\n#VOLUME [\"/etc/webapps/owncloud/config\"]\n#VOLUME [\"/usr/share/webapps/owncloud/apps\"]\n\n# place your ssl cert files in here. name them server.key and server.crt\n#VOLUME [\"/root/sslKeys\"]\n\n# start the servers, then wait forever\nCMD start-servers; sleep infinity\n",
  "dockerfile_json": {
    "add": [
      {
        "source": "installOwnCloud.sh",
        "dest": "/usr/sbin/install-owncloud"
      },
      {
        "source": "configs/config.php",
        "dest": "/usr/share/webapps/owncloud/config/config.php"
      },
      {
        "source": "configs/cron.conf",
        "dest": "/etc/cron.d/owncloud"
      },
      {
        "source": "configs/apache.conf",
        "dest": "/etc/httpd/conf/extra/owncloud.conf"
      }
    ],
    "expose": [],
    "volume": [],
    "run": [
      "install-owncloud",
      "chown http:http /usr/share/webapps/owncloud/config/config.php;     chmod 0640 /usr/share/webapps/owncloud/config/config.php"
    ],
    "workdir": [],
    "from": "greyltc/lamp-aur",
    "maintainer": "Grey Christoforo <grey@christoforo.net>",
    "env": {
      "TARGET_SUBDIR": "owncloud",
      "ALLOW_INSECURE": "false",
      "OC_VERSION": "'*'"
    },
    "cmd": "start-servers; sleep infinity"
  },
  "source_repository_url": "https://github.com/l3iggs/docker-owncloud.git",
  "source_repository_type": "git",
  "source_repository_provider": "github",
  "source_repository_web_url": "https://github.com/l3iggs/docker-owncloud",
  "docker_repository": "l3iggs/owncloud",
  "docker_image": "l3iggs/owncloud",
  "parameters_schema": {
    "TARGET_SUBDIR": {
      "default": "owncloud",
      "type": "string",
      "mapping": "environment_variable"
    },
    "ALLOW_INSECURE": {
      "default": "false",
      "type": "string",
      "mapping": "environment_variable"
    },
    "OC_VERSION": {
      "default": "'*'",
      "type": "string",
      "mapping": "environment_variable"
    },
    "exposed_ports": {
      "default": [],
      "type": "json_array"
    }
  },
  "type": "docker",
  "docker_name": "l3iggs/owncloud",
  "revision": "daily",
  "uris": [
    "https://hub.docker.com/r/l3iggs/owncloud",
    "https://hub.docker.com/v2/repositories/l3iggs/owncloud",
    "https://github.com/l3iggs/docker-owncloud.git"
  ],
  "labels": [
    "Docker",
    "Binding/Provider/HP",
    "Type/Devopsware/Test",
    "Type/Middleware/Runtime/PHP"
  ],
  "info_url": "https://hub.docker.com/r/l3iggs/owncloud",
  "requires": [
    {
      "kind": "host",
      "label": "Docker Engine"
    }
  ],
  "latest": true,
  "gatherbase_origin": "docker-hub"
}