{
  "name": "serverdensity Juju charm",
  "juju_charm_name": "serverdensity",
  "revision": "cs:precise/serverdensity-2",
  "latest": true,
  "uris": [
    "https://jujucharms.com/serverdensity",
    "https://jujucharms.com/serverdensity/precise",
    "https://jujucharms.com/serverdensity/precise/2",
    "https://api.jujucharms.com/v5/serverdensity",
    "https://api.jujucharms.com/v5/precise/serverdensity",
    "https://api.jujucharms.com/v5/precise/serverdensity-2"
  ],
  "labels": [
    "Juju charm",
    "monitoring",
    "ops",
    "analytics",
    "Binding/Provider",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Monitoring",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/serverdensity",
  "package_url": "https://api.jujucharms.com/v5/precise/serverdensity-2/archive",
  "created": "2015-06-17T09:31:25.76Z",
  "updated": "2015-06-17T09:31:25.76Z",
  "description": "This charm installs and configures the Server Density monitoring agent\n\nServer Density is a SaaS tool which helps you run your infrastructure. It\nsyncs with the major cloud providers and and allows you to monitor your\nwebsites and servers from a single console, API and mobile app so you can\ndiagnose problems, maintain uptime and maximise performance.\n\nThis charm installs and configures the Server Density monitoring agent\n(sd-agent).\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/logging-directory",
      "self_resolve": true,
      "juju_interface": "logging-directory",
      "juju_name": "logging",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/juju-info",
      "self_resolve": true,
      "juju_interface": "juju-info",
      "juju_name": "serverdensity",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "agent-key": {
      "type": "string",
      "description": "Your Server Density agent key (don't set this if you want to use the API to handle querying nodes/creating nodes)",
      "default": "",
      "mapping": "charm_option"
    },
    "apache-pass": {
      "type": "string",
      "description": "Password to authenticate to the Apache2 status page, required if apache-url is set",
      "default": "",
      "mapping": "charm_option"
    },
    "apache-url": {
      "type": "string",
      "description": "URL to get the Apache2 status page from (e.g. mod_status), disabled if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "apache-user": {
      "type": "string",
      "description": "Username to authenticate to the Apache2 status page, required if apache-url is set",
      "default": "",
      "mapping": "charm_option"
    },
    "api-key": {
      "type": "string",
      "description": "Your Server Density v2 API key (not used if agent-key is set)",
      "default": "",
      "mapping": "charm_option"
    },
    "group-name": {
      "type": "string",
      "description": "Group name (only set if you use the API to add nodes to a specific group)",
      "default": "",
      "mapping": "charm_option"
    },
    "log-level": {
      "type": "string",
      "description": "Level to log, e.g. set to DEBUG if you experience issues with the agent and want to collect extra info",
      "default": "",
      "mapping": "charm_option"
    },
    "mongo-server": {
      "type": "string",
      "description": "Username to authenticate to MySQL, required if mysql-server is set",
      "default": "",
      "mapping": "charm_option"
    },
    "mongodb-dbstats": {
      "type": "boolean",
      "description": "Enables MongoDB stats if true and mongodb-server is set, default: false",
      "default": false,
      "mapping": "charm_option"
    },
    "mongodb-replset": {
      "type": "boolean",
      "description": "Enables MongoDB replica set stats if true and mongodb-server is set, default: false",
      "default": false,
      "mapping": "charm_option"
    },
    "mongodb-server": {
      "type": "string",
      "description": "Server to get MongoDB status monitoring from, this takes a full MongoDB connection URI so you can set username/password etc. details here if needed, disabled if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "mysql-pass": {
      "type": "string",
      "description": "Password to authenticate to MySQL, required if mysql-server is set",
      "default": "",
      "mapping": "charm_option"
    },
    "mysql-server": {
      "type": "string",
      "description": "Server to get MySQL status monitoring from, disabled if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "nginx-url": {
      "type": "string",
      "description": "URL to get the Nginx status page from, disabled if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "pidfile-dir": {
      "type": "string",
      "description": "Override where the agent stores it's PID file, temp dir (above or system default) is used if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "plugin-dir": {
      "type": "string",
      "description": "Sets the directory the agent looks for plugins, if left blank it is ignored",
      "default": "",
      "mapping": "charm_option"
    },
    "rabbitmq-pass": {
      "type": "string",
      "description": "Password to authenticate to the RabbitMQ management API, required if rabbitmq-url is set",
      "default": "guest",
      "mapping": "charm_option"
    },
    "rabbitmq-url": {
      "type": "string",
      "description": "URL to get the RabbitMQ status from via the HTTP management API, disabled if not set",
      "default": "",
      "mapping": "charm_option"
    },
    "rabbitmq-user": {
      "type": "string",
      "description": "Username to authenticate to the RabbitMQ management API, required if rabbitmq-url is set",
      "default": "guest",
      "mapping": "charm_option"
    },
    "sd-url": {
      "type": "string",
      "description": "Your Server Density subdomain, prefixed with either http:// or https://",
      "default": "https://example.serverdensity.io",
      "mapping": "charm_option"
    },
    "temp-dir": {
      "type": "string",
      "description": "Override where the agent stores temporary files, system default tmp will be used if not set",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "license": "# Overview\n\n[Server Density](https://www.serverdensity.com/) is a hosted server monitoring service.\n\nThis [juju](http://juju.ubuntu.com/) subordinate charm installs and configures the [Server Density monitoring agent](https://github.com/serverdensity/sd-agent) onto any specified related units.\n\n## Usage\n\nReview the [configurable options](#configurable-options) below, you must configure at\nleast your account name, and an agent key for each unit or provide an API key to use the API to query\nfor units (optionally provide a group name to group units in clusters).\n\n```\njuju deploy serverdensity\n\n# For a whole deployed application:\njuju add-relation <application> serverdensity\n\n# or for a single unit\njuju add-relation <application>/<unit> serverdensity\n\n# Setting an agent key for a unit\njuju set serverdensity/<unit> agent-key=foobarbaz\n```\n\n## Configurable options\n\n * `sd-url`\n  * Your Server Density subdomain, prefixed with either http:// or https://\n  * default: `\"https://example.serverdensity.io\"`\n * `api-key`\n  * Your Server Density v2 API key (not used if agent-key is set)\n * `agent-key`\n  * Your Server Density agent key (don't set this if you want to use the API to handle querying nodes/creating nodes)\n * `group-name`\n  * Cluster group name (only set if you use the API to add nodes to a specific group)\n * `plugin-dir`\n  * Sets the directory the agent looks for plugins, if left blank it is ignored\n * `apache-url`\n  * URL to get the Apache2 status page from (e.g. mod_status), disabled if not set\n * `apache-user`\n  * Username to authenticate to the Apache2 status page, required if apache-url is set\n * `apache-pass`\n  * Password to authenticate to the Apache2 status page, required if apache-url is set\n * `mongodb-server`\n  * Server to get MongoDB status monitoring from, this takes a full MongoDB connection URI so you can set username/password etc. details here if needed, disabled if not set\n * `mongodb-dbstats`\n  * Enables MongoDB stats if true and mongodb-server is set\n  * default: `false`\n * `mongodb-replset`\n  * Enables MongoDB replica set stats if true and mongodb-server is set\n  * default: `false`\n * `mysql-server`\n  * Server to get MySQL status monitoring from, disabled if not set\n * `mongo-server`\n  * Username to authenticate to MySQL, required if mysql-server is set\n * `mysql-pass`\n  * Password to authenticate to MySQL, required if mysql-server is set\n * `nginx-url`\n  * URL to get the Nginx status page from, disabled if not set\n * `rabbitmq-url`\n  * URL to get the RabbitMQ status from via the HTTP management API, disabled if not set\n * `rabbitmq-user`\n  * Username to authenticate to the RabbitMQ management API, required if rabbitmq-url is set\n  * default: `\"guest\"`\n * `rabbitmq-pass`\n  * Password to authenticate to the RabbitMQ management API, required if rabbitmq-url is set\n  * default: `\"guest\"`\n * `temp-dir`\n  * Override where the agent stores temporary files, system default tmp will be used if not set\n * `pidfile-dir`\n  * Override where the agent stores it's PID file, temp dir (above or system default) is used if not set\n * `log-level`\n  * Level to log, e.g. set to DEBUG if you experience issues with the agent and want to collect extra info\n\n## Caveats\n\n * Although where ever possible the charm attempts to proceed without erroring, by attempting to get key information such as the agent key from various sources, as well as registering via the API if configured, the one time in which it will stop with an error if it exhausts all possibilities and still cannot configure an agent key.\n * You cannot currently configure plugins via the charm, as this would mean allowing a dynamic configuration and some way of injecting your own Python files into the relation cycle. You can however fork the charm and add your own plugins in that way, or instrument plugins using a configuration manager such as Chef, Puppet, Ansible, Salt etc.\n * The hooks in this charm are as idempotent as possible, they can be run multiple times without problem and should produce the same output. When the charm is removed from a unit it attempts to clear up after itself by removing the sd-agent package and it's corresponding apt repo, however files such as the config and plugins directory will be left. Subsequent runs of the charm would overwrite the config, but beware that any left over plugins may be picked up erroneously if you didn't clear them out (e.g. using a configuration manager as above).\n\n## Contact\n\nThis charm is created and maintained by Wes Mason, you can contact him via:\n\n * IRC, he is `wesleymason` on [freenode](http://www.freenode.net/)\n * [Twitter](https://twitter.com/1stvamp)\n * Or, if you must, email wes at 1stvamp dot org.\n\n## Copyright\n\nThis charm is released under a 3-clause BSD license, see the [copyright file](copyright).\n\nThe only exception to this is [the icon](./icon.svg), which is (C) Server Density 2014. All rights reserved.\n\n## sd-agent\n\n * [Project page](https://github.com/serverdensity/sd-agent)\n * [Issues](https://github.com/serverdensity/sd-agent/issues)\n * [Documentation](http://support.serverdensity.com/hc/en-us/sections/200275906-Server-monitoring)\n * [Copyright](https://github.com/serverdensity/sd-agent/blob/master/LICENSE)\n",
  "readme": "# Overview\n\n[Server Density](https://www.serverdensity.com/) is a hosted server monitoring service.\n\nThis [juju](http://juju.ubuntu.com/) subordinate charm installs and configures the [Server Density monitoring agent](https://github.com/serverdensity/sd-agent) onto any specified related units.\n\n## Usage\n\nReview the [configurable options](#configurable-options) below, you must configure at\nleast your account name, and an agent key for each unit or provide an API key to use the API to query\nfor units (optionally provide a group name to group units in clusters).\n\n```\njuju deploy serverdensity\n\n# For a whole deployed application:\njuju add-relation <application> serverdensity\n\n# or for a single unit\njuju add-relation <application>/<unit> serverdensity\n\n# Setting an agent key for a unit\njuju set serverdensity/<unit> agent-key=foobarbaz\n```\n\n## Configurable options\n\n * `sd-url`\n  * Your Server Density subdomain, prefixed with either http:// or https://\n  * default: `\"https://example.serverdensity.io\"`\n * `api-key`\n  * Your Server Density v2 API key (not used if agent-key is set)\n * `agent-key`\n  * Your Server Density agent key (don't set this if you want to use the API to handle querying nodes/creating nodes)\n * `group-name`\n  * Cluster group name (only set if you use the API to add nodes to a specific group)\n * `plugin-dir`\n  * Sets the directory the agent looks for plugins, if left blank it is ignored\n * `apache-url`\n  * URL to get the Apache2 status page from (e.g. mod_status), disabled if not set\n * `apache-user`\n  * Username to authenticate to the Apache2 status page, required if apache-url is set\n * `apache-pass`\n  * Password to authenticate to the Apache2 status page, required if apache-url is set\n * `mongodb-server`\n  * Server to get MongoDB status monitoring from, this takes a full MongoDB connection URI so you can set username/password etc. details here if needed, disabled if not set\n * `mongodb-dbstats`\n  * Enables MongoDB stats if true and mongodb-server is set\n  * default: `false`\n * `mongodb-replset`\n  * Enables MongoDB replica set stats if true and mongodb-server is set\n  * default: `false`\n * `mysql-server`\n  * Server to get MySQL status monitoring from, disabled if not set\n * `mongo-server`\n  * Username to authenticate to MySQL, required if mysql-server is set\n * `mysql-pass`\n  * Password to authenticate to MySQL, required if mysql-server is set\n * `nginx-url`\n  * URL to get the Nginx status page from, disabled if not set\n * `rabbitmq-url`\n  * URL to get the RabbitMQ status from via the HTTP management API, disabled if not set\n * `rabbitmq-user`\n  * Username to authenticate to the RabbitMQ management API, required if rabbitmq-url is set\n  * default: `\"guest\"`\n * `rabbitmq-pass`\n  * Password to authenticate to the RabbitMQ management API, required if rabbitmq-url is set\n  * default: `\"guest\"`\n * `temp-dir`\n  * Override where the agent stores temporary files, system default tmp will be used if not set\n * `pidfile-dir`\n  * Override where the agent stores it's PID file, temp dir (above or system default) is used if not set\n * `log-level`\n  * Level to log, e.g. set to DEBUG if you experience issues with the agent and want to collect extra info\n\n## Caveats\n\n * Although where ever possible the charm attempts to proceed without erroring, by attempting to get key information such as the agent key from various sources, as well as registering via the API if configured, the one time in which it will stop with an error if it exhausts all possibilities and still cannot configure an agent key.\n * You cannot currently configure plugins via the charm, as this would mean allowing a dynamic configuration and some way of injecting your own Python files into the relation cycle. You can however fork the charm and add your own plugins in that way, or instrument plugins using a configuration manager such as Chef, Puppet, Ansible, Salt etc.\n * The hooks in this charm are as idempotent as possible, they can be run multiple times without problem and should produce the same output. When the charm is removed from a unit it attempts to clear up after itself by removing the sd-agent package and it's corresponding apt repo, however files such as the config and plugins directory will be left. Subsequent runs of the charm would overwrite the config, but beware that any left over plugins may be picked up erroneously if you didn't clear them out (e.g. using a configuration manager as above).\n\n## Contact\n\nThis charm is created and maintained by Wes Mason, you can contact him via:\n\n * IRC, he is `wesleymason` on [freenode](http://www.freenode.net/)\n * [Twitter](https://twitter.com/1stvamp)\n * Or, if you must, email wes at 1stvamp dot org.\n\n## Copyright\n\nThis charm is released under a 3-clause BSD license, see the [copyright file](copyright).\n\nThe only exception to this is [the icon](./icon.svg), which is (C) Server Density 2014. All rights reserved.\n\n## sd-agent\n\n * [Project page](https://github.com/serverdensity/sd-agent)\n * [Issues](https://github.com/serverdensity/sd-agent/issues)\n * [Documentation](http://support.serverdensity.com/hc/en-us/sections/200275906-Server-monitoring)\n * [Copyright](https://github.com/serverdensity/sd-agent/blob/master/LICENSE)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}