{
  "name": "rails Juju charm",
  "juju_charm_name": "rails",
  "revision": "cs:precise/rails-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/rails",
    "https://jujucharms.com/rails/precise",
    "https://jujucharms.com/rails/precise/3",
    "https://api.jujucharms.com/v5/rails",
    "https://api.jujucharms.com/v5/precise/rails",
    "https://api.jujucharms.com/v5/precise/rails-3"
  ],
  "labels": [
    "Juju charm",
    "app-servers",
    "Type/Middleware/Runtime/Ruby",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API/Toolkit",
    "Style/Virtualization Level/Middleware",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Web Server"
  ],
  "info_url": "https://jujucharms.com/rails",
  "package_url": "https://api.jujucharms.com/v5/precise/rails-3/archive",
  "created": "2015-06-17T09:34:04.147Z",
  "updated": "2015-06-17T09:34:04.147Z",
  "description": "A modular Ruby webserver interface\n\nRack provides a minimal, modular and adaptable interface\nfor developing web applications in Ruby.\nBy wrapping HTTP requests and responses in the simplest way possible,\nit unifies and distills the API for web servers, web frameworks, and\nsoftware in between (the so-called middleware) into a single method call.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/memcache",
      "self_resolve": true,
      "juju_interface": "memcache",
      "juju_name": "memcached",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mongodb",
      "self_resolve": true,
      "juju_interface": "mongodb",
      "juju_name": "mongodb",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql",
      "self_resolve": true,
      "juju_interface": "mysql",
      "juju_name": "mysql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/pgsql",
      "self_resolve": true,
      "juju_interface": "pgsql",
      "juju_name": "postgresql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/redis",
      "self_resolve": true,
      "juju_interface": "redis",
      "juju_name": "redis",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "deploy_key": {
      "type": "string",
      "description": "A deploy key is an SSH key that is stored on the server and grants access to a repository (git only).",
      "default": "",
      "mapping": "charm_option"
    },
    "env": {
      "type": "string",
      "description": "List of environment variables (e.g. SECRET_TOKEN=secret_token). These variables will override those which were set by Rack charm (like DATABASE_URL, REDIS_URL)",
      "default": "",
      "mapping": "charm_option"
    },
    "extra_packages": {
      "type": "string",
      "description": "Extra packages to install before bundle install",
      "default": "",
      "mapping": "charm_option"
    },
    "rack_env": {
      "type": "string",
      "description": "Both RACK_ENV and RAILS_ENV environment variables.",
      "default": "production",
      "mapping": "charm_option"
    },
    "repo": {
      "type": "string",
      "description": "Application repository URL",
      "default": "",
      "mapping": "charm_option"
    },
    "revision": {
      "type": "string",
      "description": "The revision to be checked out. This can be symbolic, like HEAD or it can be a source control management-specific revision identifier.",
      "default": "HEAD",
      "mapping": "charm_option"
    },
    "scm_provider": {
      "type": "string",
      "description": "The name of the source control management provider to be used (git or svn).",
      "default": "git",
      "mapping": "charm_option"
    },
    "svn_password": {
      "type": "string",
      "description": "The user name for a user that has access to the Subversion repository (svn only).",
      "default": "",
      "mapping": "charm_option"
    },
    "svn_username": {
      "type": "string",
      "description": "The password for the user that has access to the Subversion repository (svn only).",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/monitors",
      "juju_interface": "monitors",
      "juju_name": "nagios",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/local-monitors",
      "juju_interface": "local-monitors",
      "juju_name": "nrpe",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "proxy",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\nThis Rails charms provides a minimal, modular and adaptable interface for developing web applications in Ruby. This Charm will deploy Ruby on Rails, Sinatra or any other Rack application and connect it to supported services.\n\n# Usage\n\nTo deploy this charm you will need at a minimum: a cloud environment, working Juju installation and a successful bootstrap. Once bootstrapped, deploy Rails charm and all required services.\n\n## Ruby on Rails example\n\nCreate a YAML config file with your application's name and it's git location\n\n**sample-app.yml**\n\n    sample-app:\n      repo: https://github.com/pavelpachkovskij/sample-rails\n\nDeploy the application:\n\n    juju deploy rails myapp --config sample-app.yml\n\nDeploy and relate database\n\n    juju deploy postgresql\n    juju add-relation postgresql:db myapp\n\nNow you can run migrations:\n\n    juju ssh myapp/0 run rake db:migrate\n\nSeed database\n\n    juju ssh myapp/0 run rake db:seed\n\nAnd finally expose the application:\n\n    juju expose myapp\n\nFind the instance's public URL from\n\n    juju status myapp\n\n### MySQL setup\n\n    juju deploy mysql\n    juju add-relation mysql myapp\n\n## Sinatra example\n\nConfigure your application, for example html2haml\n\n**html2haml.yml**\n\n    html2haml:\n      repo: https://github.com/twilson63/html2haml.git\n\nDeploy your Rails service\n\n    juju deploy rails html2haml --config html2haml.yml\n\nExpose the service:\n\n    juju expose html2haml\n\n## Source code updates\n\n    juju set <service_name> revision=<revision>\n\n## Executing commands\n\n    juju ssh <unit_name> run <command>\n\n## Restart application\n\n    juju ssh <unit_name> sudo restart rack\n\n## Foreman integration\n\nYou can add Procfile to your application and Rack to start additional processes or replace default application server:\n\nExample Procfile:\n\n    web: bundle exec unicorn -p $PORT\n    watcher: bundle exec rake watch\n\n## Specifying a Ruby Version\n\nYou can use the ruby keyword of your app's Gemfile to specify a particular version of Ruby.\n\n    source \"https://rubygems.org\"\n    ruby \"1.9.3\"\n\n# Horizontal scaling\n\nJuju makes it easy to scale your Rails application. You can simply deploy any supported load balancer, add relation and launch any number of application instances.\n\n## HAProxy\n\n    juju deploy rails myapp --config rack.yml\n    juju deploy haproxy\n    juju add-relation haproxy myapp\n    juju expose haproxy\n    juju add-unit myapp -n 2\n\n## Apache2\n\nApache2 is harder to start with, but it provides more flexibility with configuration options.\nHere is a quick example of using Apache2 as a load balancer with your rack application:\n\nDeploy Rack application\n\n    juju deploy rails --config rack.yml\n\nYou have to enable mod_proxy_balancer and mod_proxy_http modules in your Apache2 config:\n\n**apache2.yml** example\n\n    apache2:\n      enable_modules: proxy_balancer proxy_http\n\nDeploy Apache2\n\n    juju deploy apache2 --config apache2.yml\n\nCreate balancer relation between Apache2 and Rack application\n\n    juju add-relation apache2:balancer rails\n\nApache2 charm expects a template to be passed in. Example of vhost that will balance all traffic over your application instances:\n\n**vhost.tmpl**\n\n    <VirtualHost *:80>\n      ServerName rack\n      ProxyPass / balancer://rack/ lbmethod=byrequests stickysession=BALANCEID\n      ProxyPassReverse / balancer://rack/\n    </VirtualHost>\n\nUpdate Apache2 service config with this template\n\n    juju set apache2 \"vhost_http_template=$(base64 < vhost.tmpl)\"\n\nExpose Apache2 service\n\n    juju expose apache2\n\n# Logging with Logstash\n\nYou can add logstash service to collect information from application's logs and Kibana application to visualize this data.\n\n    juju deploy kibana\n    juju deploy logstash-indexer\n    juju add-relation kibana logstash-indexer:rest\n\n    juju deploy logstash-agent\n    juju add-relation logstash-agent logstash-indexer\n    juju add-relation logstash-agent rails\n    juju set logstash-agent CustomLogFile=\"['/var/www/rack/current/log/*.log']\" CustomLogType=\"rack\"\n    juju expose kibana\n\n# Monitoring with Nagios and NRPE\n\nYou can can perform HTTP checks with Nagios. To do this deploy Nagios and relate it to your Rack application:\n\n    juju deploy nagios\n    juju add-relation rails nagios\n\nAdditionally you can perform disk, mem, and swap checks with NRPE extension:\n\n    juju deploy nrpe\n    juju add-relation rails nrpe\n    juju add-relation nrpe nagios\n\n# MongoDB relation\n\nDeploy MonogDB service and relate it to Rack application:\n\n    juju deploy mongodb\n    juju add-relation mongodb rails\n\nRack charm will set environment variables which you can use to configure your Mongodb adapter.\n\n    MONGODB_URL   => mongodb://host:port/database\n\n## Mongoid 2.x\n\nYour mongoid.yml should look like:\n\n    production:\n      uri: <%= ENV['MONGODB_URL'] %>\n\n## Mongoid 3.x\n\nYour mongoid.yml should look like:\n\n    production:\n      sessions:\n        default:\n          uri: <%= ENV['MONGODB_URL'] %>\n\nIn both cases you can set additional options specified by Mongoid.\n\n# Memcached relation\n\nDeploy Memcached service and relate it to Rack application:\n\n    juju deploy memcached\n    juju add-relation memcached rails\n\nRack charm will set environment variables which you can use to configure your Memcache adapter. [Dalli](https://github.com/mperham/dalli) use those variables by default.\n\n    MEMCACHE_PASSWORD    => xxxxxxxxxxxx\n    MEMCACHE_SERVERS     => instance.hostname.net\n    MEMCACHE_USERNAME    => xxxxxxxxxxxx\n\n# Redis relation\n\nDeploy Redis service and relate it to Rack application:\n\n    juju deploy redis-master\n    juju add-relation redis-master:redis-master rails\n\nRack charm will set environment variables which you can use to configure your Redis adapter.\n\n    REDIS_URL   => redis://username:password@my.host:6389\n\nFor example you can configure Redis adapter in config/initializers/redis.rb\n\n    uri = URI.parse(ENV[\"REDIS_URL\"])\n    REDIS = Redis.new(:host => uri.host, :port => uri.port, :password => uri.password)\n\n# Known issues\n\n## Rack application didn't start because assets were not compiled\n\nTo be able to compile assets before you've joined database relation you have to disable initialize_on_precompile option in application.rb:\n\n    config.assets.initialize_on_precompile = false\n\nIf you can't do this you still can join database and compile assets manually:\n\n    juju ssh rails/0 run rake assets:precompile\n\nThen restart Rack service (while you have to replace 'rack/0' with your application name, e.g. 'sample-rails/0', 'sudo restart rack' is a valid command to restart any deployed application):\n\n    juju ssh rails/0 sudo restart rack\n\n# Configuration\n\n## Deploy from Git\n\nSample Git config:\n\n    rack:\n      repo: <repository_url>\n      revision: <revision_number>\n\nTo deploy from private repo via SSH add 'deploy_key' option:\n\n    deploy_key: <private_key>\n\n## Deploy from SVN\n\nSample SVN config:\n\n    rack:\n      scm_provider: svn\n      repo: <repository_url>\n      revision: <revision_number>\n      svn_username: <username>\n      svn_password: <password>\n\n## Install extra packages\n\nSpecify list of packages separated by spaces:\n\n    extra_packages: 'libsqlite3++-dev libmagick++-dev'\n\n## Set ENV variables\n\nYou can set ENV variables, which will be available within all processes defined in a Procfile:\n\n    env: 'AWS_ACCESS_KEY_ID=aws_access_key_id AWS_SECRET_ACCESS_KEY=aws_secret_access_key'",
  "readme": "# Overview\n\nThis Rails charms provides a minimal, modular and adaptable interface for developing web applications in Ruby. This Charm will deploy Ruby on Rails, Sinatra or any other Rack application and connect it to supported services.\n\n# Usage\n\nTo deploy this charm you will need at a minimum: a cloud environment, working Juju installation and a successful bootstrap. Once bootstrapped, deploy Rails charm and all required services.\n\n## Ruby on Rails example\n\nCreate a YAML config file with your application's name and it's git location\n\n**sample-app.yml**\n\n    sample-app:\n      repo: https://github.com/pavelpachkovskij/sample-rails\n\nDeploy the application:\n\n    juju deploy rails myapp --config sample-app.yml\n\nDeploy and relate database\n\n    juju deploy postgresql\n    juju add-relation postgresql:db myapp\n\nNow you can run migrations:\n\n    juju ssh myapp/0 run rake db:migrate\n\nSeed database\n\n    juju ssh myapp/0 run rake db:seed\n\nAnd finally expose the application:\n\n    juju expose myapp\n\nFind the instance's public URL from\n\n    juju status myapp\n\n### MySQL setup\n\n    juju deploy mysql\n    juju add-relation mysql myapp\n\n## Sinatra example\n\nConfigure your application, for example html2haml\n\n**html2haml.yml**\n\n    html2haml:\n      repo: https://github.com/twilson63/html2haml.git\n\nDeploy your Rails service\n\n    juju deploy rails html2haml --config html2haml.yml\n\nExpose the service:\n\n    juju expose html2haml\n\n## Source code updates\n\n    juju set <service_name> revision=<revision>\n\n## Executing commands\n\n    juju ssh <unit_name> run <command>\n\n## Restart application\n\n    juju ssh <unit_name> sudo restart rack\n\n## Foreman integration\n\nYou can add Procfile to your application and Rack to start additional processes or replace default application server:\n\nExample Procfile:\n\n    web: bundle exec unicorn -p $PORT\n    watcher: bundle exec rake watch\n\n## Specifying a Ruby Version\n\nYou can use the ruby keyword of your app's Gemfile to specify a particular version of Ruby.\n\n    source \"https://rubygems.org\"\n    ruby \"1.9.3\"\n\n# Horizontal scaling\n\nJuju makes it easy to scale your Rails application. You can simply deploy any supported load balancer, add relation and launch any number of application instances.\n\n## HAProxy\n\n    juju deploy rails myapp --config rack.yml\n    juju deploy haproxy\n    juju add-relation haproxy myapp\n    juju expose haproxy\n    juju add-unit myapp -n 2\n\n## Apache2\n\nApache2 is harder to start with, but it provides more flexibility with configuration options.\nHere is a quick example of using Apache2 as a load balancer with your rack application:\n\nDeploy Rack application\n\n    juju deploy rails --config rack.yml\n\nYou have to enable mod_proxy_balancer and mod_proxy_http modules in your Apache2 config:\n\n**apache2.yml** example\n\n    apache2:\n      enable_modules: proxy_balancer proxy_http\n\nDeploy Apache2\n\n    juju deploy apache2 --config apache2.yml\n\nCreate balancer relation between Apache2 and Rack application\n\n    juju add-relation apache2:balancer rails\n\nApache2 charm expects a template to be passed in. Example of vhost that will balance all traffic over your application instances:\n\n**vhost.tmpl**\n\n    <VirtualHost *:80>\n      ServerName rack\n      ProxyPass / balancer://rack/ lbmethod=byrequests stickysession=BALANCEID\n      ProxyPassReverse / balancer://rack/\n    </VirtualHost>\n\nUpdate Apache2 service config with this template\n\n    juju set apache2 \"vhost_http_template=$(base64 < vhost.tmpl)\"\n\nExpose Apache2 service\n\n    juju expose apache2\n\n# Logging with Logstash\n\nYou can add logstash service to collect information from application's logs and Kibana application to visualize this data.\n\n    juju deploy kibana\n    juju deploy logstash-indexer\n    juju add-relation kibana logstash-indexer:rest\n\n    juju deploy logstash-agent\n    juju add-relation logstash-agent logstash-indexer\n    juju add-relation logstash-agent rails\n    juju set logstash-agent CustomLogFile=\"['/var/www/rack/current/log/*.log']\" CustomLogType=\"rack\"\n    juju expose kibana\n\n# Monitoring with Nagios and NRPE\n\nYou can can perform HTTP checks with Nagios. To do this deploy Nagios and relate it to your Rack application:\n\n    juju deploy nagios\n    juju add-relation rails nagios\n\nAdditionally you can perform disk, mem, and swap checks with NRPE extension:\n\n    juju deploy nrpe\n    juju add-relation rails nrpe\n    juju add-relation nrpe nagios\n\n# MongoDB relation\n\nDeploy MonogDB service and relate it to Rack application:\n\n    juju deploy mongodb\n    juju add-relation mongodb rails\n\nRack charm will set environment variables which you can use to configure your Mongodb adapter.\n\n    MONGODB_URL   => mongodb://host:port/database\n\n## Mongoid 2.x\n\nYour mongoid.yml should look like:\n\n    production:\n      uri: <%= ENV['MONGODB_URL'] %>\n\n## Mongoid 3.x\n\nYour mongoid.yml should look like:\n\n    production:\n      sessions:\n        default:\n          uri: <%= ENV['MONGODB_URL'] %>\n\nIn both cases you can set additional options specified by Mongoid.\n\n# Memcached relation\n\nDeploy Memcached service and relate it to Rack application:\n\n    juju deploy memcached\n    juju add-relation memcached rails\n\nRack charm will set environment variables which you can use to configure your Memcache adapter. [Dalli](https://github.com/mperham/dalli) use those variables by default.\n\n    MEMCACHE_PASSWORD    => xxxxxxxxxxxx\n    MEMCACHE_SERVERS     => instance.hostname.net\n    MEMCACHE_USERNAME    => xxxxxxxxxxxx\n\n# Redis relation\n\nDeploy Redis service and relate it to Rack application:\n\n    juju deploy redis-master\n    juju add-relation redis-master:redis-master rails\n\nRack charm will set environment variables which you can use to configure your Redis adapter.\n\n    REDIS_URL   => redis://username:password@my.host:6389\n\nFor example you can configure Redis adapter in config/initializers/redis.rb\n\n    uri = URI.parse(ENV[\"REDIS_URL\"])\n    REDIS = Redis.new(:host => uri.host, :port => uri.port, :password => uri.password)\n\n# Known issues\n\n## Rack application didn't start because assets were not compiled\n\nTo be able to compile assets before you've joined database relation you have to disable initialize_on_precompile option in application.rb:\n\n    config.assets.initialize_on_precompile = false\n\nIf you can't do this you still can join database and compile assets manually:\n\n    juju ssh rails/0 run rake assets:precompile\n\nThen restart Rack service (while you have to replace 'rack/0' with your application name, e.g. 'sample-rails/0', 'sudo restart rack' is a valid command to restart any deployed application):\n\n    juju ssh rails/0 sudo restart rack\n\n# Configuration\n\n## Deploy from Git\n\nSample Git config:\n\n    rack:\n      repo: <repository_url>\n      revision: <revision_number>\n\nTo deploy from private repo via SSH add 'deploy_key' option:\n\n    deploy_key: <private_key>\n\n## Deploy from SVN\n\nSample SVN config:\n\n    rack:\n      scm_provider: svn\n      repo: <repository_url>\n      revision: <revision_number>\n      svn_username: <username>\n      svn_password: <password>\n\n## Install extra packages\n\nSpecify list of packages separated by spaces:\n\n    extra_packages: 'libsqlite3++-dev libmagick++-dev'\n\n## Set ENV variables\n\nYou can set ENV variables, which will be available within all processes defined in a Procfile:\n\n    env: 'AWS_ACCESS_KEY_ID=aws_access_key_id AWS_SECRET_ACCESS_KEY=aws_secret_access_key'",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}