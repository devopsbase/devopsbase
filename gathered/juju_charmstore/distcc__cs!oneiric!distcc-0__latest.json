{
  "name": "distcc Juju charm",
  "juju_charm_name": "distcc",
  "revision": "cs:oneiric/distcc-0",
  "latest": true,
  "uris": [
    "https://jujucharms.com/distcc",
    "https://jujucharms.com/distcc/oneiric",
    "https://jujucharms.com/distcc/oneiric/0",
    "https://api.jujucharms.com/v5/distcc",
    "https://api.jujucharms.com/v5/oneiric/distcc",
    "https://api.jujucharms.com/v5/oneiric/distcc-0"
  ],
  "labels": [
    "Juju charm",
    "Type/Infrastructure/Operating System/macOS",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju"
  ],
  "info_url": "https://jujucharms.com/distcc",
  "package_url": "https://api.jujucharms.com/v5/oneiric/distcc-0/archive",
  "created": "2015-06-17T09:34:16.613Z",
  "updated": "2015-06-17T09:34:16.613Z",
  "description": "Simple distributed compiler client and server\n\ndistcc is a program to distribute compilation of C or C++ code across\nseveral machines on a network. distcc should always generate the same\nresults as a local compile, is simple to install and use, and is often\nsignificantly faster than a local compile.  distcc does not require\nall machines to share a filesystem, have synchronized clocks, or to\nhave the same libraries or header files installed.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "oneiric",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= oneiric"
    }
  ],
  "parameters": {
    "distcc_options": {
      "type": "string",
      "description": "distcc options for each host in the farm",
      "default": "cpp,lzo",
      "mapping": "charm_option"
    },
    "existing_distcc": {
      "type": "string",
      "description": "Connect this node to an existing distcc ( host:port ).",
      "default": "auto",
      "mapping": "charm_option"
    },
    "jobs": {
      "type": "int",
      "description": "You can specify a maximum number of jobs, the server will accept concurrently.",
      "default": 10,
      "mapping": "charm_option"
    },
    "nice": {
      "type": "int",
      "description": "You can specify a (positive) nice level for the distcc process here",
      "default": 10,
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Port to use to run distcc",
      "default": 3632,
      "mapping": "charm_option"
    },
    "zeroconf": {
      "type": "string",
      "description": "Enable Zeroconf support?# If enabled, distccd will register via mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc clients without the need of a manually configured host list.",
      "default": "false",
      "mapping": "charm_option"
    }
  },
  "juju_peers": {
    "distcc-cluster": {
      "Name": "distcc-cluster",
      "Role": "peer",
      "Interface": "distcc-cluster",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "distcc is a program to distribute builds of C, C++, Objective C or Objective C++ code across several machines on a network. distcc should always generate the same results as a local build, is simple to install and use, and is usually much faster than a local compile.\n\ndistcc does not require all machines to share a filesystem, have synchronized clocks, or to have the same libraries or header files installed. They can even have different processors or operating systems, if cross-compilers are installed.\n\nMore information about distcc at: http://www.distcc.org\n\n\nAbout this charm\n\nIt's a pretty simple charm that provides a peer interface ( distcc-cluster ).  This interface allows you to deploy the distcc charm as a single node and add-unit to create a distcc farm or, deploy x number of them in one command to easily create a distcc farm.\n\nThe configurable options are pretty self explanatory and are detailed below:\n\noptions:\n  port:\n    default: 3632\n    type: int\n    description: Port to use to run distcc\n  nice:\n    default: 10\n    type: int\n    description: You can specify a (positive) nice level for the distcc process here\n  jobs:\n    default: 10\n    type: int\n    description: You can specify a maximum number of jobs, the server will accept concurrently.\n  zeroconf:\n    default: false\n    type: string\n    description: Enable Zeroconf support?# If enabled, distccd will register via mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc clients without the need of a manually configured host list.\n  distcc_options:\n    default: cpp,lzo\n    type: string\n    description: distcc options for each host in the farm\n  existing_distcc:\n    default: auto\n    type: string\n    description: Connect this node to an existing distcc ( host:port ).\n\n\nNote:  To be able to connect distcc to an _existing_ distcc farm ( by changing the existing_distcc option ), this service needs to be exposed.\n\n\n",
  "readme": "distcc is a program to distribute builds of C, C++, Objective C or Objective C++ code across several machines on a network. distcc should always generate the same results as a local build, is simple to install and use, and is usually much faster than a local compile.\n\ndistcc does not require all machines to share a filesystem, have synchronized clocks, or to have the same libraries or header files installed. They can even have different processors or operating systems, if cross-compilers are installed.\n\nMore information about distcc at: http://www.distcc.org\n\n\nAbout this charm\n\nIt's a pretty simple charm that provides a peer interface ( distcc-cluster ).  This interface allows you to deploy the distcc charm as a single node and add-unit to create a distcc farm or, deploy x number of them in one command to easily create a distcc farm.\n\nThe configurable options are pretty self explanatory and are detailed below:\n\noptions:\n  port:\n    default: 3632\n    type: int\n    description: Port to use to run distcc\n  nice:\n    default: 10\n    type: int\n    description: You can specify a (positive) nice level for the distcc process here\n  jobs:\n    default: 10\n    type: int\n    description: You can specify a maximum number of jobs, the server will accept concurrently.\n  zeroconf:\n    default: false\n    type: string\n    description: Enable Zeroconf support?# If enabled, distccd will register via mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc clients without the need of a manually configured host list.\n  distcc_options:\n    default: cpp,lzo\n    type: string\n    description: distcc options for each host in the farm\n  existing_distcc:\n    default: auto\n    type: string\n    description: Connect this node to an existing distcc ( host:port ).\n\n\nNote:  To be able to connect distcc to an _existing_ distcc farm ( by changing the existing_distcc option ), this service needs to be exposed.\n\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}