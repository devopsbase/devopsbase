{
  "name": "juju-gui Juju charm",
  "juju_charm_name": "juju-gui",
  "revision": "cs:precise/juju-gui-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/juju-gui",
    "https://jujucharms.com/juju-gui/precise",
    "https://jujucharms.com/juju-gui/precise/3",
    "https://api.jujucharms.com/v5/juju-gui",
    "https://api.jujucharms.com/v5/precise/juju-gui",
    "https://api.jujucharms.com/v5/precise/juju-gui-3"
  ],
  "labels": [
    "Juju charm",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/GUI",
    "Type/Devopsware/Deployment/Juju"
  ],
  "info_url": "https://jujucharms.com/juju-gui",
  "package_url": "https://api.jujucharms.com/v5/precise/juju-gui-3/archive",
  "created": "2015-06-17T09:37:36.795Z",
  "updated": "2015-06-17T09:37:36.795Z",
  "description": "User interface for Juju (development)\n\nWeb GUI for Juju",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "command-log-file": {
      "type": "string",
      "description": "The log file where stdout and stderr should be sent for all\ncommands that are run by charm hooks.\n",
      "default": "/var/log/juju/juju-gui.log",
      "mapping": "charm_option"
    },
    "juju-api-branch": {
      "type": "string",
      "description": "The Juju API Bazaar branch (implementing the websocket server).\n",
      "default": "lp:~hazmat/juju/rapi-rollup",
      "mapping": "charm_option"
    },
    "juju-gui-console-enabled": {
      "type": "boolean",
      "description": "Whether or not the console should be enabled for the browser.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "juju-gui-source": {
      "type": "string",
      "description": "Where to install Juju GUI from. Possible values are:\n- 'stable' (default): the latest stable release will be deployed;\n- 'trunk': the latest trunk release will be deployed;\n- a stable version (e.g '0.1.0'): the specified stable version will be\n  deployed;\n- a trunk version (e.g '0.1.0+build.1'): the specified trunk version\n  will be deployed;\n- a Bazaar branch (e.g. 'lp:juju-gui'): a release will be created and\n  deployed from the specified Bazaar branch.\n",
      "default": "stable",
      "mapping": "charm_option"
    },
    "login-help": {
      "type": "string",
      "description": "The help text shown to the user on the login screen.\n",
      "default": "The password is the admin-secret from the Juju environment.  This can\noften be found by looking in ~/.juju/environments.yaml.\n",
      "mapping": "charm_option"
    },
    "read-only": {
      "type": "boolean",
      "description": "Whether or not the GUI is in read-only mode. Note that read-only mode is\nadvisory, and enforced only in the client. If someone can access the\nwebsocket and has the password, they can send commands over the websocket\nto mutate the environment.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "secure": {
      "type": "boolean",
      "description": "In order to run the GUI over a non secure connection (HTTP) set this flag\nto false. Do not set this property unless you understand and accept the\nrisks.\n",
      "default": true,
      "mapping": "charm_option"
    },
    "serve-tests": {
      "type": "boolean",
      "description": "Whether or not the GUI unit tests are exposed. If this option is enabled,\nunit tests can be run in the browser by visiting the URL\n\"https://[Juju GUI address]/test/\".\n",
      "default": false,
      "mapping": "charm_option"
    },
    "ssl-cert-contents": {
      "type": "string",
      "description": "The contents of the certificate file to be used in SSL connections to\nthe GUI. Both ssl-cert-contents and ssl-key-contents must be provided.\nIf not, cetificates will be automatically generated.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl-cert-path": {
      "type": "string",
      "description": "The path to the directory where the SSL certificates are stored.\n",
      "default": "/etc/ssl/juju-gui",
      "mapping": "charm_option"
    },
    "ssl-key-contents": {
      "type": "string",
      "description": "The contents of the private key file to be used in SSL connections to\nthe GUI. Both ssl-cert-contents and ssl-key-contents must be provided.\nIf not, cetificates will be automatically generated.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "staging": {
      "type": "boolean",
      "description": "Connect the Juju GUI to the staging backend\n(i.e. a simulated Juju environment).\n",
      "default": false,
      "mapping": "charm_option"
    },
    "staging-environment": {
      "type": "string",
      "description": "The environment JSON export used by the staging server. This option can\nbe used to change the topology of the simulated Juju environment.\nPossible values are 'sample' and 'large'.\n",
      "default": "sample",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "web",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Juju GUI Charm #\n\nThis charm makes it easy to deploy a Juju GUI into an existing environment.\n\n## Supported Browsers ##\n\nThe Juju GUI supports recent releases of Chrome and Chromium.  Recent Firefox\nreleases are also supported, but regressions may occur until the completion of\nupcoming continuous integration work.\n\n## Demo/Staging Server ##\n\nA [demo/staging server](https://uistage.jujucharms.com:8080/) is available.\n\n## Deploying the Juju GUI ##\n\nDeploying the Juju GUI is accomplished using Juju itself.\n\nYou need a configured and bootstrapped Juju environment: see the Juju docs\nabout [getting started](https://juju.ubuntu.com/docs/getting-started.html),\nand then run the usual bootstrap command.\n\n    juju bootstrap\n\nNext, you simply need to deploy the charm and expose it.  (See also \"Deploying\nwith Jitsu\" below, for another option.)\n\n    juju deploy juju-gui\n    juju expose juju-gui\n\nFinally, you need to identify the GUI's URL. It can take a few minutes for the\nGUI to be built and to start; this command will let you see when it is ready\nto go by giving you regular status updates:\n\n    watch juju status\n\nEventually, at the end of the status you will see something that looks like\nthis:\n\n    services:\n      juju-gui:\n        charm: cs:precise/juju-gui-25\n        exposed: true\n        relations: {}\n        units:\n          juju-gui/0:\n            agent-state: started\n            machine: 1\n            open-ports:\n            - 80/tcp\n            - 443/tcp\n            public-address: ec2-www-xxx-yyy-zzz.compute-1.amazonaws.com\n\nThat tells me I can go to the public-address in my browser via HTTPS\n(https://ec2-www-xxx-yyy-zzz.compute-1.amazonaws.com/ in this example), and\nstart configuring the rest of Juju with the GUI.  You should see a similar\nweb address.  Accessing the GUI via HTTP will redirect to using HTTPS.\n\nBy default, the deployment uses self-signed certificates. The browser will ask\nyou to accept a security exception once.\n\nYou will see a login form with the username fixed to \"admin\".  The password is\nthe same as your Juju environment's `admin-secret`, found in\n`~/.juju/environments.yaml`.\n\n### Deploying with Jitsu ###\n\nThe instructions above cause you to use a separate machine to work with the\nGUI.  If you'd like to reduce your machine footprint (and perhaps your costs),\nyou can colocate the GUI with the Juju bootstrap node.  This approach will\nchange in the future (probably with the Juju shipped with Ubuntu 13.04), so be\nwarned.\n\nFor now, though, install Jitsu...\n\n    sudo apt-get install juju-jitsu\n\n...and then replace \"juju deploy juju-gui\" from the\nprevious instructions with this:\n\n    jitsu deploy-to 0 juju-gui\n\n## Contacting the Developers ##\n\nIf you run into problems with the charm, please feel free to contact us on the\n[Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju), or on\nFreenode's IRC network on #juju.  We're not always around (working hours in\nEurope and North America are your best bets), but if you send us a mail or\nping \"jujugui\" we will eventually get back to you.\n\nIf you want to help develop the charm, please see the charm's `HACKING.md`.\n",
  "readme": "# Juju GUI Charm #\n\nThis charm makes it easy to deploy a Juju GUI into an existing environment.\n\n## Supported Browsers ##\n\nThe Juju GUI supports recent releases of Chrome and Chromium.  Recent Firefox\nreleases are also supported, but regressions may occur until the completion of\nupcoming continuous integration work.\n\n## Demo/Staging Server ##\n\nA [demo/staging server](https://uistage.jujucharms.com:8080/) is available.\n\n## Deploying the Juju GUI ##\n\nDeploying the Juju GUI is accomplished using Juju itself.\n\nYou need a configured and bootstrapped Juju environment: see the Juju docs\nabout [getting started](https://juju.ubuntu.com/docs/getting-started.html),\nand then run the usual bootstrap command.\n\n    juju bootstrap\n\nNext, you simply need to deploy the charm and expose it.  (See also \"Deploying\nwith Jitsu\" below, for another option.)\n\n    juju deploy juju-gui\n    juju expose juju-gui\n\nFinally, you need to identify the GUI's URL. It can take a few minutes for the\nGUI to be built and to start; this command will let you see when it is ready\nto go by giving you regular status updates:\n\n    watch juju status\n\nEventually, at the end of the status you will see something that looks like\nthis:\n\n    services:\n      juju-gui:\n        charm: cs:precise/juju-gui-25\n        exposed: true\n        relations: {}\n        units:\n          juju-gui/0:\n            agent-state: started\n            machine: 1\n            open-ports:\n            - 80/tcp\n            - 443/tcp\n            public-address: ec2-www-xxx-yyy-zzz.compute-1.amazonaws.com\n\nThat tells me I can go to the public-address in my browser via HTTPS\n(https://ec2-www-xxx-yyy-zzz.compute-1.amazonaws.com/ in this example), and\nstart configuring the rest of Juju with the GUI.  You should see a similar\nweb address.  Accessing the GUI via HTTP will redirect to using HTTPS.\n\nBy default, the deployment uses self-signed certificates. The browser will ask\nyou to accept a security exception once.\n\nYou will see a login form with the username fixed to \"admin\".  The password is\nthe same as your Juju environment's `admin-secret`, found in\n`~/.juju/environments.yaml`.\n\n### Deploying with Jitsu ###\n\nThe instructions above cause you to use a separate machine to work with the\nGUI.  If you'd like to reduce your machine footprint (and perhaps your costs),\nyou can colocate the GUI with the Juju bootstrap node.  This approach will\nchange in the future (probably with the Juju shipped with Ubuntu 13.04), so be\nwarned.\n\nFor now, though, install Jitsu...\n\n    sudo apt-get install juju-jitsu\n\n...and then replace \"juju deploy juju-gui\" from the\nprevious instructions with this:\n\n    jitsu deploy-to 0 juju-gui\n\n## Contacting the Developers ##\n\nIf you run into problems with the charm, please feel free to contact us on the\n[Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju), or on\nFreenode's IRC network on #juju.  We're not always around (working hours in\nEurope and North America are your best bets), but if you send us a mail or\nping \"jujugui\" we will eventually get back to you.\n\nIf you want to help develop the charm, please see the charm's `HACKING.md`.\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}