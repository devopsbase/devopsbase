{
  "name": "pgbouncer Juju charm",
  "juju_charm_name": "pgbouncer",
  "revision": "cs:precise/pgbouncer-9",
  "latest": true,
  "uris": [
    "https://jujucharms.com/pgbouncer",
    "https://jujucharms.com/pgbouncer/precise",
    "https://jujucharms.com/pgbouncer/precise/9",
    "https://api.jujucharms.com/v5/pgbouncer",
    "https://api.jujucharms.com/v5/precise/pgbouncer",
    "https://api.jujucharms.com/v5/precise/pgbouncer-9"
  ],
  "labels": [
    "Juju charm",
    "databases",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Store/Relational/PostgreSQL"
  ],
  "info_url": "https://jujucharms.com/pgbouncer",
  "package_url": "https://api.jujucharms.com/v5/precise/pgbouncer-9/archive",
  "created": "2015-06-24T09:31:09.239Z",
  "updated": "2015-06-24T09:31:09.239Z",
  "description": "Lightweight connection pooler for PostgreSQL.\n\nPgBouncer is a lightweight connection pooler for PostgreSQL.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/pgsql",
      "self_resolve": true,
      "juju_interface": "pgsql",
      "juju_name": "backend-db-admin",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "admin_users": {
      "type": "string",
      "description": "DEPRECATED AND IGNORED. Comma-separated list of database users that are allowed to connect and run all commands on console. Ignored when auth_mode=any, in which case any username is allowed in as admin.\n",
      "default": "postgres",
      "mapping": "charm_option"
    },
    "auth_file": {
      "type": "string",
      "description": "DEPRECATED AND IGNORED. The name of the file to load user names and passwords from. The file format is the same as the PostgreSQL pg_auth/pg_pwd file, so this setting can be pointed directly to one of those backend files.\n",
      "default": "/etc/pgbouncer/userlist.txt",
      "mapping": "charm_option"
    },
    "auth_type": {
      "type": "string",
      "description": "DEPRECATED AND IGNORED. How to authenticate users.\n",
      "default": "md5",
      "mapping": "charm_option"
    },
    "client_login_timeout": {
      "type": "int",
      "description": "If a client connects but does not manage to login in this amount of time, it will be disconnected. Mainly needed to avoid dead connections stalling SUSPEND and thus online restart. [seconds]\n",
      "default": 60,
      "mapping": "charm_option"
    },
    "conn_crit": {
      "type": "int",
      "description": "The parameters to pass to the nrpe plugin check_pgbouncer_connection_count for critical level.\n",
      "default": 90,
      "mapping": "charm_option"
    },
    "conn_warn": {
      "type": "int",
      "description": "The parameters to pass to the nrpe plugin check_pgbouncer_connection_count for warn level.\n",
      "default": 75,
      "mapping": "charm_option"
    },
    "default_pool_size": {
      "type": "int",
      "description": "How many server connections to allow per user/database pair. Can be overridden in the per-database configuration.\n",
      "default": 20,
      "mapping": "charm_option"
    },
    "ignore_startup_parameters": {
      "type": "string",
      "description": "By default, PgBouncer allows only parameters it can keep track of in startup packets - client_encoding, datestyle, timezone and standard_conforming_strings.\nAll other parameters will raise an error. To allow other parameters, they can be specified here, so that pgbouncer knows that they are handled by admin and it can ignore them.\n",
      "default": "application_name",
      "mapping": "charm_option"
    },
    "listen_addr": {
      "type": "string",
      "description": "Specifies list of addresses, where to listen for TCP connections.  You may also use * meaning \"listen on all addresses\". When not set, only Unix socket connections are allowed.\nAddresses can be specified numerically (IPv4/IPv6) or by name.\n",
      "default": "*",
      "mapping": "charm_option"
    },
    "listen_port": {
      "type": "int",
      "description": "Which port to listen on. Applies to both TCP and Unix sockets.\n",
      "default": 6432,
      "mapping": "charm_option"
    },
    "logfile": {
      "type": "string",
      "description": "DEPRECATED AND IGNORED. Specifies log file. Log file is kept open so after rotation kill -HUP or on console RELOAD; should be done. Note: On Windows machines, the service must be stopped and started.\n",
      "default": "/var/log/postgresql/pgbouncer.log",
      "mapping": "charm_option"
    },
    "max_client_conn": {
      "type": "int",
      "description": "Maximum number of client connections allowed. When increased then the file descriptor limits should also be increased. Note that actual number of file descriptors used is more than max_client_conn.\n",
      "default": 100,
      "mapping": "charm_option"
    },
    "max_open_files": {
      "type": "int",
      "description": "DEPRECATED AND IGNORED. Set maximum open files\n",
      "default": 65536,
      "mapping": "charm_option"
    },
    "nagios_context": {
      "type": "string",
      "description": "Used by the nrpe-external-master subordinate charm.\nA string that will be prepended to instance name to set the host name\nin nagios. So for instance the hostname would be something like:\n    juju-pgbouncer-0\nIf you're running multiple environments with the same services in them\nthis allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "nagios_service_type": {
      "type": "string",
      "description": "What service this component forms part of. Used by nrpe.\n",
      "default": "generic",
      "mapping": "charm_option"
    },
    "package_status": {
      "type": "string",
      "description": "The status of service-affecting packages will be set to this value in the dpkg database.\nUseful valid values are \"install\" and \"hold\".\n",
      "default": "install",
      "mapping": "charm_option"
    },
    "pidfile": {
      "type": "string",
      "description": "DEPRECATED AND IGNORED. Specifies the pid file. Without a pidfile, daemonization is not allowed.\n",
      "default": "/var/run/postgresql/pgbouncer.pid",
      "mapping": "charm_option"
    },
    "pool_mode": {
      "type": "string",
      "description": "Specifies when a server connection can be reused by other clients.\n",
      "default": "transaction",
      "mapping": "charm_option"
    },
    "reserve_pool_size": {
      "type": "int",
      "description": "How many additional connections to allow to a pool. 0 disables.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "server_check_delay": {
      "type": "int",
      "description": "How long to keep released connections available for immediate re-use, without running sanity-check queries on it. If 0 then the query is ran always.\n",
      "default": 30,
      "mapping": "charm_option"
    },
    "server_connect_timeout": {
      "type": "int",
      "description": "If connection and login wont finish in this amount of time, the connection will be closed. [seconds]\n",
      "default": 15,
      "mapping": "charm_option"
    },
    "server_idle_timeout": {
      "type": "int",
      "description": "If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds]\n",
      "default": 600,
      "mapping": "charm_option"
    },
    "server_lifetime": {
      "type": "int",
      "description": "The pooler will try to close server connections that have been connected longer than this. Setting it to 0 means the connection is to be used only once, then closed. [seconds]\n",
      "default": 3600,
      "mapping": "charm_option"
    },
    "server_login_retry": {
      "type": "int",
      "description": "If login failed, because of failure from connect() or authentication that pooler waits this much before retrying to connect. [seconds]\n",
      "default": 15,
      "mapping": "charm_option"
    },
    "wait_crit": {
      "type": "int",
      "description": "The parameters to pass to the nrpe plugin check_pgbouncer_pool_waittime for critical level.\n",
      "default": 20,
      "mapping": "charm_option"
    },
    "wait_warn": {
      "type": "int",
      "description": "The parameters to pass to the nrpe plugin check_pgbouncer_pool_waittime for warning level.\n",
      "default": 5,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/pgsql",
      "juju_interface": "pgsql",
      "juju_name": "db-proxy",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe-external-master",
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\nPgBouncer is a lightweight connection pooler for PostgreSQL.\n\nhttp://wiki.postgresql.org/wiki/PgBouncer\n\n# Usage\n## Installation\n\nTo deploy you'll need at a minimum: a cloud environment, a working Juju\ninstallation, and a successful bootstrap. Please refer to the\n[Juju Getting Started](https://juju.ubuntu.com/docs/getting-started.html)\ndocumentation before continuing.\n\nIt is also recommended that you read the documentation for the\npostgresql charm so you understand how to set up postgresql in\na master-slave relationship.\n\n## Example\n\nFirst, if you haven't already done so, bootstrap your environment:\n\n    juju bootstrap\n\nNow deploy a standalone PostgreSQL instance:\n\n    juju deploy postgresql\n\nLet's add another unit:\n\n    juju add-unit postgresql\n\nAs per the documentation in the postgresql charm, you now have a master\nand a hot standby set up with replication.\n\nNow that you have a functional PostgreSQL setup, deploy the \nPgBouncer charm from the Juju charm store:\n\n    juju deploy pgbouncer\n\nCreate the relations between pgbouncer and postgresql:\n\n    juju add-relation pgbouncer:backend-db-admin postgresql:db-admin\n\nNow you have set up pgbouncer in front of your PostgreSQL units.\n\nIn a real world scenario, you might have a (web) application that\nsends write queries to a master (directly) and read-only queries\nto a cluster of slaves, with load balancing using pgbouncer.\n\n\n## Configuration\n\n    juju set pgbouncer max_client_conn=50\n\n## db-proxy relationship\n\nThe charm joining the db-proxy relationship can specify a database that\nwill be created in addition to the default one based on the service name\nand can specify a comma seperated list of roles that will be granted to\nthe user (these roles will be created if they do not already exist)\n\n## Monitoring\n\nThis charm provides relations that support monitoring via Nagios using \nnrpe_external_master as a subordinate charm.\n\n",
  "readme": "# Overview\n\nPgBouncer is a lightweight connection pooler for PostgreSQL.\n\nhttp://wiki.postgresql.org/wiki/PgBouncer\n\n# Usage\n## Installation\n\nTo deploy you'll need at a minimum: a cloud environment, a working Juju\ninstallation, and a successful bootstrap. Please refer to the\n[Juju Getting Started](https://juju.ubuntu.com/docs/getting-started.html)\ndocumentation before continuing.\n\nIt is also recommended that you read the documentation for the\npostgresql charm so you understand how to set up postgresql in\na master-slave relationship.\n\n## Example\n\nFirst, if you haven't already done so, bootstrap your environment:\n\n    juju bootstrap\n\nNow deploy a standalone PostgreSQL instance:\n\n    juju deploy postgresql\n\nLet's add another unit:\n\n    juju add-unit postgresql\n\nAs per the documentation in the postgresql charm, you now have a master\nand a hot standby set up with replication.\n\nNow that you have a functional PostgreSQL setup, deploy the \nPgBouncer charm from the Juju charm store:\n\n    juju deploy pgbouncer\n\nCreate the relations between pgbouncer and postgresql:\n\n    juju add-relation pgbouncer:backend-db-admin postgresql:db-admin\n\nNow you have set up pgbouncer in front of your PostgreSQL units.\n\nIn a real world scenario, you might have a (web) application that\nsends write queries to a master (directly) and read-only queries\nto a cluster of slaves, with load balancing using pgbouncer.\n\n\n## Configuration\n\n    juju set pgbouncer max_client_conn=50\n\n## db-proxy relationship\n\nThe charm joining the db-proxy relationship can specify a database that\nwill be created in addition to the default one based on the service name\nand can specify a comma seperated list of roles that will be granted to\nthe user (these roles will be created if they do not already exist)\n\n## Monitoring\n\nThis charm provides relations that support monitoring via Nagios using \nnrpe_external_master as a subordinate charm.\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}