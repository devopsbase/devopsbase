{
  "name": "apache-zeppelin Juju charm",
  "juju_charm_name": "apache-zeppelin",
  "revision": "cs:trusty/apache-zeppelin-7",
  "latest": true,
  "uris": [
    "https://jujucharms.com/apache-zeppelin",
    "https://jujucharms.com/apache-zeppelin/trusty",
    "https://jujucharms.com/apache-zeppelin/trusty/7",
    "https://api.jujucharms.com/v5/apache-zeppelin",
    "https://api.jujucharms.com/v5/trusty/apache-zeppelin",
    "https://api.jujucharms.com/v5/trusty/apache-zeppelin-7"
  ],
  "labels": [
    "Juju charm",
    "bigdata",
    "hadoop",
    "apache",
    "Type/Middleware/Runtime/Java",
    "Mode/Guide/Text/Book",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/IDE/Web-based",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Processing"
  ],
  "info_url": "https://jujucharms.com/apache-zeppelin",
  "package_url": "https://api.jujucharms.com/v5/trusty/apache-zeppelin-7/archive",
  "created": "2016-05-25T17:54:01.298Z",
  "updated": "2016-05-25T17:54:01.298Z",
  "description": "A web-based notebook that enables interactive data analytics.\n\nApache Zeppelin is a web-based notebook that enables interactive data\nanalytics. You can make beautiful data-driven, interactive, and collaborative\ndocuments with SQL, Scala and more.\n",
  "maintainer": {
    "name": "bigdata-charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "trusty",
  "juju_charm_owner": "bigdata-charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= trusty"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/spark",
      "self_resolve": true,
      "juju_interface": "spark",
      "juju_name": "spark",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "resources_mirror": {
      "type": "string",
      "description": "URL from which to fetch resources (e.g., Hadoop binaries) instead of Launchpad.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "license": "## Overview\n\nApache Zeppelin is a web-based notebook that enables interactive data analytics.\nYou can make beautiful data-driven, interactive, and collaborative documents\nwith SQL, Scala and more.\n\nAs a Multi-purpose Notebook, Apache Zeppelin is the place for interactive:\n\n * Data Ingestion\n * Data Discovery\n * Data Analytics\n * Data Visualization & Collaboration\n\n\n## Usage\n\nThis is a subordinate charm that requires the `apache-spark` interface. This\nmeans that you will need to deploy a base Apache Spark cluster to use\nZeppelin. An easy way to deploy the recommended environment is to use the\n[apache-hadoop-spark-zeppelin](https://jujucharms.com/apache-hadoop-spark-zeppelin)\nbundle. This will deploy the Apache Hadoop platform with an Apache Spark +\nZeppelin unit that communicates with the cluster by relating to the\n`apache-hadoop-plugin` subordinate charm:\n\n    juju-quickstart apache-hadoop-spark-zeppelin\n\nOnce deployment is complete, expose Zeppelin:\n\n    juju expose zeppelin\n\nYou may now access the web interface at\nhttp://{spark_unit_ip_address}:9090. The ip address can be found by running\n`juju status spark | grep public-address`.\n\n\n## Verify the deployment\n\n### Status and Smoke Test\n\nThe services provide extended status reporting to indicate when they are ready:\n\n    juju status --format=tabular\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status --format=tabular\n\nThe message for each unit will provide information about that unit's state.\nOnce they all indicate that they are ready, you can perform a \"smoke test\"\nto verify that Zeppelin is working as expected using the built-in `smoke-test`\naction:\n\n    juju action do zeppelin/0 smoke-test\n\nAfter a few seconds or so, you can check the results of the smoke test:\n\n    juju action status\n\nYou will see `status: completed` if the smoke test was successful, or\n`status: failed` if it was not.  You can get more information on why it failed\nvia:\n\n    juju action fetch <action-id>\n\n\n## Limitations\n\n### Spark Interpreter Settings\n\nZeppelin Spark interpreter configuration is set according to environment\nvariable values at deploy time. If you alter these variables post\ndeployment (e.g., `juju set spark spark_execution_mode=NEW_VALUE`), you will\nneed to edit Zeppelin's Spark interpreter to match the new value. Do this on\nthe `Interpreter` tab of the Zeppelin web interface.\n\n * Affected Spark Interpreter configuration includes:\n\n   * master\n   * spark.executor.memory\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Help\n\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme": "## Overview\n\nApache Zeppelin is a web-based notebook that enables interactive data analytics.\nYou can make beautiful data-driven, interactive, and collaborative documents\nwith SQL, Scala and more.\n\nAs a Multi-purpose Notebook, Apache Zeppelin is the place for interactive:\n\n * Data Ingestion\n * Data Discovery\n * Data Analytics\n * Data Visualization & Collaboration\n\n\n## Usage\n\nThis is a subordinate charm that requires the `apache-spark` interface. This\nmeans that you will need to deploy a base Apache Spark cluster to use\nZeppelin. An easy way to deploy the recommended environment is to use the\n[apache-hadoop-spark-zeppelin](https://jujucharms.com/apache-hadoop-spark-zeppelin)\nbundle. This will deploy the Apache Hadoop platform with an Apache Spark +\nZeppelin unit that communicates with the cluster by relating to the\n`apache-hadoop-plugin` subordinate charm:\n\n    juju-quickstart apache-hadoop-spark-zeppelin\n\nOnce deployment is complete, expose Zeppelin:\n\n    juju expose zeppelin\n\nYou may now access the web interface at\nhttp://{spark_unit_ip_address}:9090. The ip address can be found by running\n`juju status spark | grep public-address`.\n\n\n## Verify the deployment\n\n### Status and Smoke Test\n\nThe services provide extended status reporting to indicate when they are ready:\n\n    juju status --format=tabular\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status --format=tabular\n\nThe message for each unit will provide information about that unit's state.\nOnce they all indicate that they are ready, you can perform a \"smoke test\"\nto verify that Zeppelin is working as expected using the built-in `smoke-test`\naction:\n\n    juju action do zeppelin/0 smoke-test\n\nAfter a few seconds or so, you can check the results of the smoke test:\n\n    juju action status\n\nYou will see `status: completed` if the smoke test was successful, or\n`status: failed` if it was not.  You can get more information on why it failed\nvia:\n\n    juju action fetch <action-id>\n\n\n## Limitations\n\n### Spark Interpreter Settings\n\nZeppelin Spark interpreter configuration is set according to environment\nvariable values at deploy time. If you alter these variables post\ndeployment (e.g., `juju set spark spark_execution_mode=NEW_VALUE`), you will\nneed to edit Zeppelin's Spark interpreter to match the new value. Do this on\nthe `Interpreter` tab of the Zeppelin web interface.\n\n * Affected Spark Interpreter configuration includes:\n\n   * master\n   * spark.executor.memory\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Help\n\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}