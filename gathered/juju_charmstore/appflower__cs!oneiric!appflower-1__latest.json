{
  "name": "appflower Juju charm",
  "juju_charm_name": "appflower",
  "revision": "cs:oneiric/appflower-1",
  "latest": true,
  "uris": [
    "https://jujucharms.com/appflower",
    "https://jujucharms.com/appflower/oneiric",
    "https://jujucharms.com/appflower/oneiric/1",
    "https://api.jujucharms.com/v5/appflower",
    "https://api.jujucharms.com/v5/oneiric/appflower",
    "https://api.jujucharms.com/v5/oneiric/appflower-1"
  ],
  "labels": [
    "Juju charm",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API/Toolkit",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/IDE/Web-based",
    "Type/Devopsware/Build",
    "Type/Devopsware/Integration",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Runtime/PHP"
  ],
  "info_url": "https://jujucharms.com/appflower",
  "package_url": "https://api.jujucharms.com/v5/oneiric/appflower-1/archive",
  "created": "2015-06-17T09:37:47.036Z",
  "updated": "2015-06-17T09:37:47.036Z",
  "description": "AppFlower is a Web-based Rapid Application Builder\n\nAppFlower is an open source application builder for use in building web-based applications. AppFlower provides a visual designer (Studio) to develop applications without prior knowledge of programming, using drag and drop and no coding. Advanced users can create more complex applications.\n\n- Enterprise-level application builder\n- Web-based Visual Designer (IDE)\n- Widget, Layout and Theme builder\n- No coding philosophy\n- Native REST integration for all Widgets\n- Modern web 2.0 user-interface with Sencha\n- RAD for web 2.0\n- Open-source and Extendable (based on Symfony & Sencha)\n- Integrated Debugging and Benchmarker utilities\n- Large community-base with plugins from both AppFlower, Sencha, Symfony (and 3rd party php frameworks like Zend).\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "oneiric",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= oneiric"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql",
      "self_resolve": true,
      "juju_interface": "mysql",
      "juju_name": "db",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "project": {
      "type": "string",
      "description": "The name of the project",
      "default": "appflower",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "0. INTRODUCTION\n###############################################################################\n\nAppFlower is an open source application builder for use in building web-based \napplications. AppFlower provides a visual designer (Studio) to develop \napplications without prior knowledge of programming, using drag and drop and \nno coding. Advanced users can create more complex applications.\n\n - Author: Jimmi Andersen <ja@appflower.com>\n - Latest Modified: 23/Marts - 2012\n - License: MIT\n\n1. TODO\n###############################################################################\nWork in-progress to add improved support for\n\n - charm upgrade\n - integration with load-balancers, reverse-proxy and memcached for php-session\n - Extend support for other aws services\n\n1. REQUIREMENTS\n###############################################################################\nAppFlower requires a Database to be fully running, and could be clued together\nwith other services like haproxy, or varnish for improved performance and \nfailover.\n\n \n2. GETTING STARTED DEPLOYING APPFLOWER\n###############################################################################\n\nBootstrap your juju environment\n\n    juju bootstrap\n\nDeploy MySQL and AppFlower\n    \n    juju deploy appflower\n    juju deploy mysql\n\nAdd a relation between AppFlower and the Database\n\n    juju add-relation appflower mysql\n\nExpose the service\n\n    juju expose appflower\n\nYour new project can now be accessed at http://<ec2-dns-address>/, this can be\nfound while running \"juju status\", and look under the appflower service.\n\nIf you want to spin up a reverse proxy in front..\n\nDeploy a varnish (reverse-proxy) instance\n\n    juju deploy varnish\n\nConnect varnish and appflower\n\n    juju add-relation varnish appflower\n\n4. THE END\n###############################################################################\nIf you want to terminate ALL your instances, just run:\n\n    juju destroy-environment \n",
  "readme": "0. INTRODUCTION\n###############################################################################\n\nAppFlower is an open source application builder for use in building web-based \napplications. AppFlower provides a visual designer (Studio) to develop \napplications without prior knowledge of programming, using drag and drop and \nno coding. Advanced users can create more complex applications.\n\n - Author: Jimmi Andersen <ja@appflower.com>\n - Latest Modified: 23/Marts - 2012\n - License: MIT\n\n1. TODO\n###############################################################################\nWork in-progress to add improved support for\n\n - charm upgrade\n - integration with load-balancers, reverse-proxy and memcached for php-session\n - Extend support for other aws services\n\n1. REQUIREMENTS\n###############################################################################\nAppFlower requires a Database to be fully running, and could be clued together\nwith other services like haproxy, or varnish for improved performance and \nfailover.\n\n \n2. GETTING STARTED DEPLOYING APPFLOWER\n###############################################################################\n\nBootstrap your juju environment\n\n    juju bootstrap\n\nDeploy MySQL and AppFlower\n    \n    juju deploy appflower\n    juju deploy mysql\n\nAdd a relation between AppFlower and the Database\n\n    juju add-relation appflower mysql\n\nExpose the service\n\n    juju expose appflower\n\nYour new project can now be accessed at http://<ec2-dns-address>/, this can be\nfound while running \"juju status\", and look under the appflower service.\n\nIf you want to spin up a reverse proxy in front..\n\nDeploy a varnish (reverse-proxy) instance\n\n    juju deploy varnish\n\nConnect varnish and appflower\n\n    juju add-relation varnish appflower\n\n4. THE END\n###############################################################################\nIf you want to terminate ALL your instances, just run:\n\n    juju destroy-environment \n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}