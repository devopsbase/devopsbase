{
  "name": "mailman Juju charm",
  "juju_charm_name": "mailman",
  "revision": "cs:precise/mailman-1",
  "latest": true,
  "uris": [
    "https://jujucharms.com/mailman",
    "https://jujucharms.com/mailman/precise",
    "https://jujucharms.com/mailman/precise/1",
    "https://api.jujucharms.com/v5/mailman",
    "https://api.jujucharms.com/v5/precise/mailman",
    "https://api.jujucharms.com/v5/precise/mailman-1"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/IDE/Web-based",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Email"
  ],
  "info_url": "https://jujucharms.com/mailman",
  "package_url": "https://api.jujucharms.com/v5/precise/mailman-1/archive",
  "created": "2015-06-17T09:36:11.672Z",
  "updated": "2015-06-17T09:36:11.672Z",
  "description": "Powerful, web-based mailing list manager\n\nThe GNU Mailing List Manager, which manages email discussion lists much\nlike Majordomo and Smartmail. Unlike most similar products, Mailman\ngives each mailing list a web page, and allows users to subscribe,\nunsubscribe, etc. over the web.  Even the list manager can administer\nhis or her list entirely from the web.  Mailman also integrates most\nthings people want to do with mailing lists, including archiving, mail\n<-> news gateways, and so on.  It has all of the features you expect\nfrom such a product, plus integrated support for the web (including\nweb based archiving), automated bounce handling and integrated spam\nprevention.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "cacert": {
      "type": "string",
      "description": "This is the cacert.pem file you generated. Should go as `cat ~/cacert.pem`",
      "default": "",
      "mapping": "charm_option"
    },
    "cakey": {
      "type": "string",
      "description": "This is the cakey.pem file you generated. Should go as `cat ~/cakey.pem`",
      "default": "",
      "mapping": "charm_option"
    },
    "domain": {
      "type": "string",
      "description": "Your domain (what goes after the @)",
      "default": "example.com",
      "mapping": "charm_option"
    },
    "password": {
      "type": "string",
      "description": "Password for the create page",
      "default": "",
      "mapping": "charm_option"
    },
    "rootuser": {
      "type": "string",
      "description": "The root username",
      "default": "root",
      "mapping": "charm_option"
    },
    "ssl-cert": {
      "type": "string",
      "description": "This is the SSL Certificate address on your system. Should go as `cat ~/smtpd.crt`",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl-key": {
      "type": "string",
      "description": "This is the SSL Key address on your system. Should go as `cat ~/smtpd.key`",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\nThe GNU Mailing List Manager, which manages email discussion lists much like\nMajordomo and Smartmail. Unlike most similar products, Mailman gives each\nmailing list a web page, and allows users to subscribe, unsubscribe, etc. over\nthe web. Even the list manager can administer his or her list entirely from the\nweb. Mailman also integrates most things people want to do with mailing lists,\nincluding archiving, mail <-> news gateways, and so on.  It has all of the\nfeatures you expect from such a product, plus integrated support for the web\n(including web based archiving), automated bounce handling and integrated spam\nprevention.\n\n\n# Usage\n\nTo use this charm, you need to edit your config.yaml file, to make sure you put\nthe proper domain. After that, you can now proceed to deploy mailman by running:\n\n    juju deploy mailman\n\nOnce that has been done, mailman will be fully working, and you can access it by\ngoing to the public address stated when you run:\n\n    juju status\n\nI should remind you that the public address is the one for the mailman machine.\n\nIn order to find a list of mailing lists created, you can go to\nhttp://yourdoma.in/cgi-bin/mailman/listinfo.\n\nThe administrative interface of the site can be found at\nhttp://yourdoma.in/cgi-bin/mailman/admin\n\nIn order to create a new mailing list, go to\nhttp://yourdoma.in/cgi-bin/mailman/create. The last field in the form will be a\npassword: this password is the one you will be setting with the `password`\nconfiguration option.\n\n# Configuration\n\nAs this charms deploys postfix and Mailman in one single box, the configuration\nvariables for postfix also need to be set. For postfix you have the following\nconfiguration variables:\n\n`domain`: This is the domain you will be using for the server (what, in the\nemail address, goes after the @). It is example.com by default, so don't be\nsurprised if Mailman initially displays example.com as the host for the mailing\nlists - it can be changed and all settings will change accordingly.\n\n`rootuser`: The root username (it is usually root or ubuntu). Usually, doesn't\nneed to be touched.\n\n`ssl-key`: The SSL key on your system, which should be stated as `cat\n~/smtpd.key`\n\n`ssl-cert`: The SSL certificate on your system, which should be stated as `cat\n~/smtpd.crt`\n\n`cacert`: The cacert.pem file you generated on your system, which should be\nstated as `cat ~/cacert.pem`\n\n`cakey`: The cakey.pem file you generated on your system, which should be\nstated as `cat ~/cakey.pem`\n\n**password**: This is the most important configuration variable. Without this\none being set, the charm will refuse to configure. This password will be the\nmaster password for the site.\n\nIn order to set any of this configuration options, execute:\n\n    juju set mailman [option]=[value]\n\n## Known limitations and issues\n\nPlease, note that the charm will refuse to deploy in case a password has not\nbeen supplied by the user. (Yep, I want to make sure you set a password!)\n\n## Adding TLS/SSL support\n\nThis charm has Transport Socket Layer (TLS) and Secure Socket Layer (SSL)\nsupport for the postfix part. Even though this option is not necessary, it is\nhighly recommended. To add TLS/SSL support to postfix, just trigger the add-ssl\nhook. For this script to work you will have to follow the instructions below for\ngenerating keys/certificates (in case you do not have them yet) and placing them\nin the correct directories.\n\n## Generating the keys and certificates\n\nIn case you want to add TLS/SSL to this charm you will need to use keys and SSL\ncertificates. If you already have those done, please skip to the bottom of this\nstep, otherwise please follow this instructions.\n\nTo generate self-signed certificates, you need to issue the following commands\non a Terminal:\n\n    touch smtpd.key\n    chmod 600 smtpd.key\n    openssl genrsa 1024 > smtpd.key\n    openssl req -new -key smtpd.key -x509 -days 3650 -out smtpd.crt\n    openssl req -new -x509 -extensions v3_ca -keyout cakey.pem -out cacert.pem -days 3650\n\nPlease, note that the third and fourth commands have prompts you have to fill\nin with the correct information.\n\nOnce you have generated the certificates, you can go ahead and execute the\nfollowing command:\n\n    juju set mailman ssl-key=\"`cat smtpd.key`\" ssl-cert=\"`cat smtpd.crt`\" cacert=\"`cat cacert.pem`\" cakey=\"`cakey.pem`\"\n\n\n## Renewing the keys and certificates\n\nThe renewal of keys and SSL certificates can be done in the same way that you\nadded SSL support. Just re-run the following command, specifying the new\ncertificates and keys locations instead of the old ones:\n\n    juju set mailman ssl-key=\"`cat smtpd.key`\" ssl-cert=\"`cat smtpd.crt`\" cacert=\"`cat cacert.pem`\" cakey=\"`cakey.pem`\"\n\nOnce you do that, your keys and SSL certificates should be updated.\n\n\n# Contact Information\n\nAuthor: Jos√© Antonio Rey <jose@ubuntu.com>  \nReport bugs at: http://bugs.launchpad.net/charms  \nLocation: http://jujucharms.com   \n",
  "readme": "# Overview\n\nThe GNU Mailing List Manager, which manages email discussion lists much like\nMajordomo and Smartmail. Unlike most similar products, Mailman gives each\nmailing list a web page, and allows users to subscribe, unsubscribe, etc. over\nthe web. Even the list manager can administer his or her list entirely from the\nweb. Mailman also integrates most things people want to do with mailing lists,\nincluding archiving, mail <-> news gateways, and so on.  It has all of the\nfeatures you expect from such a product, plus integrated support for the web\n(including web based archiving), automated bounce handling and integrated spam\nprevention.\n\n\n# Usage\n\nTo use this charm, you need to edit your config.yaml file, to make sure you put\nthe proper domain. After that, you can now proceed to deploy mailman by running:\n\n    juju deploy mailman\n\nOnce that has been done, mailman will be fully working, and you can access it by\ngoing to the public address stated when you run:\n\n    juju status\n\nI should remind you that the public address is the one for the mailman machine.\n\nIn order to find a list of mailing lists created, you can go to\nhttp://yourdoma.in/cgi-bin/mailman/listinfo.\n\nThe administrative interface of the site can be found at\nhttp://yourdoma.in/cgi-bin/mailman/admin\n\nIn order to create a new mailing list, go to\nhttp://yourdoma.in/cgi-bin/mailman/create. The last field in the form will be a\npassword: this password is the one you will be setting with the `password`\nconfiguration option.\n\n# Configuration\n\nAs this charms deploys postfix and Mailman in one single box, the configuration\nvariables for postfix also need to be set. For postfix you have the following\nconfiguration variables:\n\n`domain`: This is the domain you will be using for the server (what, in the\nemail address, goes after the @). It is example.com by default, so don't be\nsurprised if Mailman initially displays example.com as the host for the mailing\nlists - it can be changed and all settings will change accordingly.\n\n`rootuser`: The root username (it is usually root or ubuntu). Usually, doesn't\nneed to be touched.\n\n`ssl-key`: The SSL key on your system, which should be stated as `cat\n~/smtpd.key`\n\n`ssl-cert`: The SSL certificate on your system, which should be stated as `cat\n~/smtpd.crt`\n\n`cacert`: The cacert.pem file you generated on your system, which should be\nstated as `cat ~/cacert.pem`\n\n`cakey`: The cakey.pem file you generated on your system, which should be\nstated as `cat ~/cakey.pem`\n\n**password**: This is the most important configuration variable. Without this\none being set, the charm will refuse to configure. This password will be the\nmaster password for the site.\n\nIn order to set any of this configuration options, execute:\n\n    juju set mailman [option]=[value]\n\n## Known limitations and issues\n\nPlease, note that the charm will refuse to deploy in case a password has not\nbeen supplied by the user. (Yep, I want to make sure you set a password!)\n\n## Adding TLS/SSL support\n\nThis charm has Transport Socket Layer (TLS) and Secure Socket Layer (SSL)\nsupport for the postfix part. Even though this option is not necessary, it is\nhighly recommended. To add TLS/SSL support to postfix, just trigger the add-ssl\nhook. For this script to work you will have to follow the instructions below for\ngenerating keys/certificates (in case you do not have them yet) and placing them\nin the correct directories.\n\n## Generating the keys and certificates\n\nIn case you want to add TLS/SSL to this charm you will need to use keys and SSL\ncertificates. If you already have those done, please skip to the bottom of this\nstep, otherwise please follow this instructions.\n\nTo generate self-signed certificates, you need to issue the following commands\non a Terminal:\n\n    touch smtpd.key\n    chmod 600 smtpd.key\n    openssl genrsa 1024 > smtpd.key\n    openssl req -new -key smtpd.key -x509 -days 3650 -out smtpd.crt\n    openssl req -new -x509 -extensions v3_ca -keyout cakey.pem -out cacert.pem -days 3650\n\nPlease, note that the third and fourth commands have prompts you have to fill\nin with the correct information.\n\nOnce you have generated the certificates, you can go ahead and execute the\nfollowing command:\n\n    juju set mailman ssl-key=\"`cat smtpd.key`\" ssl-cert=\"`cat smtpd.crt`\" cacert=\"`cat cacert.pem`\" cakey=\"`cakey.pem`\"\n\n\n## Renewing the keys and certificates\n\nThe renewal of keys and SSL certificates can be done in the same way that you\nadded SSL support. Just re-run the following command, specifying the new\ncertificates and keys locations instead of the old ones:\n\n    juju set mailman ssl-key=\"`cat smtpd.key`\" ssl-cert=\"`cat smtpd.crt`\" cacert=\"`cat cacert.pem`\" cakey=\"`cakey.pem`\"\n\nOnce you do that, your keys and SSL certificates should be updated.\n\n\n# Contact Information\n\nAuthor: Jos√© Antonio Rey <jose@ubuntu.com>  \nReport bugs at: http://bugs.launchpad.net/charms  \nLocation: http://jujucharms.com   \n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}