{
  "name": "python-django Juju charm",
  "juju_charm_name": "python-django",
  "revision": "cs:precise/python-django-19",
  "latest": true,
  "uris": [
    "https://jujucharms.com/python-django",
    "https://jujucharms.com/python-django/precise",
    "https://jujucharms.com/python-django/precise/19",
    "https://api.jujucharms.com/v5/python-django",
    "https://api.jujucharms.com/v5/precise/python-django",
    "https://api.jujucharms.com/v5/precise/python-django-19"
  ],
  "labels": [
    "Juju charm",
    "databases",
    "app-servers",
    "Type/Middleware/Runtime/Python",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API/Toolkit",
    "Type/Devopsware/Version Control",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Data Store"
  ],
  "info_url": "https://jujucharms.com/python-django",
  "package_url": "https://api.jujucharms.com/v5/precise/python-django-19/archive",
  "created": "2015-06-17T09:35:04.137Z",
  "updated": "2015-06-17T09:35:04.137Z",
  "description": "High-level Python web development framework\n\nThis charm will install Django. It can also install your Django\nproject and his dependencies from either a template or from a\nversion control system.\nIt can also link your project to a database and sync the schemas.\nThis charm also come with a Fabric fabfile to interact with the\ndeployement in a cloud aware manner.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/rabbitmq",
      "self_resolve": true,
      "juju_interface": "rabbitmq",
      "juju_name": "amqp",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/memcache",
      "self_resolve": true,
      "juju_interface": "memcache",
      "juju_name": "cache",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mongodb",
      "self_resolve": true,
      "juju_interface": "mongodb",
      "juju_name": "mongodb",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql",
      "self_resolve": true,
      "juju_interface": "mysql",
      "juju_name": "mysql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql-root",
      "self_resolve": true,
      "juju_interface": "mysql-root",
      "juju_name": "mysql-root",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql-shared",
      "self_resolve": true,
      "juju_interface": "mysql-shared",
      "juju_name": "mysql-shared",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/pgsql",
      "self_resolve": true,
      "juju_interface": "pgsql",
      "juju_name": "pgsql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/redis",
      "self_resolve": true,
      "juju_interface": "redis",
      "juju_name": "redis",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "additional_distro_packages": {
      "type": "string",
      "description": "Comma separated extra packages to install.\n",
      "default": "python-imaging,python-docutils,python-tz",
      "mapping": "charm_option"
    },
    "additional_pip_packages": {
      "type": "string",
      "description": "Comma separated extra packages to install.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "application_path": {
      "type": "string",
      "description": "The relative path to install_root where the manage.py\nscript is located.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "celery_always_eager": {
      "type": "string",
      "description": "If True, all tasks will be executed locally by blocking until the task returns.",
      "default": "False",
      "mapping": "charm_option"
    },
    "celery_amqp_vhost": {
      "type": "string",
      "description": "Set a specific vhost for amqp relation. By default it's the unit_name.",
      "default": "",
      "mapping": "charm_option"
    },
    "django_allowed_hosts": {
      "type": "string",
      "description": "A space separated list for settings.ALLOWED_HOSTS in django. Default\nvalue will be the hostname, fully-qualified name, and public IP.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "django_debug": {
      "type": "boolean",
      "description": "Enable disable settings.DEBUG for django\n",
      "default": false,
      "mapping": "charm_option"
    },
    "django_extra_settings": {
      "type": "string",
      "description": "Allows setting up extra settings.* values for Django. Acceptable\nvalues are limited to comma delimited key-value pairs like:\n  SETTING_X=foo, SETTING_Y=bar\n",
      "default": "",
      "mapping": "charm_option"
    },
    "django_settings": {
      "type": "string",
      "description": "The Python path to your Django settings module.\nLeave it empty if your settings file is at the root of your repos.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "django_south": {
      "type": "boolean",
      "description": "Enable the use of south migrations\n",
      "default": false,
      "mapping": "charm_option"
    },
    "django_south_version": {
      "type": "string",
      "description": "Version or origin from which to install.  May be one of the following:\ndistro (default), ppa:somecustom/ppa, a deb url sources entry or\na valid pip line like 'South' or 'South==0.8.4' or a reposiroty url (without the -e).\nLeaving it empty if you don't want the charm to install South.\n",
      "default": "distro",
      "mapping": "charm_option"
    },
    "django_version": {
      "type": "string",
      "description": "Version or origin from which to install.  May be one of the following:\ndistro (default), ppa:somecustom/ppa, a deb url sources entry or\na valid pip line like 'Django' or 'Django==1.5' or a reposiroty url (without the -e).\nLeaving it empty if you don't want the charm to install Django.\n",
      "default": "distro",
      "mapping": "charm_option"
    },
    "install_root": {
      "type": "string",
      "description": "The root directory to checkout to.",
      "default": "/srv/",
      "mapping": "charm_option"
    },
    "listen_ip": {
      "type": "string",
      "description": "IP adresses to listen on. By default we listen on all of them.",
      "default": "0.0.0.0",
      "mapping": "charm_option"
    },
    "pip_extra_args": {
      "type": "string",
      "description": "Extra arguments passed to pip.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Port the application will be listenning.",
      "default": 8080,
      "mapping": "charm_option"
    },
    "project_template_extension": {
      "type": "string",
      "description": "When Django copies the project template files, it also renders certain\nfiles through the template engine: the files whose extensions match the\n--extension option (py by default) and the files whose names are passed with\nthe --name option.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project_template_url": {
      "type": "string",
      "description": "If not repository url is found, the charm will create a new project. This\noption is the --template argument value for the startproject command\nto use a custom project template.\n\nDjango will also accept URLs (http, https, ftp) to compressed\narchives with the app template files, downloading and extracting them on the fly.\nFor more informations see:\n  https://docs.djangoproject.com/en/dev/ref/django-admin/#startproject-projectname-destination\n",
      "default": "",
      "mapping": "charm_option"
    },
    "python_path": {
      "type": "string",
      "description": "Set additionnals, colon separated, PYTHONPATH to the project.",
      "default": "",
      "mapping": "charm_option"
    },
    "repos_branch": {
      "type": "string",
      "description": "The repo branch to pull out from. If empty, it will pull out the\ndefault branch or trunk (such as origin/master with git).\nNote that this setting only applies to git. This option is not\nsupported for hg. For svn and bzr, specify the branch name as\npart of the URL.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "repos_password": {
      "type": "string",
      "description": "The vcs password.\nNote: *Subversion only* settings. For other vcs use the repos_url for auth.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "repos_url": {
      "type": "string",
      "description": "The vcs url to checkout.",
      "default": "",
      "mapping": "charm_option"
    },
    "repos_username": {
      "type": "string",
      "description": "The vcs user name.\nNote: *Subversion only* settings. For other vcs use the repos_url for auth.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "requirements_apt_files": {
      "type": "string",
      "description": "Comma separated relative paths to requirement files. Note that the charm\nwon't manually upgrade packages defined in this file.\nLeave the variable to an empty string if you don't want the feature.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "requirements_pip_files": {
      "type": "string",
      "description": "Comma separated relative paths or urls to a requirement files. Note that the charm\nwon't manually upgrade packages defined in this file.\nLeave the variable to an empty string if you don't want the feature.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "settings_amqp_name": {
      "type": "string",
      "description": "The place where the amqp configuration will be appended or written.\n",
      "default": "60-amqp.py",
      "mapping": "charm_option"
    },
    "settings_database_name": {
      "type": "string",
      "description": "The place where the database configuration will be appended or written.\nSet the variable to an empty string if you don't want the feature.\n",
      "default": "60-%(engine_name)s.py",
      "mapping": "charm_option"
    },
    "settings_dir_name": {
      "type": "string",
      "description": "The name of the directory where generated settings will be written.\nSet the variable to an empty string if you don't want the feature.\n",
      "default": "juju_settings",
      "mapping": "charm_option"
    },
    "settings_injection_path": {
      "type": "string",
      "description": "The place where the code injection path will be append.\nThis is relative to the settings_dir_name path define earlier.\n",
      "default": "settings.py",
      "mapping": "charm_option"
    },
    "settings_secret_key_name": {
      "type": "string",
      "description": "The place where the secret key configuration will be appended or written.\nSet the variable to an empty string if you don't want the feature.\n",
      "default": "60-secret.py",
      "mapping": "charm_option"
    },
    "site_secret_key": {
      "type": "string",
      "description": "The web site secret key. Leave empty will generate one.\nNOTE: You **NEED** to set this in a multi-units architecture or you will\nhave some trouble.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "urls_dir_name": {
      "type": "string",
      "description": "The name of the directory where generated url will be written.\nSet the variable to an empty string if you don't want the feature.\n",
      "default": "juju_urls",
      "mapping": "charm_option"
    },
    "urls_injection_path": {
      "type": "string",
      "description": "The place where the code injection path will be append.\nThis is relative to the urls_dir_name path define earlier.\n",
      "default": "urls.py",
      "mapping": "charm_option"
    },
    "vcs": {
      "type": "string",
      "description": "The vcs software to use. Only hg, git, bzr, and svn are currently supported.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_access_logfile": {
      "type": "string",
      "description": "The Access log file to write to.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_access_logformat": {
      "type": "string",
      "description": "The Access log format. Don't forget to escape all quotes and round brackets.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_backlog": {
      "type": "int",
      "description": "The maximum number of pending connections.",
      "default": 2048,
      "mapping": "charm_option"
    },
    "wsgi_extra": {
      "type": "string",
      "description": "Space separated extra settings. For example: --debug",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_group": {
      "type": "string",
      "description": "Switch worker process to run as this group. A valid group id (as an int) or the name.",
      "default": "www-data",
      "mapping": "charm_option"
    },
    "wsgi_keep_alive": {
      "type": "int",
      "description": "Keep alive time in seconds.",
      "default": 2,
      "mapping": "charm_option"
    },
    "wsgi_log_file": {
      "type": "string",
      "description": "The log file to write to. If empty the logs would be handle by upstart.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_log_level": {
      "type": "string",
      "description": "The granularity of Error log outputs.",
      "default": "info",
      "mapping": "charm_option"
    },
    "wsgi_max_requests": {
      "type": "int",
      "description": "The maximum number of requests a worker will process before restarting.",
      "default": 0,
      "mapping": "charm_option"
    },
    "wsgi_timeout": {
      "type": "int",
      "description": "Timeout of a request in seconds.",
      "default": 30,
      "mapping": "charm_option"
    },
    "wsgi_timestamp": {
      "type": "string",
      "description": "The variable to modify to trigger reloads.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_umask": {
      "type": "string",
      "description": "A bit mask for the file mode on files written.",
      "default": "0002",
      "mapping": "charm_option"
    },
    "wsgi_user": {
      "type": "string",
      "description": "Switch worker processes to run as this user. User id (as an int) or the name.",
      "default": "www-data",
      "mapping": "charm_option"
    },
    "wsgi_worker_class": {
      "type": "string",
      "description": "Socket protocol. Can be: http (default), uwsgi, fastcgi or workers type. Can be: sync (default), eventlet, gevent, tornado",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_worker_connections": {
      "type": "int",
      "description": "The maximum number of simultaneous clients.",
      "default": 128,
      "mapping": "charm_option"
    },
    "wsgi_workers": {
      "type": "int",
      "description": "The number of worker process for handling requests. 0 for count(cpu) + 1",
      "default": 0,
      "mapping": "charm_option"
    },
    "wsgi_wsgi_file": {
      "type": "string",
      "description": "The name of the WSGI application.",
      "default": "wsgi",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/directory-path",
      "juju_interface": "directory-path",
      "juju_name": "django-settings",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/wsgi",
      "juju_interface": "wsgi",
      "juju_name": "wsgi",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Python-django Charm\n\nAuthors:\n\n- Patrick Hetu <patrick.hetu@gmail.com>\n- Bruno Girin\n\n## What is Django?\n\nDjango is a high-level web application framework that loosely follows\nthe model-view-controller (MVC) design pattern.  Python's equivalent to\nRuby on Rails, Django lets you build complex data-driven websites quickly\nand easily - Django focuses on automating as much as possible and\nadhering to the \"Don't Repeat Yourself\" (DRY) principle.  Django\nadditionally emphasizes reusability and \"pluggability\" of components;\nmany generic third-party \"applications\" are available to enhance\nprojects or to simply reduce development time even further.\n\nNotable features include:\n\n- An object-relational mapper (ORM)\n- Automatic admin interface\n- Elegant URL dispatcher\n- Form serialization and validation system\n- Templating system\n- Lightweight, standalone web server for development and testing\n- Internationalization support\n- Testing framework and client\n\n## The charm\n\nThis charm will install Django. It can also install your Django\nproject and its dependencies from either a template or from a\nversion control system.\n\nIt can also link your project to a database and sync the schemas.\nThis charm also comes with a Fabric fabfile to interact with the\ndeployment in a cloud-aware manner.\n\n## Quick start\n\nSimply:\n    \n    juju bootstrap\n    juju deploy python-django\n\n    juju deploy postgresql\n    juju add-relation python-django postgresql:db\n\n    juju deploy gunicorn\n    juju add-relation python-django gunicorn\n    juju expose python-django\n\nIn a couple of minutes, your new (vanilla) Django site should be ready at\nthe public address of gunicorn. You can find it in the output of the\n`juju status` command.\n\nThis is roughtly equivalent to the [Creating a project](https://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-a-project)\nstep in Django's tutorial.\n\n### Example: Deploying using a site template\n\n1. Setup your Django specific parameters in mydjangosite.yaml like this one:\n\n        mydjangosite:\n            project_template_url: https://github.com/xenith/django-base-template/zipball/master\n            project_template_extension: py,md,rst\n\n1. Deployment with `Gunicorn`:\n\n        juju bootstrap\n        juju deploy --config mydjangosite.yaml mydjangosite\n\n        juju deploy postgresql\n        juju add-relation mydjangosite postgresql:db\n\n        juju deploy gunicorn\n        juju add-relation mydjangosite gunicorn\n        juju expose mydjangosite\n\n\n### Example: Deploying using a code repository\n\n1. Setup your Django specific parameters in mydjangosite.yaml like this one:\n\n        mydjangosite:\n            vcs: bzr\n            repos_url: lp:~patrick-hetu/my_site\n\n1. Deployment with `Gunicorn`:\n\n        juju bootstrap\n        juju deploy --config mydjangosite.yaml python-django mydjangosite\n\n        juju deploy postgresql\n        juju add-relation mydjangosite postgresql:db\n\n        juju deploy gunicorn\n        juju add-relation mydjangosite gunicorn\n        juju expose mydjangosite\n\n1. Your new Django site should be accessible at the public address of\n   Gunicorn. To find it, look for it in the output of the `juju status` command.  \n\n## Project layout and code injection\n\nContinuing from the previous example, your web site should be on the Django node at:\n\n    /srv/mydjangosite/\n\nAs you can see there the charm has injected some code at the end of your settings.py\nfile (or created it if it was not there) to be able to import what's in the\n`juju_settings/` directory.\n\nIt's recommended that you make your vcs ignore database and secret files or\nany files that have information that you don't want to publish.\n\n## Complex configuration example: dpaste\n\n    mydpastesite:\n      django_version: ''\n      django_south: True\n      django_south_version: ''\n      vcs: 'git'\n      repos_url: 'https://github.com/bartTC/dpaste.git'\n      repos_branch: '2.6'\n      application_path: 'dpaste'\n      django_settings: 'dpaste.settings'\n      settings_injection_path: 'settings/__init__.py'\n      urls_injection_path: 'urls/__init__.py'\n      requirements_pip_files: 'requirements.txt'\n      additional_distro_packages: \"python-imaging,python-tz,python-dev,build-essential,libpq-dev,libmysqlclient-dev,libxml2-dev,libxslt1-dev\"\n\n\n## Upgrade the charm\n\nThis charm allow you to upgrade your deployment using Juju's `upgrade-charm`\ncommand. This command will:\n\n- upgrade Django\n- upgrade additional pip packages\n- upgrade additional Debian packages\n- upgrade using requirements files in your project\n\n## Management with Fabric\n\n[Fabric](http://docs.fabfile.org) is a Python (2.5 or higher) library and command-line tool for\nstreamlining the use of SSH for application deployment or system administration tasks.\n\nIt provides a basic suite of operations for executing\nlocal or remote shell commands (normally or via sudo) and uploading/downloading\nfiles, as well as auxiliary functionality such as prompting the running user\nfor input, or aborting execution.\n\nThis charm includes a Fabric script that use Juju's information to perform various\ntasks.\n\nFor a list of tasks type this command after bootstraping your Juju environment:\n\n    fab -l\n\nFor example, with a python-django service deployed you can run commands on all of its units:\n\n    fab -R python-django pull\n    [10.0.0.2] Executing task 'pull'\n    [10.0.0.2] run: bzr pull lp:~my_name/django_code/my_site\n    ...\n    [10.0.0.2] run: invoke-rc.d gunicorn restart\n    ...\n\nOr you can also run commands on a single unit:\n\n    fab -R python-django/0 manage:createsuperuser\n    ...\n    [10.0.0.2] out: Username (leave blank to use 'ubuntu'):\n\n\nLimitation:\n\n- You can only execute tasks for one role at a time.\n  But it can be a service or unit.\n\nIf you want to extend the fabfile check out [fabtools](http://fabtools.readthedocs.org/).\n\n## Ansible\n\nSee: https://github.com/cmars/juju-ansible\n\n## Security\n\nNote that if you're using a `requirement.txt` file the packages will\nbe downloaded with `pip` and it doesn't do any cryptographic\nverification of its downloads.\n\n## Writing application charm\n\nTo create an application subordinate charm that can be related to this charm you need\nto at least define an interface named `directory-path` in your `metadate.yaml` file\nlike this:\n\n    [...]\n    requires:\n      python-django:\n        interface: directory-path\n        scope: container\n        optional: true\n\nWhen you add a relation between your charm and the python-django charm,\nyou will be able to get those relation variables from the hook:\n\n- `settings_dir_path`\n- `urls_dir_path`\n- `django_admin_cmd`\n- `install_root`\n\nNow your charm will be informed about where it needs to add new settings\nand urls files and how to run additionnal Django commands. \nThe Django charm reloads Gunicorn after the relation to catch the changes.\n\n## Changelog\n\n### X: Not yet released\n\n- Python3 compatibility\n- Support for Django 1.7\n- Support for virtualenv\n- Tests\n- More vcs options\n- More pip options\n\n### 6: Notable changes:\n\n- The charm now use charm-helpers for hooks\n- The chams now use ansible for installation\n- Mysql and Redis and rabbitmq (celery) support was added\n- The charm can install South and do migrations\n- The charm include a Fabric and Ansible scripts to interact with Juju\n\nNote that I still need to think about the role of Fabric, Ansible, Salt, charm-helpers, etc\n\nConfiguration changes:\n\n- python_path now accept multiple path separated by commas\n- requirements_pip_files now also accept urls\n- requirements_pip_files and requirements_apt_files are empty by default\n- settings_secret_key_path was renamed settings_secret_key_name\n- settings_database_path was renamed settings_database_name\n\nNew options:\n\n- unit_config\n- settings_amqp_name\n- celery_always_eager\n- django_south\n- django_south_version\n- django_debug\n- django_allowed_host\n- django_extra_settings\n- settings_injection_path\n- url_injection_path\n- pip_extra_args\n\nBackwards incompatible changes:\n\n- Some default options changed so be sure to checkout your configuration files.\n- The use of Ansible change a bit how things are done now be sure to test.\n\n### 3: Notable changes:\n\n- Rewrite the charm using python instead of BASH scripts\n- Django projects now need no modification to work with the charm\n- Use the `django-admin startproject` command with configurable arguments if no repos is specified\n- Juju's generated settings and urls files are now added in a juju_settings and a juju_urls directories by default\n- New MongoDB relation (server side is yet to be done)\n- New upgrade hook that upgrade pip and debian packages\n- Expose ports is now handle by the charm\n\nConfiguration changes:\n\n- default user and group is now ubuntu\n- new install_root option\n- new django_version option\n- new additional_pip_packages option\n- new repos_branch,repos_username,repos_password options\n- new project_name, project_template_extension, project_template_url options\n- new urls_dir_name and settings_dir_name options\n- new project_template_url and project_template_extension options\n- database, uploads, static, secret and cache settings locations are now configurable\n- extra_deb_pkg was renamed additional_distro_packages\n- requirements was renamed requirements_pip_files and now support multiple files\n- if python_path is empty set as install_root\n    \nBackwards incompatible changes:\n\n- swift support was moved to a subordinate charm\n- postgresql relation hook was rename pgsql instead of db\n\n### 2: Notable changes:\n\n- You can configure all wsgi (Gunicorn) settings via the config.yaml file\n- Juju compatible Fabric fabfile.py is included for PAAS commands\n- Swift storage backend is now optional\n\nBackwards incompatible changes:\n\n- Use split settings and urls\n- Permissons are now based on WSGI's user and group instead of just being www-data\n- media and static files are now in new directories ./uploads and ./static/\n- Deprecated configuration variables: site_domain, site_username, site_password, site_admin_email\n\n\n### 1: Notable changes:\n\n- Initial release\n\n## Inspiration\n\n- http://www.deploydjango.com\n- http://lincolnloop.com/django-best-practices/\n- https://github.com/30loops/djangocms-on-30loops.git\n- https://github.com/openshift/django-example\n- http://lincolnloop.com/blog/2013/feb/15/django-settings-parity-youre-doing-it-wrong/\n- http://tech.yipit.com/2011/11/02/django-settings-what-to-do-about-settings-py/\n- http://www.rdegges.com/the-perfect-django-settings-file/\n- https://github.com/xenith/django-base-template.git\n- https://github.com/transifex/transifex/blob/devel/transifex/settings.py\n- http://peterlyons.com/problog/2010/02/environment-variables-considered-harmful\n",
  "readme": "# Python-django Charm\n\nAuthors:\n\n- Patrick Hetu <patrick.hetu@gmail.com>\n- Bruno Girin\n\n## What is Django?\n\nDjango is a high-level web application framework that loosely follows\nthe model-view-controller (MVC) design pattern.  Python's equivalent to\nRuby on Rails, Django lets you build complex data-driven websites quickly\nand easily - Django focuses on automating as much as possible and\nadhering to the \"Don't Repeat Yourself\" (DRY) principle.  Django\nadditionally emphasizes reusability and \"pluggability\" of components;\nmany generic third-party \"applications\" are available to enhance\nprojects or to simply reduce development time even further.\n\nNotable features include:\n\n- An object-relational mapper (ORM)\n- Automatic admin interface\n- Elegant URL dispatcher\n- Form serialization and validation system\n- Templating system\n- Lightweight, standalone web server for development and testing\n- Internationalization support\n- Testing framework and client\n\n## The charm\n\nThis charm will install Django. It can also install your Django\nproject and its dependencies from either a template or from a\nversion control system.\n\nIt can also link your project to a database and sync the schemas.\nThis charm also comes with a Fabric fabfile to interact with the\ndeployment in a cloud-aware manner.\n\n## Quick start\n\nSimply:\n    \n    juju bootstrap\n    juju deploy python-django\n\n    juju deploy postgresql\n    juju add-relation python-django postgresql:db\n\n    juju deploy gunicorn\n    juju add-relation python-django gunicorn\n    juju expose python-django\n\nIn a couple of minutes, your new (vanilla) Django site should be ready at\nthe public address of gunicorn. You can find it in the output of the\n`juju status` command.\n\nThis is roughtly equivalent to the [Creating a project](https://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-a-project)\nstep in Django's tutorial.\n\n### Example: Deploying using a site template\n\n1. Setup your Django specific parameters in mydjangosite.yaml like this one:\n\n        mydjangosite:\n            project_template_url: https://github.com/xenith/django-base-template/zipball/master\n            project_template_extension: py,md,rst\n\n1. Deployment with `Gunicorn`:\n\n        juju bootstrap\n        juju deploy --config mydjangosite.yaml mydjangosite\n\n        juju deploy postgresql\n        juju add-relation mydjangosite postgresql:db\n\n        juju deploy gunicorn\n        juju add-relation mydjangosite gunicorn\n        juju expose mydjangosite\n\n\n### Example: Deploying using a code repository\n\n1. Setup your Django specific parameters in mydjangosite.yaml like this one:\n\n        mydjangosite:\n            vcs: bzr\n            repos_url: lp:~patrick-hetu/my_site\n\n1. Deployment with `Gunicorn`:\n\n        juju bootstrap\n        juju deploy --config mydjangosite.yaml python-django mydjangosite\n\n        juju deploy postgresql\n        juju add-relation mydjangosite postgresql:db\n\n        juju deploy gunicorn\n        juju add-relation mydjangosite gunicorn\n        juju expose mydjangosite\n\n1. Your new Django site should be accessible at the public address of\n   Gunicorn. To find it, look for it in the output of the `juju status` command.  \n\n## Project layout and code injection\n\nContinuing from the previous example, your web site should be on the Django node at:\n\n    /srv/mydjangosite/\n\nAs you can see there the charm has injected some code at the end of your settings.py\nfile (or created it if it was not there) to be able to import what's in the\n`juju_settings/` directory.\n\nIt's recommended that you make your vcs ignore database and secret files or\nany files that have information that you don't want to publish.\n\n## Complex configuration example: dpaste\n\n    mydpastesite:\n      django_version: ''\n      django_south: True\n      django_south_version: ''\n      vcs: 'git'\n      repos_url: 'https://github.com/bartTC/dpaste.git'\n      repos_branch: '2.6'\n      application_path: 'dpaste'\n      django_settings: 'dpaste.settings'\n      settings_injection_path: 'settings/__init__.py'\n      urls_injection_path: 'urls/__init__.py'\n      requirements_pip_files: 'requirements.txt'\n      additional_distro_packages: \"python-imaging,python-tz,python-dev,build-essential,libpq-dev,libmysqlclient-dev,libxml2-dev,libxslt1-dev\"\n\n\n## Upgrade the charm\n\nThis charm allow you to upgrade your deployment using Juju's `upgrade-charm`\ncommand. This command will:\n\n- upgrade Django\n- upgrade additional pip packages\n- upgrade additional Debian packages\n- upgrade using requirements files in your project\n\n## Management with Fabric\n\n[Fabric](http://docs.fabfile.org) is a Python (2.5 or higher) library and command-line tool for\nstreamlining the use of SSH for application deployment or system administration tasks.\n\nIt provides a basic suite of operations for executing\nlocal or remote shell commands (normally or via sudo) and uploading/downloading\nfiles, as well as auxiliary functionality such as prompting the running user\nfor input, or aborting execution.\n\nThis charm includes a Fabric script that use Juju's information to perform various\ntasks.\n\nFor a list of tasks type this command after bootstraping your Juju environment:\n\n    fab -l\n\nFor example, with a python-django service deployed you can run commands on all of its units:\n\n    fab -R python-django pull\n    [10.0.0.2] Executing task 'pull'\n    [10.0.0.2] run: bzr pull lp:~my_name/django_code/my_site\n    ...\n    [10.0.0.2] run: invoke-rc.d gunicorn restart\n    ...\n\nOr you can also run commands on a single unit:\n\n    fab -R python-django/0 manage:createsuperuser\n    ...\n    [10.0.0.2] out: Username (leave blank to use 'ubuntu'):\n\n\nLimitation:\n\n- You can only execute tasks for one role at a time.\n  But it can be a service or unit.\n\nIf you want to extend the fabfile check out [fabtools](http://fabtools.readthedocs.org/).\n\n## Ansible\n\nSee: https://github.com/cmars/juju-ansible\n\n## Security\n\nNote that if you're using a `requirement.txt` file the packages will\nbe downloaded with `pip` and it doesn't do any cryptographic\nverification of its downloads.\n\n## Writing application charm\n\nTo create an application subordinate charm that can be related to this charm you need\nto at least define an interface named `directory-path` in your `metadate.yaml` file\nlike this:\n\n    [...]\n    requires:\n      python-django:\n        interface: directory-path\n        scope: container\n        optional: true\n\nWhen you add a relation between your charm and the python-django charm,\nyou will be able to get those relation variables from the hook:\n\n- `settings_dir_path`\n- `urls_dir_path`\n- `django_admin_cmd`\n- `install_root`\n\nNow your charm will be informed about where it needs to add new settings\nand urls files and how to run additionnal Django commands. \nThe Django charm reloads Gunicorn after the relation to catch the changes.\n\n## Changelog\n\n### X: Not yet released\n\n- Python3 compatibility\n- Support for Django 1.7\n- Support for virtualenv\n- Tests\n- More vcs options\n- More pip options\n\n### 6: Notable changes:\n\n- The charm now use charm-helpers for hooks\n- The chams now use ansible for installation\n- Mysql and Redis and rabbitmq (celery) support was added\n- The charm can install South and do migrations\n- The charm include a Fabric and Ansible scripts to interact with Juju\n\nNote that I still need to think about the role of Fabric, Ansible, Salt, charm-helpers, etc\n\nConfiguration changes:\n\n- python_path now accept multiple path separated by commas\n- requirements_pip_files now also accept urls\n- requirements_pip_files and requirements_apt_files are empty by default\n- settings_secret_key_path was renamed settings_secret_key_name\n- settings_database_path was renamed settings_database_name\n\nNew options:\n\n- unit_config\n- settings_amqp_name\n- celery_always_eager\n- django_south\n- django_south_version\n- django_debug\n- django_allowed_host\n- django_extra_settings\n- settings_injection_path\n- url_injection_path\n- pip_extra_args\n\nBackwards incompatible changes:\n\n- Some default options changed so be sure to checkout your configuration files.\n- The use of Ansible change a bit how things are done now be sure to test.\n\n### 3: Notable changes:\n\n- Rewrite the charm using python instead of BASH scripts\n- Django projects now need no modification to work with the charm\n- Use the `django-admin startproject` command with configurable arguments if no repos is specified\n- Juju's generated settings and urls files are now added in a juju_settings and a juju_urls directories by default\n- New MongoDB relation (server side is yet to be done)\n- New upgrade hook that upgrade pip and debian packages\n- Expose ports is now handle by the charm\n\nConfiguration changes:\n\n- default user and group is now ubuntu\n- new install_root option\n- new django_version option\n- new additional_pip_packages option\n- new repos_branch,repos_username,repos_password options\n- new project_name, project_template_extension, project_template_url options\n- new urls_dir_name and settings_dir_name options\n- new project_template_url and project_template_extension options\n- database, uploads, static, secret and cache settings locations are now configurable\n- extra_deb_pkg was renamed additional_distro_packages\n- requirements was renamed requirements_pip_files and now support multiple files\n- if python_path is empty set as install_root\n    \nBackwards incompatible changes:\n\n- swift support was moved to a subordinate charm\n- postgresql relation hook was rename pgsql instead of db\n\n### 2: Notable changes:\n\n- You can configure all wsgi (Gunicorn) settings via the config.yaml file\n- Juju compatible Fabric fabfile.py is included for PAAS commands\n- Swift storage backend is now optional\n\nBackwards incompatible changes:\n\n- Use split settings and urls\n- Permissons are now based on WSGI's user and group instead of just being www-data\n- media and static files are now in new directories ./uploads and ./static/\n- Deprecated configuration variables: site_domain, site_username, site_password, site_admin_email\n\n\n### 1: Notable changes:\n\n- Initial release\n\n## Inspiration\n\n- http://www.deploydjango.com\n- http://lincolnloop.com/django-best-practices/\n- https://github.com/30loops/djangocms-on-30loops.git\n- https://github.com/openshift/django-example\n- http://lincolnloop.com/blog/2013/feb/15/django-settings-parity-youre-doing-it-wrong/\n- http://tech.yipit.com/2011/11/02/django-settings-what-to-do-about-settings-py/\n- http://www.rdegges.com/the-perfect-django-settings-file/\n- https://github.com/xenith/django-base-template.git\n- https://github.com/transifex/transifex/blob/devel/transifex/settings.py\n- http://peterlyons.com/problog/2010/02/environment-variables-considered-harmful\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}