{
  "name": "tomcat Juju charm",
  "juju_charm_name": "tomcat",
  "revision": "cs:precise/tomcat-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/tomcat",
    "https://jujucharms.com/tomcat/precise",
    "https://jujucharms.com/tomcat/precise/3",
    "https://api.jujucharms.com/v5/tomcat",
    "https://api.jujucharms.com/v5/precise/tomcat",
    "https://api.jujucharms.com/v5/precise/tomcat-3"
  ],
  "labels": [
    "Juju charm",
    "application_development",
    "java",
    "webapp",
    "Type/Middleware/Runtime/Java",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Application Server/Tomcat"
  ],
  "info_url": "https://jujucharms.com/tomcat",
  "package_url": "https://api.jujucharms.com/v5/precise/tomcat-3/archive",
  "created": "2016-01-29T03:03:03.472Z",
  "updated": "2016-01-29T03:03:03.472Z",
  "description": "Apache Tomcat 6 or 7 Servlet and JSP engine\n\nApache Tomcat is an open source implementation of the Java Servlet and\nJavaServer Pages (JSP) specifications, and provides a \"pure Java\" HTTP\nweb server environment for Java web applications to run.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/memcache",
      "self_resolve": true,
      "juju_interface": "memcache",
      "juju_name": "jndi-memcached",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/terracotta",
      "self_resolve": true,
      "juju_interface": "terracotta",
      "juju_name": "jndi-terracotta",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "admin_password": {
      "type": "string",
      "description": "Admin password",
      "default": "",
      "mapping": "charm_option"
    },
    "admin_username": {
      "type": "string",
      "description": "Admin username",
      "default": "admin",
      "mapping": "charm_option"
    },
    "cluster_enabled": {
      "type": "boolean",
      "description": "Enable session clustering",
      "default": false,
      "mapping": "charm_option"
    },
    "debug_enabled": {
      "type": "boolean",
      "description": "Enable JDWP debugger on port 8000 for remote debugging",
      "default": false,
      "mapping": "charm_option"
    },
    "http_connector": {
      "type": "string",
      "description": "HTTP connector type ('bio' or 'nio')",
      "default": "bio",
      "mapping": "charm_option"
    },
    "http_port": {
      "type": "int",
      "description": "HTTP port",
      "default": 8080,
      "mapping": "charm_option"
    },
    "https_enabled": {
      "type": "boolean",
      "description": "Enable HTTPS connector",
      "default": false,
      "mapping": "charm_option"
    },
    "https_port": {
      "type": "int",
      "description": "HTTPS port",
      "default": 8443,
      "mapping": "charm_option"
    },
    "java_opts": {
      "type": "string",
      "description": "Java options for JVM",
      "default": "-Xms768M -Xmx1024M",
      "mapping": "charm_option"
    },
    "jmx_control_password": {
      "type": "string",
      "description": "JMX control password",
      "default": "",
      "mapping": "charm_option"
    },
    "jmx_enabled": {
      "type": "boolean",
      "description": "Enable JMX monitoring",
      "default": false,
      "mapping": "charm_option"
    },
    "jmx_jar_md5": {
      "type": "string",
      "description": "Catalina JMX JAR MD5 distribution hash (only required if using Tomcat 7+)",
      "default": "82763603dc177d9aabd17d39cef7dcbb",
      "mapping": "charm_option"
    },
    "jmx_jar_url": {
      "type": "string",
      "description": "Catalina JMX JAR distribution URL (only required if using Tomcat 7+)",
      "default": "http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.26/bin/extras/catalina-jmx-remote.jar",
      "mapping": "charm_option"
    },
    "jmx_localhost": {
      "type": "boolean",
      "description": "Use localhost over LAN hostname in connections.  Useful for SSH tunnels.",
      "default": true,
      "mapping": "charm_option"
    },
    "jmx_monitor_password": {
      "type": "string",
      "description": "JMX monitor password",
      "default": "",
      "mapping": "charm_option"
    },
    "jndi_memcached_config": {
      "type": "string",
      "description": "JNDI Memcached relation configuration",
      "default": "",
      "mapping": "charm_option"
    },
    "jndi_terracotta_config": {
      "type": "string",
      "description": "JNDI Terracotta relation configuration",
      "default": "",
      "mapping": "charm_option"
    },
    "keystore": {
      "type": "string",
      "description": "PKCS12 keystore containing private key and X.509 certificate (base64 encoded)",
      "default": "",
      "mapping": "charm_option"
    },
    "keystore_password": {
      "type": "string",
      "description": "Keystore password",
      "default": "",
      "mapping": "charm_option"
    },
    "manager_enabled": {
      "type": "boolean",
      "description": "Enable management applications",
      "default": true,
      "mapping": "charm_option"
    },
    "multicast": {
      "type": "boolean",
      "description": "Use multicast networking for clustering",
      "default": false,
      "mapping": "charm_option"
    },
    "multicast_address": {
      "type": "string",
      "description": "Multicast network address for clustering",
      "default": "228.0.0.4",
      "mapping": "charm_option"
    },
    "multicast_port": {
      "type": "int",
      "description": "Multicast network port for clustering",
      "default": 34569,
      "mapping": "charm_option"
    },
    "status_password": {
      "type": "string",
      "description": "Status password",
      "default": "",
      "mapping": "charm_option"
    },
    "status_username": {
      "type": "string",
      "description": "Status username",
      "default": "status",
      "mapping": "charm_option"
    },
    "terracotta_md5": {
      "type": "string",
      "description": "Terracotta MD5 distribution hash",
      "default": "92c6456f1641b7662b4dedec15eaf3f4",
      "mapping": "charm_option"
    },
    "terracotta_url": {
      "type": "string",
      "description": "Terracotta distribution URL",
      "default": "http://d2zwv9pap9ylyd.cloudfront.net/terracotta-3.6.2.tar.gz",
      "mapping": "charm_option"
    },
    "tomcat_version": {
      "type": "string",
      "description": "The version of Tomcat to deploy ('tomcat6' or 'tomcat7')",
      "default": "tomcat7",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/java-webapp",
      "juju_interface": "java-webapp",
      "juju_name": "webapp-container",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "cluster": {
      "Name": "cluster",
      "Role": "peer",
      "Interface": "tomcat-cluster",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "# Overview\n\nApache Tomcat is an open source implementation of the Java Servlet and \nJavaServer Pages (JSP) specifications, and provides a \"pure Java\" HTTP \nweb server environment for Java web applications to run.\n\nApache Tomcat 7 implements the Java Servlet 3.0 and JSP 2.0 specification\nfrom Sun Microsystems/Oracle.\n\n<http://tomcat.apache.org>\n\n# Usage\n\n## General\n\nA tomcat deployment consists of a Tomcat service:\n\n  juju deploy tomcat\n\nBy default, this is Tomcat version 7.  You can deploy Tomcat 6 by specifying \nthe version at deployment.  First create a [YAML](http://www.yaml.org/) file \nwith the contents:\n\n    tomcat:\n      tomcat_version: tomcat6\n\nThen deploy:\n\n    juju deploy --config config.yaml tomcat\n\nOnce deployed, you can specify what http port to use:\n\n    # use port 80 for http\n    juju set tomcat http_port=80\n\n(NOTE: You could also do this at deployment with the `--config` switch)\n\nThe Tomcat manager applications, enabled by default, are protected by HTTP basic\npassword protection.  To access the applications you must set a password for\neither the `admin` or `status` roles.  The admin role has full access to\nconfigure Tomcat whereas the status role may only see server status.  To set\npasswords:\n\n    juju set tomcat admin_password=<password>\n    juju set tomcat status_password=<password>\n\nTo expose Tomcat to the Internet:\n\n    juju expose tomcat\n\n    Open web browser to http://<host>/manager or http://<host>/manager/status\n    using your admin or status username/password respectively.\n\n(Note: Passwords will be sent to the manager in plain text, so it is \nrecommended to enable HTTPS as follows)\n\nTo enable HTTPS:\n\n    # enable https connector\n    juju set tomcat https_enabled=True\n    # use port 443 for https\n    juju set tomcat https_port=443\n\n    Open web browser to https://<host>/manager or https://<host>/manager/status.\n\nA self-signed certificate will be generated for HTTPS use by default.  You can\nspecify your own private key and certificate as a PKCS12 file as follows:\n\n    # set pkcs12 file\n    juju set tomcat keystore=`base64 < <pkcs12 file>`\n    # set pkcs12 file password\n    juju set tomcat keystore_password=<password>\n\nThe PKCS12 file is transmitted securely to your Juju cluster and subsequently\nused by all service units (added with `juju add-unit`) for easy certificate\nmanagement.  Should you remove your certificate by setting `keystore` to an\nempty string, a new self-signed certificate will be generated for use.\n\nWhile the manager applications are a useful way of testing a Tomcat\ninstallation there is no real usage for them when deploying applications using\na Juju subordinate charm like `j2ee-deployer`.  Therefore as a security\nprecaution, it is recommended you disable them in a production environment:\n\n    # disable manager applications\n    juju set tomcat manager_enabled=False\n\nTomcat offers two pure Java HTTP connectors, Blocking I/O (\"bio\") and\nNon-Blocking I/O (\"nio\").\n\n- **bio** is the default connector and uses a thread per connection.\n- **nio** uses a single thread to read connections asynchronously.\n\nIf you have enough traffic to be concerned about performance of each,\nit is recommended you benchmark both.  Better performance can be achieved with\neither depending on conditions.  Traditionally, Java application traffic favors\nthe bio connector and serving of static content with the nio connector.\n\nYou may set either as follows:\n\n    # set nio connector\n    juju set tomcat http_connector=nio\n\n    # set bio connector\n    juju set tomcat http_connector=bio\n\n## Deploying a WebApp to Tomcat\n\nA webapp can be deployed with the Tomcat charm in one of two ways: it can\nbe provided by another charm, or you can manually upload it.\n\nFor another charm to provide a webapp, it must be a subordinate charm that\nsupports the `java-webapp` relation.\n\nTo upload a webapp to Tomcat, simply use the following:\n\n    juju scp webapp.war tomcat/0:\n    juju ssh tomcat/0 'sudo mv webapp.war /var/lib/tomcat7/webapps'\n\n(If you changed the version of tomcat being deployed, you will need to adjust\nthe path appropriately.)\n\n\n## Java Debugger (JDB)\n\nRemote debugging can be useful for application development and diagnosing \nproblems with a deployed application.  There are many debugging tools, \nincluding jdb, and most Integrated Development Environments (IDEs) provide\nthe ability to attach to remote servers and step through code line by line.  \nThe tomcat charm provides the ability to attach remote debuggers by using the \n`debug_enabled` configuration option.  The default port 8000 is open when \n`True` and closed when `False` (default).\n\n## Java Management Extensions (JMX)\n\nJMX monitoring is disabled by default, but you can enable it with the \nfollowing commands:\n\n    juju set tomcat jmx_enabled=True\n    juju set tomcat jmx_control_password=<password>\n    juju set tomcat jmx_monitor_password=<password>\n\nThe control role (username = `controlRole`) allows read/write access, the\nmonitor role (username = `monitorRole`) read only access.  If a password is\nempty, it disables access for that role.\n\nThere is a further JMX option, `jmx_localhost`.  This determines what hostname\nis given to the JMX client to connect to.  If false, the internal hostname or\nprivate IP address of the unit will be used, meaning connection is suited to \neither LXC based deployments or cloud deployments where you have VPN access:\n\n    JConsole or VisualVM connect to <private unit address>:10001 with\n    username/password\n\nFor cloud deployments, setting this to `True` uses hostname `localhost`, which\nallows you to connect over a ssh tunnel:\n\n    ssh -L 10001:localhost:10001 -L 10002:localhost:10002 <public unit address>\n    JConsole or VisualVM connect to localhost:10001 with username/password\n\nThe latter is much more typical of out of the box deployment, so `jmx-localhost`\ndefaults to True.\n\n## Java Naming and Directory Interface (JNDI)\n\nTomcat supports adding arbitrary configuration parameters for JNDI lookup by\ndeployed applications.  This enables you to develop applications that discover\nconfiguration details at runtime simply by referencing pre-determined JNDI\nnames.  This charm supports lookup of different Juju services, each of which \nmay be configured using the appropriate `jndi_<type>_config` option.  Unless \nspecified otherwise, options are generally a comma separated list of JNDI name,\nservice and type specific colon separated values:\n\n    <name>:<service>,<name>:<service>\n\nThis allows you to map Juju services to JNDI names as follows:\n\n    # map the JNDI name 'param/Memcached' to the Juju service named 'memcached'\n    juju set tomcat jndi_memcached_config=\"param/Memcached:memcached\"\n\n    # map the JNDI name 'param/Terracotta' to the Juju service named 'terracotta'\n    juju set tomcat jndi_terracotta_config=\"param/Terracotta:terracotta\"\n\nThe charm will take care of mapping the JNDI name with the private addresses\nof the Juju services.  If you add units of memcached or terracotta the charm\nwill add the new addresses appropriately.  A brief description of the available \nJNDI relations is below.\n\nMemcached (`jndi_memcached_config`) - Provides a space separated string of all\nunit addresses for specified memcached service.  This can be used directly\nin instantiating an instance of a Memcached client such as spymemcached\n(see <http://code.google.com/p/spymemcached/> for more details).\n\nTerracotta (`jndi_terracotta_config`) - Provides a comma separated string of all\nunit addresses for the specified Terracotta service.  This can be injected\ndirectly into EHCache or Quartz configuration (see <http://www.terracotta.org> for\nmore details).\n\n## Scale out Usage\n\n### Clustering\n\nTomcat supports session clustering, allowing a group of Tomcat units to\nreplicate J2EE session information to each other.  This is useful for HA\ndeployments where session contents are important.  To enable clustering across\nunits:\n\n    # enable clustering\n    juju set tomcat cluster_enabled=True\n\n    # add 2 more units to cluster\n    juju add-unit -n 2 tomcat\n\nBy default, static membership is used over multicast based membership which\nmeans units depend on local cluster configuration to determine cluster groups.\nMulticast uses multicast UDP packets on a pre-determined address/port to\ndetermine cluster groups.  Where a cloud provider such as EC2 disables multicast\ntraffic between instances, static membership must be used.  Where multicast\ntraffic is allowed, it is preferred and may be enabled as follows:\n\n    # enable multicast clustering\n    juju set tomcat multicast=True\n\n    # set multicast address\n    juju set tomcat multicast_address=228.0.0.4\n\n    # set multicast port\n    juju set tomcat multicast_port=34569\n\nFor maximum performance with clustering, it is recommended you use a load\nbalancer in front of Tomcat that supports \"sticky sessions\".\n\n# Contact Information\n\nThis charm was originally written by Robert Ayres <robert.ayres@ubuntu.com> \nand is maintained by Matthew Bruzek <matthew.bruzek@canonical.com>.  If you \nencounter a bug with the tomcat charm please open a \n[bug](https://bugs.launchpad.net/charms/+source/tomcat).\n\n## Apache Tomcat Project Information\n\n- [Apache Tomcat home page](http://tomcat.apache.org)\n- [Apache Tomcat Mailing Lists](http://tomcat.apache.org/lists.html)\n- [Tomcat Wiki](http://wiki.apache.org/tomcat/FrontPage)\n- [Tomcat 7.0 Documentation](http://tomcat.apache.org/tomcat-7.0-doc/index.html)\n- [Tomcat 6.0 Documentation](http://tomcat.apache.org/tomcat-6.0-doc/index.html)\n- [Reporting Apache Tomcat Bugs](http://tomcat.apache.org/bugreport.html)\n",
  "readme": "# Overview\n\nApache Tomcat is an open source implementation of the Java Servlet and \nJavaServer Pages (JSP) specifications, and provides a \"pure Java\" HTTP \nweb server environment for Java web applications to run.\n\nApache Tomcat 7 implements the Java Servlet 3.0 and JSP 2.0 specification\nfrom Sun Microsystems/Oracle.\n\n<http://tomcat.apache.org>\n\n# Usage\n\n## General\n\nA tomcat deployment consists of a Tomcat service:\n\n  juju deploy tomcat\n\nBy default, this is Tomcat version 7.  You can deploy Tomcat 6 by specifying \nthe version at deployment.  First create a [YAML](http://www.yaml.org/) file \nwith the contents:\n\n    tomcat:\n      tomcat_version: tomcat6\n\nThen deploy:\n\n    juju deploy --config config.yaml tomcat\n\nOnce deployed, you can specify what http port to use:\n\n    # use port 80 for http\n    juju set tomcat http_port=80\n\n(NOTE: You could also do this at deployment with the `--config` switch)\n\nThe Tomcat manager applications, enabled by default, are protected by HTTP basic\npassword protection.  To access the applications you must set a password for\neither the `admin` or `status` roles.  The admin role has full access to\nconfigure Tomcat whereas the status role may only see server status.  To set\npasswords:\n\n    juju set tomcat admin_password=<password>\n    juju set tomcat status_password=<password>\n\nTo expose Tomcat to the Internet:\n\n    juju expose tomcat\n\n    Open web browser to http://<host>/manager or http://<host>/manager/status\n    using your admin or status username/password respectively.\n\n(Note: Passwords will be sent to the manager in plain text, so it is \nrecommended to enable HTTPS as follows)\n\nTo enable HTTPS:\n\n    # enable https connector\n    juju set tomcat https_enabled=True\n    # use port 443 for https\n    juju set tomcat https_port=443\n\n    Open web browser to https://<host>/manager or https://<host>/manager/status.\n\nA self-signed certificate will be generated for HTTPS use by default.  You can\nspecify your own private key and certificate as a PKCS12 file as follows:\n\n    # set pkcs12 file\n    juju set tomcat keystore=`base64 < <pkcs12 file>`\n    # set pkcs12 file password\n    juju set tomcat keystore_password=<password>\n\nThe PKCS12 file is transmitted securely to your Juju cluster and subsequently\nused by all service units (added with `juju add-unit`) for easy certificate\nmanagement.  Should you remove your certificate by setting `keystore` to an\nempty string, a new self-signed certificate will be generated for use.\n\nWhile the manager applications are a useful way of testing a Tomcat\ninstallation there is no real usage for them when deploying applications using\na Juju subordinate charm like `j2ee-deployer`.  Therefore as a security\nprecaution, it is recommended you disable them in a production environment:\n\n    # disable manager applications\n    juju set tomcat manager_enabled=False\n\nTomcat offers two pure Java HTTP connectors, Blocking I/O (\"bio\") and\nNon-Blocking I/O (\"nio\").\n\n- **bio** is the default connector and uses a thread per connection.\n- **nio** uses a single thread to read connections asynchronously.\n\nIf you have enough traffic to be concerned about performance of each,\nit is recommended you benchmark both.  Better performance can be achieved with\neither depending on conditions.  Traditionally, Java application traffic favors\nthe bio connector and serving of static content with the nio connector.\n\nYou may set either as follows:\n\n    # set nio connector\n    juju set tomcat http_connector=nio\n\n    # set bio connector\n    juju set tomcat http_connector=bio\n\n## Deploying a WebApp to Tomcat\n\nA webapp can be deployed with the Tomcat charm in one of two ways: it can\nbe provided by another charm, or you can manually upload it.\n\nFor another charm to provide a webapp, it must be a subordinate charm that\nsupports the `java-webapp` relation.\n\nTo upload a webapp to Tomcat, simply use the following:\n\n    juju scp webapp.war tomcat/0:\n    juju ssh tomcat/0 'sudo mv webapp.war /var/lib/tomcat7/webapps'\n\n(If you changed the version of tomcat being deployed, you will need to adjust\nthe path appropriately.)\n\n\n## Java Debugger (JDB)\n\nRemote debugging can be useful for application development and diagnosing \nproblems with a deployed application.  There are many debugging tools, \nincluding jdb, and most Integrated Development Environments (IDEs) provide\nthe ability to attach to remote servers and step through code line by line.  \nThe tomcat charm provides the ability to attach remote debuggers by using the \n`debug_enabled` configuration option.  The default port 8000 is open when \n`True` and closed when `False` (default).\n\n## Java Management Extensions (JMX)\n\nJMX monitoring is disabled by default, but you can enable it with the \nfollowing commands:\n\n    juju set tomcat jmx_enabled=True\n    juju set tomcat jmx_control_password=<password>\n    juju set tomcat jmx_monitor_password=<password>\n\nThe control role (username = `controlRole`) allows read/write access, the\nmonitor role (username = `monitorRole`) read only access.  If a password is\nempty, it disables access for that role.\n\nThere is a further JMX option, `jmx_localhost`.  This determines what hostname\nis given to the JMX client to connect to.  If false, the internal hostname or\nprivate IP address of the unit will be used, meaning connection is suited to \neither LXC based deployments or cloud deployments where you have VPN access:\n\n    JConsole or VisualVM connect to <private unit address>:10001 with\n    username/password\n\nFor cloud deployments, setting this to `True` uses hostname `localhost`, which\nallows you to connect over a ssh tunnel:\n\n    ssh -L 10001:localhost:10001 -L 10002:localhost:10002 <public unit address>\n    JConsole or VisualVM connect to localhost:10001 with username/password\n\nThe latter is much more typical of out of the box deployment, so `jmx-localhost`\ndefaults to True.\n\n## Java Naming and Directory Interface (JNDI)\n\nTomcat supports adding arbitrary configuration parameters for JNDI lookup by\ndeployed applications.  This enables you to develop applications that discover\nconfiguration details at runtime simply by referencing pre-determined JNDI\nnames.  This charm supports lookup of different Juju services, each of which \nmay be configured using the appropriate `jndi_<type>_config` option.  Unless \nspecified otherwise, options are generally a comma separated list of JNDI name,\nservice and type specific colon separated values:\n\n    <name>:<service>,<name>:<service>\n\nThis allows you to map Juju services to JNDI names as follows:\n\n    # map the JNDI name 'param/Memcached' to the Juju service named 'memcached'\n    juju set tomcat jndi_memcached_config=\"param/Memcached:memcached\"\n\n    # map the JNDI name 'param/Terracotta' to the Juju service named 'terracotta'\n    juju set tomcat jndi_terracotta_config=\"param/Terracotta:terracotta\"\n\nThe charm will take care of mapping the JNDI name with the private addresses\nof the Juju services.  If you add units of memcached or terracotta the charm\nwill add the new addresses appropriately.  A brief description of the available \nJNDI relations is below.\n\nMemcached (`jndi_memcached_config`) - Provides a space separated string of all\nunit addresses for specified memcached service.  This can be used directly\nin instantiating an instance of a Memcached client such as spymemcached\n(see <http://code.google.com/p/spymemcached/> for more details).\n\nTerracotta (`jndi_terracotta_config`) - Provides a comma separated string of all\nunit addresses for the specified Terracotta service.  This can be injected\ndirectly into EHCache or Quartz configuration (see <http://www.terracotta.org> for\nmore details).\n\n## Scale out Usage\n\n### Clustering\n\nTomcat supports session clustering, allowing a group of Tomcat units to\nreplicate J2EE session information to each other.  This is useful for HA\ndeployments where session contents are important.  To enable clustering across\nunits:\n\n    # enable clustering\n    juju set tomcat cluster_enabled=True\n\n    # add 2 more units to cluster\n    juju add-unit -n 2 tomcat\n\nBy default, static membership is used over multicast based membership which\nmeans units depend on local cluster configuration to determine cluster groups.\nMulticast uses multicast UDP packets on a pre-determined address/port to\ndetermine cluster groups.  Where a cloud provider such as EC2 disables multicast\ntraffic between instances, static membership must be used.  Where multicast\ntraffic is allowed, it is preferred and may be enabled as follows:\n\n    # enable multicast clustering\n    juju set tomcat multicast=True\n\n    # set multicast address\n    juju set tomcat multicast_address=228.0.0.4\n\n    # set multicast port\n    juju set tomcat multicast_port=34569\n\nFor maximum performance with clustering, it is recommended you use a load\nbalancer in front of Tomcat that supports \"sticky sessions\".\n\n# Contact Information\n\nThis charm was originally written by Robert Ayres <robert.ayres@ubuntu.com> \nand is maintained by Matthew Bruzek <matthew.bruzek@canonical.com>.  If you \nencounter a bug with the tomcat charm please open a \n[bug](https://bugs.launchpad.net/charms/+source/tomcat).\n\n## Apache Tomcat Project Information\n\n- [Apache Tomcat home page](http://tomcat.apache.org)\n- [Apache Tomcat Mailing Lists](http://tomcat.apache.org/lists.html)\n- [Tomcat Wiki](http://wiki.apache.org/tomcat/FrontPage)\n- [Tomcat 7.0 Documentation](http://tomcat.apache.org/tomcat-7.0-doc/index.html)\n- [Tomcat 6.0 Documentation](http://tomcat.apache.org/tomcat-6.0-doc/index.html)\n- [Reporting Apache Tomcat Bugs](http://tomcat.apache.org/bugreport.html)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}