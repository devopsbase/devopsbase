{
  "name": "apache-hadoop-namenode Juju charm",
  "juju_charm_name": "apache-hadoop-namenode",
  "revision": "cs:trusty/apache-hadoop-namenode-2",
  "latest": true,
  "uris": [
    "https://jujucharms.com/apache-hadoop-namenode",
    "https://jujucharms.com/apache-hadoop-namenode/trusty",
    "https://jujucharms.com/apache-hadoop-namenode/trusty/2",
    "https://api.jujucharms.com/v5/apache-hadoop-namenode",
    "https://api.jujucharms.com/v5/trusty/apache-hadoop-namenode",
    "https://api.jujucharms.com/v5/trusty/apache-hadoop-namenode-2"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "bigdata",
    "hadoop",
    "apache",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Processing/Hadoop"
  ],
  "info_url": "https://jujucharms.com/apache-hadoop-namenode",
  "package_url": "https://api.jujucharms.com/v5/trusty/apache-hadoop-namenode-2/archive",
  "created": "2016-05-05T17:34:42.658Z",
  "updated": "2016-05-05T17:34:42.658Z",
  "description": "HDFS master (NameNode) for Apache Hadoop platform\n\nHadoop is a software platform that lets one easily write and run applications that process vast amounts of data.\nThis charm manages the HDFS master node (NameNode).\n",
  "maintainer": {
    "name": "bigdata-charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "trusty",
  "juju_charm_owner": "bigdata-charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= trusty"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/dfs-slave",
      "self_resolve": true,
      "juju_interface": "dfs-slave",
      "juju_name": "datanode",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/zookeeper",
      "self_resolve": true,
      "juju_interface": "zookeeper",
      "juju_name": "zookeeper",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "ganglia_metrics": {
      "type": "boolean",
      "description": "Enable metrics using Ganglia, if related to the Ganglia charm via the\nganglia:master relation.  The Hadoop services *will* be restarted if\nthis option is enabled and the Ganglia service is related.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "hadoop_version": {
      "type": "string",
      "description": "Hadoop version\n",
      "default": "2.7.2",
      "mapping": "charm_option"
    },
    "journalnode_quorum_size": {
      "type": "int",
      "description": "Minimum number of journalnodes that must be ready before the shared\nedits dir will be initialized (aka formatted) on each journalnode.\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "resources_mirror": {
      "type": "string",
      "description": "URL from which to fetch resources (e.g., Hadoop binaries) instead of Launchpad.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/benchmark",
      "juju_interface": "benchmark",
      "juju_name": "benchmark",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/monitor",
      "juju_interface": "monitor",
      "juju_name": "ganglia",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/dfs",
      "juju_interface": "dfs",
      "juju_name": "namenode",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "namenode-cluster": {
      "Name": "namenode-cluster",
      "Role": "peer",
      "Interface": "namenode-cluster",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "## Overview\n\nThe Apache Hadoop software library is a framework that allows for the\ndistributed processing of large data sets across clusters of computers\nusing a simple programming model.\n\nThis charm deploys an HDFS master node running the NameNode component of\n[Apache Hadoop 2.7.1](http://hadoop.apache.org/docs/r2.7.1/), which manages\nthe distribution and replication of data among the various DataNode components.\n\n## Usage\n\nThis charm is intended to be deployed via one of the\n[apache bundles](https://jujucharms.com/u/bigdata-charmers/#bundles).\nFor example:\n\n    juju quickstart apache-analytics-sql\n\nThis will deploy the Apache Hadoop platform with Apache Hive available to\nperform SQL-like queries against your data.\n\nYou can also manually load and run map-reduce jobs via the plugin charm\nincluded in the bigdata bundles linked above:\n\n    juju scp my-job.jar plugin/0:\n    juju ssh plugin/0\n    hadoop jar my-job.jar\n\n## Benchmarking\n\nThis charm provides several benchmarks to gauge the performance of your\nenvironment.\n\nThe easiest way to run the benchmarks on this service is to relate it to the\n[Benchmark GUI][].  You will likely also want to relate it to the\n[Benchmark Collector][] to have machine-level information collected during the\nbenchmark, for a more complete picture of how the machine performed.\n\n[Benchmark GUI]: https://jujucharms.com/benchmark-gui/\n[Benchmark Collector]: https://jujucharms.com/benchmark-collector/\n\nHowever, each benchmark is also an action that can be called manually:\n\n        $ juju action do namenode/0 nnbench\n        Action queued with id: 55887b40-116c-4020-8b35-1e28a54cc622\n        $ juju action fetch --wait 0 55887b40-116c-4020-8b35-1e28a54cc622\n\n        results:\n          meta:\n            composite:\n              direction: asc\n              units: secs\n              value: \"128\"\n            start: 2016-02-04T14:55:39Z\n            stop: 2016-02-04T14:57:47Z\n          results:\n            raw: '{\"BAD_ID\": \"0\", \"FILE: Number of read operations\": \"0\", \"Reduce input groups\":\n              \"8\", \"Reduce input records\": \"95\", \"Map output bytes\": \"1823\", \"Map input records\":\n              \"12\", \"Combine input records\": \"0\", \"HDFS: Number of bytes read\": \"18635\", \"FILE:\n              Number of bytes written\": \"32999982\", \"HDFS: Number of write operations\": \"330\",\n              \"Combine output records\": \"0\", \"Total committed heap usage (bytes)\": \"3144749056\",\n              \"Bytes Written\": \"164\", \"WRONG_LENGTH\": \"0\", \"Failed Shuffles\": \"0\", \"FILE:\n              Number of bytes read\": \"27879457\", \"WRONG_MAP\": \"0\", \"Spilled Records\": \"190\",\n              \"Merged Map outputs\": \"72\", \"HDFS: Number of large read operations\": \"0\", \"Reduce\n              shuffle bytes\": \"2445\", \"FILE: Number of large read operations\": \"0\", \"Map output\n              materialized bytes\": \"2445\", \"IO_ERROR\": \"0\", \"CONNECTION\": \"0\", \"HDFS: Number\n              of read operations\": \"567\", \"Map output records\": \"95\", \"Reduce output records\":\n              \"8\", \"WRONG_REDUCE\": \"0\", \"HDFS: Number of bytes written\": \"27412\", \"GC time\n              elapsed (ms)\": \"603\", \"Input split bytes\": \"1610\", \"Shuffled Maps \": \"72\", \"FILE:\n              Number of write operations\": \"0\", \"Bytes Read\": \"1490\"}'\n        status: completed\n        timing:\n          completed: 2016-02-04 14:57:48 +0000 UTC\n          enqueued: 2016-02-04 14:55:14 +0000 UTC\n          started: 2016-02-04 14:55:27 +0000 UTC\n\n\n## Status and Smoke Test\n\nThe services provide extended status reporting to indicate when they are ready:\n\n    juju status --format=tabular\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status --format=tabular\n\nThe message for each unit will provide information about that unit's state.\nOnce they all indicate that they are ready, you can perform a \"smoke test\"\nto verify that HDFS is working as expected using the built-in `smoke-test`\naction:\n\n    juju action do namenode/0 smoke-test\n\nAfter a few seconds or so, you can check the results of the smoke test:\n\n    juju action status\n\nYou will see `status: completed` if the smoke test was successful, or\n`status: failed` if it was not.  You can get more information on why it failed\nvia:\n\n    juju action fetch <action-id>\n\n\n## Monitoring\n\nThis charm supports monitoring via Ganglia.  To enable monitoring, you must\ndo **both** of the following (the order does not matter):\n\n * Add a relation to the [Ganglia charm][] via the `:master` relation\n * Enable the `ganglia_metrics` config option\n\nFor example:\n\n    juju add-relation namenode ganglia:master\n    juju set namenode ganglia_metrics=true\n\nEnabling monitoring will issue restart the NameNode and all DataNode components\non all of the related compute-slaves.  Take care to ensure that there are no\nrunning jobs when enabling monitoring.\n\n\n## Deploying in Network-Restricted Environments\n\nThe Apache Hadoop charms can be deployed in environments with limited network\naccess. To deploy in this environment, you will need a local mirror to serve\nthe packages and resources required by these charms.\n\n\n### Mirroring Packages\n\nYou can setup a local mirror for apt packages using squid-deb-proxy.\nFor instructions on configuring juju to use this, see the\n[Juju Proxy Documentation](https://juju.ubuntu.com/docs/howto-proxies.html).\n\n\n### Mirroring Resources\n\nIn addition to apt packages, the Apache Hadoop charms require a few binary\nresources, which are normally hosted on Launchpad. If access to Launchpad\nis not available, the `jujuresources` library makes it easy to create a mirror\nof these resources:\n\n    sudo pip install jujuresources\n    juju-resources fetch --all /path/to/resources.yaml -d /tmp/resources\n    juju-resources serve -d /tmp/resources\n\nThis will fetch all of the resources needed by this charm and serve them via a\nsimple HTTP server. The output from `juju-resources serve` will give you a\nURL that you can set as the `resources_mirror` config option for this charm.\nSetting this option will cause all resources required by this charm to be\ndownloaded from the configured URL.\n\nYou can fetch the resources for all of the Apache Hadoop charms\n(`apache-hadoop-namenode`, `apache-hadoop-resourcemanager`,\n`apache-hadoop-slave`, `apache-hadoop-plugin`, etc) into a single\ndirectory and serve them all with a single `juju-resources serve` instance.\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Hadoop\n\n- [Apache Hadoop](http://hadoop.apache.org/) home page\n- [Apache Hadoop bug trackers](http://hadoop.apache.org/issue_tracking.html)\n- [Apache Hadoop mailing lists](http://hadoop.apache.org/mailing_lists.html)\n- [Apache Hadoop Juju Charm](http://jujucharms.com/?text=hadoop)\n",
  "readme": "## Overview\n\nThe Apache Hadoop software library is a framework that allows for the\ndistributed processing of large data sets across clusters of computers\nusing a simple programming model.\n\nThis charm deploys an HDFS master node running the NameNode component of\n[Apache Hadoop 2.7.1](http://hadoop.apache.org/docs/r2.7.1/), which manages\nthe distribution and replication of data among the various DataNode components.\n\n## Usage\n\nThis charm is intended to be deployed via one of the\n[apache bundles](https://jujucharms.com/u/bigdata-charmers/#bundles).\nFor example:\n\n    juju quickstart apache-analytics-sql\n\nThis will deploy the Apache Hadoop platform with Apache Hive available to\nperform SQL-like queries against your data.\n\nYou can also manually load and run map-reduce jobs via the plugin charm\nincluded in the bigdata bundles linked above:\n\n    juju scp my-job.jar plugin/0:\n    juju ssh plugin/0\n    hadoop jar my-job.jar\n\n## Benchmarking\n\nThis charm provides several benchmarks to gauge the performance of your\nenvironment.\n\nThe easiest way to run the benchmarks on this service is to relate it to the\n[Benchmark GUI][].  You will likely also want to relate it to the\n[Benchmark Collector][] to have machine-level information collected during the\nbenchmark, for a more complete picture of how the machine performed.\n\n[Benchmark GUI]: https://jujucharms.com/benchmark-gui/\n[Benchmark Collector]: https://jujucharms.com/benchmark-collector/\n\nHowever, each benchmark is also an action that can be called manually:\n\n        $ juju action do namenode/0 nnbench\n        Action queued with id: 55887b40-116c-4020-8b35-1e28a54cc622\n        $ juju action fetch --wait 0 55887b40-116c-4020-8b35-1e28a54cc622\n\n        results:\n          meta:\n            composite:\n              direction: asc\n              units: secs\n              value: \"128\"\n            start: 2016-02-04T14:55:39Z\n            stop: 2016-02-04T14:57:47Z\n          results:\n            raw: '{\"BAD_ID\": \"0\", \"FILE: Number of read operations\": \"0\", \"Reduce input groups\":\n              \"8\", \"Reduce input records\": \"95\", \"Map output bytes\": \"1823\", \"Map input records\":\n              \"12\", \"Combine input records\": \"0\", \"HDFS: Number of bytes read\": \"18635\", \"FILE:\n              Number of bytes written\": \"32999982\", \"HDFS: Number of write operations\": \"330\",\n              \"Combine output records\": \"0\", \"Total committed heap usage (bytes)\": \"3144749056\",\n              \"Bytes Written\": \"164\", \"WRONG_LENGTH\": \"0\", \"Failed Shuffles\": \"0\", \"FILE:\n              Number of bytes read\": \"27879457\", \"WRONG_MAP\": \"0\", \"Spilled Records\": \"190\",\n              \"Merged Map outputs\": \"72\", \"HDFS: Number of large read operations\": \"0\", \"Reduce\n              shuffle bytes\": \"2445\", \"FILE: Number of large read operations\": \"0\", \"Map output\n              materialized bytes\": \"2445\", \"IO_ERROR\": \"0\", \"CONNECTION\": \"0\", \"HDFS: Number\n              of read operations\": \"567\", \"Map output records\": \"95\", \"Reduce output records\":\n              \"8\", \"WRONG_REDUCE\": \"0\", \"HDFS: Number of bytes written\": \"27412\", \"GC time\n              elapsed (ms)\": \"603\", \"Input split bytes\": \"1610\", \"Shuffled Maps \": \"72\", \"FILE:\n              Number of write operations\": \"0\", \"Bytes Read\": \"1490\"}'\n        status: completed\n        timing:\n          completed: 2016-02-04 14:57:48 +0000 UTC\n          enqueued: 2016-02-04 14:55:14 +0000 UTC\n          started: 2016-02-04 14:55:27 +0000 UTC\n\n\n## Status and Smoke Test\n\nThe services provide extended status reporting to indicate when they are ready:\n\n    juju status --format=tabular\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status --format=tabular\n\nThe message for each unit will provide information about that unit's state.\nOnce they all indicate that they are ready, you can perform a \"smoke test\"\nto verify that HDFS is working as expected using the built-in `smoke-test`\naction:\n\n    juju action do namenode/0 smoke-test\n\nAfter a few seconds or so, you can check the results of the smoke test:\n\n    juju action status\n\nYou will see `status: completed` if the smoke test was successful, or\n`status: failed` if it was not.  You can get more information on why it failed\nvia:\n\n    juju action fetch <action-id>\n\n\n## Monitoring\n\nThis charm supports monitoring via Ganglia.  To enable monitoring, you must\ndo **both** of the following (the order does not matter):\n\n * Add a relation to the [Ganglia charm][] via the `:master` relation\n * Enable the `ganglia_metrics` config option\n\nFor example:\n\n    juju add-relation namenode ganglia:master\n    juju set namenode ganglia_metrics=true\n\nEnabling monitoring will issue restart the NameNode and all DataNode components\non all of the related compute-slaves.  Take care to ensure that there are no\nrunning jobs when enabling monitoring.\n\n\n## Deploying in Network-Restricted Environments\n\nThe Apache Hadoop charms can be deployed in environments with limited network\naccess. To deploy in this environment, you will need a local mirror to serve\nthe packages and resources required by these charms.\n\n\n### Mirroring Packages\n\nYou can setup a local mirror for apt packages using squid-deb-proxy.\nFor instructions on configuring juju to use this, see the\n[Juju Proxy Documentation](https://juju.ubuntu.com/docs/howto-proxies.html).\n\n\n### Mirroring Resources\n\nIn addition to apt packages, the Apache Hadoop charms require a few binary\nresources, which are normally hosted on Launchpad. If access to Launchpad\nis not available, the `jujuresources` library makes it easy to create a mirror\nof these resources:\n\n    sudo pip install jujuresources\n    juju-resources fetch --all /path/to/resources.yaml -d /tmp/resources\n    juju-resources serve -d /tmp/resources\n\nThis will fetch all of the resources needed by this charm and serve them via a\nsimple HTTP server. The output from `juju-resources serve` will give you a\nURL that you can set as the `resources_mirror` config option for this charm.\nSetting this option will cause all resources required by this charm to be\ndownloaded from the configured URL.\n\nYou can fetch the resources for all of the Apache Hadoop charms\n(`apache-hadoop-namenode`, `apache-hadoop-resourcemanager`,\n`apache-hadoop-slave`, `apache-hadoop-plugin`, etc) into a single\ndirectory and serve them all with a single `juju-resources serve` instance.\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Hadoop\n\n- [Apache Hadoop](http://hadoop.apache.org/) home page\n- [Apache Hadoop bug trackers](http://hadoop.apache.org/issue_tracking.html)\n- [Apache Hadoop mailing lists](http://hadoop.apache.org/mailing_lists.html)\n- [Apache Hadoop Juju Charm](http://jujucharms.com/?text=hadoop)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}