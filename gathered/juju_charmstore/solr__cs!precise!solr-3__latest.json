{
  "name": "solr Juju charm",
  "juju_charm_name": "solr",
  "revision": "cs:precise/solr-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/solr",
    "https://jujucharms.com/solr/precise",
    "https://jujucharms.com/solr/precise/3",
    "https://api.jujucharms.com/v5/solr",
    "https://api.jujucharms.com/v5/precise/solr",
    "https://api.jujucharms.com/v5/precise/solr-3"
  ],
  "labels": [
    "Juju charm",
    "search",
    "Type/Middleware/Runtime/Java",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API/Toolkit",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Cache",
    "Type/Middleware/Search/Solr"
  ],
  "info_url": "https://jujucharms.com/solr",
  "package_url": "https://api.jujucharms.com/v5/precise/solr-3/archive",
  "created": "2015-06-17T09:34:02.51Z",
  "updated": "2015-06-17T09:34:02.51Z",
  "description": "Enterprise search server based on Lucene\n\nEnterprise search server based on Lucene\n.\nSolr is an open source enterprise search server based on the Lucene\nJava search library, with XML/HTTP and JSON APIs, hit highlighting,\nfaceted search, caching, replication, and a web administration interface.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql-shared",
      "self_resolve": true,
      "juju_interface": "mysql-shared",
      "juju_name": "db-mysql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/pgsql",
      "self_resolve": true,
      "juju_interface": "pgsql",
      "juju_name": "db-pgsql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/solr",
      "self_resolve": true,
      "juju_interface": "solr",
      "juju_name": "slave",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "admin-password": {
      "type": "string",
      "description": "\"Solr admin ('solr-admin') password.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core1-dih-config": {
      "type": "string",
      "description": "Data Import Handler XML configuration (base64 encoded).\n.\n\"Note: 'dataSource' element will be ignored.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core1-enabled": {
      "type": "boolean",
      "description": "\"Enable core 1.\"\n",
      "default": false,
      "mapping": "charm_option"
    },
    "core1-schema": {
      "type": "string",
      "description": "Solr XML schema (base64 encoded).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core2-dih-config": {
      "type": "string",
      "description": "Data Import Handler XML configuration (base64 encoded).\n.\n\"Note: 'dataSource' element will be ignored.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core2-enabled": {
      "type": "boolean",
      "description": "\"Enable core 2.\"\n",
      "default": false,
      "mapping": "charm_option"
    },
    "core2-schema": {
      "type": "string",
      "description": "Solr XML schema (base64 encoded).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core3-dih-config": {
      "type": "string",
      "description": "Data Import Handler XML configuration (base64 encoded).\n.\n\"Note: 'dataSource' element will be ignored.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core3-enabled": {
      "type": "boolean",
      "description": "\"Enable core 3.\"\n",
      "default": false,
      "mapping": "charm_option"
    },
    "core3-schema": {
      "type": "string",
      "description": "Solr XML schema (base64 encoded).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core4-dih-config": {
      "type": "string",
      "description": "Data Import Handler XML configuration (base64 encoded).\n.\n\"Note: 'dataSource' element will be ignored.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "core4-enabled": {
      "type": "boolean",
      "description": "\"Enable core 4.\"\n",
      "default": false,
      "mapping": "charm_option"
    },
    "core4-schema": {
      "type": "string",
      "description": "Solr XML schema (base64 encoded).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "db-config": {
      "type": "string",
      "description": "Database relation configuration.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "dih-config": {
      "type": "string",
      "description": "Data Import Handler XML configuration (base64 encoded).\n.\n\"Note: 'dataSource' element will be ignored.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "dist-md5": {
      "type": "string",
      "description": "MD5 distribution hash.\n",
      "default": "ac11ef4408bb015aa3a5eefcb1047aec",
      "mapping": "charm_option"
    },
    "dist-url": {
      "type": "string",
      "description": "Distribution URL.\n",
      "default": "https://archive.apache.org/dist/lucene/solr/3.6.0/apache-solr-3.6.0.tgz",
      "mapping": "charm_option"
    },
    "java-opts": {
      "type": "string",
      "description": "Java options for Solr/Tomcat JVM.\n",
      "default": "-Xmx1024M",
      "mapping": "charm_option"
    },
    "jmx-control-password": {
      "type": "string",
      "description": "JMX control password.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "jmx-enabled": {
      "type": "boolean",
      "description": "Enable Solr/Tomcat JMX monitoring.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "jmx-localhost": {
      "type": "boolean",
      "description": "Use localhost over LAN hostname in connections.  Useful for SSH tunnels.\n",
      "default": true,
      "mapping": "charm_option"
    },
    "jmx-monitor-password": {
      "type": "string",
      "description": "JMX monitor password.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "lucene-version": {
      "type": "string",
      "description": "Lucene index version to use.\n",
      "default": "LUCENE_36",
      "mapping": "charm_option"
    },
    "schema": {
      "type": "string",
      "description": "Solr XML schema (base64 encoded).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "search-password": {
      "type": "string",
      "description": "\"Solr search ('solr-search') password.\"\n",
      "default": null,
      "mapping": "charm_option"
    },
    "update-password": {
      "type": "string",
      "description": "\"Solr update ('solr-update') password.\"\n",
      "default": null,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/solr",
      "juju_interface": "solr",
      "juju_name": "master",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "Overview\n--------\n\nEnterprise search server based on Lucene.\n\nSolr is an open source enterprise search server based on the Lucene\nJava search library, with XML/HTTP and JSON APIs, hit highlighting,\nfaceted search, caching, replication, and a web administration interface.\n\nhttp://lucene.apache.org/solr/\n \nUsage\n-----\n\nGeneral\n\nA Solr deployment consists of a Solr service:\n\n  juju deploy --repository . local:solr solr\n\nOnce deployed, you can access its admin interface over a ssh tunnel:\n\n  ssh -L 8080:localhost:8080 <public address>\n  Open web browser at http://localhost:8080/solr/admin/\n\n(NOTE: For LXC based deployments, a ssh tunnel isn't required and you can simply\naccess 'http://<private address>:8080/solr/admin/')\n\nA Solr instance isn't security hardened enough to safely expose to the\nInternet, even with password protection (see below).  Use on an internal\nnetwork only.  Should you need to expose an instance for development purposes,\nyou can still issue:\n\n  juju expose solr\n\nThis will expose solr on port 8080.\n\nThe Solr server is protected by HTTP digest password protection which isn't\nenabled by default, to enable set one or many passwords related to the admin,\nupdate and search roles:\n\n  juju set solr \"admin-password=<password>\"\n  juju set solr \"update-password=<password>\"\n  juju set solr \"search-password=<password>\"\n\n(NOTE: You could also do this at deployment with the '--config' switch)\n\nEach role has its own password and set of abilities.  The abilities are\nhierarchical such that the update role includes the abilities of the search\nrole and the admin role includes all abilities.  The roles would typically be\nused as:\n\n  (Username)\n  solr-admin  - all access\n  solr-update - POST'ing new documents to index\n  solr-search - search querying only\n\nSetting an empty password disables protection for that role.\n\nYou can search a Solr instance with the following example queries:\n\n  # show all documents\n  http://.../solr/select?q=*:*\n\n  # output in json\n  http://.../solr/select?q=*:*&wt=json\n\nThe XML schema can be set as follows:\n\n  juju set solr \"schema=$(base64 < <schema>)\"\n\nUploading documents can be done from the commandline using curl (installed on\nunit), see 'http://wiki.apache.org/solr/' for details.\n\n\nIndexing from Database\n\nYou can automatically index the content of a RDBMS such as MySQL or PostgreSQL\nusing Solr's Data Import Handler (DIH).  Database configuration is controlled\nusing the 'db-config' option.  This is a comma separated list of core, database\nservice and database colon separated values:\n\n  <core>:<service>:<database>,<core>:<service>:<database>\n\nif '<core>' is omitted then 'core0' (initial core) is assumed.\n\n(Note: You can use multiple databases from the same MySQL service.  When a\ndatabase isn't defined for a MySQL service, the database 'solr' is used.\nPostgreSQL doesn't support multiple databases from the same service, so database\nis ignored.)\n\nFor example:\n\n  # core0 uses mysql database solr1\n  # core1 uses mysql database solr2\n  juju set solr \"db-config=core0:mysql:solr1,core1:mysql:solr2\"\n\n  # core0 uses postgresql\n  # core1 uses mysql2 database solr\n  juju set solr \"db-config=core0:postgresql,core1:mysql2:solr\"\n\nHaving deployed the appropriate charm, add the relation:\n\n  # mysql\n  juju add-relation solr:db-mysql mysql:db\n\n  # postgresql\n  juju add-relation solr:db-pgsql postgresql:db\n\n  # upload data-config document\n  juju set solr \"dih-config=$(base64 < <data-config>)\"\n\n  # core1 data-config document\n  juju set solr \"core1-dih-config=$(base64 < <data-config>)\"\n\nThen use the DIH web interface to perform the importing:\n\n  # full import\n  http://.../solr/dataimport?command=full-import\n\n  # delta import\n  http://.../solr/dataimport?command=delta-import\n\n  # status\n  http://.../solr/dataimport?command=status\n\nSee 'http://wiki.apache.org/solr/DataImportHandler' for more details.\n\n\nJMX\n\nJMX monitoring is disabled by default, but you can enable it with the\nfollowing commands:\n\n  juju set solr jmx-enabled=True\n  juju set solr jmx-control-password=<password>\n  juju set solr jmx-monitor-password=<password>\n\nThe control role (username - 'controlRole') allows read/write access, the\nmonitor role (username - 'monitorRole') read only access.  If a password is\nempty, it disables access for that role.\n\nThere is a final JMX option, 'jmx-localhost'.  This determines what hostname is\ngiven to the JMX client to connect to.  If false, the internal hostname or IP\naddress of the unit will be used, meaning connection is suited to either LXC\nbased deployments or cloud deployments where you have VPN access:\n\n  JConsole or VisualVM connect to <private unit address>:10001 with\n  username/password\n\nFor cloud deployments, setting this to true uses 'localhost' hostname, which\nallows you to connect over a ssh tunnel:\n\n  ssh -L 10001:localhost:10001 -L 10002:localhost:10002 <public unit address>\n  JConsole or VisualVM connect to localhost:10001 with username/password\n\nThe latter is much more typical of out of the box deployment, so 'jmx-localhost'\ndefaults to True.\n\n\nMultiple Cores\n\nA Solr service by default has a single index ('core').  However with this charm,\nyou can enable up to 4 extra indexes, each of which may be queried, updated,\netc. individually.  Such an arrangement is typical for large\napplications which require querying multiple sets of data.\n\nTo enable an extra core:\n\n  # enable core\n  juju set solr core<n>-enabled=True\n\n  # set core schema\n  juju set solr \"core<n>-schema=$(base64 < <schema>)\"\n\nwhere '<n>' is the core number, currently 1-4.\n\nURLs have a '/core<n>/' component to determine the core being accessed.  For\nexample 'http://.../solr/core1/select?q=*:*'.  Excluding the core\ncomponent defaults to the first index (or 'core0').\n\n\nReplication\n\nSolr supports the ability to replicate an index from a master unit to one or\nmore slave units:\n\n  # deploy second service\n  juju deploy --repository . local:solr solr-slave\n\n  # add master/slave relationship\n  juju add-relation solr:master solr-slave:slave\n\n  # add further slave(s)\n  juju add-unit solr-slave\n\nEach slave will poll and replicate the master's index and schema.  Slaves should\nbe treated as search only.  Updates should be applied to the master only.  All\nenabled cores will be replicated.\n\nReplication allows you to spread the querying load across multiple slave\nservers.  A slave can also be used to take a backup of the index:\n\n  http://.../solr/[core<n>/]replication?command=backup\n\nA concurrency safe snapshot of the index will be created under\n'/var/lib/solr/core<n>'.  (You can use this backup URL on a non-replicated unit\ntoo).\n\nMasters and slaves relations can be combined freely, so you can set a unit to be\nboth a master and slave, called a 'Solr Repeater', acting as a local proxy for\nthe master.\n\nSee 'http://wiki.apache.org/solr/SolrReplication' for more details.\n\n\nDistributed Search\n\nSolr supports the ability to divide an index across multiple units.  Each unit\nholds and queries its own complete index which requires you to provide your own\nmechanism for distributing (ideally randomly) documents to each unit.  To create\nsuch a deployment:\n\n  # add 2 more units for a 3 unit index\n  juju add-unit -n 2 solr\n\nThen query across 3 machines:\n\n  # show all documents\n  http://<any unit address>:8080/solr/select?shards=<unit 1 address>:8080/solr[/core<n>],<unit 2 address>:8080/solr[/core<n>],<unit 3 address>:8080/solr[/core<n>]&q=*:*\n\n(NOTE: The unit addresses need to be contactable from the initial unit you\nquery.  So if you are using a ssh tunnel, these addresses will be the private\nLAN addresses instead of localhost.)\n\nIf you need to update the index schema, updating this via juju (see above) will\napply the schema across all units providing they are deployed under a single\nservice.\n\n(NOTE: Distributed search doesn't use a shared Inverse Document Frequency (IDF),\nso irregularities in the scoring will occur compared to a combined index on a\nsingle machine.  It's therefore important that you distribute documents randomly\nacross units.)\n\nSee 'http://wiki.apache.org/solr/DistributedSearch' for more details.\n\n\nDistributed Search + Replication\n\nDistributed search features can be combined with replication to do a so called\n'deep scale' deployment.  Using the notes above, you can create multiple\nreplication clusters each of which forms a node of a distributed search.  This\nis a somewhat exotic deployment so is left to the user to explore!\n",
  "readme": "Overview\n--------\n\nEnterprise search server based on Lucene.\n\nSolr is an open source enterprise search server based on the Lucene\nJava search library, with XML/HTTP and JSON APIs, hit highlighting,\nfaceted search, caching, replication, and a web administration interface.\n\nhttp://lucene.apache.org/solr/\n \nUsage\n-----\n\nGeneral\n\nA Solr deployment consists of a Solr service:\n\n  juju deploy --repository . local:solr solr\n\nOnce deployed, you can access its admin interface over a ssh tunnel:\n\n  ssh -L 8080:localhost:8080 <public address>\n  Open web browser at http://localhost:8080/solr/admin/\n\n(NOTE: For LXC based deployments, a ssh tunnel isn't required and you can simply\naccess 'http://<private address>:8080/solr/admin/')\n\nA Solr instance isn't security hardened enough to safely expose to the\nInternet, even with password protection (see below).  Use on an internal\nnetwork only.  Should you need to expose an instance for development purposes,\nyou can still issue:\n\n  juju expose solr\n\nThis will expose solr on port 8080.\n\nThe Solr server is protected by HTTP digest password protection which isn't\nenabled by default, to enable set one or many passwords related to the admin,\nupdate and search roles:\n\n  juju set solr \"admin-password=<password>\"\n  juju set solr \"update-password=<password>\"\n  juju set solr \"search-password=<password>\"\n\n(NOTE: You could also do this at deployment with the '--config' switch)\n\nEach role has its own password and set of abilities.  The abilities are\nhierarchical such that the update role includes the abilities of the search\nrole and the admin role includes all abilities.  The roles would typically be\nused as:\n\n  (Username)\n  solr-admin  - all access\n  solr-update - POST'ing new documents to index\n  solr-search - search querying only\n\nSetting an empty password disables protection for that role.\n\nYou can search a Solr instance with the following example queries:\n\n  # show all documents\n  http://.../solr/select?q=*:*\n\n  # output in json\n  http://.../solr/select?q=*:*&wt=json\n\nThe XML schema can be set as follows:\n\n  juju set solr \"schema=$(base64 < <schema>)\"\n\nUploading documents can be done from the commandline using curl (installed on\nunit), see 'http://wiki.apache.org/solr/' for details.\n\n\nIndexing from Database\n\nYou can automatically index the content of a RDBMS such as MySQL or PostgreSQL\nusing Solr's Data Import Handler (DIH).  Database configuration is controlled\nusing the 'db-config' option.  This is a comma separated list of core, database\nservice and database colon separated values:\n\n  <core>:<service>:<database>,<core>:<service>:<database>\n\nif '<core>' is omitted then 'core0' (initial core) is assumed.\n\n(Note: You can use multiple databases from the same MySQL service.  When a\ndatabase isn't defined for a MySQL service, the database 'solr' is used.\nPostgreSQL doesn't support multiple databases from the same service, so database\nis ignored.)\n\nFor example:\n\n  # core0 uses mysql database solr1\n  # core1 uses mysql database solr2\n  juju set solr \"db-config=core0:mysql:solr1,core1:mysql:solr2\"\n\n  # core0 uses postgresql\n  # core1 uses mysql2 database solr\n  juju set solr \"db-config=core0:postgresql,core1:mysql2:solr\"\n\nHaving deployed the appropriate charm, add the relation:\n\n  # mysql\n  juju add-relation solr:db-mysql mysql:db\n\n  # postgresql\n  juju add-relation solr:db-pgsql postgresql:db\n\n  # upload data-config document\n  juju set solr \"dih-config=$(base64 < <data-config>)\"\n\n  # core1 data-config document\n  juju set solr \"core1-dih-config=$(base64 < <data-config>)\"\n\nThen use the DIH web interface to perform the importing:\n\n  # full import\n  http://.../solr/dataimport?command=full-import\n\n  # delta import\n  http://.../solr/dataimport?command=delta-import\n\n  # status\n  http://.../solr/dataimport?command=status\n\nSee 'http://wiki.apache.org/solr/DataImportHandler' for more details.\n\n\nJMX\n\nJMX monitoring is disabled by default, but you can enable it with the\nfollowing commands:\n\n  juju set solr jmx-enabled=True\n  juju set solr jmx-control-password=<password>\n  juju set solr jmx-monitor-password=<password>\n\nThe control role (username - 'controlRole') allows read/write access, the\nmonitor role (username - 'monitorRole') read only access.  If a password is\nempty, it disables access for that role.\n\nThere is a final JMX option, 'jmx-localhost'.  This determines what hostname is\ngiven to the JMX client to connect to.  If false, the internal hostname or IP\naddress of the unit will be used, meaning connection is suited to either LXC\nbased deployments or cloud deployments where you have VPN access:\n\n  JConsole or VisualVM connect to <private unit address>:10001 with\n  username/password\n\nFor cloud deployments, setting this to true uses 'localhost' hostname, which\nallows you to connect over a ssh tunnel:\n\n  ssh -L 10001:localhost:10001 -L 10002:localhost:10002 <public unit address>\n  JConsole or VisualVM connect to localhost:10001 with username/password\n\nThe latter is much more typical of out of the box deployment, so 'jmx-localhost'\ndefaults to True.\n\n\nMultiple Cores\n\nA Solr service by default has a single index ('core').  However with this charm,\nyou can enable up to 4 extra indexes, each of which may be queried, updated,\netc. individually.  Such an arrangement is typical for large\napplications which require querying multiple sets of data.\n\nTo enable an extra core:\n\n  # enable core\n  juju set solr core<n>-enabled=True\n\n  # set core schema\n  juju set solr \"core<n>-schema=$(base64 < <schema>)\"\n\nwhere '<n>' is the core number, currently 1-4.\n\nURLs have a '/core<n>/' component to determine the core being accessed.  For\nexample 'http://.../solr/core1/select?q=*:*'.  Excluding the core\ncomponent defaults to the first index (or 'core0').\n\n\nReplication\n\nSolr supports the ability to replicate an index from a master unit to one or\nmore slave units:\n\n  # deploy second service\n  juju deploy --repository . local:solr solr-slave\n\n  # add master/slave relationship\n  juju add-relation solr:master solr-slave:slave\n\n  # add further slave(s)\n  juju add-unit solr-slave\n\nEach slave will poll and replicate the master's index and schema.  Slaves should\nbe treated as search only.  Updates should be applied to the master only.  All\nenabled cores will be replicated.\n\nReplication allows you to spread the querying load across multiple slave\nservers.  A slave can also be used to take a backup of the index:\n\n  http://.../solr/[core<n>/]replication?command=backup\n\nA concurrency safe snapshot of the index will be created under\n'/var/lib/solr/core<n>'.  (You can use this backup URL on a non-replicated unit\ntoo).\n\nMasters and slaves relations can be combined freely, so you can set a unit to be\nboth a master and slave, called a 'Solr Repeater', acting as a local proxy for\nthe master.\n\nSee 'http://wiki.apache.org/solr/SolrReplication' for more details.\n\n\nDistributed Search\n\nSolr supports the ability to divide an index across multiple units.  Each unit\nholds and queries its own complete index which requires you to provide your own\nmechanism for distributing (ideally randomly) documents to each unit.  To create\nsuch a deployment:\n\n  # add 2 more units for a 3 unit index\n  juju add-unit -n 2 solr\n\nThen query across 3 machines:\n\n  # show all documents\n  http://<any unit address>:8080/solr/select?shards=<unit 1 address>:8080/solr[/core<n>],<unit 2 address>:8080/solr[/core<n>],<unit 3 address>:8080/solr[/core<n>]&q=*:*\n\n(NOTE: The unit addresses need to be contactable from the initial unit you\nquery.  So if you are using a ssh tunnel, these addresses will be the private\nLAN addresses instead of localhost.)\n\nIf you need to update the index schema, updating this via juju (see above) will\napply the schema across all units providing they are deployed under a single\nservice.\n\n(NOTE: Distributed search doesn't use a shared Inverse Document Frequency (IDF),\nso irregularities in the scoring will occur compared to a combined index on a\nsingle machine.  It's therefore important that you distribute documents randomly\nacross units.)\n\nSee 'http://wiki.apache.org/solr/DistributedSearch' for more details.\n\n\nDistributed Search + Replication\n\nDistributed search features can be combined with replication to do a so called\n'deep scale' deployment.  Using the notes above, you can create multiple\nreplication clusters each of which forms a node of a distributed search.  This\nis a somewhat exotic deployment so is left to the user to explore!\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}