{
  "name": "swift-proxy Juju charm",
  "juju_charm_name": "swift-proxy",
  "revision": "cs:precise/swift-proxy-30",
  "latest": true,
  "uris": [
    "https://jujucharms.com/swift-proxy",
    "https://jujucharms.com/swift-proxy/precise",
    "https://jujucharms.com/swift-proxy/precise/30",
    "https://api.jujucharms.com/v5/swift-proxy",
    "https://api.jujucharms.com/v5/precise/swift-proxy",
    "https://api.jujucharms.com/v5/precise/swift-proxy-30"
  ],
  "labels": [
    "Juju charm",
    "cache-proxy",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Runtime/JavaScript/Node.js",
    "Type/Middleware/Proxy",
    "Type/Middleware/Data Store/Object Store"
  ],
  "info_url": "https://jujucharms.com/swift-proxy",
  "package_url": "https://api.jujucharms.com/v5/precise/swift-proxy-30/archive",
  "created": "2015-06-17T09:34:44.784Z",
  "updated": "2015-06-17T09:34:44.784Z",
  "description": "Swift proxy node\n\nSwift is a distributed virtual object store. This formula deploys the proxy node\nto be related to storage nodes.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/hacluster",
      "self_resolve": true,
      "juju_interface": "hacluster",
      "juju_name": "ha",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/keystone",
      "self_resolve": true,
      "juju_interface": "keystone",
      "juju_name": "identity-service",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/swift",
      "self_resolve": true,
      "juju_interface": "swift",
      "juju_name": "swift-storage",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "auth-type": {
      "type": "string",
      "description": "Auth method to use, tempauth or keystone",
      "default": "tempauth",
      "mapping": "charm_option"
    },
    "bind-port": {
      "type": "int",
      "description": "TCP port to listen on",
      "default": 8080,
      "mapping": "charm_option"
    },
    "common-name": {
      "type": "string",
      "description": "Common Name",
      "default": "CN",
      "mapping": "charm_option"
    },
    "country": {
      "type": "string",
      "description": "Country",
      "default": "US",
      "mapping": "charm_option"
    },
    "delay-auth-decision": {
      "type": "boolean",
      "description": "Delay authentication to downstream WSGI services.",
      "default": true,
      "mapping": "charm_option"
    },
    "ha-bindiface": {
      "type": "string",
      "description": "Default network interface on which HA cluster will bind to communication\nwith the other members of the HA Cluster.\n",
      "default": "eth0",
      "mapping": "charm_option"
    },
    "ha-mcastport": {
      "type": "int",
      "description": "Default multicast port number that will be used to communicate between\nHA Cluster nodes.\n",
      "default": 5414,
      "mapping": "charm_option"
    },
    "keystone-admin-password": {
      "type": "string",
      "description": "Keystone admin password",
      "default": null,
      "mapping": "charm_option"
    },
    "keystone-admin-tenant-name": {
      "type": "string",
      "description": "Keystone admin tenant name",
      "default": "service",
      "mapping": "charm_option"
    },
    "keystone-admin-user": {
      "type": "string",
      "description": "Keystone admin username",
      "default": null,
      "mapping": "charm_option"
    },
    "keystone-auth-host": {
      "type": "string",
      "description": "Keystone authentication host",
      "default": null,
      "mapping": "charm_option"
    },
    "keystone-auth-port": {
      "type": "int",
      "description": "Keystone authentication port",
      "default": 35357,
      "mapping": "charm_option"
    },
    "keystone-auth-protocol": {
      "type": "string",
      "description": "Keystone authentication protocol",
      "default": "http",
      "mapping": "charm_option"
    },
    "locale": {
      "type": "string",
      "description": "Locale",
      "default": "City",
      "mapping": "charm_option"
    },
    "min-hours": {
      "type": "int",
      "description": "Minimum hours between balances",
      "default": 1,
      "mapping": "charm_option"
    },
    "openstack-origin": {
      "type": "string",
      "description": "Repository from which to install.  May be one of the following:\ndistro (default), ppa:somecustom/ppa, a deb url sources entry,\nor a supported Cloud Archive release pocket.\n.\nSupported Cloud Archive sources include:\n  - cloud:precise-folsom,\n  - cloud:precise-folsom/updates\n  - cloud:precise-folsom/staging\n  - cloud:precise-folsom/proposed\n.\nNote that updating this setting to a source that is known to\nprovide a later version of OpenStack will trigger a software\nupgrade.\n",
      "default": "distro",
      "mapping": "charm_option"
    },
    "operator-roles": {
      "type": "string",
      "description": "Comma-separated list of Swift operator roles.",
      "default": "Member,Admin",
      "mapping": "charm_option"
    },
    "partition-power": {
      "type": "int",
      "description": "Partition power.",
      "default": 8,
      "mapping": "charm_option"
    },
    "region": {
      "type": "string",
      "description": "OpenStack region that this swift-proxy supports.",
      "default": "RegionOne",
      "mapping": "charm_option"
    },
    "replicas": {
      "type": "int",
      "description": "Minimum replicas.",
      "default": 3,
      "mapping": "charm_option"
    },
    "ssl_cert": {
      "type": "string",
      "description": "Base64 encoded SSL certificate to install and use for API ports.\n.\n   juju set swift-proxy ssl_cert=\"$(cat cert | base64)\" \\\n                        ssl_key=\"$(cat key | base64)\"\n.\nSetting this value (and ssl_key) will enable reverse proxying, point\nSwifts's entry in the Keystone catalog to use https, and override\nany certficiate and key issued by Keystone (if it is configured to\ndo so).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl_key": {
      "type": "string",
      "description": "Base64 encoded SSL key to use with certificate specified as ssl_cert.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "state": {
      "type": "string",
      "description": "State",
      "default": "ST",
      "mapping": "charm_option"
    },
    "swift-hash": {
      "type": "string",
      "description": "Hash to use across all swift-proxy servers - don't loose",
      "default": null,
      "mapping": "charm_option"
    },
    "use-https": {
      "type": "string",
      "description": "Whether to listen on HTTPS",
      "default": "yes",
      "mapping": "charm_option"
    },
    "vip": {
      "type": "string",
      "description": "Virtual IP to use to front swift-proxy in ha configuration",
      "default": null,
      "mapping": "charm_option"
    },
    "vip_cidr": {
      "type": "int",
      "description": "Netmask that will be used for the Virtual IP",
      "default": 24,
      "mapping": "charm_option"
    },
    "vip_iface": {
      "type": "string",
      "description": "Network Interface where to place the Virtual IP",
      "default": "eth0",
      "mapping": "charm_option"
    },
    "workers": {
      "type": "int",
      "description": "Number of TCP workers to launch (0 for the number of system cores)",
      "default": 0,
      "mapping": "charm_option"
    },
    "zone-assignment": {
      "type": "string",
      "description": "Which policy to use when assigning new storage nodes to zones.\n.\n  manual - Allow swift-storage services to request zone membership.\n  auto - Assign new swift-storage units to zones automatically.\n.\nThe configured replica minimum must be met by an equal number of storage\nzones before the storage ring will be initially balance.  Deployment\nrequirements differ based on the zone-assignment policy configured, see\nthis charm's README for details.\n",
      "default": "manual",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/swift-proxy",
      "juju_interface": "swift-proxy",
      "juju_name": "object-store",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "cluster": {
      "Name": "cluster",
      "Role": "peer",
      "Interface": "swift-ha",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "Overview\n--------\n\nThis charm provides the swift-proxy component of the OpenStack Swift object\nstorage system.  It can be deployed as part of its own stand-alone storage\ncluster or it can be integrated with the other OpenStack components, assuming\nthose are also managed by Juju.  For Swift to function, you'll also need to\ndeploy additional swift-storage nodes using the cs:precise/swift-storage\ncharm.\n\nFor more information about Swift and its architecture, visit the [official project website](http://swift.openstack.org)\n\nThis charm was developed to support deploying multiple version of Swift on\nUbuntu Precise 12.04, as they relate to the release series of OpenStack.  That\nis, OpenStack Essex corresponds to Swift 1.4.8 while OpenStack Folsom shipped\n1.7.4.  This charm can be used to deploy either (and future) versions of Swift\nonto an Ubuntu Precise 12.04, making use of the Ubuntu Cloud Archive when\nneeded.\n\nUsage\n-----\n\nCurrently, Swift may be deployed in two ways.   In either case, additional\nstorage nodes are required.  The configuration option that dictates\nhow to deploy this charm is the 'zone-assignment' setting.  This section\ndescribes how to select the appropriate zone assignment policy, as well as\na few other configuration settings of interest.  Many of the configuration\nsettings can be left as default.\n\n**Zone Assignment**\n\nThis setting determines how the charm assigns new storage nodes to storage\nzones.\n\nThe default, 'manual' option is suggested for production as it allows\nadministrators to carefully architect the storage cluster.  It requires each\nswift-storage service to be deployed with an explicit storage zone configured\nin its deployment settings.  Upon relation to a swift-proxy, the storage node\nwill request membership to its configured zone and be assigned by the\nswift-proxy charm accordingly.  Using the cs:precise/swift-storage charm with\nthis charm, a deployment would look something like:\n\n    $ cat >swift.cfg <<END\n        swift-proxy:\n            zone-assignment: manual\n            replicas: 3\n        swift-storage-zone1:\n            zone: 1\n            block-device: /etc/swift/storage.img|2G\n        swift-storage-zone2:\n            zone: 2\n            block-device: /etc/swift/storage.img|2G\n        swift-storage-zone3:\n            zone: 3\n            block-device: /etc/swift/storage.img|2G\n    END\n    $ juju deploy --config=swift.cfg swift-proxy\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone1\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone2\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone3\n    $ juju add-relation swift-proxy swift-storage-zone1\n    $ juju add-relation swift-proxy swift-storage-zone2\n    $ juju add-relation swift-proxy swift-storage-zone3\n\nThis will result in a configured storage cluster of 3 zones, each with one\nnode.  To expand capacity of the storage system, nodes can be added to specific\nzones in the ring.\n\n    $ juju add-unit swift-storage-zone1\n    $ juju add-unit -n5 swift-storage-zone3    # Adds 5 units to zone3\n\nThis charm will not balance the storage ring until there are enough storage\nzones to meet its minimum replica requirement, in this case 3.\n\nThe other option for zone assignment is 'auto'.  In this mode, swift-proxy\ngets a relation to a single swift-storage service unit.  Each machine unit\nassigned to that service unit will be distributed evenly across zones.\n\n    $ cat >swift.cfg <<END\n    swift-proxy:\n        zone-assignment: auto\n        replicas: 3\n    swift-storage:\n        zone: 1\n        block-device: /etc/swift/storage.img|2G\n    END\n    $ juju deploy --config=swift.cfg swift-proxy\n    $ juju deploy --config=swift.cfg swift-storage\n    $ juju add-relation swift-proxy swift-storage\n    # The swift-storage/0 unit ends up the first node in zone 1\n    $ juju add-unit swift-storage\n    # swift-storage/1 ends up the first node in zone 2.\n    $ juju add-unit swift-storage\n    # swift-storage/2 is the first in zone 3, replica requirement is satisfied\n    # the ring is balanced.\n\nExtending the ring in the case is just a matter of adding more units to the\nsingle service unit.  New units will be distributed across the existing zones.\n\n    $ juju add-unit swift-storage\n    # swift-storage/3 is assigned to zone 1.\n    $ juju add-unit swift-storage\n    # swift-storage/4 is assigned to zone 2.\n    etc.\n\n**Installation repository.**\n\nThe 'openstack-origin' setting allows Swift to be installed from installation\nrepositories and can be used to setup access to the Ubuntu Cloud Archive\nto support installing Swift versions more recent than what is shipped with\nUbuntu 12.04 (1.4.8).  For more information, see config.yaml.\n\n**Authentication.**\n\nBy default, the charm will be deployed using the tempauth auth system.  This is\na simple and not-recommended auth system that functions without any external\ndependencies.  See Swift documentation for details.\n\nThe charm may also be configured to use Keystone, either manually (via config)\nor automatically via a relation to an existing Keystone service using the\ncs:precise/keystone charm.  The latter is preferred, however, if a Keystone\nservice is desired but it is not managed by Juju, the configuration for the\nauth token middleware can be set manually via the charm's config.  A relation\nto a Keystone server via the identity-service interface will configure\nswift-proxy with the appropriate credentials to make use of Keystone and is\nrequired for any integration with other OpenStack components.\n\n**Glance**\n\nSwift may be used to as a storage backend for the Glance image service.  To do\nso, simply add a relation between swift-proxy and an existing Glance service\ndeployed using the cs:precise/glance charm.\n",
  "readme": "Overview\n--------\n\nThis charm provides the swift-proxy component of the OpenStack Swift object\nstorage system.  It can be deployed as part of its own stand-alone storage\ncluster or it can be integrated with the other OpenStack components, assuming\nthose are also managed by Juju.  For Swift to function, you'll also need to\ndeploy additional swift-storage nodes using the cs:precise/swift-storage\ncharm.\n\nFor more information about Swift and its architecture, visit the [official project website](http://swift.openstack.org)\n\nThis charm was developed to support deploying multiple version of Swift on\nUbuntu Precise 12.04, as they relate to the release series of OpenStack.  That\nis, OpenStack Essex corresponds to Swift 1.4.8 while OpenStack Folsom shipped\n1.7.4.  This charm can be used to deploy either (and future) versions of Swift\nonto an Ubuntu Precise 12.04, making use of the Ubuntu Cloud Archive when\nneeded.\n\nUsage\n-----\n\nCurrently, Swift may be deployed in two ways.   In either case, additional\nstorage nodes are required.  The configuration option that dictates\nhow to deploy this charm is the 'zone-assignment' setting.  This section\ndescribes how to select the appropriate zone assignment policy, as well as\na few other configuration settings of interest.  Many of the configuration\nsettings can be left as default.\n\n**Zone Assignment**\n\nThis setting determines how the charm assigns new storage nodes to storage\nzones.\n\nThe default, 'manual' option is suggested for production as it allows\nadministrators to carefully architect the storage cluster.  It requires each\nswift-storage service to be deployed with an explicit storage zone configured\nin its deployment settings.  Upon relation to a swift-proxy, the storage node\nwill request membership to its configured zone and be assigned by the\nswift-proxy charm accordingly.  Using the cs:precise/swift-storage charm with\nthis charm, a deployment would look something like:\n\n    $ cat >swift.cfg <<END\n        swift-proxy:\n            zone-assignment: manual\n            replicas: 3\n        swift-storage-zone1:\n            zone: 1\n            block-device: /etc/swift/storage.img|2G\n        swift-storage-zone2:\n            zone: 2\n            block-device: /etc/swift/storage.img|2G\n        swift-storage-zone3:\n            zone: 3\n            block-device: /etc/swift/storage.img|2G\n    END\n    $ juju deploy --config=swift.cfg swift-proxy\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone1\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone2\n    $ juju deploy --config=swift.cfg swift-storage swift-storage-zone3\n    $ juju add-relation swift-proxy swift-storage-zone1\n    $ juju add-relation swift-proxy swift-storage-zone2\n    $ juju add-relation swift-proxy swift-storage-zone3\n\nThis will result in a configured storage cluster of 3 zones, each with one\nnode.  To expand capacity of the storage system, nodes can be added to specific\nzones in the ring.\n\n    $ juju add-unit swift-storage-zone1\n    $ juju add-unit -n5 swift-storage-zone3    # Adds 5 units to zone3\n\nThis charm will not balance the storage ring until there are enough storage\nzones to meet its minimum replica requirement, in this case 3.\n\nThe other option for zone assignment is 'auto'.  In this mode, swift-proxy\ngets a relation to a single swift-storage service unit.  Each machine unit\nassigned to that service unit will be distributed evenly across zones.\n\n    $ cat >swift.cfg <<END\n    swift-proxy:\n        zone-assignment: auto\n        replicas: 3\n    swift-storage:\n        zone: 1\n        block-device: /etc/swift/storage.img|2G\n    END\n    $ juju deploy --config=swift.cfg swift-proxy\n    $ juju deploy --config=swift.cfg swift-storage\n    $ juju add-relation swift-proxy swift-storage\n    # The swift-storage/0 unit ends up the first node in zone 1\n    $ juju add-unit swift-storage\n    # swift-storage/1 ends up the first node in zone 2.\n    $ juju add-unit swift-storage\n    # swift-storage/2 is the first in zone 3, replica requirement is satisfied\n    # the ring is balanced.\n\nExtending the ring in the case is just a matter of adding more units to the\nsingle service unit.  New units will be distributed across the existing zones.\n\n    $ juju add-unit swift-storage\n    # swift-storage/3 is assigned to zone 1.\n    $ juju add-unit swift-storage\n    # swift-storage/4 is assigned to zone 2.\n    etc.\n\n**Installation repository.**\n\nThe 'openstack-origin' setting allows Swift to be installed from installation\nrepositories and can be used to setup access to the Ubuntu Cloud Archive\nto support installing Swift versions more recent than what is shipped with\nUbuntu 12.04 (1.4.8).  For more information, see config.yaml.\n\n**Authentication.**\n\nBy default, the charm will be deployed using the tempauth auth system.  This is\na simple and not-recommended auth system that functions without any external\ndependencies.  See Swift documentation for details.\n\nThe charm may also be configured to use Keystone, either manually (via config)\nor automatically via a relation to an existing Keystone service using the\ncs:precise/keystone charm.  The latter is preferred, however, if a Keystone\nservice is desired but it is not managed by Juju, the configuration for the\nauth token middleware can be set manually via the charm's config.  A relation\nto a Keystone server via the identity-service interface will configure\nswift-proxy with the appropriate credentials to make use of Keystone and is\nrequired for any integration with other OpenStack components.\n\n**Glance**\n\nSwift may be used to as a storage backend for the Glance image service.  To do\nso, simply add a relation between swift-proxy and an existing Glance service\ndeployed using the cs:precise/glance charm.\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}