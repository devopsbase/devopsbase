{
  "name": "memcached Juju charm",
  "juju_charm_name": "memcached",
  "revision": "cs:precise/memcached-13",
  "latest": true,
  "uris": [
    "https://jujucharms.com/memcached",
    "https://jujucharms.com/memcached/precise",
    "https://jujucharms.com/memcached/precise/13",
    "https://api.jujucharms.com/v5/memcached",
    "https://api.jujucharms.com/v5/precise/memcached",
    "https://api.jujucharms.com/v5/precise/memcached-13"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Type/Infrastructure/Operating System/macOS",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Runtime/Perl",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Cache/Memcached"
  ],
  "info_url": "https://jujucharms.com/memcached",
  "package_url": "https://api.jujucharms.com/v5/precise/memcached-13/archive",
  "created": "2015-06-17T09:36:36.551Z",
  "updated": "2015-06-17T09:36:36.551Z",
  "description": "A high-performance memory object caching system\n\nmemcached optimizes specific high-load serving applications that are designed to take advantage of its versatile no-locking memory access system. Clients are available in several different programming languages, to suit the needs of the specific application. Traditionally this has been used in mod_perl apps to avoid storing large chunks of data in Apache memory, and to share this burden across several machines.",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "connection-limit": {
      "type": "int",
      "description": "maximum simultaneous connections (memcached option -c)",
      "default": 1024,
      "mapping": "charm_option"
    },
    "disable-auto-cleanup": {
      "type": "string",
      "description": "do not remove things automatically from the cache on OOM\n(memcached option -M)\n",
      "default": "no",
      "mapping": "charm_option"
    },
    "disable-cas": {
      "type": "string",
      "description": "disable use of CAS (and reduce the per-item size by 8 bytes)",
      "default": "no",
      "mapping": "charm_option"
    },
    "disable-large-pages": {
      "type": "string",
      "description": "The charm will will try to use large pages if given more than 2GB of RAM. You may want to disable this behavior. (memcached option -L)",
      "default": "no",
      "mapping": "charm_option"
    },
    "extra-options": {
      "type": "string",
      "description": "memcached has many other options documented in its man page. You may pass them here as a string which will be appended to memcached's execution.",
      "default": "",
      "mapping": "charm_option"
    },
    "factor": {
      "type": "float",
      "description": "Use <factor> as the multiplier for computing the sizes of memory\nchunks that items are stored in. A lower value may result in less\nwasted memory depending on the total amount of memory available\nand the distribution of item sizes. The default is 1.25.\n",
      "default": 1.25,
      "mapping": "charm_option"
    },
    "min-item-size": {
      "type": "int",
      "description": "Allocate a minimum of <size> bytes for the item key, value,\nand flags. The default  is  48.  If  you have  a  lot of small\nkeys and values, you can get a significant memory efficiency\ngain with a lower value. If you use a high chunk growth factor\n(-f option),  on  the  other  hand,  you  may  want  to\nincrease  the  size  to  allow  a  bigger percentage of your\nitems to fit in the most densely packed (smallest) chunks.\n(memcached option -n)\n",
      "default": -1,
      "mapping": "charm_option"
    },
    "nagios_context": {
      "type": "string",
      "description": "Used by the nrpe-external-master subordinate charm. A string that will be prepended to instance name to set the host name in nagios. So for instance the hostname would be something like:\n    juju-memcached-0\nIf you're running multiple environments with the same services in them this allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "request-limit": {
      "type": "int",
      "description": "limit of requests a single client can make at one time\n(memcached option -R) -1 takes memcached default (20)\n",
      "default": -1,
      "mapping": "charm_option"
    },
    "size": {
      "type": "int",
      "description": "Size of memcache pool in MiB (memcached option -m)",
      "default": 768,
      "mapping": "charm_option"
    },
    "slab-page-size": {
      "type": "int",
      "description": "Override the size of each slab page in bytes. In mundane\nwords, it adjusts  the  maximum  item  size that  memcached\nwill  accept.  You can use the suffixes K and M to specify\nthe size as well, so use 2000000 or 2000K or 2M if you want\na maximum size of 2 MB per object.   It  is  not  recommended\nto raise this limit above 1 MB due just to performance reasons.\nThe default value is 1 MB. (memcached option -I) -1 takes\nthe memcached default.\n",
      "default": -1,
      "mapping": "charm_option"
    },
    "tcp-port": {
      "type": "int",
      "description": "TCP port to listen on. (memcached option -p)",
      "default": 11211,
      "mapping": "charm_option"
    },
    "threads": {
      "type": "int",
      "description": "number of threads to use. default is 4. (memcached option -t)",
      "default": -1,
      "mapping": "charm_option"
    },
    "udp-port": {
      "type": "int",
      "description": "UDP port to listen on (memcached option -U)",
      "default": 0,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/memcache",
      "juju_interface": "memcache",
      "juju_name": "cache",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/munin-node",
      "juju_interface": "munin-node",
      "juju_name": "munin",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe-external-master",
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\n[Memcached](http://memcached.org) is a Free & open source, high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n\nMemcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.\n\n# Usage\n\nYou can deploy a memcached instance with\n\n    juju deploy memcached\n\nMemcached listens to port 11211 on the internal network, it is not recommended to expose memcached directly to the open internet. If you want to check that it has deployed correctly you can ssh into the unit and then check the port by hand:\n\n    juju status memcached\n    juju ssh memcached/3\n    echo \"stats settings\" | nc localhost 11211\n\nThe \"3\" in this case is an example, the `juju status memcached` will show you which machine number the service is running on so you can `juju ssh` to it.\n\n## Example Usage\n\nThis charm can be used with other charms, in particular make note of [these possible relations](https://jujucharms.com/fullscreen/search/precise/memcached-7/?text=memcached#bws-related-charms)\n\nTo use memcached with the Rails charm follow [these instructions](https://jujucharms.com/fullscreen/search/precise/rails-1/?text=rails#bws-readme)\n\n## Scale out Usage\n\nYou can \n\n    juju add-unit memcached\n\nTo add more units. Memcached doesn't share load, it's very simple and the clients have the intelligence to know which server to pick. \n\n## Known Limitations and Issues\n\n# Configuration\n\nStandard configuration options are provided, we recommend scanning the [Memcached documentation](https://code.google.com/p/memcached/wiki/NewConfiguringServer) before tweaking the default configuration.\n\n# Contact Information\n\n## Memcached\n\n- [Memcached website](http://memcached.org)\n- [Memcached bug tracker](https://code.google.com/p/memcached/issues/list)\n- [Memcached mailing list](https://groups.google.com/forum/#!forum/memcached)\n",
  "readme": "# Overview\n\n[Memcached](http://memcached.org) is a Free & open source, high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n\nMemcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.\n\n# Usage\n\nYou can deploy a memcached instance with\n\n    juju deploy memcached\n\nMemcached listens to port 11211 on the internal network, it is not recommended to expose memcached directly to the open internet. If you want to check that it has deployed correctly you can ssh into the unit and then check the port by hand:\n\n    juju status memcached\n    juju ssh memcached/3\n    echo \"stats settings\" | nc localhost 11211\n\nThe \"3\" in this case is an example, the `juju status memcached` will show you which machine number the service is running on so you can `juju ssh` to it.\n\n## Example Usage\n\nThis charm can be used with other charms, in particular make note of [these possible relations](https://jujucharms.com/fullscreen/search/precise/memcached-7/?text=memcached#bws-related-charms)\n\nTo use memcached with the Rails charm follow [these instructions](https://jujucharms.com/fullscreen/search/precise/rails-1/?text=rails#bws-readme)\n\n## Scale out Usage\n\nYou can \n\n    juju add-unit memcached\n\nTo add more units. Memcached doesn't share load, it's very simple and the clients have the intelligence to know which server to pick. \n\n## Known Limitations and Issues\n\n# Configuration\n\nStandard configuration options are provided, we recommend scanning the [Memcached documentation](https://code.google.com/p/memcached/wiki/NewConfiguringServer) before tweaking the default configuration.\n\n# Contact Information\n\n## Memcached\n\n- [Memcached website](http://memcached.org)\n- [Memcached bug tracker](https://code.google.com/p/memcached/issues/list)\n- [Memcached mailing list](https://groups.google.com/forum/#!forum/memcached)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}