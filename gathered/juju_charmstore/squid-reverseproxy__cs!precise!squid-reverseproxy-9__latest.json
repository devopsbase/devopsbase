{
  "name": "squid-reverseproxy Juju charm",
  "juju_charm_name": "squid-reverseproxy",
  "revision": "cs:precise/squid-reverseproxy-9",
  "latest": true,
  "uris": [
    "https://jujucharms.com/squid-reverseproxy",
    "https://jujucharms.com/squid-reverseproxy/precise",
    "https://jujucharms.com/squid-reverseproxy/precise/9",
    "https://api.jujucharms.com/v5/squid-reverseproxy",
    "https://api.jujucharms.com/v5/precise/squid-reverseproxy",
    "https://api.jujucharms.com/v5/precise/squid-reverseproxy-9"
  ],
  "labels": [
    "Juju charm",
    "cache-proxy",
    "Binding/Provider/HP",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Proxy",
    "Type/Middleware/Cache"
  ],
  "info_url": "https://jujucharms.com/squid-reverseproxy",
  "package_url": "https://api.jujucharms.com/v5/precise/squid-reverseproxy-9/archive",
  "created": "2015-06-17T09:31:08.071Z",
  "updated": "2015-06-17T09:31:08.071Z",
  "description": "Full featured Web Proxy cache (HTTP proxy)\n\nSquid is a high-performance proxy caching server for web clients, supporting FTP, gopher, and HTTP data objects.  Squid version 3 is a major rewrite of Squid in C++ and introduces a number of new features including ICAP and ESI support.\nRequires the following relation settings from consuming services:\n\n  ip: service ip address\n  port: service port\n  sitenames: space-delimited list of list of vhosts provided\n\nAlthough squid can be configured as a traditional forward proxy, this charm supports only a reverse proxy configuration.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/http",
      "self_resolve": true,
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "avg_obj_size_kb": {
      "type": "int",
      "description": "Estimated average size of a cached object.",
      "default": 16,
      "mapping": "charm_option"
    },
    "cache_dir": {
      "type": "string",
      "description": "The top-level directory where cache swap files will be stored.",
      "default": "/var/spool/squid3",
      "mapping": "charm_option"
    },
    "cache_mem_mb": {
      "type": "int",
      "description": "Maximum size of in-memory object cache (MB). Should be smaller than cache_size_mb. Set to zero to disable caching completely.\n",
      "default": 256,
      "mapping": "charm_option"
    },
    "cache_size_mb": {
      "type": "int",
      "description": "Maximum size of the on-disk object cache (MB). Set to zero to disable disk caching.",
      "default": 512,
      "mapping": "charm_option"
    },
    "enable_forward_proxy": {
      "type": "boolean",
      "description": "Enables forward proxying",
      "default": false,
      "mapping": "charm_option"
    },
    "enable_https": {
      "type": "boolean",
      "description": "Enable https access for squid, requires a squid compiled with --enable-ssl, certificate and private key",
      "default": false,
      "mapping": "charm_option"
    },
    "https_options": {
      "type": "string",
      "description": "Options for https port",
      "default": "accel vhost",
      "mapping": "charm_option"
    },
    "https_port": {
      "type": "int",
      "description": "Squid https listening port",
      "default": 443,
      "mapping": "charm_option"
    },
    "log_format": {
      "type": "string",
      "description": "Format of the squid log.",
      "default": "%>a %ui %un [%tl] \"%rm %ru HTTP/%rv\" %>Hs %<st \"%{Referer}>h\" \"%{User-Agent}>h\" %Ss:%Sh",
      "mapping": "charm_option"
    },
    "max_obj_size_kb": {
      "type": "int",
      "description": "Maximum size of an object to be cached (KB).",
      "default": 8192,
      "mapping": "charm_option"
    },
    "metrics": {
      "type": "string",
      "description": " List of SNMP metrics to be exported. Names should match Squid's SNMP names at http://wiki.squid-cache.org/Features/Snmp#Squid_OIDs.  By default, this charm uses the 5min sampling when averages are used and specifies the .5 measurements explicitly. If you want to use 1m or 60m timings, you should be explicit (.1/.60, and probably change the cron job frequency. Warning: any metric starting with 'cachePeer...' will produce 1 metric per configured peer, so can increase the number of metrics rapidly if you have lots of peers.",
      "default": "cacheCpuUsage\ncacheCurrentSwapSize\ncacheDnsSvcTime.5\ncacheHttpErrors\ncacheHttpAllSvcTime.5\ncacheHttpHitSvcTime.5\ncacheHttpMissSvcTime.5\ncacheHttpNhSvcTime.5\ncacheHttpNmSvcTime.5\ncacheHttpInKb\ncacheHttpOutKb\ncacheMaxResSize\ncacheMemMaxSize\ncacheMemUsage\ncacheNumObjCount\ncachePeerRtt\ncacheRequestByteRatio.5\ncacheRequestHitRatio.5\ncacheSwapHighWM\ncacheSwapLowWM\ncacheSwapMaxSize\ncacheSysNumReads\ncacheSysPageFaults\ncacheSysStorage\ncacheSysVMsize\n",
      "mapping": "charm_option"
    },
    "metrics_sample_interval": {
      "type": "int",
      "description": "Period for metrics cron job to run in minutes",
      "default": 5,
      "mapping": "charm_option"
    },
    "metrics_scheme": {
      "type": "string",
      "description": "Naming scheme for metrics. Special values $UNIT and $METRIC can be used\nfor more complex schemes, e.g. for suffixes for graphite processing .\n",
      "default": "dev.$UNIT.squid.$METRIC",
      "mapping": "charm_option"
    },
    "metrics_target": {
      "type": "string",
      "description": "Destination for metrics, format \"host:port\". If not present and valid, metrics disabled.",
      "default": "",
      "mapping": "charm_option"
    },
    "nagios_check_http_params": {
      "type": "string",
      "description": "The parameters to pass to the nrpe plugin check_http. String will be formatted with config data\n",
      "default": "",
      "mapping": "charm_option"
    },
    "nagios_check_https_params": {
      "type": "string",
      "description": "The parameters to pass to the nrpe plugin check_http. String will be formatted with config data\n",
      "default": "",
      "mapping": "charm_option"
    },
    "nagios_context": {
      "type": "string",
      "description": "Used by the nrpe-external-master subordinate charm. A string that will be prepended to instance name to set the host name in nagios. So for instance the hostname would be something like:\n    juju-squid-0\nIf you're running multiple environments with the same services in them this allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "nagios_service_type": {
      "type": "string",
      "description": "What service this component forms part of, e.g. supermassive-squid-cluster. Used by nrpe.\n",
      "default": "generic",
      "mapping": "charm_option"
    },
    "package_status": {
      "type": "string",
      "description": "The status of service-affecting packages will be set to this value in the dpkg database. Useful valid values are \"install\" and \"hold\".\n",
      "default": "install",
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Squid listening port.",
      "default": 3128,
      "mapping": "charm_option"
    },
    "port_options": {
      "type": "string",
      "description": "Squid listening port options",
      "default": "accel vhost",
      "mapping": "charm_option"
    },
    "refresh_patterns": {
      "type": "string",
      "description": "JSON- or YAML-formatted list of refresh patterns. For example: '{\"http://www.ubuntu.com\": {\"min\": 0, \"percent\": 20, \"max\": 60},\n  \"http://www.canonical.com\": {\"min\": 0, \"percent\": 20, \"max\": 120}}'\n",
      "default": "",
      "mapping": "charm_option"
    },
    "services": {
      "type": "string",
      "description": "Services definition(s). Although the variable type is a string, this is\ninterpreted by the charm as yaml. To use multiple services within the\nsame instance, specify all of the variables (service_name,\nservice_host, service_port) with a \"-\" before the first variable,\nservice_name, as below.\n\n- service_name: example_proxy\n  service_domain: example.com\n  servers:\n  - [foo.internal, 80]\n  - [bar.internal, 80]\n",
      "default": "",
      "mapping": "charm_option"
    },
    "snmp_allowed_ips": {
      "type": "string",
      "description": "Single, or json-formatted list of, IP (with optional subnet mask) allowed to query SNMP.",
      "default": "",
      "mapping": "charm_option"
    },
    "snmp_community": {
      "type": "string",
      "description": "SNMP community string for monitoring the service. Required for metrics to be enabled.",
      "default": "",
      "mapping": "charm_option"
    },
    "snmp_port": {
      "type": "int",
      "description": "Port for snmp service",
      "default": 3401,
      "mapping": "charm_option"
    },
    "ssl_cert": {
      "type": "string",
      "description": "Base64 encoded ssl cert file",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl_certfile": {
      "type": "string",
      "description": "File path to ssl cert file inside deployed units",
      "default": "/etc/squid3/ssl/cert.crt",
      "mapping": "charm_option"
    },
    "ssl_key": {
      "type": "string",
      "description": "Base64 encoded ssl key file",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl_keyfile": {
      "type": "string",
      "description": "File path to ssl key file inside deployed units",
      "default": "/etc/squid3/ssl/cert.key",
      "mapping": "charm_option"
    },
    "target_objs_per_dir": {
      "type": "int",
      "description": "Target number of objects to store in L2 directories.",
      "default": 400,
      "mapping": "charm_option"
    },
    "via": {
      "type": "string",
      "description": "Add 'Via' header to outgoing requests.",
      "default": "on",
      "mapping": "charm_option"
    },
    "x_balancer_name_allowed": {
      "type": "boolean",
      "description": "Route based on X-Balancer-Name header set by Apache charm.",
      "default": false,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "cached-website",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/local-monitors",
      "juju_interface": "local-monitors",
      "juju_name": "local-monitors",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe-external-master",
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\nSquid is a high-performance proxy caching server for web clients, supporting\nFTP, gopher, and HTTP data objects.\n \nSquid version 3 is a major rewrite of Squid in C++ and introduces a number of\nnew features including ICAP and ESI support.\n\nhttp://www.squid-cache.org/\n\n# Usage\n\n## General\n\nThis charm provides squid in a reverse proxy setup. \n\n\nhttp://en.wikipedia.org/wiki/Reverse_proxy\n\nThe most common scenario is to accelerate a web service:\nYou run squid on your outside edge, forwarding queries to\none or multiple internal web application servers.\n\nThe charm can be deployed in a single or multi-unit setup.\n\nTo deploy a single unit:\n\n    juju deploy squid-reverseproxy\n\nTo add more units:\n\n    juju add-unit squid-reverseproxy \n\nExample with apache:\n\n    juju deploy apache2\n    juju deploy squid-reverseproxy\n    juju add-relation apache2:website-cache squid-reverseproxy:cached-website\n\nThis will put squid in front of apache2.\n\nOnce deployed, you can ssh into the deployed service:\n\n    juju ssh <unit>\n\nTo list running units:\n\n    juju status\n\nTo start monitoring Squid using Nagios:\n\n    juju deploy nrpe-external-master\n    juju add-relation squid-reverseproxy nrpe-external-master\n\n\n\nThis charm requires the following relation settings from clients:\n\n    ip: service ip address\n    port: service port\n    sitenames: space-delimited list of virtual hosts to whitelist\n\nThe options that can be configured in config.yaml should be self-explanatory.\nIf not, please file a bug against this charm.\n\n## HTTPS Reverse Proxying\n\nAssuming you have a squid3 deb compiled with --enable-ssl, you can setup a\nsingle https reverse proxy.\n\nAn example of this would be:\n\n    juju set squid-reverseproxy enable_https=true ssl_key=\"$(base64 < /path/to/cert.key)\" ssl_cert=\"$(base64 < /path/to/cert.crt)\"\n\nThis should enable https access to the default website.\n\nA current implementation limitation is that it doesn't support multiple https vhosts.\n\n## Monitoring\n\nThis charm provides relations that support monitoring via Nagios using \nnrpe_external_master as a subordinate charm.\n\n## Caveats\nThe example above is just for reference. In order to make it usable, you \nwill have to supply a proper virtual host configuration for apache2.\n",
  "readme": "# Overview\n\nSquid is a high-performance proxy caching server for web clients, supporting\nFTP, gopher, and HTTP data objects.\n \nSquid version 3 is a major rewrite of Squid in C++ and introduces a number of\nnew features including ICAP and ESI support.\n\nhttp://www.squid-cache.org/\n\n# Usage\n\n## General\n\nThis charm provides squid in a reverse proxy setup. \n\n\nhttp://en.wikipedia.org/wiki/Reverse_proxy\n\nThe most common scenario is to accelerate a web service:\nYou run squid on your outside edge, forwarding queries to\none or multiple internal web application servers.\n\nThe charm can be deployed in a single or multi-unit setup.\n\nTo deploy a single unit:\n\n    juju deploy squid-reverseproxy\n\nTo add more units:\n\n    juju add-unit squid-reverseproxy \n\nExample with apache:\n\n    juju deploy apache2\n    juju deploy squid-reverseproxy\n    juju add-relation apache2:website-cache squid-reverseproxy:cached-website\n\nThis will put squid in front of apache2.\n\nOnce deployed, you can ssh into the deployed service:\n\n    juju ssh <unit>\n\nTo list running units:\n\n    juju status\n\nTo start monitoring Squid using Nagios:\n\n    juju deploy nrpe-external-master\n    juju add-relation squid-reverseproxy nrpe-external-master\n\n\n\nThis charm requires the following relation settings from clients:\n\n    ip: service ip address\n    port: service port\n    sitenames: space-delimited list of virtual hosts to whitelist\n\nThe options that can be configured in config.yaml should be self-explanatory.\nIf not, please file a bug against this charm.\n\n## HTTPS Reverse Proxying\n\nAssuming you have a squid3 deb compiled with --enable-ssl, you can setup a\nsingle https reverse proxy.\n\nAn example of this would be:\n\n    juju set squid-reverseproxy enable_https=true ssl_key=\"$(base64 < /path/to/cert.key)\" ssl_cert=\"$(base64 < /path/to/cert.crt)\"\n\nThis should enable https access to the default website.\n\nA current implementation limitation is that it doesn't support multiple https vhosts.\n\n## Monitoring\n\nThis charm provides relations that support monitoring via Nagios using \nnrpe_external_master as a subordinate charm.\n\n## Caveats\nThe example above is just for reference. In order to make it usable, you \nwill have to supply a proper virtual host configuration for apache2.\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}