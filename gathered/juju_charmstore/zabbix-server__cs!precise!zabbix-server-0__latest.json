{
  "name": "zabbix-server Juju charm",
  "juju_charm_name": "zabbix-server",
  "revision": "cs:precise/zabbix-server-0",
  "latest": true,
  "uris": [
    "https://jujucharms.com/zabbix-server",
    "https://jujucharms.com/zabbix-server/precise",
    "https://jujucharms.com/zabbix-server/precise/0",
    "https://api.jujucharms.com/v5/zabbix-server",
    "https://api.jujucharms.com/v5/precise/zabbix-server",
    "https://api.jujucharms.com/v5/precise/zabbix-server-0"
  ],
  "labels": [
    "Juju charm",
    "monitoring",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Hardware/Network",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Monitoring/Zabbix",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/zabbix-server",
  "package_url": "https://api.jujucharms.com/v5/precise/zabbix-server-0/archive",
  "created": "2015-06-17T09:36:45.351Z",
  "updated": "2015-06-17T09:36:45.351Z",
  "description": "Network monitoring solution - Zabbix server\n\nNetwork monitoring system with many features.\nIt can be used for:\n\n - high level monitoring of IT services;\n - centralized monitoring of your servers and applications;\n - monitoring of SNMP-enabled devices;\n - performance monitoring (process load, network activity, disk\n   activity, memory usage, OS parameters etc.);\n - data visualization.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/agent-passive",
      "self_resolve": true,
      "juju_interface": "agent-passive",
      "juju_name": "agent-passive",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql-shared",
      "self_resolve": true,
      "juju_interface": "mysql-shared",
      "juju_name": "database-mysql",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/java-gateway",
      "self_resolve": true,
      "juju_interface": "java-gateway",
      "juju_name": "java-gateway",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/proxy-passive",
      "self_resolve": true,
      "juju_interface": "proxy-passive",
      "juju_name": "proxy-passive",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "AlertScriptsPath": {
      "type": "string",
      "description": "A short description of the configuration option.\n",
      "default": "/etc/zabbix/alert.d/",
      "mapping": "charm_option"
    },
    "AllowRoot": {
      "type": "int",
      "description": "Allow the server to run as 'root'.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "CacheSize": {
      "type": "string",
      "description": "Size of configuration cache, in bytes.\n",
      "default": "8M",
      "mapping": "charm_option"
    },
    "CacheUpdateFrequency": {
      "type": "int",
      "description": "How often Zabbix will perform update of configuration cache, in seconds.\n",
      "default": 60,
      "mapping": "charm_option"
    },
    "DebugLevel": {
      "type": "int",
      "description": "Specifies debug level.\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "DefaultActiveLinuxTemplate": {
      "type": "string",
      "description": "Default template name for new active Zabbix agents.\n",
      "default": "Template OS Linux",
      "mapping": "charm_option"
    },
    "DefaultHostGroup": {
      "type": "string",
      "description": "Default host group for new Zabbix agents.\n",
      "default": "Juju servers",
      "mapping": "charm_option"
    },
    "DefaultLinuxTemplate": {
      "type": "string",
      "description": "Default template name for new passive Zabbix agents.\n",
      "default": "Template OS Linux",
      "mapping": "charm_option"
    },
    "ExternalScripts": {
      "type": "string",
      "description": "Location of external scripts.\n",
      "default": "/usr/lib/zabbix/externalscripts",
      "mapping": "charm_option"
    },
    "Fping6Location": {
      "type": "string",
      "description": "Location of fping6.\n",
      "default": "/usr/bin/fping6",
      "mapping": "charm_option"
    },
    "FpingLocation": {
      "type": "string",
      "description": "Location of fping.\n",
      "default": "/usr/bin/fping",
      "mapping": "charm_option"
    },
    "HistoryCacheSize": {
      "type": "string",
      "description": "Size of history cache, in bytes.\n",
      "default": "8M",
      "mapping": "charm_option"
    },
    "HistoryTextCacheSize": {
      "type": "string",
      "description": "Size of text history cache, in bytes.\n",
      "default": "16M",
      "mapping": "charm_option"
    },
    "HousekeepingFrequency": {
      "type": "int",
      "description": "How often Zabbix will perform housekeeping procedure (in hours).\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "ListenPort": {
      "type": "int",
      "description": "Listen port for trapper.\n",
      "default": 10051,
      "mapping": "charm_option"
    },
    "LogFileSize": {
      "type": "string",
      "description": "Maximum size of log file in MB.\n",
      "default": "0",
      "mapping": "charm_option"
    },
    "LogSlowQueries": {
      "type": "int",
      "description": "How long a database query may take before being logged (in milliseconds).\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "MaxHousekeeperDelete": {
      "type": "int",
      "description": "No more than 'MaxHousekeeperDelete' rows (corresponding to [tablename], [field], [value]) will be deleted per one task in one housekeeping cycle.\n",
      "default": 500,
      "mapping": "charm_option"
    },
    "ProxyConfigFrequency": {
      "type": "int",
      "description": "How often Zabbix server sends configuration data to a Zabbix proxy in seconds. Used only for proxies in a passive mode.\n",
      "default": 3600,
      "mapping": "charm_option"
    },
    "ProxyDataFrequency": {
      "type": "int",
      "description": "How often Zabbix server requests history data from a Zabbix proxy in seconds. Used only for proxies in a passive mode.\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "SenderFrequency": {
      "type": "int",
      "description": "How often Zabbix will try to send unsent alerts (in seconds).\n",
      "default": 30,
      "mapping": "charm_option"
    },
    "StartDBSyncers": {
      "type": "int",
      "description": "Number of pre-forked instances of DB Syncers.\n",
      "default": 4,
      "mapping": "charm_option"
    },
    "StartDiscoverers": {
      "type": "int",
      "description": "Number of pre-forked instances of discoverers.\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "StartHTTPPollers": {
      "type": "int",
      "description": "Number of pre-forked instances of HTTP pollers.\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "StartIPMIPollers": {
      "type": "int",
      "description": "Number of pre-forked instances of IPMI pollers.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "StartPingers": {
      "type": "int",
      "description": "Number of pre-forked instances of ICMP pingers.\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "StartPollersUnreachable": {
      "type": "int",
      "description": "Number of pre-forked instances of pollers for unreachable hosts (including IPMI and Java).\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "StartSNMPTrapper": {
      "type": "int",
      "description": "If set to 1, SNMP trapper process will be started.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "StartTimers": {
      "type": "int",
      "description": "Number of pre-forked instances of timers.\nTimers process time-based trigger functions and maintenance periods.\nOnly the first timer process handles the maintenance periods.\n",
      "default": 1,
      "mapping": "charm_option"
    },
    "StartVMwareCollectors": {
      "type": "int",
      "description": "Number of pre-forked vmware collector instances.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "Timeout": {
      "type": "int",
      "description": "Specifies how long we wait for agent, SNMP device or external check (in seconds).\n",
      "default": 5,
      "mapping": "charm_option"
    },
    "TrapperTimeout": {
      "type": "int",
      "description": "Specifies how many seconds trapper may spend processing new data.\n",
      "default": 300,
      "mapping": "charm_option"
    },
    "TrendCacheSize": {
      "type": "string",
      "description": "Size of trend cache, in bytes.\n",
      "default": "4M",
      "mapping": "charm_option"
    },
    "UnavailableDelay": {
      "type": "int",
      "description": "How often host is checked for availability during the unavailability period, in seconds.\n",
      "default": 60,
      "mapping": "charm_option"
    },
    "UnreachableDelay": {
      "type": "int",
      "description": "How often host is checked for availability during the unreachability period, in seconds.\n",
      "default": 15,
      "mapping": "charm_option"
    },
    "UnreachablePeriod": {
      "type": "int",
      "description": "After how many seconds of unreachability treat a host as unavailable.\n",
      "default": 45,
      "mapping": "charm_option"
    },
    "User": {
      "type": "string",
      "description": "Drop privileges to a specific, existing user on the system.\n",
      "default": "zabbix",
      "mapping": "charm_option"
    },
    "VMwareCacheSize": {
      "type": "string",
      "description": "Shared memory size for storing VMware data.\n",
      "default": "8M",
      "mapping": "charm_option"
    },
    "VMwareFrequency": {
      "type": "int",
      "description": "Delay in seconds between data gathering from a single VMware service.\n",
      "default": 60,
      "mapping": "charm_option"
    },
    "ValueCacheSize": {
      "type": "string",
      "description": "Size of history value cache, in bytes.\n",
      "default": "8M",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/agent-active",
      "juju_interface": "agent-active",
      "juju_name": "agent-active",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/frontend",
      "juju_interface": "frontend",
      "juju_name": "frontend",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/proxy-active",
      "juju_interface": "proxy-active",
      "juju_name": "proxy-active",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\n[Zabbix](http://zabbix.com) is software that monitors numerous parameters of a network and the health and integrity of servers.\n\nZabbix server is the central process of Zabbix software.\n\nThe server performs the polling and trapping of data, it calculates triggers, sends notifications to users. It is the central component to which Zabbix agents and proxies report data on availability and integrity of systems. The server can itself remotely check networked services (such as web servers and mail servers) using simple service checks.\n\n# Usage\n\nZabbix works with Zabbix agent, Zabbix proxy, Zabbix frontend and Zabbix Java Gateway charms.\n\nThe functioning of a basic Zabbix server is broken into three distinct components; they are: Zabbix server, web frontend and database storage.\n\n    juju add-relation zabbix-server mysql\n    juju add-relation zabbix-server frontend\n\nZabbix server autmatically adds new Zabbix agents to monitoring as empty host (without linked templates) and Zabbix proxies by proxy type (active or passive) \n\n    juju add-relation zabbix-server:agent-active zabbix-agent\n    juju add-relation zabbix-server:proxy-passive zabbix-proxy\n\nIf relation with Zabbix proxy is destroyed, the charm removes the proxy from configuration and disable all hosts monitored by the proxy.\nIf relation with Zabbix agent is destroyed, the charm disables host related with the removed relation with Zabbix agent.\n\n# Configuration\n\nThere is listed a few major configuration options which can be changed:\n\nTimeout - Spend no more than Timeout seconds on checks processing.\nListenPort - Agent will listen on this port for connections from the server.\nDefaultHostGroup - Default Host group for new hosts with active Zabbix agent relations\n\nAn example,\n    juju set zabbix-server Timeout=10\n\n\n### Known Issues / Caveates\n\nZabbix server/proxy can use different database types, so while relation to database is not added, there is no installed Zabbix server/proxy packages.\nWe recommend to add a relation between Zabbix agent and Zabbix server/proxy after adding relation Zabbix server/proxy with one of available database types.\nThe charm Zabbix server/proxy supports only MySQL database.\n\n#### Web Interface username/password\n\nLogin: Admin\nPassword: zabbix\n\n# Сontact information\n\n- [Zabbix Homepage](http://www.zabbix.com)\n- [Zabbix Bug Tracker](https://support.zabbix.com/)\n- [Zabbix Services](http://www.zabbix.com/services.php)\n",
  "readme": "# Overview\n\n[Zabbix](http://zabbix.com) is software that monitors numerous parameters of a network and the health and integrity of servers.\n\nZabbix server is the central process of Zabbix software.\n\nThe server performs the polling and trapping of data, it calculates triggers, sends notifications to users. It is the central component to which Zabbix agents and proxies report data on availability and integrity of systems. The server can itself remotely check networked services (such as web servers and mail servers) using simple service checks.\n\n# Usage\n\nZabbix works with Zabbix agent, Zabbix proxy, Zabbix frontend and Zabbix Java Gateway charms.\n\nThe functioning of a basic Zabbix server is broken into three distinct components; they are: Zabbix server, web frontend and database storage.\n\n    juju add-relation zabbix-server mysql\n    juju add-relation zabbix-server frontend\n\nZabbix server autmatically adds new Zabbix agents to monitoring as empty host (without linked templates) and Zabbix proxies by proxy type (active or passive) \n\n    juju add-relation zabbix-server:agent-active zabbix-agent\n    juju add-relation zabbix-server:proxy-passive zabbix-proxy\n\nIf relation with Zabbix proxy is destroyed, the charm removes the proxy from configuration and disable all hosts monitored by the proxy.\nIf relation with Zabbix agent is destroyed, the charm disables host related with the removed relation with Zabbix agent.\n\n# Configuration\n\nThere is listed a few major configuration options which can be changed:\n\nTimeout - Spend no more than Timeout seconds on checks processing.\nListenPort - Agent will listen on this port for connections from the server.\nDefaultHostGroup - Default Host group for new hosts with active Zabbix agent relations\n\nAn example,\n    juju set zabbix-server Timeout=10\n\n\n### Known Issues / Caveates\n\nZabbix server/proxy can use different database types, so while relation to database is not added, there is no installed Zabbix server/proxy packages.\nWe recommend to add a relation between Zabbix agent and Zabbix server/proxy after adding relation Zabbix server/proxy with one of available database types.\nThe charm Zabbix server/proxy supports only MySQL database.\n\n#### Web Interface username/password\n\nLogin: Admin\nPassword: zabbix\n\n# Сontact information\n\n- [Zabbix Homepage](http://www.zabbix.com)\n- [Zabbix Bug Tracker](https://support.zabbix.com/)\n- [Zabbix Services](http://www.zabbix.com/services.php)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}