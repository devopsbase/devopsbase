{
  "name": "django-rainbow Juju charm",
  "juju_charm_name": "django-rainbow",
  "revision": "cs:precise/django-rainbow-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/django-rainbow",
    "https://jujucharms.com/django-rainbow/precise",
    "https://jujucharms.com/django-rainbow/precise/3",
    "https://api.jujucharms.com/v5/django-rainbow",
    "https://api.jujucharms.com/v5/precise/django-rainbow",
    "https://api.jujucharms.com/v5/precise/django-rainbow-3"
  ],
  "labels": [
    "Juju charm",
    "app-servers",
    "Type/Middleware/Runtime/Python",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Web Server"
  ],
  "info_url": "https://jujucharms.com/django-rainbow",
  "package_url": "https://api.jujucharms.com/v5/precise/django-rainbow-3/archive",
  "created": "2015-06-17T09:34:51.784Z",
  "updated": "2015-06-17T09:34:51.784Z",
  "description": "Installs the Django-rainbow platform onto a cloud instance.\n\nDjango-rainbow is a full-fledged Django web project deployment charm. One can deploy many projects onto a single instance\nby maintaining individual config files pertaining to the project. Django-rainbow is a safe and convenient platform\nfor development or production web server management. Web sites are updated instantly using mercurial based versioning.\nYour django-rainbow project file can be stored for future use, allowing anyone using juju a fail safe method to \ndevelop and deploy your project without creating conflicting structure. Django-rainbow is a \"Set it and forget it\"\nplatform leaving development issues with the developers :)\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "always-update-database": {
      "type": "string",
      "description": "(Optional) Setting this option to non-empty will force a project database sync.\nIf empty, the project database will only update when the settings.py file is modified\nfrom the current time stamp. \n",
      "default": "",
      "mapping": "charm_option"
    },
    "always-update-sites-framework": {
      "type": "string",
      "description": "(Optional) Setting this option to non-empty will always update the project-site-name\nand project-site-domain options from these yaml files into the django.sites framework.\nSet this to empty and only the intial options from the first run of the config-changed\nhook will be loaded. After that, the sites settings can be altered in the Django \nAdmin console. This can be set later to start the sites framework updating with this config.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "apt-get-packages": {
      "type": "string",
      "description": "Debian packages to install (eg. python-django-south). This\nstring will be passed to apt-get.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "bzr-packages": {
      "type": "string",
      "description": "These need to contain either source code with a configure file,\nor a python package with a setup.py file. Seperate urls with a space.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "git-packages": {
      "type": "string",
      "description": "These need to contain either source code with a configure file,\nor a python package with a setup.py file. Seperate urls with a space.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "hg-packages": {
      "type": "string",
      "description": "These need to contain either source code with a configure file,\nor a python package with a setup.py file. Seperate urls with a space.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "pip-packages": {
      "type": "string",
      "description": "These will be passed to pip install.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-apache2-vhost": {
      "type": "string",
      "description": "The entire virtual host for this django project. This will be place in a individual\nfile and loaded with a2ensite.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-repo-password": {
      "type": "string",
      "description": "The password of the project repository.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-repo-type": {
      "type": "string",
      "description": "This is the brand of repository versioning the project uses. Only hg for now...\nE.g. bzr, hg, git, svn, etc...\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-repo-url": {
      "type": "string",
      "description": "The url of the project repository. Only bitbucket is supported currently.\nE.g. https://bitbucket.org/ubernostrum/django-registration\n     ssh://user@your-site.com/project\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-repo-username": {
      "type": "string",
      "description": "The username of the project repository.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-site-domain": {
      "type": "string",
      "description": "(Optional) This is the domian given to the site. It is used with emailing and\nrunning multiple sites toupled togther. Can be changed with the Django Admin system later.\nThis option will be ignored if your do not have django.contrib.sites and a SITE_ID\nspecified in the settings.py file.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "project-site-name": {
      "type": "string",
      "description": "(Optional) This is the name given to the site. It is used with emailing and\nrunning multiple sites toupled togther. Can be changed with the Django Admin system later.\nThis option will be ignored if your do not have django.contrib.sites and a SITE_ID\nspecified in the settings.py file.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "purge-instance": {
      "type": "string",
      "description": "Set this to true (or non-empty), if you wish to have all packages\npurged and re-installed upon re-installation of django-rainbow.\nThis includes any additional packages that are listed above or\nhave been installed previously with django-rainbow. Do this if you\nhave added any packages with dependency issues native to this charm or\nyou wish to replace off of your package config files with the default ones.\nThis executes when django-rainbow service is destroyed and then re-deloyed\nor the install hook is re-ran. Leave empty for false. \n---------------------------------------------------------------------\nDOES NOT INCLUDE MYSQL! If you want to re-install the mysql client\nthan set the re-install-mysql-server to true.\n---------------------------------------------------------------------\n",
      "default": "",
      "mapping": "charm_option"
    },
    "rainbow-installation-directory": {
      "type": "string",
      "description": "The directory that Django-rainbow will use to store data. This included\npackages, logs, and installation settings.\n",
      "default": "/var/lib/django-rainbow",
      "mapping": "charm_option"
    },
    "rainbow-packages": {
      "type": "string",
      "description": "The standard and basic packages for django-rainbow. These\nonly include what is needed for a basic Django web server and\noperation of this charm. Others can be added below. \n",
      "default": "apache2 python-mysqldb libapache2-mod-wsgi git mercurial pwgen python-pip python-setuptools",
      "mapping": "charm_option"
    },
    "re-install-mysql-server": {
      "type": "string",
      "description": "Set this to true (or non-empty), if you wish to have the mysql client core removed\nand purged from the instance. This will effectively replace the mysql root password\nwith a random one. This should not remove the database entries, but no garenties!\nThis executes when django-rainbow service is destroyed and then re-deloyed or the install\nhook is re-triggerd. Leave empty for false.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "revision": {
      "type": "string",
      "description": "The revision number of this file.            \n",
      "default": "1",
      "mapping": "charm_option"
    },
    "tar-packages": {
      "type": "string",
      "description": "These need to contain either source code with a configure file,\nor a python package with a setup.py file. These URLs need to conatain a \nfile with tar compession. You can use either tar, gzip (tar.gz), or bzip2 (tar.bz2)\ncompressed files. Seperate urls with a space.\nNote: you can change the Django version here.\n",
      "default": "https://www.djangoproject.com/download/1.4/tarball",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/django-rainbow",
      "juju_interface": "django-rainbow",
      "juju_name": "rainbow",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "**Django Rainbow** \n--------\n* * * \n**`charm name: django-rainbow`**\n\n*Django-rainbow* is designed to automate deployment of Django web projects\nto the cloud. Any Django project which resides on a hosted mercurial (hg) repository can be deployed using this charm.\nDjango-rainbow is a solid tool with a forgiving design regarding re-triggering.\nData is safe from deletion without becoming isolated from the charm. Database and project data are never removed, replaced, or deleted. This charm does not require additional packages or have any dependencies outside of juju. All scripts are written in/for the Bash shell using Ubuntu 12.04 64 bit (Precise Pangolin). \n\n\n**Use:**\n>Put Django-rainbow into a local charm repository.  \n>Edit the *config.yaml* file with your django-rainbow project customizations.  \n>Deploy the charm with --> *juju deploy --repository=. local:precise/django-rainbow*   \n>Edit the secondary project config file. This file is called\n*your-project.yaml* by default.  \n>The renamed *your-project.yaml* file is deployed with -->\n*juju set django-rainbow --config /path/to/your-project.yaml*  \n>Trigger the config-changed hook to update or add a project to the instance --> *juju set --config=/path/to/your-project.yaml django-rainbow*.\n* * *\n\nIt is expected to store the *your-project.yaml* files in a direcory for future use. These project config files can be distributed, allowing anyone to launch the  project to the cloud. The project must reside on a hosted third party mercurial repository, e.g. Bit Bucket. When the project config file is customized, the config-changed hook will,\n>- Create or update the virtual host provided in the *your-project.yaml* file and place it in the Apache2 sites-available directory.\n>- Pull or update the project from the hosted repository to the directory listed as: *DocumentRoot* in the provided virtual host. Note: Any changes to the repository will be public immediately.\n>- Parse the project *settings.py* file for database,project settings, and a time stamp.\n>- Create or update the database, user, and tables with mysql and/or configure the project.\n\nLogging files contain any run-time errors according to the current revision number. Installation logs use the integer in the *revision* file of the charm base directory. Configuration logs will use the *revision* number set in the *your-project.yaml* or *config.yaml* files. These logs only contain critical errors throughout hook run-time. This allows for simple debugging regarding django-rainbow development.\n\n**Configuration:**\n\n> **-config.yaml-**   \nThis file is the primary settings for django-rainbow. All of the settings set in this file will install with django-rainbow. It is reasonable to include project settings in here if there is to be only one project per django-rainbow instance. If you wish to launch many Django projects per instance, the *your-project.yaml* file will need to be utilized. \n \n\n\n>**-your-project.yaml-**  \n   All settings in this file relate to a specific Django project repository. It is expected to rename and store this file separate from the charm. One can keep many of these yaml files handy to launch or update live Django projects.\n\n\n> **-Package installation-**  \nDjango-rainbow will automatically fetch and search your package urls for either\n*setup.py* or *configure* scripts. The first match in the lowest section of the directory is assumed the installation type, e.g. Python install is assumed if setup.py is found in the next directory and a configure script in a subsequent directory of the extracted package. This applies to all package urls provided in both the *config.yaml* and *your-project.yaml* file except for the apt-get and pip packages. With this, one can include a git repository with either *setup.py* or binary compilation *configure* script. After, make, make install, commands will be issued if appropriate. Note: Remember to include a gcc compiler and any dependencies if binary code is to be fetched and compiled.\n\n> **-Sites Framework-**  \n   The Django sites framework can be administered through django-rainbow. Project sites tables are created through fixture files kept in the base directory of the project. The *project-site-name* and *project-site-domain* option need to be set for this to happen. Also, django-rainbow will parse you project *settings.py* file for a *SITE_ID* declaration and *django.contrib.sites* listed in *installed_apps*. **All of the above conditions need to be satisfied to allow django.sites framework updating.** The sites framework will only update the first time the *config-changed* hook is ran. All subsequent re-triggering will maintain the initial setting of the: name, domain, and SITE_ID (this includes null settings). After the first *config-changed* run, setting the *always-update-sites-framework* is the only method to update the sites framework. Note: this is the only way to load other fixture files in your project. \n\n> **-Database synchronization-**  \nA *python manage.py syncdb* is only necessary when *settings.py* changes have occurred. For this reason, django-rainbow maintains a current time stamp of the *settings.py* file. When the *settings.py* file is modified, the *config-changed* hook will issue a *python manage.py syncdb* command. While it is redundant, this command can be ran every time a project is updated by setting the *always-update-database* option.\n\n> **-Installation files-**  \nThe *rainbow-installation-directory* option sets the base directory for all django-rainbow project settings. This includes: logging, configuration files, package source files, and other django-rainbow related data.\n\nAll django-rainbow data files and package source are stored below the directory set by the *rainbow-installation-directory* option. This directory holds\n\n**Tips:**  \n*1)* Make sure when the project repository is pulled onto the server for the first time, the *DocumentRoot* directory listed in the virtual host is the base directory of the project. This may require changing the project repository directory structure or virtual host settings a bit.    \n*2)* Do not edit any repository data on the instance. This data will be lost with the next *config-changed* hook. The project should only be updated by a config-changed trigger. This is what the revision setting is for in the config files. \n*3)* A *juju set django-rainbow --config /path/to/your-project.yaml* will trigger the config-changed hook trigger. For single projects with the config.yaml file, a *juju set django-rainbow revision=[num]* can be used.   \n*4)* All of the django-rainbow data files are kept in the directory specified with the *rainbow-installation-directory:* option in config.yaml.\n*5)* Many of the django-rainbow settings are described/explained in the config.yaml option descriptions.\n*6)* Comment out the *set -eux* command in the config-changed and install hooks. This will prevent plain text printing of your repository password.\n* * *\n\n\n**LIMITATIONS:**\nDjango Rainbow is a generic platform to deploy Django projects. Don't expect too much versatility.  \n*1)* Django-rainbow only supports Mercurial and Bit bucket for project code hosting.  \n*2)* The only supported project database is mysql.  \n\n\n**AUTHOR:**  \nSurgemcgee <RobertSteckroth@gmail.com>  \nRobert Edward Steckroth II\n\n**LICENCE:**  \n\n    Django Rainbow is a charm written for Juju\n    Copyright (C) 2012  Robert Edward Steckroth II\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see [http://www.gnu.org/licenses/](http://www.gnu.org/licenses/)\n\n\n\n\n\n",
  "readme": "**Django Rainbow** \n--------\n* * * \n**`charm name: django-rainbow`**\n\n*Django-rainbow* is designed to automate deployment of Django web projects\nto the cloud. Any Django project which resides on a hosted mercurial (hg) repository can be deployed using this charm.\nDjango-rainbow is a solid tool with a forgiving design regarding re-triggering.\nData is safe from deletion without becoming isolated from the charm. Database and project data are never removed, replaced, or deleted. This charm does not require additional packages or have any dependencies outside of juju. All scripts are written in/for the Bash shell using Ubuntu 12.04 64 bit (Precise Pangolin). \n\n\n**Use:**\n>Put Django-rainbow into a local charm repository.  \n>Edit the *config.yaml* file with your django-rainbow project customizations.  \n>Deploy the charm with --> *juju deploy --repository=. local:precise/django-rainbow*   \n>Edit the secondary project config file. This file is called\n*your-project.yaml* by default.  \n>The renamed *your-project.yaml* file is deployed with -->\n*juju set django-rainbow --config /path/to/your-project.yaml*  \n>Trigger the config-changed hook to update or add a project to the instance --> *juju set --config=/path/to/your-project.yaml django-rainbow*.\n* * *\n\nIt is expected to store the *your-project.yaml* files in a direcory for future use. These project config files can be distributed, allowing anyone to launch the  project to the cloud. The project must reside on a hosted third party mercurial repository, e.g. Bit Bucket. When the project config file is customized, the config-changed hook will,\n>- Create or update the virtual host provided in the *your-project.yaml* file and place it in the Apache2 sites-available directory.\n>- Pull or update the project from the hosted repository to the directory listed as: *DocumentRoot* in the provided virtual host. Note: Any changes to the repository will be public immediately.\n>- Parse the project *settings.py* file for database,project settings, and a time stamp.\n>- Create or update the database, user, and tables with mysql and/or configure the project.\n\nLogging files contain any run-time errors according to the current revision number. Installation logs use the integer in the *revision* file of the charm base directory. Configuration logs will use the *revision* number set in the *your-project.yaml* or *config.yaml* files. These logs only contain critical errors throughout hook run-time. This allows for simple debugging regarding django-rainbow development.\n\n**Configuration:**\n\n> **-config.yaml-**   \nThis file is the primary settings for django-rainbow. All of the settings set in this file will install with django-rainbow. It is reasonable to include project settings in here if there is to be only one project per django-rainbow instance. If you wish to launch many Django projects per instance, the *your-project.yaml* file will need to be utilized. \n \n\n\n>**-your-project.yaml-**  \n   All settings in this file relate to a specific Django project repository. It is expected to rename and store this file separate from the charm. One can keep many of these yaml files handy to launch or update live Django projects.\n\n\n> **-Package installation-**  \nDjango-rainbow will automatically fetch and search your package urls for either\n*setup.py* or *configure* scripts. The first match in the lowest section of the directory is assumed the installation type, e.g. Python install is assumed if setup.py is found in the next directory and a configure script in a subsequent directory of the extracted package. This applies to all package urls provided in both the *config.yaml* and *your-project.yaml* file except for the apt-get and pip packages. With this, one can include a git repository with either *setup.py* or binary compilation *configure* script. After, make, make install, commands will be issued if appropriate. Note: Remember to include a gcc compiler and any dependencies if binary code is to be fetched and compiled.\n\n> **-Sites Framework-**  \n   The Django sites framework can be administered through django-rainbow. Project sites tables are created through fixture files kept in the base directory of the project. The *project-site-name* and *project-site-domain* option need to be set for this to happen. Also, django-rainbow will parse you project *settings.py* file for a *SITE_ID* declaration and *django.contrib.sites* listed in *installed_apps*. **All of the above conditions need to be satisfied to allow django.sites framework updating.** The sites framework will only update the first time the *config-changed* hook is ran. All subsequent re-triggering will maintain the initial setting of the: name, domain, and SITE_ID (this includes null settings). After the first *config-changed* run, setting the *always-update-sites-framework* is the only method to update the sites framework. Note: this is the only way to load other fixture files in your project. \n\n> **-Database synchronization-**  \nA *python manage.py syncdb* is only necessary when *settings.py* changes have occurred. For this reason, django-rainbow maintains a current time stamp of the *settings.py* file. When the *settings.py* file is modified, the *config-changed* hook will issue a *python manage.py syncdb* command. While it is redundant, this command can be ran every time a project is updated by setting the *always-update-database* option.\n\n> **-Installation files-**  \nThe *rainbow-installation-directory* option sets the base directory for all django-rainbow project settings. This includes: logging, configuration files, package source files, and other django-rainbow related data.\n\nAll django-rainbow data files and package source are stored below the directory set by the *rainbow-installation-directory* option. This directory holds\n\n**Tips:**  \n*1)* Make sure when the project repository is pulled onto the server for the first time, the *DocumentRoot* directory listed in the virtual host is the base directory of the project. This may require changing the project repository directory structure or virtual host settings a bit.    \n*2)* Do not edit any repository data on the instance. This data will be lost with the next *config-changed* hook. The project should only be updated by a config-changed trigger. This is what the revision setting is for in the config files. \n*3)* A *juju set django-rainbow --config /path/to/your-project.yaml* will trigger the config-changed hook trigger. For single projects with the config.yaml file, a *juju set django-rainbow revision=[num]* can be used.   \n*4)* All of the django-rainbow data files are kept in the directory specified with the *rainbow-installation-directory:* option in config.yaml.\n*5)* Many of the django-rainbow settings are described/explained in the config.yaml option descriptions.\n*6)* Comment out the *set -eux* command in the config-changed and install hooks. This will prevent plain text printing of your repository password.\n* * *\n\n\n**LIMITATIONS:**\nDjango Rainbow is a generic platform to deploy Django projects. Don't expect too much versatility.  \n*1)* Django-rainbow only supports Mercurial and Bit bucket for project code hosting.  \n*2)* The only supported project database is mysql.  \n\n\n**AUTHOR:**  \nSurgemcgee <RobertSteckroth@gmail.com>  \nRobert Edward Steckroth II\n\n**LICENCE:**  \n\n    Django Rainbow is a charm written for Juju\n    Copyright (C) 2012  Robert Edward Steckroth II\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see [http://www.gnu.org/licenses/](http://www.gnu.org/licenses/)\n\n\n\n\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}