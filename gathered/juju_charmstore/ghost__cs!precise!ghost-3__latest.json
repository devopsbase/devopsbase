{
  "name": "ghost Juju charm",
  "juju_charm_name": "ghost",
  "revision": "cs:precise/ghost-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/ghost",
    "https://jujucharms.com/ghost/precise",
    "https://jujucharms.com/ghost/precise/3",
    "https://api.jujucharms.com/v5/ghost",
    "https://api.jujucharms.com/v5/precise/ghost",
    "https://api.jujucharms.com/v5/precise/ghost-3"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Logging",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/ghost",
  "package_url": "https://api.jujucharms.com/v5/precise/ghost-3/archive",
  "created": "2015-06-17T09:34:57.818Z",
  "updated": "2015-06-17T09:34:57.818Z",
  "description": "Ghost allows you to write and publish your own blog.\n\nGhost is an Open Source application which allows you to write\nand publish your own blog, giving you the tools to make it easy\nand even fun to do. It's simple, elegant, and designed so that\nyou can spend less time making your blog work and more time\nblogging.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql",
      "self_resolve": true,
      "juju_interface": "mysql",
      "juju_name": "db",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "amazon_ses_host": {
      "type": "string",
      "description": "The host value for your Amazon SES account. This is only necessary if\nyou chose this option in the mail_service field above.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "from_address": {
      "type": "string",
      "description": "By default the ‘from’ address for mail sent from Ghost will be set to\n\"Blog Title <ghost@your-ghost-blog.com>\" where 'Blog Title' is the title\nyou have set in settings, and 'your-ghost-blog.com' is the value from\nthe host configuration value above. You can override this value here.\nSupported formats are 'myemail@example.com' or\n'Custom Name <myemail@example.com'.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "host": {
      "type": "string",
      "description": "Host to be passed to node's net.Server listen().",
      "default": "0.0.0.0",
      "mapping": "charm_option"
    },
    "mail_service": {
      "type": "string",
      "description": "Pick one of the supported email services to allow Ghost to send emails\nfor things like password recovery and new user acceptance. Valid options\nwill require the corresponding username and password fields filled out\nbelow. The supported values are 'Mailgun', 'SES', and 'Gmail'.\nAn empty value will remove the configuration from Ghost.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "mailserver_password": {
      "type": "string",
      "description": "Password for the mail service chosen above. Information on where to find\nthese credentials can be found here: http://support.ghost.org/mail/ .\n",
      "default": "",
      "mapping": "charm_option"
    },
    "mailserver_username": {
      "type": "string",
      "description": "Username for the mail service chosen above. Information on where to find\nthese credentials can be found here: http://support.ghost.org/mail/ .\n",
      "default": "",
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Port to be passed to node's net.Server listen().",
      "default": 2368,
      "mapping": "charm_option"
    },
    "release_location": {
      "type": "string",
      "description": "Location of the Ghost blogging platform release archive to deploy.\n",
      "default": "https://github.com/TryGhost/Ghost/releases/download/0.5.10/Ghost-0.5.10.zip",
      "mapping": "charm_option"
    },
    "url": {
      "type": "string",
      "description": "The URL to use when providing links to the site.",
      "default": "http://my-ghost-blog.com",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "balancer",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\nGhost is an Open Source application which allows you to write and publish your\nown blog, giving you the tools to make it easy and even fun to do. It's simple,\nelegant, and designed so that you can spend less time making your blog work and\nmore time blogging.\n\nThis Ghost charm allows you to trivially deploy a horizontally scalable, load\nbalanced, instance of the Ghost blogging platform locally or on a cloud\nprovider of choice using Juju.\n\nTo deploy this charm you will need a cloud environment, a working Juju\ninstallation and a successful bootstrap. If you don't have Juju installed and an\nenvironment set up see\n[Getting Started With Juju](https://jujucharms.com/docs/getting-started).\n\n- [Quick Start](#quick-start)\n- [Configuration](#configuration)\n- [Using A Load Balancer](#using-a-load-balancer)\n- [Setting Up Email Service](#setting-up-email-service)\n- [Connecting To Mysql](#connecting-to-mysql)\n- [Horizontal Scaling](#horizontal-scaling)\n- [Colocating On A Single Machine](#colocating-on-a-single-machine)\n- [Deploying And Using The GUI](#deploying-and-using-the-gui)\n- [Contributing](#contributing)\n- [Bug Reports](#bug-reports)\n\n# Quick Start\n\nAfter you have a Juju cloud environment running:\n\n    $ juju deploy ghost\n    $ juju expose ghost\n\nTo access your newly installed blog you'll need to get the IP of the instance.\n\n    $ juju status ghost\n\nVisit `<your URL>:2368/ghost/signup/` to create your username and password.\nContinue setting up Ghost by following the\n[usage documentation](http://docs.ghost.org/usage/).\n\nYou will want to change the URL that Ghost uses to generate links internally to\nthe URL you will be using for your blog.\n\n    $ juju set ghost url=<your url>\n\nThe ghost charm is designed to not run as a user which has access to reserved\nports. This means that if you want to run your blog on port 80 or 443 you will\nneed to deploy and relate this charm to Apache. This has the added benefit of\nbeing able to load balance between any additional Ghost units and do url\nredirection if necessary. See\n[Using A Load Balancer](#using-a-load-balancer) for more information.\n\nIn order to allow Ghost to send emails for things like new user validation and\npassword resets you will want to set up the email service. See\n[Setting Up Email Service](#setting-up-email-service) for more information.\n\nIt's also recommended, although not required, that you use a MySQL database\ninstead of the internal SQLite database. See\n[Connecting To MySQL](#connecting-to-mysql) for more information.\n\nAll of the instructions in this readme are provided using Juju's CLI interface.\nJuju also has an amazing GUI which is highly recommended for beginners to Juju.\nFor information on how to deploy the GUI and use it with this charm see\n[Deploying And Using The GUI](#deploying-and-using-the-gui)\n\n# Configuration\n\nTo view the configuration options for this charm open the `config.yaml` file or:\n\n    $ juju get ghost\n\nTo set a configuration option for this charm:\n\n    $ juju set ghost <key>=<value>\n\nSee the `config.yaml` file in the charm for a detailed list of all of the charms\nconfiguration options.\n\n\n# Using A Load Balancer\n\nIn order to run multiple instances of the Ghost web server and to be able to\nserve your blog on a reserved port this charm supports being load balanced and\nreverse proxied by [haproxy](https://jujucharms.com/haproxy/trusty).\n\nIn order to reverse proxy and load balance this service you will need to deploy\nhaproxy:\n\n    $ juju deploy haproxy\n    $ juju expose haproxy\n\nYou will then need to unexpose the Ghost service:\n\n    $ juju unexpose ghost\n\nYou now need to let your haproxy instance know about Ghost so that it can\nmake the appropriate adjustments.\n\n    $ juju add-relation ghost haproxy\n\nAfter a few moments of configuration your Ghost blog will now be reachable on\nport 80 and you will be able to horizontally scale the server and have it\nautomatically load balanced. See [Horizontal Scaling](#horizontal-scaling) for\nmore information.\n\n\n# Setting Up Email Service\n\nGhost needs the ability to send emails to users for things like new user\nvalidation and password resets. To accomplish this Ghost supports using a\nthird party email service which it can communicate with to send these emails.\nGhost, and this charm, supports sending emails using Mailgun, Amazon SES, and\nGmail. Additional information about why Ghost needs this service and it's\nsupported platforms see [Mail configuration](http://support.ghost.org/mail/).\n\nTo specify a supported email service to use you simply need to set the\nconfiguration values in the charm and they will be generated for your Ghost\ninstance.\n\n#### Mailgun & Gmail\n\n    $ juju set ghost mailserver_username=<your username>\n    $ juju set ghost mailserver_password=<your password>\n    Then\n    $ juju set ghost mail_service=Mailgun\n    -or-\n    $ juju set ghost mail_service=Gmail\n\n#### Amazon SES\n\n    $ juju set ghost mailserver_username=<your username>\n    $ juju set ghost mailserver_password=<your password>\n    $ juju set ghost amazon_ses_host=<your ses host>\n    Then\n    $ juju set ghost mail_service=SES\n\nAfter this has been completed your Ghost server will restart and Ghost will\nnow be able to send emails using that provider. It's recommended to test this\nbefore you need it by creating a new user and pointing it to an email you\ncontrol and ensure that you get the validation email.\n\n\n# Connecting To MySQL\n\nBy default this charm uses Ghost's built in SQLite storage. If you would like to\nhorizontally scale your ghost instance you will need to use an external database\nlike MySQL.\n\n**If you already have blog posts in the SQLite database they will not be\ndeleted, but you will have to manually port them over to the MySQL database.**\n\nFirst you will need to deploy MySQL into your Juju environment:\n\n    $ juju deploy mysql\n\nAdditional details about the MySQL charm and configuration can be found in the\n[MySQL charm details](https://jujucharms.com/mysql/precise/) page.\n\nYou'll then need to relate the Ghost blog service to the MySQL service.\n\n    $ juju add-relation ghost mysql\n\nThe charm will then handle setting up all configuration options necessary to use\nthe MySQL database instead of the internal SQLite database.\n\n\n# Horizontal Scaling\n\nIf you're getting a lot of traffic to your blog and find that your webserver\ninstance is maxing out it's resources you can trivially scale horizontally. To\nadd additional units (instances):\n\n    $ juju add-unit -n 1 ghost\n\nNow that you have more than one unit you will need to ensure your posts are not\nstored locally on a single unit and you will need to be able to load balance\nbetween the multiple instances. See\n[Using A Load Balancer](#using-a-load-balancer) and\n[Connecting To MySQL](#connecting-to-mysql) for more information.\n\n\n# Colocating On A Single Machine\n\nBy default, every time you deploy a service or create a new unit Juju will\ncreate a new instance on your cloud provider. This may be undesired due to\nhardware availability or budgeting. Juju also provides you an easy to use method\nto deploy all of these services to a smaller number of machines using the\nfollowing syntax:\n\n    $ juju deploy --to=<machine number> <service name>\n\n    ex)\n\n    $ juju deploy --to=1 ghost\n\nColocating can have unintended consequences if the multiple service were not\ndesigned to be deployed to the same machine. To get around this you're able to\ncreate LXC and KVM containers to deploy to. This gets into advanced Juju usage\nand more information can be found in the Juju documentation on\n[Deploying Charms](https://jujucharms.com/docs/charms-deploying#deploying-to-specific-machines-and-containers)\n\n# Deploying And Using The GUI\n\nJuju has a powerful graphical user interface which you can use to interact with\nyour environment without having to use the CLI. In order to use the GUI in\nyour environment you will need to deploy it:\n\n    $ juju deploy juju-gui\n\nEvery command in this readme can be done using the GUI instead of the CLI. See\n[Juju GUI](https://jujucharms.com/juju-gui/trusty) for detailed information on\nthe Juju GUI charm and how to use the GUI.\n\n\n# Contributing\n\nThis charm wouldn't be where it is today without great contributions from\nothers. Pull requests are accepted in the\n[ghost-charm repository](https://github.com/hatched/ghost-charm)\n\n\n# Bug Reports\n\nPlease file bugs for the Ghost blogging engine in the\n[TryGhost Ghost repository](https://github.com/TryGhost/Ghost) and not in the\nghost-charm repository.\n\nIf you have found a bug with the ghost-charm itself they can be filed in the\n[ghost-charm repository](https://github.com/hatched/ghost-charm). Please include\nexact steps to reproduce the issue and be as detailed as possible, including\nwhat version of Ubuntu you're running on, the version of this charm you have\ndeployed, the cloud your environment is running on, any other charms deployed to\nthe environment.\n",
  "readme": "# Overview\n\nGhost is an Open Source application which allows you to write and publish your\nown blog, giving you the tools to make it easy and even fun to do. It's simple,\nelegant, and designed so that you can spend less time making your blog work and\nmore time blogging.\n\nThis Ghost charm allows you to trivially deploy a horizontally scalable, load\nbalanced, instance of the Ghost blogging platform locally or on a cloud\nprovider of choice using Juju.\n\nTo deploy this charm you will need a cloud environment, a working Juju\ninstallation and a successful bootstrap. If you don't have Juju installed and an\nenvironment set up see\n[Getting Started With Juju](https://jujucharms.com/docs/getting-started).\n\n- [Quick Start](#quick-start)\n- [Configuration](#configuration)\n- [Using A Load Balancer](#using-a-load-balancer)\n- [Setting Up Email Service](#setting-up-email-service)\n- [Connecting To Mysql](#connecting-to-mysql)\n- [Horizontal Scaling](#horizontal-scaling)\n- [Colocating On A Single Machine](#colocating-on-a-single-machine)\n- [Deploying And Using The GUI](#deploying-and-using-the-gui)\n- [Contributing](#contributing)\n- [Bug Reports](#bug-reports)\n\n# Quick Start\n\nAfter you have a Juju cloud environment running:\n\n    $ juju deploy ghost\n    $ juju expose ghost\n\nTo access your newly installed blog you'll need to get the IP of the instance.\n\n    $ juju status ghost\n\nVisit `<your URL>:2368/ghost/signup/` to create your username and password.\nContinue setting up Ghost by following the\n[usage documentation](http://docs.ghost.org/usage/).\n\nYou will want to change the URL that Ghost uses to generate links internally to\nthe URL you will be using for your blog.\n\n    $ juju set ghost url=<your url>\n\nThe ghost charm is designed to not run as a user which has access to reserved\nports. This means that if you want to run your blog on port 80 or 443 you will\nneed to deploy and relate this charm to Apache. This has the added benefit of\nbeing able to load balance between any additional Ghost units and do url\nredirection if necessary. See\n[Using A Load Balancer](#using-a-load-balancer) for more information.\n\nIn order to allow Ghost to send emails for things like new user validation and\npassword resets you will want to set up the email service. See\n[Setting Up Email Service](#setting-up-email-service) for more information.\n\nIt's also recommended, although not required, that you use a MySQL database\ninstead of the internal SQLite database. See\n[Connecting To MySQL](#connecting-to-mysql) for more information.\n\nAll of the instructions in this readme are provided using Juju's CLI interface.\nJuju also has an amazing GUI which is highly recommended for beginners to Juju.\nFor information on how to deploy the GUI and use it with this charm see\n[Deploying And Using The GUI](#deploying-and-using-the-gui)\n\n# Configuration\n\nTo view the configuration options for this charm open the `config.yaml` file or:\n\n    $ juju get ghost\n\nTo set a configuration option for this charm:\n\n    $ juju set ghost <key>=<value>\n\nSee the `config.yaml` file in the charm for a detailed list of all of the charms\nconfiguration options.\n\n\n# Using A Load Balancer\n\nIn order to run multiple instances of the Ghost web server and to be able to\nserve your blog on a reserved port this charm supports being load balanced and\nreverse proxied by [haproxy](https://jujucharms.com/haproxy/trusty).\n\nIn order to reverse proxy and load balance this service you will need to deploy\nhaproxy:\n\n    $ juju deploy haproxy\n    $ juju expose haproxy\n\nYou will then need to unexpose the Ghost service:\n\n    $ juju unexpose ghost\n\nYou now need to let your haproxy instance know about Ghost so that it can\nmake the appropriate adjustments.\n\n    $ juju add-relation ghost haproxy\n\nAfter a few moments of configuration your Ghost blog will now be reachable on\nport 80 and you will be able to horizontally scale the server and have it\nautomatically load balanced. See [Horizontal Scaling](#horizontal-scaling) for\nmore information.\n\n\n# Setting Up Email Service\n\nGhost needs the ability to send emails to users for things like new user\nvalidation and password resets. To accomplish this Ghost supports using a\nthird party email service which it can communicate with to send these emails.\nGhost, and this charm, supports sending emails using Mailgun, Amazon SES, and\nGmail. Additional information about why Ghost needs this service and it's\nsupported platforms see [Mail configuration](http://support.ghost.org/mail/).\n\nTo specify a supported email service to use you simply need to set the\nconfiguration values in the charm and they will be generated for your Ghost\ninstance.\n\n#### Mailgun & Gmail\n\n    $ juju set ghost mailserver_username=<your username>\n    $ juju set ghost mailserver_password=<your password>\n    Then\n    $ juju set ghost mail_service=Mailgun\n    -or-\n    $ juju set ghost mail_service=Gmail\n\n#### Amazon SES\n\n    $ juju set ghost mailserver_username=<your username>\n    $ juju set ghost mailserver_password=<your password>\n    $ juju set ghost amazon_ses_host=<your ses host>\n    Then\n    $ juju set ghost mail_service=SES\n\nAfter this has been completed your Ghost server will restart and Ghost will\nnow be able to send emails using that provider. It's recommended to test this\nbefore you need it by creating a new user and pointing it to an email you\ncontrol and ensure that you get the validation email.\n\n\n# Connecting To MySQL\n\nBy default this charm uses Ghost's built in SQLite storage. If you would like to\nhorizontally scale your ghost instance you will need to use an external database\nlike MySQL.\n\n**If you already have blog posts in the SQLite database they will not be\ndeleted, but you will have to manually port them over to the MySQL database.**\n\nFirst you will need to deploy MySQL into your Juju environment:\n\n    $ juju deploy mysql\n\nAdditional details about the MySQL charm and configuration can be found in the\n[MySQL charm details](https://jujucharms.com/mysql/precise/) page.\n\nYou'll then need to relate the Ghost blog service to the MySQL service.\n\n    $ juju add-relation ghost mysql\n\nThe charm will then handle setting up all configuration options necessary to use\nthe MySQL database instead of the internal SQLite database.\n\n\n# Horizontal Scaling\n\nIf you're getting a lot of traffic to your blog and find that your webserver\ninstance is maxing out it's resources you can trivially scale horizontally. To\nadd additional units (instances):\n\n    $ juju add-unit -n 1 ghost\n\nNow that you have more than one unit you will need to ensure your posts are not\nstored locally on a single unit and you will need to be able to load balance\nbetween the multiple instances. See\n[Using A Load Balancer](#using-a-load-balancer) and\n[Connecting To MySQL](#connecting-to-mysql) for more information.\n\n\n# Colocating On A Single Machine\n\nBy default, every time you deploy a service or create a new unit Juju will\ncreate a new instance on your cloud provider. This may be undesired due to\nhardware availability or budgeting. Juju also provides you an easy to use method\nto deploy all of these services to a smaller number of machines using the\nfollowing syntax:\n\n    $ juju deploy --to=<machine number> <service name>\n\n    ex)\n\n    $ juju deploy --to=1 ghost\n\nColocating can have unintended consequences if the multiple service were not\ndesigned to be deployed to the same machine. To get around this you're able to\ncreate LXC and KVM containers to deploy to. This gets into advanced Juju usage\nand more information can be found in the Juju documentation on\n[Deploying Charms](https://jujucharms.com/docs/charms-deploying#deploying-to-specific-machines-and-containers)\n\n# Deploying And Using The GUI\n\nJuju has a powerful graphical user interface which you can use to interact with\nyour environment without having to use the CLI. In order to use the GUI in\nyour environment you will need to deploy it:\n\n    $ juju deploy juju-gui\n\nEvery command in this readme can be done using the GUI instead of the CLI. See\n[Juju GUI](https://jujucharms.com/juju-gui/trusty) for detailed information on\nthe Juju GUI charm and how to use the GUI.\n\n\n# Contributing\n\nThis charm wouldn't be where it is today without great contributions from\nothers. Pull requests are accepted in the\n[ghost-charm repository](https://github.com/hatched/ghost-charm)\n\n\n# Bug Reports\n\nPlease file bugs for the Ghost blogging engine in the\n[TryGhost Ghost repository](https://github.com/TryGhost/Ghost) and not in the\nghost-charm repository.\n\nIf you have found a bug with the ghost-charm itself they can be filed in the\n[ghost-charm repository](https://github.com/hatched/ghost-charm). Please include\nexact steps to reproduce the issue and be as detailed as possible, including\nwhat version of Ubuntu you're running on, the version of this charm you have\ndeployed, the cloud your environment is running on, any other charms deployed to\nthe environment.\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}