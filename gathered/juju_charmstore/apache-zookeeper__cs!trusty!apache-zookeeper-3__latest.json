{
  "name": "apache-zookeeper Juju charm",
  "juju_charm_name": "apache-zookeeper",
  "revision": "cs:trusty/apache-zookeeper-3",
  "latest": true,
  "uris": [
    "https://jujucharms.com/apache-zookeeper",
    "https://jujucharms.com/apache-zookeeper/trusty",
    "https://jujucharms.com/apache-zookeeper/trusty/3",
    "https://api.jujucharms.com/v5/apache-zookeeper",
    "https://api.jujucharms.com/v5/trusty/apache-zookeeper",
    "https://api.jujucharms.com/v5/trusty/apache-zookeeper-3"
  ],
  "labels": [
    "Juju charm",
    "bigdata",
    "hadoop",
    "apache",
    "Binding/Provider/HP",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Image/VM Image/AMI",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Store/Document-oriented/HBase",
    "Type/Middleware/Data Processing/Hadoop"
  ],
  "info_url": "https://jujucharms.com/apache-zookeeper",
  "package_url": "https://api.jujucharms.com/v5/trusty/apache-zookeeper-3/archive",
  "created": "2016-05-19T21:16:34.429Z",
  "updated": "2016-05-19T21:16:34.429Z",
  "description": "High-performance coordination service for distributed applications\n\nApache ZooKeeper is a centralized, reliable, service for maintaining\nconfiguration information, naming, providing distributed\nsynchronization, and group services. All of these kinds of services\nare used in some form or another by distributed applications.\nIn order to install and configure Apache HBase and other Hadoop ecosystem\ncomponents, you must start the ZooKeeper service.\n",
  "maintainer": {
    "name": "bigdata-charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "trusty",
  "juju_charm_owner": "bigdata-charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= trusty"
    }
  ],
  "parameters": {
    "resources_mirror": {
      "type": "string",
      "description": "URL from which to fetch resources (e.g., Hadoop binaries) instead of Launchpad.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "rest": {
      "type": "boolean",
      "description": "Set to true/false to enable/disable the REST Api server.\n",
      "default": false,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/zookeeper",
      "juju_interface": "zookeeper",
      "juju_name": "zkclient",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "zkpeer": {
      "Name": "zkpeer",
      "Role": "peer",
      "Interface": "zookeeper-quorum",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "## Overview\nApache ZooKeeper is a high-performance coordination service for distributed\napplications. It exposes common services such as naming, configuration\nmanagement, synchronization, and group services in a simple interface so you\ndon't have to write them from scratch. You can use it off-the-shelf to\nimplement consensus, group management, leader election, and presence protocols.\n\n\n## Usage\nDeploy a Zookeeper unit. With only one unit, the service will be running in\n`standalone` mode:\n\n    juju deploy apache-zookeeper zookeeper\n\n\n## Scaling\nRunning ZooKeeper in `standalone` mode is convenient for evaluation, some\ndevelopment, and testing. But in production, you should run ZooKeeper in\n`replicated` mode. A replicated group of servers in the same application is\ncalled a quorum, and in `replicated` mode, all servers in the quorum have\ncopies of the same configuration file.\n\nScaling Zookeeper to create a quorum is trivial. The following will add two\nadditional Zookeeper units and will automatically configure them with knowledge\nof the other quorum members based on their peer relation to one another:\n\n    juju add-unit -n 2 zookeeper\n\n\n## Test the deployment\nTest if the Zookeeper service is running by using the `zkServer.sh` script:\n\n    juju run --service=zookeeper '/usr/lib/zookeeper/bin/zkServer.sh status'\n\nA successful deployment will report the service mode as either `standalone`\n(if only one Zookeeper unit has been deployed) or `leader` / `follower` (if\na Zookeeper quorum has been formed).\n\n\n## REST API\nZookeeper REST Api can be enabled/disabled either through an action or\nvia a config variable:\n\n    juju action do zookeeper/0 start-rest\n    juju action do zookeeper/0 stop-rest\n\nor\n\n    juju set zookeeper rest=true\n\n## Integrate Zookeeper into another charm\n1) Add following lines to your charm's metadata.yaml:\n\n    requires:\n      zookeeper:\n         interface: zookeeper\n\n2) Add a `zookeeper-relation-changed` hook to your charm. Example contents:\n\n    from charmhelpers.core.hookenv import relation_get\n    ZK_hostname = relation_get('private-address')\n    ZK_port = relation_get('port')\n\n\n\n## Contact Information\n[bigdata@lists.ubuntu.com](mailto:bigdata@lists.ubuntu.com)\n\n\n## Help\n- [Apache Zookeeper home page](https://zookeeper.apache.org/)\n- [Apache Zookeeper issue tracker](https://issues.apache.org/jira/browse/ZOOKEEPER)\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme": "## Overview\nApache ZooKeeper is a high-performance coordination service for distributed\napplications. It exposes common services such as naming, configuration\nmanagement, synchronization, and group services in a simple interface so you\ndon't have to write them from scratch. You can use it off-the-shelf to\nimplement consensus, group management, leader election, and presence protocols.\n\n\n## Usage\nDeploy a Zookeeper unit. With only one unit, the service will be running in\n`standalone` mode:\n\n    juju deploy apache-zookeeper zookeeper\n\n\n## Scaling\nRunning ZooKeeper in `standalone` mode is convenient for evaluation, some\ndevelopment, and testing. But in production, you should run ZooKeeper in\n`replicated` mode. A replicated group of servers in the same application is\ncalled a quorum, and in `replicated` mode, all servers in the quorum have\ncopies of the same configuration file.\n\nScaling Zookeeper to create a quorum is trivial. The following will add two\nadditional Zookeeper units and will automatically configure them with knowledge\nof the other quorum members based on their peer relation to one another:\n\n    juju add-unit -n 2 zookeeper\n\n\n## Test the deployment\nTest if the Zookeeper service is running by using the `zkServer.sh` script:\n\n    juju run --service=zookeeper '/usr/lib/zookeeper/bin/zkServer.sh status'\n\nA successful deployment will report the service mode as either `standalone`\n(if only one Zookeeper unit has been deployed) or `leader` / `follower` (if\na Zookeeper quorum has been formed).\n\n\n## REST API\nZookeeper REST Api can be enabled/disabled either through an action or\nvia a config variable:\n\n    juju action do zookeeper/0 start-rest\n    juju action do zookeeper/0 stop-rest\n\nor\n\n    juju set zookeeper rest=true\n\n## Integrate Zookeeper into another charm\n1) Add following lines to your charm's metadata.yaml:\n\n    requires:\n      zookeeper:\n         interface: zookeeper\n\n2) Add a `zookeeper-relation-changed` hook to your charm. Example contents:\n\n    from charmhelpers.core.hookenv import relation_get\n    ZK_hostname = relation_get('private-address')\n    ZK_port = relation_get('port')\n\n\n\n## Contact Information\n[bigdata@lists.ubuntu.com](mailto:bigdata@lists.ubuntu.com)\n\n\n## Help\n- [Apache Zookeeper home page](https://zookeeper.apache.org/)\n- [Apache Zookeeper issue tracker](https://issues.apache.org/jira/browse/ZOOKEEPER)\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}