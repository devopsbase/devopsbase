{
  "name": "haproxy Juju charm",
  "juju_charm_name": "haproxy",
  "revision": "cs:precise/haproxy-36",
  "latest": true,
  "uris": [
    "https://jujucharms.com/haproxy",
    "https://jujucharms.com/haproxy/precise",
    "https://jujucharms.com/haproxy/precise/36",
    "https://api.jujucharms.com/v5/haproxy",
    "https://api.jujucharms.com/v5/precise/haproxy",
    "https://api.jujucharms.com/v5/precise/haproxy-36"
  ],
  "labels": [
    "Juju charm",
    "cache-proxy",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://jujucharms.com/haproxy",
  "package_url": "https://api.jujucharms.com/v5/precise/haproxy-36/archive",
  "created": "2016-04-07T16:27:35.052Z",
  "updated": "2016-04-07T16:27:35.052Z",
  "description": "fast and reliable load balancing reverse proxy\n\nHAProxy is a TCP/HTTP reverse proxy which is particularly suited for high availability environments. It features connection persistence through HTTP cookies, load balancing, header addition, modification, deletion both ways. It has request blocking capabilities and provides interface to display server status.",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/http",
      "self_resolve": true,
      "juju_interface": "http",
      "juju_name": "reverseproxy",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "default_log": {
      "type": "string",
      "description": "Default log",
      "default": "global",
      "mapping": "charm_option"
    },
    "default_mode": {
      "type": "string",
      "description": "Default mode",
      "default": "http",
      "mapping": "charm_option"
    },
    "default_options": {
      "type": "string",
      "description": "Default options",
      "default": "httplog, dontlognull",
      "mapping": "charm_option"
    },
    "default_retries": {
      "type": "int",
      "description": "Set the number of retries to perform on a server after a connection\nfailure. It is important to understand that this value applies to the\nnumber of connection attempts, not full requests. When a connection \nhas effectively been established to a server, there will be no more \nretry.\nIn order to avoid immediate reconnections to a server which is \nrestarting, a turn-around timer of 1 second is applied before a retry\noccurs.\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "default_timeouts": {
      "type": "string",
      "description": "Default timeouts",
      "default": "queue 20000, client 50000, connect 5000, server 50000",
      "mapping": "charm_option"
    },
    "enable_monitoring": {
      "type": "boolean",
      "description": "Enable monitoring",
      "default": false,
      "mapping": "charm_option"
    },
    "global_debug": {
      "type": "boolean",
      "description": "Debug or not",
      "default": false,
      "mapping": "charm_option"
    },
    "global_group": {
      "type": "string",
      "description": "Group",
      "default": "haproxy",
      "mapping": "charm_option"
    },
    "global_log": {
      "type": "string",
      "description": "Global log line ( multiples ... comma separated list )",
      "default": "127.0.0.1 local0, 127.0.0.1 local1 notice",
      "mapping": "charm_option"
    },
    "global_maxconn": {
      "type": "int",
      "description": "Sets the maximum per-process number of concurrent connections to\n<number>.\n",
      "default": 4096,
      "mapping": "charm_option"
    },
    "global_quiet": {
      "type": "boolean",
      "description": "Quiet",
      "default": false,
      "mapping": "charm_option"
    },
    "global_spread_checks": {
      "type": "int",
      "description": "Sometimes it is desirable to avoid sending health checks to servers at\nexact intervals, for instance when many logical servers are located on\nthe same physical server. With the help of this parameter, it becomes \npossible to add some randomness in the check interval between 0 and \n+/- 50%. A value between 2 and 5 seems to show good results.\n",
      "default": 0,
      "mapping": "charm_option"
    },
    "global_stats_socket": {
      "type": "boolean",
      "description": "Whether to enable the stats UNIX socket.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "global_user": {
      "type": "string",
      "description": "User",
      "default": "haproxy",
      "mapping": "charm_option"
    },
    "install_keys": {
      "type": "string",
      "description": "YAML list of GPG keys for installation sources, as a string. For apt repository\nURLs, use the public key ID used to verify package signatures. For\nother sources such as PPA, use empty string. This list must have the\nsame number of elements as install_sources, even if the key items are\nall empty string. An example to go with the above for install_sources:\n  install_keys: |\n   - \"\"\n   - \"\"\n",
      "default": "",
      "mapping": "charm_option"
    },
    "install_sources": {
      "type": "string",
      "description": "YAML list of additional installation sources, as a string. The number of\ninstall_sources must match the number of install_keys. For example:\n  install_sources: |\n   - ppa:project1/ppa\n   - ppa:project2/ppa\n",
      "default": "",
      "mapping": "charm_option"
    },
    "metrics_prefix": {
      "type": "string",
      "description": "Prefix for metrics. Special value $UNIT can be used to include the\nname of the unit in the prefix.\n",
      "default": "dev.$UNIT.haproxy",
      "mapping": "charm_option"
    },
    "metrics_sample_interval": {
      "type": "int",
      "description": "Period for metrics cron job to run in minutes",
      "default": 5,
      "mapping": "charm_option"
    },
    "metrics_target": {
      "type": "string",
      "description": "Destination for statsd-format metrics, format \"host:port\". If\nnot present and valid, metrics disabled. Requires \"enable_monitoring\"\nto be set to true to work.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "monitoring_allowed_cidr": {
      "type": "string",
      "description": "CIDR allowed ( multiple CIDRs separated by space ) access to the\nmonitoring interface.\n",
      "default": "127.0.0.1/32",
      "mapping": "charm_option"
    },
    "monitoring_password": {
      "type": "string",
      "description": "Password to the monitoring interface ( if \"changeme\", a new password\nwill be generated and displayed in juju-log )\n",
      "default": "changeme",
      "mapping": "charm_option"
    },
    "monitoring_port": {
      "type": "int",
      "description": "Default monitoring port",
      "default": 10000,
      "mapping": "charm_option"
    },
    "monitoring_stats_refresh": {
      "type": "int",
      "description": "Monitoring interface refresh interval (in seconds)",
      "default": 3,
      "mapping": "charm_option"
    },
    "monitoring_username": {
      "type": "string",
      "description": "Monitoring username",
      "default": "haproxy",
      "mapping": "charm_option"
    },
    "nagios_context": {
      "type": "string",
      "description": "Used by the nrpe-external-master subordinate charm.\nA string that will be prepended to instance name to set the host name\nin nagios. So for instance the hostname would be something like:\n    juju-postgresql-0\nIf you're running multiple environments with the same services in them\nthis allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "nagios_servicegroups": {
      "type": "string",
      "description": "A comma-separated list of nagios servicegroups.\nIf left empty, the nagios_context will be used as the servicegroup\n",
      "default": "",
      "mapping": "charm_option"
    },
    "open_monitoring_port": {
      "type": "boolean",
      "description": "Open the monitoring port when enable_monitoring is true.\n\nConsider setting this to false if exposing haproxy on a shared\nor untrusted network, e.g., when deploying a frontend.\n",
      "default": true,
      "mapping": "charm_option"
    },
    "package_status": {
      "type": "string",
      "description": "The status of service-affecting packages will be set to this value in the dpkg database.\nUseful valid values are \"install\" and \"hold\".\n",
      "default": "install",
      "mapping": "charm_option"
    },
    "peering_mode": {
      "type": "string",
      "description": "Possible values : \"active-passive\", \"active-active\". This is only used\nif several units are spawned.  In \"active-passive\" mode, all the units will\nforward traffic to the first working haproxy unit, which will then forward it\nto configured backends. In \"active-active\" mode, each unit will proxy the\ntraffic directly to the backends. The \"active-passive\" mode gives a better\ncontrol of the maximum connection that will be opened to a backend server.\n",
      "default": "active-passive",
      "mapping": "charm_option"
    },
    "services": {
      "type": "string",
      "description": "Services definition(s). Although the variable type is a string, this is\ninterpreted in the charm as yaml. To use multiple services within the\nsame haproxy instance, specify all of the variables (service_name,\nservice_host, service_port, service_options, server_options) with a \"-\"\nbefore the first variable, service_name, as above. Service options is a\ncomma separated list, server options will be appended as a string to\nthe individual server lines for a given listen stanza.\n\nIf your web application serves dynamic content based on users' login\nsessions, a visitor will experience unexpected behaviour if each request\nis proxied to a different backend web server. Session stickiness ensures\nthat a visitor 'sticks' to the backend web server which served their\nfirst request. This is made possible by tagging each backend server\nwith a cookie. Session are sticky by default. To turn off sticky sessions,\nremove the 'cookie SRVNAME insert' and 'cookie S{i}' stanzas from\n`service_options` and `server_options`.\n",
      "default": "- service_name: haproxy_service\n  service_host: \"0.0.0.0\"\n  service_port: 80\n  service_options: [balance leastconn, cookie SRVNAME insert]\n  server_options: maxconn 100 cookie S{i} check\n",
      "mapping": "charm_option"
    },
    "ssl_cert": {
      "type": "string",
      "description": "This option is only supported in Haproxy >= 1.5.\n\nUse this SSL certificate for frontend SSL termination, if specified.\nThis should be a concatenation of:\n* The public certificate (PEM)\n* Zero or more intermediate CA certificates (PEM)\n* The private key (PEM)\nThe certificate(s) + private key will be installed with read-access to the\nhaproxy service user. If this option is set, all bind stanzas will use this\ncertificate.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "sysctl": {
      "type": "string",
      "description": "YAML-formatted list of sysctl values, e.g.: '{ net.ipv4.tcp_max_syn_backlog : 65536 }'\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/local-monitors",
      "juju_interface": "local-monitors",
      "juju_name": "local-monitors",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/munin-node",
      "juju_interface": "munin-node",
      "juju_name": "munin",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe-external-master",
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "peer": {
      "Name": "peer",
      "Role": "peer",
      "Interface": "haproxy-peer",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "# Overview\n\nThis charm deploys a reverse proxy in front of other servies. You can use this to load balance existing deployments.\n\n# Usage\n\n    juju deploy haproxy\n    juju deploy my-web-app\n    juju add-relation my-web-app:website haproxy:reverseproxy\n    juju add-unit my-web-app\n    ...\n\n## Reverse Proxy Relation\n\nThe reverse proxy relation is used to distribute connections from one frontend\nport to many backend services (typically different Juju _units_).  You can use\nhaproxy just like this, but typically in a production service you would\nfrontend this service with apache2 to handle the SSL negotiation, etc.  See\nthe \"Website Relation\" section for more information about that.\n\nWhen your charm hooks into reverseproxy you have two general approaches\nwhich can be used to notify haproxy about what services you are running.\n1) Single-service proxying or 2) Multi-service or relation-driven proxying.\n\n1. Single-Service Proxying\n\nIn this case, your website relation will join underneath a single `listen`\nstanza in haproxy.  This stanza will have one `service` entry for each unit\nconnecting. By convention, this is typically called \"website\".  The\nfollowing is an example of a relation-joined or changed hook:\n\n    #!/bin/bash\n    # hooks/website-relation-joined\n\n    relation-set \"hostname=$(unit-get private-address)\"\n    relation-set \"port=80\"\n\n    # Set an optional service name, allowing more config-based\n    # customization\n    relation-set \"service_name=my_web_app\"\n\nIf you set the `service_name` relation setting, the configuration `services`\nyaml mapping will be consulted to lookup 3 other options based on service\nname.\n\n  * `{service_name}_servers` - sets the `server` line in the listen stanza\n    explicitly.\n  * `{service_name}_server_options` - Will append to the charm-generated\n    server line for for each joining unit in the reverseproxy relation.\n  * `{service_name}_service_options` - expected to be a list of strings.  Will\n    set each item as an option under the listen stanza.\n\n\n2. Relation-Driven Proxying \n\nIn this relation style, your charm should specify these relation settings\ndirectly as relation variables when joining reverseproxy.  Your charm's\nwebsite-relation-changed hook would look something like this:\n\n    #!/bin/bash\n    # hooks/website-relation-changed\n\n    host=$(unit-get private-address)\n    port=80\n\n    relation-set \"services=\n    - { service_name: my_web_app,\n        service_options: [mode http, balance leastconn],\n        servers: [[my_web_app_1, $host, $port, option httpchk GET / HTTP/1.0],\n                  [... optionally more servers here ...]]}\n    - { ... optionally more services here ... }\n    \"\n\nOnce set, haproxy will union multiple `servers` stanzas from any units\njoining with the same `service_name` under one listen stanza.\n`service-options` and `server_options` will be overwritten, so ensure they\nare set uniformly on all services with the same name.\n\n## Website Relation\n\nThe website relation is the other side of haproxy.  It can communicate with\ncharms written like apache2 that can act as a front-end for haproxy to take of\nthings like ssl encryption.  When joining a service like apache2 on its\nreverseproxy relation, haproxy's website relation will set an `all_services`\nvaraible that conforms to the spec layed out in the apache2 charm.\n\nThese settings can then be used when crafting your vhost template to make sure\ntraffic goes to the correct haproxy listener which will in turn forward the\ntraffic to the correct backend server/port\n\n## Development\n\nThe following steps are needed for testing and development of the charm,\nbut **not** for deployment:\n\n    sudo apt-get install python-software-properties\n    sudo add-apt-repository ppa:cjohnston/flake8\n    sudo apt-get update\n    sudo apt-get install python-mock python-flake8 python-nose python-nosexcover python-testtools charm-tools\n\nTo run the tests:\n\n    make build\n\n... will run the unit tests, run flake8 over the source to warn about\nformatting issues and output a code coverage summary of the 'hooks.py' module.\n\n\n## Known Limitations and Issues\n\n- Expand Single-Service section as I have not tested that mode fully.\n- Trigger website-relation-changed when the reverse-proxy relation changes\n\n\n# Configuration\n\nMany of the haproxy settings can be altered via the standard juju configuration\nsettings.  Please see the config.yaml file as each is fairly clearly documented.\n\n## statsd\n\nThis charm supports sending metrics to statsd.\n\nThis is done by setting config values (metrics_target being the primary one)\nto a host/port of a (UDP) statsd server.\n\nThis could instead be done using a relation, but it is common to have\none statsd server that serves multiple environments. Once juju supports\ncross-environment relations then that will be the best way to handle \nthis configuration, as it will work in either scenario.\n\n## peering\\_mode and the indirection layer\n\nIf you are going to spawn multiple haproxy units, you should pay special\nattention to the peering\\_mode configuration option.\n\n### active-passive mode\n\nThe peering\\_mode option defaults to \"active-passive\" and in this mode, all\nhaproxy units (\"peers\") will proxy traffic to the first working peer (i.e. that\npasses a basic layer4 check). What this means is that extra peers are working\nas \"hot spares\", and so adding units doesn't add global bandwidth to the\nhaproxy layer.\n\nIn order to achieve this, the charm configures a new service in haproxy that\nwill simply forward the traffic to the first working peer. The haproxy service\nthat actually load-balances between the backends is renamed, and its port\nnumber is increased by one.\n\nFor example, if you have 3 working haproxy units haproxy/0, haproxy/1 and\nhaproxy/2 configured to listen on port 80, in active-passive mode, and\nhaproxy/2 gets a request, the request is routed through the following path :\n\nhaproxy/2:80 ==> haproxy/0:81 ==> \\[backends\\]\n\nIn the same fashion, if haproxy/1 receives a request, it's routed in the following way :\n\nhaproxy/1:80 ==> haproxy/0:81 ==> \\[backends\\]\n\nIf haproxy/0 was to go down, then all the requests would be forwarded to the\nnext working peer, i.e. haproxy/1. In this case, a request received by\nhaproxy/2 would be routed as follows :\n\nhaproxy/2:80 ==> haproxy/1:81 ==> \\[backends\\]\n\nThis mode allows a strict control of the maximum number of connections the\nbackends will receive, and guarantees you'll have enough bandwidth to the\nbackends should an haproxy unit die, at the cost of having less overall\nbandwidth to the backends.\n\n### active-active mode\n\nIf the peering\\_mode option is set to \"active-active\", then any haproxy unit\nwill be independant from each other and will simply load-balance the traffic to\nthe backends. In this case, the indirection layer described above is not\ncreated in this case.\n\nThis mode allows increasing the bandwidth to the backends by adding additional\nunits, at the cost of having less control over the number of connections that\nthey will receive.\n\n# HAProxy Project Information\n\n- [HAProxy Homepage](http://haproxy.1wt.eu/)\n- [HAProxy mailing list](http://haproxy.1wt.eu/#tact)\n",
  "readme": "# Overview\n\nThis charm deploys a reverse proxy in front of other servies. You can use this to load balance existing deployments.\n\n# Usage\n\n    juju deploy haproxy\n    juju deploy my-web-app\n    juju add-relation my-web-app:website haproxy:reverseproxy\n    juju add-unit my-web-app\n    ...\n\n## Reverse Proxy Relation\n\nThe reverse proxy relation is used to distribute connections from one frontend\nport to many backend services (typically different Juju _units_).  You can use\nhaproxy just like this, but typically in a production service you would\nfrontend this service with apache2 to handle the SSL negotiation, etc.  See\nthe \"Website Relation\" section for more information about that.\n\nWhen your charm hooks into reverseproxy you have two general approaches\nwhich can be used to notify haproxy about what services you are running.\n1) Single-service proxying or 2) Multi-service or relation-driven proxying.\n\n1. Single-Service Proxying\n\nIn this case, your website relation will join underneath a single `listen`\nstanza in haproxy.  This stanza will have one `service` entry for each unit\nconnecting. By convention, this is typically called \"website\".  The\nfollowing is an example of a relation-joined or changed hook:\n\n    #!/bin/bash\n    # hooks/website-relation-joined\n\n    relation-set \"hostname=$(unit-get private-address)\"\n    relation-set \"port=80\"\n\n    # Set an optional service name, allowing more config-based\n    # customization\n    relation-set \"service_name=my_web_app\"\n\nIf you set the `service_name` relation setting, the configuration `services`\nyaml mapping will be consulted to lookup 3 other options based on service\nname.\n\n  * `{service_name}_servers` - sets the `server` line in the listen stanza\n    explicitly.\n  * `{service_name}_server_options` - Will append to the charm-generated\n    server line for for each joining unit in the reverseproxy relation.\n  * `{service_name}_service_options` - expected to be a list of strings.  Will\n    set each item as an option under the listen stanza.\n\n\n2. Relation-Driven Proxying \n\nIn this relation style, your charm should specify these relation settings\ndirectly as relation variables when joining reverseproxy.  Your charm's\nwebsite-relation-changed hook would look something like this:\n\n    #!/bin/bash\n    # hooks/website-relation-changed\n\n    host=$(unit-get private-address)\n    port=80\n\n    relation-set \"services=\n    - { service_name: my_web_app,\n        service_options: [mode http, balance leastconn],\n        servers: [[my_web_app_1, $host, $port, option httpchk GET / HTTP/1.0],\n                  [... optionally more servers here ...]]}\n    - { ... optionally more services here ... }\n    \"\n\nOnce set, haproxy will union multiple `servers` stanzas from any units\njoining with the same `service_name` under one listen stanza.\n`service-options` and `server_options` will be overwritten, so ensure they\nare set uniformly on all services with the same name.\n\n## Website Relation\n\nThe website relation is the other side of haproxy.  It can communicate with\ncharms written like apache2 that can act as a front-end for haproxy to take of\nthings like ssl encryption.  When joining a service like apache2 on its\nreverseproxy relation, haproxy's website relation will set an `all_services`\nvaraible that conforms to the spec layed out in the apache2 charm.\n\nThese settings can then be used when crafting your vhost template to make sure\ntraffic goes to the correct haproxy listener which will in turn forward the\ntraffic to the correct backend server/port\n\n## Development\n\nThe following steps are needed for testing and development of the charm,\nbut **not** for deployment:\n\n    sudo apt-get install python-software-properties\n    sudo add-apt-repository ppa:cjohnston/flake8\n    sudo apt-get update\n    sudo apt-get install python-mock python-flake8 python-nose python-nosexcover python-testtools charm-tools\n\nTo run the tests:\n\n    make build\n\n... will run the unit tests, run flake8 over the source to warn about\nformatting issues and output a code coverage summary of the 'hooks.py' module.\n\n\n## Known Limitations and Issues\n\n- Expand Single-Service section as I have not tested that mode fully.\n- Trigger website-relation-changed when the reverse-proxy relation changes\n\n\n# Configuration\n\nMany of the haproxy settings can be altered via the standard juju configuration\nsettings.  Please see the config.yaml file as each is fairly clearly documented.\n\n## statsd\n\nThis charm supports sending metrics to statsd.\n\nThis is done by setting config values (metrics_target being the primary one)\nto a host/port of a (UDP) statsd server.\n\nThis could instead be done using a relation, but it is common to have\none statsd server that serves multiple environments. Once juju supports\ncross-environment relations then that will be the best way to handle \nthis configuration, as it will work in either scenario.\n\n## peering\\_mode and the indirection layer\n\nIf you are going to spawn multiple haproxy units, you should pay special\nattention to the peering\\_mode configuration option.\n\n### active-passive mode\n\nThe peering\\_mode option defaults to \"active-passive\" and in this mode, all\nhaproxy units (\"peers\") will proxy traffic to the first working peer (i.e. that\npasses a basic layer4 check). What this means is that extra peers are working\nas \"hot spares\", and so adding units doesn't add global bandwidth to the\nhaproxy layer.\n\nIn order to achieve this, the charm configures a new service in haproxy that\nwill simply forward the traffic to the first working peer. The haproxy service\nthat actually load-balances between the backends is renamed, and its port\nnumber is increased by one.\n\nFor example, if you have 3 working haproxy units haproxy/0, haproxy/1 and\nhaproxy/2 configured to listen on port 80, in active-passive mode, and\nhaproxy/2 gets a request, the request is routed through the following path :\n\nhaproxy/2:80 ==> haproxy/0:81 ==> \\[backends\\]\n\nIn the same fashion, if haproxy/1 receives a request, it's routed in the following way :\n\nhaproxy/1:80 ==> haproxy/0:81 ==> \\[backends\\]\n\nIf haproxy/0 was to go down, then all the requests would be forwarded to the\nnext working peer, i.e. haproxy/1. In this case, a request received by\nhaproxy/2 would be routed as follows :\n\nhaproxy/2:80 ==> haproxy/1:81 ==> \\[backends\\]\n\nThis mode allows a strict control of the maximum number of connections the\nbackends will receive, and guarantees you'll have enough bandwidth to the\nbackends should an haproxy unit die, at the cost of having less overall\nbandwidth to the backends.\n\n### active-active mode\n\nIf the peering\\_mode option is set to \"active-active\", then any haproxy unit\nwill be independant from each other and will simply load-balance the traffic to\nthe backends. In this case, the indirection layer described above is not\ncreated in this case.\n\nThis mode allows increasing the bandwidth to the backends by adding additional\nunits, at the cost of having less control over the number of connections that\nthey will receive.\n\n# HAProxy Project Information\n\n- [HAProxy Homepage](http://haproxy.1wt.eu/)\n- [HAProxy mailing list](http://haproxy.1wt.eu/#tact)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}