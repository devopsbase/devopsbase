{
  "name": "rabbitmq-server Juju charm",
  "juju_charm_name": "rabbitmq-server",
  "revision": "cs:precise/rabbitmq-server-45",
  "latest": true,
  "uris": [
    "https://jujucharms.com/rabbitmq-server",
    "https://jujucharms.com/rabbitmq-server/precise",
    "https://jujucharms.com/rabbitmq-server/precise/45",
    "https://api.jujucharms.com/v5/rabbitmq-server",
    "https://api.jujucharms.com/v5/precise/rabbitmq-server",
    "https://api.jujucharms.com/v5/precise/rabbitmq-server-45"
  ],
  "labels": [
    "Juju charm",
    "openstack",
    "amqp",
    "misc",
    "Type/Middleware/Runtime/Java",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Messaging/RabbitMQ"
  ],
  "info_url": "https://jujucharms.com/rabbitmq-server",
  "package_url": "https://api.jujucharms.com/v5/precise/rabbitmq-server-45/archive",
  "created": "2016-01-28T09:32:17.272Z",
  "updated": "2016-01-28T09:32:17.272Z",
  "description": "An AMQP server written in Erlang\n\nRabbitMQ is an implementation of AMQP, the emerging standard for high\nperformance enterprise messaging. The RabbitMQ server is a robust and\nscalable implementation of an AMQP broker.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/ceph-client",
      "self_resolve": true,
      "juju_interface": "ceph-client",
      "juju_name": "ceph",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/hacluster",
      "self_resolve": true,
      "juju_interface": "hacluster",
      "juju_name": "ha",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "access-network": {
      "type": "string",
      "description": "The IP address and netmask of the 'access' network (e.g., 192.168.0.0/24)\n .\nThis network will be used for access to RabbitMQ messaging services.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "ceph-osd-replication-count": {
      "type": "int",
      "description": "This value dictates the number of replicas ceph must make of any\nobject it stores within the rabbitmq rbd pool. Of course, this only\napplies if using Ceph as a backend store. Note that once the rabbitmq\nrbd pool has been created, changing this value will not have any\neffect (although it can be changed in ceph by manually configuring\nyour ceph cluster).\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "cluster-partition-handling": {
      "type": "string",
      "description": "RabbitMQ offers three ways to deal with network partitions automatically.\nAvailable modes:\n\nignore - Your network is reliable. All your nodes are in a rack,\nconnected with a switch, and that switch is also the route to the outside world.\nYou don't want to run any risk of any of your cluster shutting down if any other part of it fails\n(or you have a two node cluster).\n\npause_minority - Your network is maybe less reliable. You have clustered across 3 AZs in EC2,\nand you assume that only one AZ will fail at once.\nIn that scenario you want the remaining two AZs to continue working and the nodes from the failed AZ\nto rejoin automatically and without fuss when the AZ comes back.\n\nautoheal - Your network may not be reliable.\nYou are more concerned with continuity of service than with data integrity.\nYou may have a two node cluster.\n\nFor more information see http://www.rabbitmq.com/partitions.html.\n",
      "default": "ignore",
      "mapping": "charm_option"
    },
    "ha-bindiface": {
      "type": "string",
      "description": "Default network interface on which HA cluster will bind to communication\nwith the other members of the HA Cluster.\n",
      "default": "eth0",
      "mapping": "charm_option"
    },
    "ha-mcastport": {
      "type": "int",
      "description": "Default multicast port number that will be used to communicate between\nHA Cluster nodes.\n",
      "default": 5406,
      "mapping": "charm_option"
    },
    "ha-vip-only": {
      "type": "boolean",
      "description": "By default, without pairing with hacluster charm, rabbitmq will deploy\nin active/active/active... HA. When pairied with hacluster charm, it\nwill deploy as active/passive. By enabling this option, pairing with\nhacluster charm will keep rabbit in active/active setup, but in addition\nit will deploy a VIP that can be used by services that cannot work\nwith mutiple AMQPs (like Glance in pre-Icehouse).\n",
      "default": false,
      "mapping": "charm_option"
    },
    "key": {
      "type": "string",
      "description": "Key ID to import to the apt keyring to support use with arbitary source\nconfiguration from outside of Launchpad archives or PPA's.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "management_plugin": {
      "type": "boolean",
      "description": "enable the management plugin",
      "default": false,
      "mapping": "charm_option"
    },
    "max-cluster-tries": {
      "type": "int",
      "description": "Number of tries to cluster with other units before giving up and throwing\na hook error.\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "min-cluster-size": {
      "type": "int",
      "description": "Minimum number of units expected to exist before charm will attempt to\nform a rabbitmq cluster.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "mirroring-queues": {
      "type": "boolean",
      "description": "When set to true the 'ha-mode: all' policy is applied to all the exchages\nthat match the expression '^(?!amq\\.).*'\n",
      "default": true,
      "mapping": "charm_option"
    },
    "nagios_context": {
      "type": "string",
      "description": "Used by the nrpe-external-master subordinate charm.\nA string that will be prepended to instance name to set the host name\nin nagios. So for instance the hostname would be something like:\n    juju-myservice-0\nIf you're running multiple environments with the same services in them\nthis allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "nagios_servicegroups": {
      "type": "string",
      "description": "A comma-separated list of nagios servicegroups.\nIf left empty, the nagios_context will be used as the servicegroup\n",
      "default": "",
      "mapping": "charm_option"
    },
    "prefer-ipv6": {
      "type": "boolean",
      "description": "If True enables IPv6 support. The charm will expect network interfaces\nto be configured with an IPv6 address. If set to False (default) IPv4\nis expected.\n.\nNOTE: these charms do not currently support IPv6 privacy extension. In\norder for this charm to function correctly, the privacy extension must be\ndisabled and a non-temporary address must be configured/available on\nyour network interface.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "queue_thresholds": {
      "type": "string",
      "description": "List of RabbitMQ queue size check thresholds. Interpreted as YAML\nin format [<vhost>, <queue>, <warn>, <crit>]\n- ['/', 'queue1', 10, 20]\n- ['/', 'queue2', 200, 300]\nWildcards '*' are accepted to monitor all vhosts and/or queues\n",
      "default": "[['\\*', '\\*', 100, 200]]",
      "mapping": "charm_option"
    },
    "rbd-name": {
      "type": "string",
      "description": "The name that will be used to create the Ceph's RBD image with. If the\nimage name exists in Ceph, it will be re-used and the data will be\noverwritten.\n",
      "default": "rabbitmq1",
      "mapping": "charm_option"
    },
    "rbd-size": {
      "type": "string",
      "description": "Default rbd storage size to create when setting up block storage.\nThis value should be specified in GB (e.g. 100G).\n",
      "default": "5G",
      "mapping": "charm_option"
    },
    "source": {
      "type": "string",
      "description": "Optional configuration to support use of additional sources such as:\n.\n  - ppa:myteam/ppa\n  - cloud:precise-proposed/folsom\n  - http://my.archive.com/ubuntu main\n.\nThe last option should be used in conjunction with the key configuration\noption.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl": {
      "type": "string",
      "description": "Enable SSL connections on rabbitmq, valid values are 'off', 'on', 'only'. If ssl_key,\nssl_cert, ssl_ca are provided then then those values will be used. Otherwise\nthe service will act as its own certificate authority and pass its ca cert to clients.\nFor HA or clustered rabbits ssl key/cert must be provided.\n",
      "default": "off",
      "mapping": "charm_option"
    },
    "ssl_ca": {
      "type": "string",
      "description": "Certificate authority cert that the cert. Optional if the ssl_cert is signed by a ca\nrecognized by the os. Format is base64 PEM (concatenated certs if needed).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl_cert": {
      "type": "string",
      "description": "X.509 certificate in base64 PEM format (starts \"-----BEGIN CERTIFICATE-----\")",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl_enabled": {
      "type": "boolean",
      "description": "(DEPRECATED see 'ssl' config option.) enable SSL\n",
      "default": false,
      "mapping": "charm_option"
    },
    "ssl_key": {
      "type": "string",
      "description": "private unencrypted key in base64 PEM format (starts \"-----BEGIN RSA PRIVATE KEY-----\")",
      "default": null,
      "mapping": "charm_option"
    },
    "ssl_port": {
      "type": "int",
      "description": "SSL port",
      "default": 5671,
      "mapping": "charm_option"
    },
    "stats_cron_schedule": {
      "type": "string",
      "description": "Cron schedule used to generate rabbitmq stats. If unset\nno stats will be generated\n",
      "default": "*/5 * * * *",
      "mapping": "charm_option"
    },
    "use-syslog": {
      "type": "boolean",
      "description": "If True, services that support it will log to syslog instead of their normal\nlog location.\n",
      "default": false,
      "mapping": "charm_option"
    },
    "vip": {
      "type": "string",
      "description": "Virtual IP to use to front rabbitmq in ha configuration",
      "default": null,
      "mapping": "charm_option"
    },
    "vip_cidr": {
      "type": "int",
      "description": "Netmask that will be used for the Virtual IP",
      "default": 24,
      "mapping": "charm_option"
    },
    "vip_iface": {
      "type": "string",
      "description": "Network Interface where to place the Virtual IP",
      "default": "eth0",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/rabbitmq",
      "juju_interface": "rabbitmq",
      "juju_name": "amqp",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe-external-master",
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "cluster": {
      "Name": "cluster",
      "Role": "peer",
      "Interface": "rabbitmq-ha",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "Configuring SSL\n---------------\nGenerate an unencrypted RSA private key for the servers and a certificate:\n\n  openssl genrsa -out rabbit-server-privkey.pem 2048\n\nGet an X.509 certificate. This can be self-signed, for example:\n\n  openssl req -batch -new -x509 -key rabbit-server-privkey.pem -out rabbit-server-cert.pem -days 10000\n\nDeploy the service:\n\n  juju deploy rabbitmq-server rabbit\n\nEnable SSL, passing in the key and certificate as configuration settings:\n\n  juju set rabbit ssl_enabled=True ssl_key=\"`cat rabbit-server-privkey.pem`\" ssl_cert=\"`cat rabbit-server-cert.pem`\"\n\nTo change the source that the charm uses for packages:\n\n  juju set rabbit source=\"cloud:precise-icehouse\"\n\nThis will enable the Icehouse pocket of the Cloud Archive (which contains a new version of RabbitMQ) and upgrade the install to the new version.\n\nThe source option can be used in a few different ways:\n\n  source=\"ppa:james-page/testing\" - use the testing PPA owned by james-page\n  source=\"http://myrepo/ubuntu main\" - use the repository located at the provided URL\n\nThe charm also supports use of arbitary archive key's for use with private repositories:\n\n  juju set rabbit key=\"C6CEA0C9\"\n\nNote that in clustered configurations, the upgrade can be a bit racey as the services restart and re-cluster; this is resolvable using:\n\n  juju resolved --retry rabbitmq/1\n",
  "readme": "Configuring SSL\n---------------\nGenerate an unencrypted RSA private key for the servers and a certificate:\n\n  openssl genrsa -out rabbit-server-privkey.pem 2048\n\nGet an X.509 certificate. This can be self-signed, for example:\n\n  openssl req -batch -new -x509 -key rabbit-server-privkey.pem -out rabbit-server-cert.pem -days 10000\n\nDeploy the service:\n\n  juju deploy rabbitmq-server rabbit\n\nEnable SSL, passing in the key and certificate as configuration settings:\n\n  juju set rabbit ssl_enabled=True ssl_key=\"`cat rabbit-server-privkey.pem`\" ssl_cert=\"`cat rabbit-server-cert.pem`\"\n\nTo change the source that the charm uses for packages:\n\n  juju set rabbit source=\"cloud:precise-icehouse\"\n\nThis will enable the Icehouse pocket of the Cloud Archive (which contains a new version of RabbitMQ) and upgrade the install to the new version.\n\nThe source option can be used in a few different ways:\n\n  source=\"ppa:james-page/testing\" - use the testing PPA owned by james-page\n  source=\"http://myrepo/ubuntu main\" - use the repository located at the provided URL\n\nThe charm also supports use of arbitary archive key's for use with private repositories:\n\n  juju set rabbit key=\"C6CEA0C9\"\n\nNote that in clustered configurations, the upgrade can be a bit racey as the services restart and re-cluster; this is resolvable using:\n\n  juju resolved --retry rabbitmq/1\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}