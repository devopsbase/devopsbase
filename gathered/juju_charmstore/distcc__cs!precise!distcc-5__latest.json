{
  "name": "distcc Juju charm",
  "juju_charm_name": "distcc",
  "revision": "cs:precise/distcc-5",
  "latest": true,
  "uris": [
    "https://jujucharms.com/distcc",
    "https://jujucharms.com/distcc/precise",
    "https://jujucharms.com/distcc/precise/5",
    "https://api.jujucharms.com/v5/distcc",
    "https://api.jujucharms.com/v5/precise/distcc",
    "https://api.jujucharms.com/v5/precise/distcc-5"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Type/Infrastructure/Operating System/macOS",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju"
  ],
  "info_url": "https://jujucharms.com/distcc",
  "package_url": "https://api.jujucharms.com/v5/precise/distcc-5/archive",
  "created": "2015-06-17T09:30:45.568Z",
  "updated": "2015-06-17T09:30:45.568Z",
  "description": "Simple distributed compiler client and server\n\ndistcc is a program to distribute compilation of C or C++ code across\nseveral machines on a network. distcc should always generate the same\nresults as a local compile, is simple to install and use, and is often\nsignificantly faster than a local compile.  distcc does not require\nall machines to share a filesystem, have synchronized clocks, or to\nhave the same libraries or header files installed.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "distcc_options": {
      "type": "string",
      "description": "distcc options for each host in the farm",
      "default": "cpp,lzo",
      "mapping": "charm_option"
    },
    "existing_distcc": {
      "type": "string",
      "description": "Connect this node to an existing distcc ( host:port ).",
      "default": "auto",
      "mapping": "charm_option"
    },
    "jobs": {
      "type": "int",
      "description": "You can specify a maximum number of jobs, the server will accept concurrently.",
      "default": 10,
      "mapping": "charm_option"
    },
    "nice": {
      "type": "int",
      "description": "You can specify a (positive) nice level for the distcc process here",
      "default": 10,
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Port to use to run distcc",
      "default": 3632,
      "mapping": "charm_option"
    },
    "zeroconf": {
      "type": "string",
      "description": "Enable Zeroconf support?# If enabled, distccd will register via mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc clients without the need of a manually configured host list.",
      "default": "false",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/distcc-server",
      "juju_interface": "distcc-server",
      "juju_name": "distcc-server",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "distcc-cluster": {
      "Name": "distcc-cluster",
      "Role": "peer",
      "Interface": "distcc-cluster",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "# Overview\n\ndistcc is a program to distribute builds of C, C++, Objective C or Objective C++\ncode across several machines on a network. distcc should always generate the\nsame results as a local build, is simple to install and use, and is usually much\nfaster than a local compile.\n\ndistcc does not require all machines to share a filesystem, have synchronized\nclocks, or to have the same libraries or header files installed. They can even\nhave different processors or operating systems, if cross-compilers are\ninstalled.\n\nMore information about distcc can be found [here](http://www.distcc.org).\n\n\n# Usage\n\nIt's a pretty simple charm that provides a peer interface (distcc-cluster). This\ninterface allows you to deploy the distcc charm as a single node and add-unit to\ncreate a distcc farm or, deploy x number of them in one command to easily create\na distcc farm.\n\nFirst, start by bootstrapping your environment:\n\n    juju bootstrap\n\nThen, deploy the service:\n\n    juju deploy distcc\n\nFinally, expose the service to the world:\n\n    juju expose distcc\n\nYou can check the public address of the instance by executing `juju status`.\n\n# Configuration\n\nThe configurable options are pretty self explanatory and are detailed below:\n\n * port: Port to use to run distcc (default: 3632)\n * nice: You can specify a (positive) nice level for the distcc process here\n   (default: 10)\n * jobs: You can specify a maximum number of jobs, the server will accept\n   concurrently (default: 10)\n * zeroconf: Enable Zeroconf support? If enabled, distccd will register via\n   mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc\n   clients without the need of a manually configured (default: false) host list.\n * distcc_options: distcc options for each host in the farm (default: cpp,lzo)\n * existing_distcc: Connect this node to an existing distcc (host:port)\n   (default: auto)\n\nNote: To be able to connect distcc to an _existing_ distcc farm (by changing the\nexisting_distcc option), this service needs to be exposed.\n\n\n",
  "readme": "# Overview\n\ndistcc is a program to distribute builds of C, C++, Objective C or Objective C++\ncode across several machines on a network. distcc should always generate the\nsame results as a local build, is simple to install and use, and is usually much\nfaster than a local compile.\n\ndistcc does not require all machines to share a filesystem, have synchronized\nclocks, or to have the same libraries or header files installed. They can even\nhave different processors or operating systems, if cross-compilers are\ninstalled.\n\nMore information about distcc can be found [here](http://www.distcc.org).\n\n\n# Usage\n\nIt's a pretty simple charm that provides a peer interface (distcc-cluster). This\ninterface allows you to deploy the distcc charm as a single node and add-unit to\ncreate a distcc farm or, deploy x number of them in one command to easily create\na distcc farm.\n\nFirst, start by bootstrapping your environment:\n\n    juju bootstrap\n\nThen, deploy the service:\n\n    juju deploy distcc\n\nFinally, expose the service to the world:\n\n    juju expose distcc\n\nYou can check the public address of the instance by executing `juju status`.\n\n# Configuration\n\nThe configurable options are pretty self explanatory and are detailed below:\n\n * port: Port to use to run distcc (default: 3632)\n * nice: You can specify a (positive) nice level for the distcc process here\n   (default: 10)\n * jobs: You can specify a maximum number of jobs, the server will accept\n   concurrently (default: 10)\n * zeroconf: Enable Zeroconf support? If enabled, distccd will register via\n   mDNS/DNS-SD. It can then automatically be found by zeroconf enabled distcc\n   clients without the need of a manually configured (default: false) host list.\n * distcc_options: distcc options for each host in the farm (default: cpp,lzo)\n * existing_distcc: Connect this node to an existing distcc (host:port)\n   (default: auto)\n\nNote: To be able to connect distcc to an _existing_ distcc farm (by changing the\nexisting_distcc option), this service needs to be exposed.\n\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}