{
  "name": "ceph Juju charm",
  "juju_charm_name": "ceph",
  "revision": "cs:precise/ceph-20",
  "latest": true,
  "uris": [
    "https://jujucharms.com/ceph",
    "https://jujucharms.com/ceph/precise",
    "https://jujucharms.com/ceph/precise/20",
    "https://api.jujucharms.com/v5/ceph",
    "https://api.jujucharms.com/v5/precise/ceph",
    "https://api.jujucharms.com/v5/precise/ceph-20"
  ],
  "labels": [
    "Juju charm",
    "file-servers",
    "Type/Middleware/Runtime/Java",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Data Store"
  ],
  "info_url": "https://jujucharms.com/ceph",
  "package_url": "https://api.jujucharms.com/v5/precise/ceph-20/archive",
  "created": "2015-06-17T09:34:12.014Z",
  "updated": "2015-06-17T09:34:12.014Z",
  "description": "Highly scalable distributed storage\n\nCeph is a distributed storage and network file system designed to provide\nexcellent performance, reliability, and scalability.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "auth-supported": {
      "type": "string",
      "description": "Which authentication flavour to use.\n.\nValid options are \"cephx\" and \"none\".  If \"none\" is specified,\nkeys will still be created and deployed so that it can be\nenabled later.\n",
      "default": "cephx",
      "mapping": "charm_option"
    },
    "ephemeral-unmount": {
      "type": "string",
      "description": "Cloud instances provider ephermeral storage which is normally mounted\non /mnt.\n.\nProviding this option will force an unmount of the ephemeral device\nso that it can be used as a OSD storage device.  This is useful for\ntesting purposes (cloud deployment is not a typical use case).\n",
      "default": null,
      "mapping": "charm_option"
    },
    "fsid": {
      "type": "string",
      "description": "fsid of the ceph cluster. To generate a suitable value use `uuid`\n.\nThis configuration element is mandatory and the service will fail on\ninstall if it is not provided.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "key": {
      "type": "string",
      "description": "Key ID to import to the apt keyring to support use with arbitary source\nconfiguration from outside of Launchpad archives or PPA's.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "monitor-count": {
      "type": "int",
      "description": "How many nodes to wait for before trying to create the monitor cluster\nthis number needs to be odd, and more than three is a waste except for\nvery large clusters.\n",
      "default": 3,
      "mapping": "charm_option"
    },
    "monitor-secret": {
      "type": "string",
      "description": "This value will become the mon. key. To generate a suitable value use:\n.\n  ceph-authtool /dev/stdout --name=mon. --gen-key\n.\nThis configuration element is mandatory and the service will fail on\ninstall if it is not provided.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "osd-devices": {
      "type": "string",
      "description": "The devices to format and set up as osd volumes.\n.\nThese devices are the range of devices that will be checked for and\nused across all service units.\n.\nFor ceph >= 0.56.6 these can also be directories instead of devices - the\ncharm assumes anything not starting with /dev is a directory instead.\n",
      "default": "/dev/vdb",
      "mapping": "charm_option"
    },
    "osd-format": {
      "type": "string",
      "description": "Format of filesystem to use for OSD devices; supported formats include:\n.\n  xfs (Default >= 0.48.3)\n  ext4 (Only option < 0.48.3)\n  btrfs (experimental and not recommended)\n.\nOnly supported with ceph >= 0.48.3.\n",
      "default": "xfs",
      "mapping": "charm_option"
    },
    "osd-journal": {
      "type": "string",
      "description": "The device to use as a shared journal drive for all OSD's.  By default\nno journal device will be used.\n.\nOnly supported with ceph >= 0.48.3.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "osd-journal-size": {
      "type": "int",
      "description": "Ceph osd journal size. The journal size should be at least twice the\nproduct of the expected drive speed multiplied by filestore max sync\ninterval. However, the most common practice is to partition the journal\ndrive (often an SSD), and mount it such that Ceph uses the entire\npartition for the journal.\n.\nOnly supported with ceph >= 0.48.3.\n",
      "default": 1024,
      "mapping": "charm_option"
    },
    "osd-reformat": {
      "type": "string",
      "description": "By default, the charm will not re-format a device that already looks\nas if it might be an OSD device.  This is a safeguard to try to\nprevent data loss.\n.\nSpecifying this option (any value) forces a reformat of any OSD devices\nfound which are not already mounted.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "source": {
      "type": "string",
      "description": "Optional configuration to support use of additional sources such as:\n.\n  - ppa:myteam/ppa\n  - cloud:precise-proposed/folsom\n  - http://my.archive.com/ubuntu main\n.\nThe last option should be used in conjunction with the key configuration\noption.\n.\nNote that a minimum ceph version of 0.48.2 is required for use with this\ncharm which is NOT provided by the packages in the main Ubuntu archive\nfor precise but is provided in the Folsom cloud archive.\n",
      "default": "cloud:precise-updates/folsom",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/ceph-client",
      "juju_interface": "ceph-client",
      "juju_name": "client",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/ceph-osd",
      "juju_interface": "ceph-osd",
      "juju_name": "osd",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/ceph-radosgw",
      "juju_interface": "ceph-radosgw",
      "juju_name": "radosgw",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "mon": {
      "Name": "mon",
      "Role": "peer",
      "Interface": "ceph",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "# Overview\n\nCeph is a distributed storage and network file system designed to provide\nexcellent performance, reliability, and scalability.\n\nThis charm deploys a Ceph cluster.\njuju\n\n# Usage\n\nThe ceph charm has two pieces of mandatory configuration for which no defaults\nare provided. You _must_ set these configuration options before deployment or the charm will not work: \n\n    fsid:\n        uuid specific to a ceph cluster used to ensure that different\n        clusters don't get mixed up - use `uuid` to generate one.\n\n    monitor-secret: \n        a ceph generated key used by the daemons that manage to cluster\n        to control security.  You can use the ceph-authtool command to \n        generate one:\n\n            ceph-authtool /dev/stdout --name=mon. --gen-key\n\nThese two pieces of configuration must NOT be changed post bootstrap; attempting\nto do this will cause a reconfiguration error and new service units will not join\nthe existing ceph cluster.\n\nThe charm also supports the specification of storage devices to be used in the\nceph cluster.\n\n    osd-devices:\n        A list of devices that the charm will attempt to detect, initialise and\n        activate as ceph storage.\n\n        This can be a superset of the actual storage devices presented to each\n        service unit and can be changed post ceph bootstrap using `juju set`.\n\n        The full path of each device must be provided, e.g. /dev/vdb.\n\n        For Ceph >= 0.56.6 (Raring or the Grizzly Cloud Archive) use of\n        directories instead of devices is also supported.\n\nAt a minimum you must provide a juju config file during initial deployment\nwith the fsid and monitor-secret options (contents of cepy.yaml below):\n\n    ceph:\n        fsid: ecbb8960-0e21-11e2-b495-83a88f44db01 \n        monitor-secret: AQD1P2xQiKglDhAA4NGUF5j38Mhq56qwz+45wg==\n        osd-devices: /dev/vdb /dev/vdc /dev/vdd /dev/vde\n\nSpecifying the osd-devices to use is also a good idea.\n\nBoot things up by using:\n\n    juju deploy -n 3 --config ceph.yaml ceph\n\nBy default the ceph cluster will not bootstrap until 3 service units have been\ndeployed and started; this is to ensure that a quorum is achieved prior to adding\nstorage devices.\n\n## Scale Out Usage\n\nYou can use the Ceph OSD and Ceph Radosgw charms:\n\n- [Ceph OSD](https://jujucharms.com/precise/ceph-osd)\n- [Ceph Rados Gateway](https://jujucharms.com/precise/ceph-radosgw)\n\n# Contact Information\n\n## Authors \n\n- Paul Collins <paul.collins@canonical.com>,\n- James Page <james.page@ubuntu.com>\n\nReport bugs on [Launchpad](http://bugs.launchpad.net/charms/+source/ceph/+filebug)\n\n## Ceph\n\n- [Ceph website](http://ceph.com)\n- [Ceph mailing lists](http://ceph.com/resources/mailing-list-irc/)\n- [Ceph bug tracker](http://tracker.ceph.com/projects/ceph)\n\n# Technical Footnotes\n\nThis charm uses the new-style Ceph deployment as reverse-engineered from the\nChef cookbook at https://github.com/ceph/ceph-cookbooks, although we selected\na different strategy to form the monitor cluster. Since we don't know the\nnames *or* addresses of the machines in advance, we use the _relation-joined_\nhook to wait for all three nodes to come up, and then write their addresses\nto ceph.conf in the \"mon host\" parameter. After we initialize the monitor\ncluster a quorum forms quickly, and OSD bringup proceeds.\n\nThe osds use so-called \"OSD hotplugging\". **ceph-disk-prepare** is used to\ncreate the filesystems with a special GPT partition type. *udev* is set up\nto mount such filesystems and start the osd daemons as their storage becomes\nvisible to the system (or after `udevadm trigger`).\n\nThe Chef cookbook mentioned above performs some extra steps to generate an OSD\nbootstrapping key and propagate it to the other nodes in the cluster. Since\nall OSDs run on nodes that also run mon, we don't need this and did not\nimplement it.\n\nSee [the documentation](http://ceph.com/docs/master/dev/mon-bootstrap/) for more information on Ceph monitor cluster deployment strategies and pitfalls.\n",
  "readme": "# Overview\n\nCeph is a distributed storage and network file system designed to provide\nexcellent performance, reliability, and scalability.\n\nThis charm deploys a Ceph cluster.\njuju\n\n# Usage\n\nThe ceph charm has two pieces of mandatory configuration for which no defaults\nare provided. You _must_ set these configuration options before deployment or the charm will not work: \n\n    fsid:\n        uuid specific to a ceph cluster used to ensure that different\n        clusters don't get mixed up - use `uuid` to generate one.\n\n    monitor-secret: \n        a ceph generated key used by the daemons that manage to cluster\n        to control security.  You can use the ceph-authtool command to \n        generate one:\n\n            ceph-authtool /dev/stdout --name=mon. --gen-key\n\nThese two pieces of configuration must NOT be changed post bootstrap; attempting\nto do this will cause a reconfiguration error and new service units will not join\nthe existing ceph cluster.\n\nThe charm also supports the specification of storage devices to be used in the\nceph cluster.\n\n    osd-devices:\n        A list of devices that the charm will attempt to detect, initialise and\n        activate as ceph storage.\n\n        This can be a superset of the actual storage devices presented to each\n        service unit and can be changed post ceph bootstrap using `juju set`.\n\n        The full path of each device must be provided, e.g. /dev/vdb.\n\n        For Ceph >= 0.56.6 (Raring or the Grizzly Cloud Archive) use of\n        directories instead of devices is also supported.\n\nAt a minimum you must provide a juju config file during initial deployment\nwith the fsid and monitor-secret options (contents of cepy.yaml below):\n\n    ceph:\n        fsid: ecbb8960-0e21-11e2-b495-83a88f44db01 \n        monitor-secret: AQD1P2xQiKglDhAA4NGUF5j38Mhq56qwz+45wg==\n        osd-devices: /dev/vdb /dev/vdc /dev/vdd /dev/vde\n\nSpecifying the osd-devices to use is also a good idea.\n\nBoot things up by using:\n\n    juju deploy -n 3 --config ceph.yaml ceph\n\nBy default the ceph cluster will not bootstrap until 3 service units have been\ndeployed and started; this is to ensure that a quorum is achieved prior to adding\nstorage devices.\n\n## Scale Out Usage\n\nYou can use the Ceph OSD and Ceph Radosgw charms:\n\n- [Ceph OSD](https://jujucharms.com/precise/ceph-osd)\n- [Ceph Rados Gateway](https://jujucharms.com/precise/ceph-radosgw)\n\n# Contact Information\n\n## Authors \n\n- Paul Collins <paul.collins@canonical.com>,\n- James Page <james.page@ubuntu.com>\n\nReport bugs on [Launchpad](http://bugs.launchpad.net/charms/+source/ceph/+filebug)\n\n## Ceph\n\n- [Ceph website](http://ceph.com)\n- [Ceph mailing lists](http://ceph.com/resources/mailing-list-irc/)\n- [Ceph bug tracker](http://tracker.ceph.com/projects/ceph)\n\n# Technical Footnotes\n\nThis charm uses the new-style Ceph deployment as reverse-engineered from the\nChef cookbook at https://github.com/ceph/ceph-cookbooks, although we selected\na different strategy to form the monitor cluster. Since we don't know the\nnames *or* addresses of the machines in advance, we use the _relation-joined_\nhook to wait for all three nodes to come up, and then write their addresses\nto ceph.conf in the \"mon host\" parameter. After we initialize the monitor\ncluster a quorum forms quickly, and OSD bringup proceeds.\n\nThe osds use so-called \"OSD hotplugging\". **ceph-disk-prepare** is used to\ncreate the filesystems with a special GPT partition type. *udev* is set up\nto mount such filesystems and start the osd daemons as their storage becomes\nvisible to the system (or after `udevadm trigger`).\n\nThe Chef cookbook mentioned above performs some extra steps to generate an OSD\nbootstrapping key and propagate it to the other nodes in the cluster. Since\nall OSDs run on nodes that also run mon, we don't need this and did not\nimplement it.\n\nSee [the documentation](http://ceph.com/docs/master/dev/mon-bootstrap/) for more information on Ceph monitor cluster deployment strategies and pitfalls.\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}