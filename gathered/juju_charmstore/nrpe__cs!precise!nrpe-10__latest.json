{
  "name": "nrpe Juju charm",
  "juju_charm_name": "nrpe",
  "revision": "cs:precise/nrpe-10",
  "latest": true,
  "uris": [
    "https://jujucharms.com/nrpe",
    "https://jujucharms.com/nrpe/precise",
    "https://jujucharms.com/nrpe/precise/10",
    "https://api.jujucharms.com/v5/nrpe",
    "https://api.jujucharms.com/v5/precise/nrpe",
    "https://api.jujucharms.com/v5/precise/nrpe-10"
  ],
  "labels": [
    "Juju charm",
    "misc",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Monitoring/Nagios",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/nrpe",
  "package_url": "https://api.jujucharms.com/v5/precise/nrpe-10/archive",
  "created": "2016-06-28T13:47:10.543Z",
  "updated": "2016-06-28T13:47:10.543Z",
  "description": "Nagios Remote Plugin Executor Server\n\nNagios is a host/service/network monitoring and management system.  The\npurpose of this addon is to allow you to execute Nagios plugins on a\nremote host in as transparent a manner as possible.  This program runs\nas a background process on the remote host and processes command\nexecution requests from the check_nrpe plugin on the Nagios host.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/juju-info",
      "self_resolve": true,
      "juju_interface": "juju-info",
      "juju_name": "general-info",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/local-monitors",
      "self_resolve": true,
      "juju_interface": "local-monitors",
      "juju_name": "local-monitors",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/nrpe-external-master",
      "self_resolve": true,
      "juju_interface": "nrpe-external-master",
      "juju_name": "nrpe-external-master",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "disk_root": {
      "type": "string",
      "description": "Root disk check. This can be made to also check non-root disk systems\nas follows:\n    -u GB -w 20% -c 15% -r '/srv/juju/vol-' -C -u GB -w 25% -c 20%\nThe string '-p /' will be appended to this check, so you must finish\nthe string taking that into account. See the nagios check_disk plugin\nhelp for further details.\n",
      "default": "-u GB -w 25% -c 20% -K 5%",
      "mapping": "charm_option"
    },
    "export_nagios_definitions": {
      "type": "boolean",
      "description": "If True nagios check definitions are written to\n'/var/lib/nagios/export' and rync is configured to allow nagios_master\nto collect them. Useful when Nagios is outside of the juju environment\n",
      "default": false,
      "mapping": "charm_option"
    },
    "hostcheck_inherit": {
      "type": "string",
      "description": "Hostcheck to inherit",
      "default": "server",
      "mapping": "charm_option"
    },
    "hostgroups": {
      "type": "string",
      "description": "Comma separated list of hostgroups to add for these hosts",
      "default": "",
      "mapping": "charm_option"
    },
    "load": {
      "type": "string",
      "description": "Load check (e.g. -w 8,8,8 -c 15,15,15), if 'auto' is set, then\nNUM_CPUS*0.7 is used for the warning threshold and NUM_CPUS for the\ncritical one\n",
      "default": "auto",
      "mapping": "charm_option"
    },
    "mem": {
      "type": "string",
      "description": "Memory check",
      "default": "-C -u -w 85 -c 90",
      "mapping": "charm_option"
    },
    "monitors": {
      "type": "string",
      "description": "Additional monitors defined in the monitors yaml format (see README)\n",
      "default": "",
      "mapping": "charm_option"
    },
    "nagios_address_type": {
      "type": "string",
      "description": "Determines whether the nagios host check should use the private\nor public IP address of an instance.  Can be \"private\" or \"public\".\n",
      "default": "private",
      "mapping": "charm_option"
    },
    "nagios_host_context": {
      "type": "string",
      "description": "a string that will be prepended to instance name to set the host name\nin nagios. So for instance the hostname would be something like:\n    juju-postgresql-0\nIf you're running multiple environments with the same services in them\nthis allows you to differentiate between them.\n",
      "default": "juju",
      "mapping": "charm_option"
    },
    "nagios_hostname_type": {
      "type": "string",
      "description": "Determines whether a server is identified by its unit name or\nhost name.  If you're in a virtual environment, \"unit\" is\nprobably best.  If you're using MaaS, you may prefer \"host\".\n",
      "default": "unit",
      "mapping": "charm_option"
    },
    "nagios_master": {
      "type": "string",
      "description": "IP address of the nagios master to allow rsyncs from",
      "default": "None",
      "mapping": "charm_option"
    },
    "procs": {
      "type": "string",
      "description": "Number of processes check or 'auto' for the charm to generate thresholds based on processor count",
      "default": "auto",
      "mapping": "charm_option"
    },
    "server_port": {
      "type": "int",
      "description": "port that nagios-nrpe-server will listen on",
      "default": 5666,
      "mapping": "charm_option"
    },
    "sub_postfix": {
      "type": "string",
      "description": "A string to be appended onto all the nrpe checks created by this charm\nto avoid potential clashes with existing checks\n",
      "default": "_sub",
      "mapping": "charm_option"
    },
    "swap": {
      "type": "string",
      "description": "Swap check",
      "default": "-w 90% -c 75%",
      "mapping": "charm_option"
    },
    "users": {
      "type": "string",
      "description": "Users check",
      "default": "-w 20 -c 25",
      "mapping": "charm_option"
    },
    "zombies": {
      "type": "string",
      "description": "Zombie processes check",
      "default": "-w 3 -c 6 -s Z",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/monitors",
      "juju_interface": "monitors",
      "juju_name": "monitors",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/nrpe",
      "juju_interface": "nrpe",
      "juju_name": "nrpe",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "Introduction\n============\n\nThis subordinate charm is used to configure nrpe (Nagios Remote Plugin\nExecutor). It can be related to the nagios charm via the monitors relation and\nwill pass a monitors yaml to nagios informing it of what checks to monitor.\n\nPrinciple Relations\n===================\n\nThis charm can be attatched to any principle charm (via the juju-info relation)\nregardless of whether it has implemented the local-monitors or\nnrpe-external-master relations. For example,\n\njuju deploy ubuntu\njuju deploy nrpe\njuju deploy nagios\njuju add-relation ubuntu nrpe\njuju add-relation nrpe:monitors nagios:monitors\n\nIf joined via the juju-info relation the default checks are configured and\nadditional checks can be added via the monitors config option (see below).\n\nThe local-monitors relations allows the principle to request checks to be setup\nby passing a monitors yaml and listing them in the 'local' section. It can\nalso list checks that is has configured by listing them in the remote nrpe\nsection and finally it can request external monitors are setup by using one of\nthe other remote types. See \"Monitors yaml\" below.\n\nOther Subordinate Charms\n========================\n\nIf another subordinate charm deployed to the same principle has a\nlocal-monitors or nrpe-external-master relation then it can also be related to\nthe local nrpe charm. For example,\n\necho -e \"glance:\\n  vip: 10.5.106.1\" > glance.yaml\njuju deploy -n3 --config glance.yaml glance\njuju deploy hacluster glance-hacluster\njuju deploy nrpe glance-nrpe\njuju deploy nagios\njuju add-relation glance glance-hacluster\njuju add-relation glance-nrpe:monitors nagios:monitors\njuju add-relation glance glance-nrpe\njuju add-relation glance-hacluster glance-nrpe\n\nThe glance-hacluster charm will pass montioring information to glance-nrpe\nwhich will amalgamate all montior definitions before passing them to nagios\n\nCheck sources\n=============\n\nCheck definitions can come from three places:\n\nDefault Checks\n--------------\n\nThis charm creates a base set of checks in /etc/nagios/nrpe.d, including\ncheck\\_load, check\\_users, check\\_disk\\_root. All of the options for these are\nconfigurable but sensible defaults have been set in config.yaml.\nFor example to increase the alert threshold for number of processes:\n\njuju set nrpe load=\"-w 10,10,10 -c 25,25,25\"\n\nPrinciple Requested Checks\n--------------------------\n\nMonitors passed to this charm by the principle charm via the local-monitors\nor nrpe-external-master relation. The principle charm can write its own\ncheck definition into */etc/nagios/nrpe.d* and then inform this charm via the\nmonitors setting. It can also request a direct external check of a service\nwithout using nrpe. See \"Monitors yaml\" below for examples.\n\nUser Requested Checks\n---------------------\n\nThis works in the same way as the Principle requested except the monitors yaml\nis set by the user via the monitors config option. For example to add a monitor\nfor the rsylog process:\n\n    juju set nrpe monitors=\"\n    monitors:\n        local:\n            procrunning:\n                rsyslogd:\n                    min: 1\n                    max: 1\n                    executable: rsyslogd\n    \"\n\n\n\nExternal Nagios \n===============\n\nIf the nagios server is not deployed in the juju environment then the charm can\nbe configured, via the export\\_nagios\\_definitions, to write out nagios config\nfragments to /var/lib/nagios/export. Rsync is then configured to allow a host\n(specified by nagios\\_master) to collect the fragments. An rsync stanza is created\nallowing the Nagios server to pick up configs from /var/lib/nagios/export (as\na target called \"external-nagios\"), which will also be configured to allow\nconnections from the hostname or IP address as specified for the\n\"nagios\\_master\" variable.\n\nIt is up to you to configure the Nagios master to pull the configs needed, which\nwill then cause it to connect back to the instances in question to run the nrpe\nchecks you have defined.\n\nMonitors yaml\n=============\n\nThe list of monitors past down the monitors relation is an amalgamation of the\nlists provided via the principle, the user and the default checks.\n\nThe monitors yaml is of the following form:\n\n     \n    # Version of the spec, mostly ignored but 0.3 is the current one\n    version: '0.3'\n    # Dict with just 'local' and 'remote' as parts\n    monitors:\n        # local monitors need an agent to be handled. See nrpe charm for\n        # some example implementations\n        local:\n            # procrunning checks for a running process named X (no path)\n            procrunning:\n                # Multiple procrunning can be defined, this is the \"name\" of it\n                nagios3:\n                    min: 1\n                    max: 1\n                    executable: nagios3\n        # Remote monitors can be polled directly by a remote system\n        remote:\n            # do a request on the HTTP protocol\n            http:\n                nagios:\n                    port: 80\n                    path: /nagios3/\n                    # expected status response (otherwise just look for 200)\n                    status: 'HTTP/1.1 401'\n                    # Use as the Host: header (the server address will still be used to connect() to)\n                    host: www.fewbar.com\n            mysql:\n                # Named basic check\n                basic:\n                    username: monitors\n                    password: abcdefg123456\n            nrpe:\n                apache2:\n                    command: check_apache2\n\n\n\nBefore a monitor is added it is checked to see if it is in the 'local' section.\nIf it is this charm needs to convert it into an nrpe checks. Only a small\nnumber of check types are currently supported (see below) .These checks can\nthen be called by the nagios charm via the nrpe service. So for each check\nlisted in the local section:\n\n\n\n1.  The defintion is read and a check defintion it written /etc/nagios/nrpe.d\n2.  The check is defined as a remote nrpe check in the yaml passed to nagios\n\nIn the example above a check\\_proc\\_nagios3\\_user.cfg file would be written\nout which contains:\n\n    # Check process nagios3 is running (user)\n    command[check_proc_nagios3_user]=/usr/lib/nagios/plugins/check_procs -w 1 -c 1 -C nagios3\n\nand the monitors yaml passed to nagios would include:\n\n    monitors:\n        nrpe:\n\t    check_proc_nagios3_user:\n\t        command: check_proc_nagios3_user\n\nThe principle charm, or the user via the monitors config option, can request an\nexternal check by adding it to the remote section of the monitors yaml. In the\nexample above direct checks of a webserver and of mysql are being requested.\nThis charm passes those on to nagios unaltered.\n\nLocal check types\n-----------------\n\nSupported nrpe checks are:\n    procrunning:\n      min: Minimum number of 'executable' processes\n      max: Maximum number of 'executable' processes\n      executable: Name of executable to look for in process list\n    processcount\n      min: Minimum total number processes\n      max: Maximum total number processes\n      executable: Name of executable to look for in process list\n    disk\n      path: Directory to monitor space usage of\n\nRemote check types\n------------------\n\nSupported remote types:\n    http, mysql, nrpe, tcp, rpc, pgsql\n    (See Nagios charm for up-to-date list and options)\n",
  "readme": "Introduction\n============\n\nThis subordinate charm is used to configure nrpe (Nagios Remote Plugin\nExecutor). It can be related to the nagios charm via the monitors relation and\nwill pass a monitors yaml to nagios informing it of what checks to monitor.\n\nPrinciple Relations\n===================\n\nThis charm can be attatched to any principle charm (via the juju-info relation)\nregardless of whether it has implemented the local-monitors or\nnrpe-external-master relations. For example,\n\njuju deploy ubuntu\njuju deploy nrpe\njuju deploy nagios\njuju add-relation ubuntu nrpe\njuju add-relation nrpe:monitors nagios:monitors\n\nIf joined via the juju-info relation the default checks are configured and\nadditional checks can be added via the monitors config option (see below).\n\nThe local-monitors relations allows the principle to request checks to be setup\nby passing a monitors yaml and listing them in the 'local' section. It can\nalso list checks that is has configured by listing them in the remote nrpe\nsection and finally it can request external monitors are setup by using one of\nthe other remote types. See \"Monitors yaml\" below.\n\nOther Subordinate Charms\n========================\n\nIf another subordinate charm deployed to the same principle has a\nlocal-monitors or nrpe-external-master relation then it can also be related to\nthe local nrpe charm. For example,\n\necho -e \"glance:\\n  vip: 10.5.106.1\" > glance.yaml\njuju deploy -n3 --config glance.yaml glance\njuju deploy hacluster glance-hacluster\njuju deploy nrpe glance-nrpe\njuju deploy nagios\njuju add-relation glance glance-hacluster\njuju add-relation glance-nrpe:monitors nagios:monitors\njuju add-relation glance glance-nrpe\njuju add-relation glance-hacluster glance-nrpe\n\nThe glance-hacluster charm will pass montioring information to glance-nrpe\nwhich will amalgamate all montior definitions before passing them to nagios\n\nCheck sources\n=============\n\nCheck definitions can come from three places:\n\nDefault Checks\n--------------\n\nThis charm creates a base set of checks in /etc/nagios/nrpe.d, including\ncheck\\_load, check\\_users, check\\_disk\\_root. All of the options for these are\nconfigurable but sensible defaults have been set in config.yaml.\nFor example to increase the alert threshold for number of processes:\n\njuju set nrpe load=\"-w 10,10,10 -c 25,25,25\"\n\nPrinciple Requested Checks\n--------------------------\n\nMonitors passed to this charm by the principle charm via the local-monitors\nor nrpe-external-master relation. The principle charm can write its own\ncheck definition into */etc/nagios/nrpe.d* and then inform this charm via the\nmonitors setting. It can also request a direct external check of a service\nwithout using nrpe. See \"Monitors yaml\" below for examples.\n\nUser Requested Checks\n---------------------\n\nThis works in the same way as the Principle requested except the monitors yaml\nis set by the user via the monitors config option. For example to add a monitor\nfor the rsylog process:\n\n    juju set nrpe monitors=\"\n    monitors:\n        local:\n            procrunning:\n                rsyslogd:\n                    min: 1\n                    max: 1\n                    executable: rsyslogd\n    \"\n\n\n\nExternal Nagios \n===============\n\nIf the nagios server is not deployed in the juju environment then the charm can\nbe configured, via the export\\_nagios\\_definitions, to write out nagios config\nfragments to /var/lib/nagios/export. Rsync is then configured to allow a host\n(specified by nagios\\_master) to collect the fragments. An rsync stanza is created\nallowing the Nagios server to pick up configs from /var/lib/nagios/export (as\na target called \"external-nagios\"), which will also be configured to allow\nconnections from the hostname or IP address as specified for the\n\"nagios\\_master\" variable.\n\nIt is up to you to configure the Nagios master to pull the configs needed, which\nwill then cause it to connect back to the instances in question to run the nrpe\nchecks you have defined.\n\nMonitors yaml\n=============\n\nThe list of monitors past down the monitors relation is an amalgamation of the\nlists provided via the principle, the user and the default checks.\n\nThe monitors yaml is of the following form:\n\n     \n    # Version of the spec, mostly ignored but 0.3 is the current one\n    version: '0.3'\n    # Dict with just 'local' and 'remote' as parts\n    monitors:\n        # local monitors need an agent to be handled. See nrpe charm for\n        # some example implementations\n        local:\n            # procrunning checks for a running process named X (no path)\n            procrunning:\n                # Multiple procrunning can be defined, this is the \"name\" of it\n                nagios3:\n                    min: 1\n                    max: 1\n                    executable: nagios3\n        # Remote monitors can be polled directly by a remote system\n        remote:\n            # do a request on the HTTP protocol\n            http:\n                nagios:\n                    port: 80\n                    path: /nagios3/\n                    # expected status response (otherwise just look for 200)\n                    status: 'HTTP/1.1 401'\n                    # Use as the Host: header (the server address will still be used to connect() to)\n                    host: www.fewbar.com\n            mysql:\n                # Named basic check\n                basic:\n                    username: monitors\n                    password: abcdefg123456\n            nrpe:\n                apache2:\n                    command: check_apache2\n\n\n\nBefore a monitor is added it is checked to see if it is in the 'local' section.\nIf it is this charm needs to convert it into an nrpe checks. Only a small\nnumber of check types are currently supported (see below) .These checks can\nthen be called by the nagios charm via the nrpe service. So for each check\nlisted in the local section:\n\n\n\n1.  The defintion is read and a check defintion it written /etc/nagios/nrpe.d\n2.  The check is defined as a remote nrpe check in the yaml passed to nagios\n\nIn the example above a check\\_proc\\_nagios3\\_user.cfg file would be written\nout which contains:\n\n    # Check process nagios3 is running (user)\n    command[check_proc_nagios3_user]=/usr/lib/nagios/plugins/check_procs -w 1 -c 1 -C nagios3\n\nand the monitors yaml passed to nagios would include:\n\n    monitors:\n        nrpe:\n\t    check_proc_nagios3_user:\n\t        command: check_proc_nagios3_user\n\nThe principle charm, or the user via the monitors config option, can request an\nexternal check by adding it to the remote section of the monitors yaml. In the\nexample above direct checks of a webserver and of mysql are being requested.\nThis charm passes those on to nagios unaltered.\n\nLocal check types\n-----------------\n\nSupported nrpe checks are:\n    procrunning:\n      min: Minimum number of 'executable' processes\n      max: Maximum number of 'executable' processes\n      executable: Name of executable to look for in process list\n    processcount\n      min: Minimum total number processes\n      max: Maximum total number processes\n      executable: Name of executable to look for in process list\n    disk\n      path: Directory to monitor space usage of\n\nRemote check types\n------------------\n\nSupported remote types:\n    http, mysql, nrpe, tcp, rpc, pgsql\n    (See Nagios charm for up-to-date list and options)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}