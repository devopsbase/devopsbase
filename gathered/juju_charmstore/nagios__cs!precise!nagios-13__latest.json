{
  "name": "nagios Juju charm",
  "juju_charm_name": "nagios",
  "revision": "cs:precise/nagios-13",
  "latest": true,
  "uris": [
    "https://jujucharms.com/nagios",
    "https://jujucharms.com/nagios/precise",
    "https://jujucharms.com/nagios/precise/13",
    "https://api.jujucharms.com/v5/nagios",
    "https://api.jujucharms.com/v5/precise/nagios",
    "https://api.jujucharms.com/v5/precise/nagios-13"
  ],
  "labels": [
    "Juju charm",
    "monitoring",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Monitoring/Nagios",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/nagios",
  "package_url": "https://api.jujucharms.com/v5/precise/nagios-13/archive",
  "created": "2015-06-17T09:36:11.125Z",
  "updated": "2015-06-17T09:36:11.125Z",
  "description": "Nagios monitoring service.\n\nNagios is a monitoring and management system for hosts, services, and\nnetworks.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/monitoring",
      "self_resolve": true,
      "juju_interface": "monitoring",
      "juju_name": "legacy",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/monitors",
      "self_resolve": true,
      "juju_interface": "monitors",
      "juju_name": "monitors",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/juju-info",
      "self_resolve": true,
      "juju_interface": "juju-info",
      "juju_name": "nagios",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "extraconfig": {
      "type": "string",
      "description": "Any additional nagios configuration you would like to\nadd can be set into this element. It will be placed in\n/etc/nagios3/conf.d/extra.cfg\n",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl": {
      "type": "string",
      "description": "Enable SSL communication for Nagios. Possible values are\n\"on\", \"off\", or \"only\". The \"only\" option disables\nAll HTTP communication in favor of HTTPS - may play havok with\nexisting nagios deployments.\n",
      "default": "off",
      "mapping": "charm_option"
    },
    "ssl_cert": {
      "type": "string",
      "description": "base64 encoded server certificate.  If left blank, the certificate\nand key will be autogenerated as self-signed.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl_chain": {
      "type": "string",
      "description": "base64 encoded chain certificates file.  If ssl_cert is\nblank, this will be ignored.\n",
      "default": "",
      "mapping": "charm_option"
    },
    "ssl_key": {
      "type": "string",
      "description": "base64 encoded server certificate key.  If ssl_cert is\nblank, this is ignored.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/monitors",
      "juju_interface": "monitors",
      "juju_name": "mymonitors",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "# Overview\n\n[Nagios](http://nagios.org) offers complete monitoring and alerting for servers, switches, applications, and services.\n\nThis charm is designed to do basic monitoring of any service in the Charm Store that relates to it. There is an [NRPE subordinate charm](https://jujucharms.com/precise/nrpe/) that you can use if you want to use local monitors.\n\n# Usage\n\nThis charm is designed to be used with other charms. In order to monitor anything in your juju environment for working PING and SSH, just relate the services to this service. In this example we deploy a central monitoring instance, mediawiki, a database, and then monitor them with Nagios:\n\n    juju deploy nagios central-monitor\n    juju deploy mysql big-db\n    juju deploy mediawiki big-wiki\n    juju add-relation big-db:db big-wiki:db\n    juju add-relation big-db central-monitor\n    juju add-relation big-wiki central-monitor\n\nThis should result in your Nagios monitoring all of the service units.\n\nThere is an [NRPE subordinate charm](https://jujucharms.com/precise/nrpe/) which must be used for any local monitors.  See the `nrpe` charm's README for information on how to make use of it.\n\nYou can expose the service and browse to `http://x.x.x.x/nagios3` to get to the web UI, following the example:\n\n    juju expose central-monitor\n    juju status central-monitor\n\nWill get you the public IP of the web interface.\n\n# Configuration\n\n### SSL Configuration\n\n- `ssl` - Determinant configuration for enabling SSL. Valid options are \"on\", \"off\", \"only\". The \"only\" option disables HTTP traffic on Apache in favor of HTTPS. This setting may cause unexpected behavior with existing nagios charm deployments. \n\n- `ssl_cert` - Base64 encoded SSL certificate. Deploys to configured ssl_domain certificate name as `/etc/ssl/certs/{ssl_domain}.pem`.   If left blank, the certificate and key will be autogenerated as self-signed.\n\n- `ssl_key` - Base64 encoded SSL key. Deploys to configured ssl_domain key as `/etc/ssl/private/{ssl_domain}.key`.  If `ssl_cert` is blank, this option will be ignored.\n\n- `ssl_chain` - Base64 encoded SSL Chain. Deploys to configured ssl_domain chain authority as `/etc/ssl/certs/{ssl_domain}.csr`.  If `ssl_cert` is blank, this option will be ignored.\n\n\n#### Typical SSL Workflow for Self Signed Keys:\n\n    juju deply nagios central-monitor\n    juju set central-monitor ssl=on\n\n\nIf you purchased keys from a certificate authority:\n\n    juju deply nagios central-monitor\n    juju set central-monitor ssl_cert=`base64 mykey.pem`\n    juju set central-monitor ssl_key=`base64 mykey.key`\n    juju set central-monitor ssl_chain=`base64 mykey.csr`\n    juju set central-monitor ssl=on\n\n\n### Known Issues / Caveates\n\n\n#### Web Interface username/password\n\nLogin: nagiosadmin  \nPassword: see below\n\nTo fetch the Nagios Administrative password you have to retrieve them from\nthe nagios host, as it is generated during installation.\n\n    juju ssh central-monitor/0 sudo cat /var/lib/juju/nagios.passwd\n\n#### Monitors Interface\nThe monitors interface expects three fields:\n\n- `monitors` - YAML matching the monitors yaml spec. See example.monitors.yaml for more information.\n- `target-id` - Assign any monitors to this target host definition.\n- `target-address` - Optional, specifies the host of the target to monitor. This must be specified by at least one unit so that the intended target-id will be monitorable.\n\n\n# Contact Information\n\n## Nagios\n\n- [Nagios homepage](http://nagios.org)\n- [Nagios documentation](http://www.nagios.org/documentation)\n- [Nagios support](http://www.nagios.org/support)\n",
  "readme": "# Overview\n\n[Nagios](http://nagios.org) offers complete monitoring and alerting for servers, switches, applications, and services.\n\nThis charm is designed to do basic monitoring of any service in the Charm Store that relates to it. There is an [NRPE subordinate charm](https://jujucharms.com/precise/nrpe/) that you can use if you want to use local monitors.\n\n# Usage\n\nThis charm is designed to be used with other charms. In order to monitor anything in your juju environment for working PING and SSH, just relate the services to this service. In this example we deploy a central monitoring instance, mediawiki, a database, and then monitor them with Nagios:\n\n    juju deploy nagios central-monitor\n    juju deploy mysql big-db\n    juju deploy mediawiki big-wiki\n    juju add-relation big-db:db big-wiki:db\n    juju add-relation big-db central-monitor\n    juju add-relation big-wiki central-monitor\n\nThis should result in your Nagios monitoring all of the service units.\n\nThere is an [NRPE subordinate charm](https://jujucharms.com/precise/nrpe/) which must be used for any local monitors.  See the `nrpe` charm's README for information on how to make use of it.\n\nYou can expose the service and browse to `http://x.x.x.x/nagios3` to get to the web UI, following the example:\n\n    juju expose central-monitor\n    juju status central-monitor\n\nWill get you the public IP of the web interface.\n\n# Configuration\n\n### SSL Configuration\n\n- `ssl` - Determinant configuration for enabling SSL. Valid options are \"on\", \"off\", \"only\". The \"only\" option disables HTTP traffic on Apache in favor of HTTPS. This setting may cause unexpected behavior with existing nagios charm deployments. \n\n- `ssl_cert` - Base64 encoded SSL certificate. Deploys to configured ssl_domain certificate name as `/etc/ssl/certs/{ssl_domain}.pem`.   If left blank, the certificate and key will be autogenerated as self-signed.\n\n- `ssl_key` - Base64 encoded SSL key. Deploys to configured ssl_domain key as `/etc/ssl/private/{ssl_domain}.key`.  If `ssl_cert` is blank, this option will be ignored.\n\n- `ssl_chain` - Base64 encoded SSL Chain. Deploys to configured ssl_domain chain authority as `/etc/ssl/certs/{ssl_domain}.csr`.  If `ssl_cert` is blank, this option will be ignored.\n\n\n#### Typical SSL Workflow for Self Signed Keys:\n\n    juju deply nagios central-monitor\n    juju set central-monitor ssl=on\n\n\nIf you purchased keys from a certificate authority:\n\n    juju deply nagios central-monitor\n    juju set central-monitor ssl_cert=`base64 mykey.pem`\n    juju set central-monitor ssl_key=`base64 mykey.key`\n    juju set central-monitor ssl_chain=`base64 mykey.csr`\n    juju set central-monitor ssl=on\n\n\n### Known Issues / Caveates\n\n\n#### Web Interface username/password\n\nLogin: nagiosadmin  \nPassword: see below\n\nTo fetch the Nagios Administrative password you have to retrieve them from\nthe nagios host, as it is generated during installation.\n\n    juju ssh central-monitor/0 sudo cat /var/lib/juju/nagios.passwd\n\n#### Monitors Interface\nThe monitors interface expects three fields:\n\n- `monitors` - YAML matching the monitors yaml spec. See example.monitors.yaml for more information.\n- `target-id` - Assign any monitors to this target host definition.\n- `target-address` - Optional, specifies the host of the target to monitor. This must be specified by at least one unit so that the intended target-id will be monitorable.\n\n\n# Contact Information\n\n## Nagios\n\n- [Nagios homepage](http://nagios.org)\n- [Nagios documentation](http://www.nagios.org/documentation)\n- [Nagios support](http://www.nagios.org/support)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}