{
  "name": "wordpress Juju charm",
  "juju_charm_name": "wordpress",
  "revision": "cs:precise/wordpress-27",
  "latest": true,
  "uris": [
    "https://jujucharms.com/wordpress",
    "https://jujucharms.com/wordpress/precise",
    "https://jujucharms.com/wordpress/precise/27",
    "https://api.jujucharms.com/v5/wordpress",
    "https://api.jujucharms.com/v5/precise/wordpress",
    "https://api.jujucharms.com/v5/precise/wordpress-27"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Binding/Provider/HP",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Logging",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Runtime/PHP",
    "Type/Middleware/Web Server/Nginx",
    "Type/Middleware/Proxy"
  ],
  "info_url": "https://jujucharms.com/wordpress",
  "package_url": "https://api.jujucharms.com/v5/precise/wordpress-27/archive",
  "created": "2015-06-17T09:33:05.851Z",
  "updated": "2015-06-17T09:33:05.851Z",
  "description": "WordPress is a full featured web blogging tool, this charm deploys it.\n\nThis will install and setup WordPress optimized to run in the cloud. By default it will \nplace Ngnix and php-fpm configured to scale horizontally with Nginx's reverse proxy.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/memcache",
      "self_resolve": true,
      "juju_interface": "memcache",
      "juju_name": "cache",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mysql",
      "self_resolve": true,
      "juju_interface": "mysql",
      "juju_name": "db",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mount",
      "self_resolve": true,
      "juju_interface": "mount",
      "juju_name": "nfs",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "debug": {
      "type": "string",
      "description": "Setting this option to \"yes\" will expose /_debug on all instances over HTTP. In the _debug folder are two scripts, info.php and apc.php. info.php will display the phpinfo information for that server while the apc.php will provide APC cache stats (as well as additional administrative options for APC).\n",
      "default": "no",
      "mapping": "charm_option"
    },
    "engine": {
      "type": "string",
      "description": "Currently two web server engines are supported: nginx and apache. For the majority of deployments nginx will be the prefered choice. See the Readme for more details",
      "default": "nginx",
      "mapping": "charm_option"
    },
    "tuning": {
      "type": "string",
      "description": "This is the tuning level for the WordPress setup. There are three options: \"bare\", \"single\", and \"optimized\". \"bare\" will give you a nearly un-altered WordPress setup, as if you'd downloaded and set it up yourself. \"single\" will provide you with everything you need to run a singlular unit of WordPress. This doesn't take in to consideration that you'll be scaling at all. However, it will allow you to use WordPress free of any troubles and pesky limitations that typically happen during \"optimized\". While you _can_ scale out with this setting I encourage you read the README \"optimized\" will give you a hardened WordPress setup. Some of the features in the Admin panel will be locked down and theme edits/plugins can only be updated through he charm. This is the recommended setup for those who are in serious need of constant scaling. \n",
      "default": "single",
      "mapping": "charm_option"
    },
    "wp-content": {
      "type": "string",
      "description": "This is a full repository path to where the WordPress wp-contents can be found. At this time Git, BZR, SVN, and HG are supported. An example of what a wp-content repository should look like can be found at http://github.com/jujutools/wordpress-site.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "loadbalancer": {
      "Name": "loadbalancer",
      "Role": "peer",
      "Interface": "reversenginx",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "# Overview\n\nWordPress is a powerful blogging platform written in PHP. This charm aims to\ndeploy WordPress in a fashion that will allow anyone to scale and grow out a\nsingle installation.\n\n# Usage\n\nThis charm is available in the Juju Charm Store, to deploy you'll need at a\nminimum: a cloud environment, a working Juju installation, and a successful\nbootstrap. Please refer to the\n[Juju Getting Started](https://juju.ubuntu.com/docs/getting-started.html)\ndocumentation before continuing.\n\nOnce bootstrapped, deploy the MySQL charm then this WordPress charm:\n\n    juju deploy mysql\n    juju deploy wordpress\n\nAdd a relation between the two of them\n\n    juju add-relation wordpress mysql\n\nExpose the WordPress installation\n\n    juju expose wordpress\n\n## Scaled Down Usage for Personal Use\n\nIf you're just looking to run a personal blog and want to save money you can run\nall of this on a single node, here's an entire single node installation from\nscratch: \n\n    juju bootstrap\n    juju deploy --to 0 wordpress\n    juju deploy --to 0 mysql\n    juju add-relation wordpress mysql \n    juju expose wordpress\n\nThis will run everything on one node, however we still have the flexibility to\ngrow horizontally. If your blog gets more traffic and you need to scale:\n\n    juju add-unit wordpress\n\nSince we're omitting the `--to` command Juju will fire up a new dedicated\nmachine for Wordpress and relate it. You can also `remove-unit` when the surge\nis over and go back to a cheaper one node set up. \n\n# Scale Out Usage \n\nYou can deploy a memcached server and relate it to your WordPress service to add\nmemcache caching. This will automagically install\n[WP-FFPC](http://wordpress.org/extend/plugins/wp-ffpc/) (regardless of your\ntuning settings) and configure it to cache rendered pages to the memcache\nserver. In addition to this layer of caching, Nginx will pull directly from\nmemcached bypassing PHP altogether. You could theoretically then turn off\nphp5-fpm on all of your servers and just have Nginx serve static content via\nmemcached (though, you wouldn't be able to access the admin panel or any\nuncached pages - it's just a potential scenario).\n\n    juju deploy memcached\n    juju add-relation memcached wordpress\n    \nThis setup will also synchronize the flushing of cache across all WordPress\nnodes, making it ideal to avoid stale caches.\n\nOnce the relation is set and the hooks have ran accordingly, you will need to\nmanually save the settings for WP-FFPC. Everything will be configured, though.\nJust log in to the administrator Dashboard, and then click the link to the\nWP-FFPC Settings page displayed on the error at the top of the page. Finally,\nscroll down and click on the blue button which says Save Changes.\n\nA small note, when using the Apache2 engine and memcache, all request will\nstill be sent to WordPress via Apache where typical caching procedures will take\nplace and wp-ffpc will render the memcached page.\n\n# Configuration\n\nThis WordPress charm comes with several tuning levels designed to encompass the\ndifferent styles in which this charm will be used.\n\nA use case for each tuning style is outlined below:\n\n## Bare\n\nThe Bare configuration option is meant for those who wish to run the stock\nWordPress setup with no caching, no manipulation of data, and no additional\nscale out features enabled. This is ideal if you intend to install additional\nplugins to deal with coordinating WordPress units or simply wish to test drive\nWordPress as it is out of the box. This will still create a load-balancer when\nan additional unit is created, though everything else will be turned off\n(WordPress caching, APC OpCode caching, and NFS file sharing).\n\nTo run this WordPress charm under a bare tuning level execute the following:\n\n    juju set wordpress tuning=bare\n\n## Single\n\nWhen running in Single mode, this charm will make every attempt to provide a\nsolid base for your WordPress install. By running in single the following will\nbe enabled: Nginx microcache, APC OpCode caching, WordPress caching module,\nand the ability to sync files via NFS. While Single mode is designed to allow\nfor scaling out, it's meant to only scale out for temporary relief; say in the\nevent of a large traffic in-flux. It's recommended for long running scaled out\nversions that optimized is used. The removal of the file share speeds up the\nsite and servers ensuring that the most efficient set up is provided. \n\nTo run this WordPress charm under a single tuning level execute the following:\n\n    juju set wordpress tuning=single\n\n## Optimized\n\nIf you need to run WordPress on more than one instance constantly, or require\nscaling out and in on a regular basis, then Optimized is the recommended\nconfiguration. When you run WordPress under an Optimized tuning level, the\nability to install, edit, and upgrade themes and plugins is disabled. By doing\nthis the charm can drop the need for an NFS mount which is inefficient and serve\neverything from it's local disk. Everything else provided in Single level is\navailable. In order to install or modify plugins with this setup you'll need to\nedit and commit them to a forked version of the charm in the files/wordpress/\ndirectory.\n\nTo run this WordPress charm under an optimized tuning level execute the\nfollowing:\n\n    juju set wordpress tuning=optimized\n\n### Handling wp-content\n\nIn order to allow for custom WordPress content within the Juju charm a separate\nconfiguration option exists for pointing to any Git or Bzr repository. An\nexample of a valid formed wp-content repository can be found on the\n[Juju Tools Github page](https://github.com/jujutools/wordpress-site). To set\nthe wp-content directive to a git repository, use one of the following formats\nmaking sure to replace items like `host`, `path`, and `repo` with their \nrespective names:\n\n    juju set wordpress wp-content=git@host:path/repo.git\n\nor\n\n    juju set wordpress wp-content=http://host/path/repo.git\n    \nor\n\n    juju set wordpress wp-content=git://host/path/repo.git\n    \nIf you wish to use a bzr repository, then apply one of the following schemes\nreplacing items like `host`, `username`, `path`, and `repo` with their\nrespective values:\n\nFor LaunchPad hosted repostiories:\n\n    juju set wordpress wp-content=lp:~username/path/repo\n    \nFor other Bzr repositories:\n\n    juju set wordpress wp-content=bzr://host/path/repo\n\nor\n\n    juju set wordpress wp-content=bzr+ssh://host/path/repo\n    \nSetting the wp-content option to an empty string (\"\") will result in no further\nupdates being pulled from that repository; however, the last pull will remain on\nthe system and will not be removed.\n\n## debug\n\nThis option will create a directory `_debug` at the root of each unit\n(`http://unit-address/_debug`). In this directory are two scripts: info.php\n(`/_debug/info.php`) and apc.php (`/_debug/apc.php`). info.php is a simple\nphpinfo script that will outline exactly how the environment is configured.\napc.php is the APC admin portal which provides APC caching details in addition\nto several administrative functions like clearing the APC cache. This should\nnever be set to \"yes\" in production as it exposes detailed information about the\nenvironments and may provide a way for an intruder to DDoS the machine.\n\n    juju set wordpress debug=yes\n\nto disable debugging:\n\n    juju set wordpress debug=no\n\nThe debugging is disabled by default.\n\n## Engine\n\nBy default the WordPress charm will install nginx and php5-fpm to serve pages.\nIn the event you do not wish to use nginx - for whatever reason - you can switch\nto Apache2. This will provide a near identical workflow as if you were using\nnginx with one key difference: memcached. In nginx, the cached pages are served\nfrom memcached prior to hitting the php contents, this isn't possible with\napache2. As such memcached support still works, since it falls back to the\nWordPress caching engine, but it's not as robust. Otherwise, Apache2 will still\nperform balancing and everything else mentioned above. You can switch between\nengines at will with the following:\n\n    juju set wordpress engine=apache2\n\nThen back to nginx:\n\n    juju set wordpress engine=nginx\n\nAny other value will result in the default (nginx) being used.\n\n# Known Limitations and Issues\n\n## HP Cloud \n\nAt this time WordPress + Memcached don't work on HP Cloud's standard.xsmall. To\nget around this deploy the WordPress charm with the charm to at least a\n`standard.small`, to do this:\n\n    juju deploy --constraints \"instance-type=standard.small\" wordpress\n\nThis only is a problem when attempting to relate memcached to WordPress,\notherwise an xsmall is _okay_ though it's really not the best sized platform for\nrunning a stable WordPress install.\n\n## Single mode and the scale-out\n\nIf you're in Single mode and you want to/need to scale out, but you've been\nupgrading, modifying, and installing plugins + themes like a normal WordPress\nuser on a normal install; you can still scale out but you'll need to deploy a\nshared-fs charm first. At the time of this writing only the NFS charm will work,\nbut as more shared-fs charms come out (gluster, ceph, etc) that provide a\nshared-fs/mount interface those should all work as well. In this example we'll\nuse NFS:\n\n    juju deploy nfs\n    juju add-relation nfs wordpress:nfs\n\nBy doing so, everything in the wp-contents directory is moved to this NFS mount\nand then shared to all future WordPress units. It's strongly recommended that\nyou first deploy the nfs mount, _then_ scale WordPress out. Failure to do so may\nresult in data loss. Once nfs is deployed, running, and related you can scale\nout the WordPress unit using the following command:\n\n    juju add-unit wordpress\n    \nIn the event you want more than one unit at a time (and do not wish to run the\nadd-unit command multiple times) you can supply a `-n` number of units to add,\nso to add three more units:\n\n    juju add-unit -n3 wordpress\n\n## Memcached Issues\n\nIn order to have a working relation with memcached, you need to first set up\nyour Wordpress blog, by creating your first user. If you try to relate\nmemcached before, you will get a `cache-relation-changed` error on your\ninstance.\n\n# Contact Information\n\n## WordPress Contact Information\n\n- [WordPress Homepage](http://www.wordpress.org)\n- [Reporting bugs](http://codex.wordpress.org/Reporting_Bugs) on WordPress\nitself\n",
  "readme": "# Overview\n\nWordPress is a powerful blogging platform written in PHP. This charm aims to\ndeploy WordPress in a fashion that will allow anyone to scale and grow out a\nsingle installation.\n\n# Usage\n\nThis charm is available in the Juju Charm Store, to deploy you'll need at a\nminimum: a cloud environment, a working Juju installation, and a successful\nbootstrap. Please refer to the\n[Juju Getting Started](https://juju.ubuntu.com/docs/getting-started.html)\ndocumentation before continuing.\n\nOnce bootstrapped, deploy the MySQL charm then this WordPress charm:\n\n    juju deploy mysql\n    juju deploy wordpress\n\nAdd a relation between the two of them\n\n    juju add-relation wordpress mysql\n\nExpose the WordPress installation\n\n    juju expose wordpress\n\n## Scaled Down Usage for Personal Use\n\nIf you're just looking to run a personal blog and want to save money you can run\nall of this on a single node, here's an entire single node installation from\nscratch: \n\n    juju bootstrap\n    juju deploy --to 0 wordpress\n    juju deploy --to 0 mysql\n    juju add-relation wordpress mysql \n    juju expose wordpress\n\nThis will run everything on one node, however we still have the flexibility to\ngrow horizontally. If your blog gets more traffic and you need to scale:\n\n    juju add-unit wordpress\n\nSince we're omitting the `--to` command Juju will fire up a new dedicated\nmachine for Wordpress and relate it. You can also `remove-unit` when the surge\nis over and go back to a cheaper one node set up. \n\n# Scale Out Usage \n\nYou can deploy a memcached server and relate it to your WordPress service to add\nmemcache caching. This will automagically install\n[WP-FFPC](http://wordpress.org/extend/plugins/wp-ffpc/) (regardless of your\ntuning settings) and configure it to cache rendered pages to the memcache\nserver. In addition to this layer of caching, Nginx will pull directly from\nmemcached bypassing PHP altogether. You could theoretically then turn off\nphp5-fpm on all of your servers and just have Nginx serve static content via\nmemcached (though, you wouldn't be able to access the admin panel or any\nuncached pages - it's just a potential scenario).\n\n    juju deploy memcached\n    juju add-relation memcached wordpress\n    \nThis setup will also synchronize the flushing of cache across all WordPress\nnodes, making it ideal to avoid stale caches.\n\nOnce the relation is set and the hooks have ran accordingly, you will need to\nmanually save the settings for WP-FFPC. Everything will be configured, though.\nJust log in to the administrator Dashboard, and then click the link to the\nWP-FFPC Settings page displayed on the error at the top of the page. Finally,\nscroll down and click on the blue button which says Save Changes.\n\nA small note, when using the Apache2 engine and memcache, all request will\nstill be sent to WordPress via Apache where typical caching procedures will take\nplace and wp-ffpc will render the memcached page.\n\n# Configuration\n\nThis WordPress charm comes with several tuning levels designed to encompass the\ndifferent styles in which this charm will be used.\n\nA use case for each tuning style is outlined below:\n\n## Bare\n\nThe Bare configuration option is meant for those who wish to run the stock\nWordPress setup with no caching, no manipulation of data, and no additional\nscale out features enabled. This is ideal if you intend to install additional\nplugins to deal with coordinating WordPress units or simply wish to test drive\nWordPress as it is out of the box. This will still create a load-balancer when\nan additional unit is created, though everything else will be turned off\n(WordPress caching, APC OpCode caching, and NFS file sharing).\n\nTo run this WordPress charm under a bare tuning level execute the following:\n\n    juju set wordpress tuning=bare\n\n## Single\n\nWhen running in Single mode, this charm will make every attempt to provide a\nsolid base for your WordPress install. By running in single the following will\nbe enabled: Nginx microcache, APC OpCode caching, WordPress caching module,\nand the ability to sync files via NFS. While Single mode is designed to allow\nfor scaling out, it's meant to only scale out for temporary relief; say in the\nevent of a large traffic in-flux. It's recommended for long running scaled out\nversions that optimized is used. The removal of the file share speeds up the\nsite and servers ensuring that the most efficient set up is provided. \n\nTo run this WordPress charm under a single tuning level execute the following:\n\n    juju set wordpress tuning=single\n\n## Optimized\n\nIf you need to run WordPress on more than one instance constantly, or require\nscaling out and in on a regular basis, then Optimized is the recommended\nconfiguration. When you run WordPress under an Optimized tuning level, the\nability to install, edit, and upgrade themes and plugins is disabled. By doing\nthis the charm can drop the need for an NFS mount which is inefficient and serve\neverything from it's local disk. Everything else provided in Single level is\navailable. In order to install or modify plugins with this setup you'll need to\nedit and commit them to a forked version of the charm in the files/wordpress/\ndirectory.\n\nTo run this WordPress charm under an optimized tuning level execute the\nfollowing:\n\n    juju set wordpress tuning=optimized\n\n### Handling wp-content\n\nIn order to allow for custom WordPress content within the Juju charm a separate\nconfiguration option exists for pointing to any Git or Bzr repository. An\nexample of a valid formed wp-content repository can be found on the\n[Juju Tools Github page](https://github.com/jujutools/wordpress-site). To set\nthe wp-content directive to a git repository, use one of the following formats\nmaking sure to replace items like `host`, `path`, and `repo` with their \nrespective names:\n\n    juju set wordpress wp-content=git@host:path/repo.git\n\nor\n\n    juju set wordpress wp-content=http://host/path/repo.git\n    \nor\n\n    juju set wordpress wp-content=git://host/path/repo.git\n    \nIf you wish to use a bzr repository, then apply one of the following schemes\nreplacing items like `host`, `username`, `path`, and `repo` with their\nrespective values:\n\nFor LaunchPad hosted repostiories:\n\n    juju set wordpress wp-content=lp:~username/path/repo\n    \nFor other Bzr repositories:\n\n    juju set wordpress wp-content=bzr://host/path/repo\n\nor\n\n    juju set wordpress wp-content=bzr+ssh://host/path/repo\n    \nSetting the wp-content option to an empty string (\"\") will result in no further\nupdates being pulled from that repository; however, the last pull will remain on\nthe system and will not be removed.\n\n## debug\n\nThis option will create a directory `_debug` at the root of each unit\n(`http://unit-address/_debug`). In this directory are two scripts: info.php\n(`/_debug/info.php`) and apc.php (`/_debug/apc.php`). info.php is a simple\nphpinfo script that will outline exactly how the environment is configured.\napc.php is the APC admin portal which provides APC caching details in addition\nto several administrative functions like clearing the APC cache. This should\nnever be set to \"yes\" in production as it exposes detailed information about the\nenvironments and may provide a way for an intruder to DDoS the machine.\n\n    juju set wordpress debug=yes\n\nto disable debugging:\n\n    juju set wordpress debug=no\n\nThe debugging is disabled by default.\n\n## Engine\n\nBy default the WordPress charm will install nginx and php5-fpm to serve pages.\nIn the event you do not wish to use nginx - for whatever reason - you can switch\nto Apache2. This will provide a near identical workflow as if you were using\nnginx with one key difference: memcached. In nginx, the cached pages are served\nfrom memcached prior to hitting the php contents, this isn't possible with\napache2. As such memcached support still works, since it falls back to the\nWordPress caching engine, but it's not as robust. Otherwise, Apache2 will still\nperform balancing and everything else mentioned above. You can switch between\nengines at will with the following:\n\n    juju set wordpress engine=apache2\n\nThen back to nginx:\n\n    juju set wordpress engine=nginx\n\nAny other value will result in the default (nginx) being used.\n\n# Known Limitations and Issues\n\n## HP Cloud \n\nAt this time WordPress + Memcached don't work on HP Cloud's standard.xsmall. To\nget around this deploy the WordPress charm with the charm to at least a\n`standard.small`, to do this:\n\n    juju deploy --constraints \"instance-type=standard.small\" wordpress\n\nThis only is a problem when attempting to relate memcached to WordPress,\notherwise an xsmall is _okay_ though it's really not the best sized platform for\nrunning a stable WordPress install.\n\n## Single mode and the scale-out\n\nIf you're in Single mode and you want to/need to scale out, but you've been\nupgrading, modifying, and installing plugins + themes like a normal WordPress\nuser on a normal install; you can still scale out but you'll need to deploy a\nshared-fs charm first. At the time of this writing only the NFS charm will work,\nbut as more shared-fs charms come out (gluster, ceph, etc) that provide a\nshared-fs/mount interface those should all work as well. In this example we'll\nuse NFS:\n\n    juju deploy nfs\n    juju add-relation nfs wordpress:nfs\n\nBy doing so, everything in the wp-contents directory is moved to this NFS mount\nand then shared to all future WordPress units. It's strongly recommended that\nyou first deploy the nfs mount, _then_ scale WordPress out. Failure to do so may\nresult in data loss. Once nfs is deployed, running, and related you can scale\nout the WordPress unit using the following command:\n\n    juju add-unit wordpress\n    \nIn the event you want more than one unit at a time (and do not wish to run the\nadd-unit command multiple times) you can supply a `-n` number of units to add,\nso to add three more units:\n\n    juju add-unit -n3 wordpress\n\n## Memcached Issues\n\nIn order to have a working relation with memcached, you need to first set up\nyour Wordpress blog, by creating your first user. If you try to relate\nmemcached before, you will get a `cache-relation-changed` error on your\ninstance.\n\n# Contact Information\n\n## WordPress Contact Information\n\n- [WordPress Homepage](http://www.wordpress.org)\n- [Reporting bugs](http://codex.wordpress.org/Reporting_Bugs) on WordPress\nitself\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}