{
  "name": "apache-hadoop-plugin Juju charm",
  "juju_charm_name": "apache-hadoop-plugin",
  "revision": "cs:trusty/apache-hadoop-plugin-10",
  "latest": true,
  "uris": [
    "https://jujucharms.com/apache-hadoop-plugin",
    "https://jujucharms.com/apache-hadoop-plugin/trusty",
    "https://jujucharms.com/apache-hadoop-plugin/trusty/10",
    "https://api.jujucharms.com/v5/apache-hadoop-plugin",
    "https://api.jujucharms.com/v5/trusty/apache-hadoop-plugin",
    "https://api.jujucharms.com/v5/trusty/apache-hadoop-plugin-10"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "bigdata",
    "hadoop",
    "apache",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Data Processing/Hadoop/Hive"
  ],
  "info_url": "https://jujucharms.com/apache-hadoop-plugin",
  "package_url": "https://api.jujucharms.com/v5/trusty/apache-hadoop-plugin-10/archive",
  "created": "2015-12-16T19:18:56.226Z",
  "updated": "2015-12-16T19:18:56.226Z",
  "description": "Simplified connection point for Apache Hadoop platform\n\nHadoop is a software platform that lets one easily write and run applications that process vast amounts of data.\nThis charm provides a simplified connection point for client / workload services, such as Apache Hive or Apache Pig, which require access to Apache Hadoop.\n",
  "maintainer": {
    "name": "bigdata-charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "trusty",
  "juju_charm_owner": "bigdata-charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= trusty"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/hadoop-plugin",
      "self_resolve": true,
      "juju_interface": "hadoop-plugin",
      "juju_name": "hadoop-plugin",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/dfs",
      "self_resolve": true,
      "juju_interface": "dfs",
      "juju_name": "namenode",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/mapred",
      "self_resolve": true,
      "juju_interface": "mapred",
      "juju_name": "resourcemanager",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "resources_mirror": {
      "type": "string",
      "description": "URL from which to fetch resources (e.g., Hadoop binaries) instead of Launchpad.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/benchmark",
      "juju_interface": "benchmark",
      "juju_name": "benchmark",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "## Overview\n\nThe Apache Hadoop software library is a framework that allows for the\ndistributed processing of large data sets across clusters of computers\nusing a simple programming model.\n\nThis charm plugs in to a workload charm to provide the\n[Apache Hadoop 2.4.1](http://hadoop.apache.org/docs/r2.4.1/)\nlibraries and configuration for the workload to use.\n\n## Usage\n\nThis charm is intended to be deployed via one of the\n[apache bundles](https://jujucharms.com/u/bigdata-charmers/#bundles).\nFor example:\n\n    juju quickstart apache-analytics-sql\n\nThis will deploy the Apache Hadoop platform with a workload node\nwhich is running Apache Hive to perform SQL-like queries against your data.\n\nIf you wanted to also wanted to be able to analyze your data using Apache Pig,\nyou could deploy it and attach it to the same plugin:\n\n    juju deploy apache-pig pig\n    juju add-relation plugin pig\n\n## Benchmarking\n\n    You can perform a terasort benchmark, in order to gauge performance of your environment:\n\n        $ juju action do plugin/0 terasort\n        Action queued with id: cbd981e8-3400-4c8f-8df1-c39c55a7eae6\n        $ juju action fetch --wait 0 cbd981e8-3400-4c8f-8df1-c39c55a7eae6\n        results:\n          meta:\n            composite:\n              direction: asc\n              units: ms\n              value: \"206676\"\n          results:\n            raw: '{\"Total vcore-seconds taken by all map tasks\": \"439783\", \"Spilled Records\":\n              \"30000000\", \"WRONG_LENGTH\": \"0\", \"Reduce output records\": \"10000000\", \"HDFS:\n              Number of bytes read\": \"1000001024\", \"Total vcore-seconds taken by all reduce\n              tasks\": \"50275\", \"Reduce input groups\": \"10000000\", \"Shuffled Maps \": \"8\", \"FILE:\n              Number of bytes written\": \"3128977482\", \"Input split bytes\": \"1024\", \"Total\n              time spent by all reduce tasks (ms)\": \"50275\", \"FILE: Number of large read operations\":\n              \"0\", \"Bytes Read\": \"1000000000\", \"Virtual memory (bytes) snapshot\": \"7688794112\",\n              \"Launched map tasks\": \"8\", \"GC time elapsed (ms)\": \"11656\", \"Bytes Written\":\n              \"1000000000\", \"FILE: Number of read operations\": \"0\", \"HDFS: Number of write\n              operations\": \"2\", \"Total megabyte-seconds taken by all reduce tasks\": \"51481600\",\n              \"Combine output records\": \"0\", \"HDFS: Number of bytes written\": \"1000000000\",\n              \"Total time spent by all map tasks (ms)\": \"439783\", \"Map output records\": \"10000000\",\n              \"Physical memory (bytes) snapshot\": \"2329722880\", \"FILE: Number of write operations\":\n              \"0\", \"Launched reduce tasks\": \"1\", \"Reduce input records\": \"10000000\", \"Total\n              megabyte-seconds taken by all map tasks\": \"450337792\", \"WRONG_REDUCE\": \"0\",\n              \"HDFS: Number of read operations\": \"27\", \"Reduce shuffle bytes\": \"1040000048\",\n              \"Map input records\": \"10000000\", \"Map output materialized bytes\": \"1040000048\",\n              \"CPU time spent (ms)\": \"195020\", \"Merged Map outputs\": \"8\", \"FILE: Number of\n              bytes read\": \"2080000144\", \"Failed Shuffles\": \"0\", \"Total time spent by all\n              maps in occupied slots (ms)\": \"439783\", \"WRONG_MAP\": \"0\", \"BAD_ID\": \"0\", \"Rack-local\n              map tasks\": \"2\", \"IO_ERROR\": \"0\", \"Combine input records\": \"0\", \"Map output\n              bytes\": \"1020000000\", \"CONNECTION\": \"0\", \"HDFS: Number of large read operations\":\n              \"0\", \"Total committed heap usage (bytes)\": \"1755840512\", \"Data-local map tasks\":\n              \"6\", \"Total time spent by all reduces in occupied slots (ms)\": \"50275\"}'\n        status: completed\n        timing:\n          completed: 2015-05-28 20:55:50 +0000 UTC\n          enqueued: 2015-05-28 20:53:41 +0000 UTC\n          started: 2015-05-28 20:53:44 +0000 UTC\n\n\n## Deploying in Network-Restricted Environments\n\nThe Apache Hadoop charms can be deployed in environments with limited network\naccess. To deploy in this environment, you will need a local mirror to serve\nthe packages and resources required by these charms.\n\n\n### Mirroring Packages\n\nYou can setup a local mirror for apt packages using squid-deb-proxy.\nFor instructions on configuring juju to use this, see the\n[Juju Proxy Documentation](https://juju.ubuntu.com/docs/howto-proxies.html).\n\n\n### Mirroring Resources\n\nIn addition to apt packages, the Apache Hadoop charms require a few binary\nresources, which are normally hosted on Launchpad. If access to Launchpad\nis not available, the `jujuresources` library makes it easy to create a mirror\nof these resources:\n\n    sudo pip install jujuresources\n    juju-resources fetch --all /path/to/resources.yaml -d /tmp/resources\n    juju-resources serve -d /tmp/resources\n\nThis will fetch all of the resources needed by this charm and serve them via a\nsimple HTTP server. The output from `juju-resources serve` will give you a\nURL that you can set as the `resources_mirror` config option for this charm.\nSetting this option will cause all resources required by this charm to be\ndownloaded from the configured URL.\n\nYou can fetch the resources for all of the Apache Hadoop charms\n(`apache-hadoop-hdfs-master`, `apache-hadoop-yarn-master`,\n`apache-hadoop-compute-slave`, `apache-hadoop-plugin`, etc) into a single\ndirectory and serve them all with a single `juju-resources serve` instance.\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Hadoop\n\n- [Apache Hadoop](http://hadoop.apache.org/) home page\n- [Apache Hadoop bug trackers](http://hadoop.apache.org/issue_tracking.html)\n- [Apache Hadoop mailing lists](http://hadoop.apache.org/mailing_lists.html)\n- [Apache Hadoop Juju Charm](http://jujucharms.com/?text=hadoop)\n",
  "readme": "## Overview\n\nThe Apache Hadoop software library is a framework that allows for the\ndistributed processing of large data sets across clusters of computers\nusing a simple programming model.\n\nThis charm plugs in to a workload charm to provide the\n[Apache Hadoop 2.4.1](http://hadoop.apache.org/docs/r2.4.1/)\nlibraries and configuration for the workload to use.\n\n## Usage\n\nThis charm is intended to be deployed via one of the\n[apache bundles](https://jujucharms.com/u/bigdata-charmers/#bundles).\nFor example:\n\n    juju quickstart apache-analytics-sql\n\nThis will deploy the Apache Hadoop platform with a workload node\nwhich is running Apache Hive to perform SQL-like queries against your data.\n\nIf you wanted to also wanted to be able to analyze your data using Apache Pig,\nyou could deploy it and attach it to the same plugin:\n\n    juju deploy apache-pig pig\n    juju add-relation plugin pig\n\n## Benchmarking\n\n    You can perform a terasort benchmark, in order to gauge performance of your environment:\n\n        $ juju action do plugin/0 terasort\n        Action queued with id: cbd981e8-3400-4c8f-8df1-c39c55a7eae6\n        $ juju action fetch --wait 0 cbd981e8-3400-4c8f-8df1-c39c55a7eae6\n        results:\n          meta:\n            composite:\n              direction: asc\n              units: ms\n              value: \"206676\"\n          results:\n            raw: '{\"Total vcore-seconds taken by all map tasks\": \"439783\", \"Spilled Records\":\n              \"30000000\", \"WRONG_LENGTH\": \"0\", \"Reduce output records\": \"10000000\", \"HDFS:\n              Number of bytes read\": \"1000001024\", \"Total vcore-seconds taken by all reduce\n              tasks\": \"50275\", \"Reduce input groups\": \"10000000\", \"Shuffled Maps \": \"8\", \"FILE:\n              Number of bytes written\": \"3128977482\", \"Input split bytes\": \"1024\", \"Total\n              time spent by all reduce tasks (ms)\": \"50275\", \"FILE: Number of large read operations\":\n              \"0\", \"Bytes Read\": \"1000000000\", \"Virtual memory (bytes) snapshot\": \"7688794112\",\n              \"Launched map tasks\": \"8\", \"GC time elapsed (ms)\": \"11656\", \"Bytes Written\":\n              \"1000000000\", \"FILE: Number of read operations\": \"0\", \"HDFS: Number of write\n              operations\": \"2\", \"Total megabyte-seconds taken by all reduce tasks\": \"51481600\",\n              \"Combine output records\": \"0\", \"HDFS: Number of bytes written\": \"1000000000\",\n              \"Total time spent by all map tasks (ms)\": \"439783\", \"Map output records\": \"10000000\",\n              \"Physical memory (bytes) snapshot\": \"2329722880\", \"FILE: Number of write operations\":\n              \"0\", \"Launched reduce tasks\": \"1\", \"Reduce input records\": \"10000000\", \"Total\n              megabyte-seconds taken by all map tasks\": \"450337792\", \"WRONG_REDUCE\": \"0\",\n              \"HDFS: Number of read operations\": \"27\", \"Reduce shuffle bytes\": \"1040000048\",\n              \"Map input records\": \"10000000\", \"Map output materialized bytes\": \"1040000048\",\n              \"CPU time spent (ms)\": \"195020\", \"Merged Map outputs\": \"8\", \"FILE: Number of\n              bytes read\": \"2080000144\", \"Failed Shuffles\": \"0\", \"Total time spent by all\n              maps in occupied slots (ms)\": \"439783\", \"WRONG_MAP\": \"0\", \"BAD_ID\": \"0\", \"Rack-local\n              map tasks\": \"2\", \"IO_ERROR\": \"0\", \"Combine input records\": \"0\", \"Map output\n              bytes\": \"1020000000\", \"CONNECTION\": \"0\", \"HDFS: Number of large read operations\":\n              \"0\", \"Total committed heap usage (bytes)\": \"1755840512\", \"Data-local map tasks\":\n              \"6\", \"Total time spent by all reduces in occupied slots (ms)\": \"50275\"}'\n        status: completed\n        timing:\n          completed: 2015-05-28 20:55:50 +0000 UTC\n          enqueued: 2015-05-28 20:53:41 +0000 UTC\n          started: 2015-05-28 20:53:44 +0000 UTC\n\n\n## Deploying in Network-Restricted Environments\n\nThe Apache Hadoop charms can be deployed in environments with limited network\naccess. To deploy in this environment, you will need a local mirror to serve\nthe packages and resources required by these charms.\n\n\n### Mirroring Packages\n\nYou can setup a local mirror for apt packages using squid-deb-proxy.\nFor instructions on configuring juju to use this, see the\n[Juju Proxy Documentation](https://juju.ubuntu.com/docs/howto-proxies.html).\n\n\n### Mirroring Resources\n\nIn addition to apt packages, the Apache Hadoop charms require a few binary\nresources, which are normally hosted on Launchpad. If access to Launchpad\nis not available, the `jujuresources` library makes it easy to create a mirror\nof these resources:\n\n    sudo pip install jujuresources\n    juju-resources fetch --all /path/to/resources.yaml -d /tmp/resources\n    juju-resources serve -d /tmp/resources\n\nThis will fetch all of the resources needed by this charm and serve them via a\nsimple HTTP server. The output from `juju-resources serve` will give you a\nURL that you can set as the `resources_mirror` config option for this charm.\nSetting this option will cause all resources required by this charm to be\ndownloaded from the configured URL.\n\nYou can fetch the resources for all of the Apache Hadoop charms\n(`apache-hadoop-hdfs-master`, `apache-hadoop-yarn-master`,\n`apache-hadoop-compute-slave`, `apache-hadoop-plugin`, etc) into a single\ndirectory and serve them all with a single `juju-resources serve` instance.\n\n\n## Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n## Hadoop\n\n- [Apache Hadoop](http://hadoop.apache.org/) home page\n- [Apache Hadoop bug trackers](http://hadoop.apache.org/issue_tracking.html)\n- [Apache Hadoop mailing lists](http://hadoop.apache.org/mailing_lists.html)\n- [Apache Hadoop Juju Charm](http://jujucharms.com/?text=hadoop)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}