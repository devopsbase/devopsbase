{
  "name": "gunicorn Juju charm",
  "juju_charm_name": "gunicorn",
  "revision": "cs:precise/gunicorn-12",
  "latest": true,
  "uris": [
    "https://jujucharms.com/gunicorn",
    "https://jujucharms.com/gunicorn/precise",
    "https://jujucharms.com/gunicorn/precise/12",
    "https://api.jujucharms.com/v5/gunicorn",
    "https://api.jujucharms.com/v5/precise/gunicorn",
    "https://api.jujucharms.com/v5/precise/gunicorn-12"
  ],
  "labels": [
    "Juju charm",
    "misc",
    "Type/Middleware/Runtime/Python",
    "Type/Middleware/Runtime/Ruby",
    "Binding/Provider",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/API/Toolkit",
    "Type/Devopsware/Deployment/Juju"
  ],
  "info_url": "https://jujucharms.com/gunicorn",
  "package_url": "https://api.jujucharms.com/v5/precise/gunicorn-12/archive",
  "created": "2015-06-17T09:34:11.679Z",
  "updated": "2015-06-17T09:34:11.679Z",
  "description": "Gunicorn\n\nGunicorn or Green Unicorn is a Python WSGI HTTP Server for UNIX. It's a\npre-fork worker model ported from Ruby's Unicorn project. The Gunicorn server\nis broadly compatible with various web frameworks, simply implemented, light on\nserver resources, and fairly speedy.\n\nThe providers of the wsgi relation must provide working_dir, plus optionally\nany of the charm's config directives, which will override the current config\nfor the charm.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/wsgi",
      "self_resolve": true,
      "juju_interface": "wsgi",
      "juju_name": "wsgi-file",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "env_extra": {
      "type": "string",
      "description": "List of environment variables for the wsgi process.  e.g. FOO=\"bar\" BAZ=\"1 2 3\"\n",
      "default": "",
      "mapping": "charm_option"
    },
    "listen_ip": {
      "type": "string",
      "description": "IP adresses that Gunicorn will listen on. By default we listen on all of them.",
      "default": "0.0.0.0",
      "mapping": "charm_option"
    },
    "port": {
      "type": "int",
      "description": "Port the application will be listenning.",
      "default": 8080,
      "mapping": "charm_option"
    },
    "python_path": {
      "type": "string",
      "description": "Set an additionnal PYTHONPATH to the project.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_access_logfile": {
      "type": "string",
      "description": "The Access log file to write to.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_access_logformat": {
      "type": "string",
      "description": "The Access log format. Don't forget to escape all quotes and round brackets.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_backlog": {
      "type": "int",
      "description": "The maximum number of pending connections.",
      "default": 2048,
      "mapping": "charm_option"
    },
    "wsgi_extra": {
      "type": "string",
      "description": "Space separated extra settings. For example: --debug",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_group": {
      "type": "string",
      "description": "Switch worker process to run as this group. A valid group id (as an int) or the name.",
      "default": "www-data",
      "mapping": "charm_option"
    },
    "wsgi_keep_alive": {
      "type": "int",
      "description": "Keep alive time in seconds.",
      "default": 2,
      "mapping": "charm_option"
    },
    "wsgi_log_file": {
      "type": "string",
      "description": "The log file to write to. If empty the logs would be handle by upstart.",
      "default": "-",
      "mapping": "charm_option"
    },
    "wsgi_log_level": {
      "type": "string",
      "description": "The granularity of Error log outputs.",
      "default": "info",
      "mapping": "charm_option"
    },
    "wsgi_max_requests": {
      "type": "int",
      "description": "The maximum number of requests a worker will process before restarting.",
      "default": 0,
      "mapping": "charm_option"
    },
    "wsgi_timeout": {
      "type": "int",
      "description": "Timeout of a request in seconds.",
      "default": 30,
      "mapping": "charm_option"
    },
    "wsgi_timestamp": {
      "type": "string",
      "description": "The variable to modify to trigger Gunicorn reload.",
      "default": "",
      "mapping": "charm_option"
    },
    "wsgi_umask": {
      "type": "string",
      "description": "A bit mask for the file mode on files written by Gunicorn. The number 0 means Python guesses the base. Note that this affects unix socket permissions.",
      "default": "0",
      "mapping": "charm_option"
    },
    "wsgi_user": {
      "type": "string",
      "description": "Switch worker processes to run as this user. User id (as an int) or the name.",
      "default": "www-data",
      "mapping": "charm_option"
    },
    "wsgi_worker_class": {
      "type": "string",
      "description": "Gunicorn workers type. Can be: sync, eventlet, gevent, tornado",
      "default": "sync",
      "mapping": "charm_option"
    },
    "wsgi_worker_connections": {
      "type": "int",
      "description": "The maximum number of simultaneous clients.",
      "default": 1000,
      "mapping": "charm_option"
    },
    "wsgi_workers": {
      "type": "int",
      "description": "The number of worker process for handling requests. 0 for count(cpu) + 1",
      "default": 0,
      "mapping": "charm_option"
    },
    "wsgi_wsgi_file": {
      "type": "string",
      "description": "The name of the WSGI application.",
      "default": "wsgi",
      "mapping": "charm_option"
    }
  },
  "license": "# Gunicorn\n\nAuthor: \n\n- Patrick Hetu <patrick@koumbit.org>\n\n# How to configure the charm\n\nTo deploy a charm with this subordinate it must minimally:\n\n 1. Provide the wsgi interface.\n 2. Set the `working_dir` relation variable in the wsgi hook.\n\nThe configuration of Gunicorn will use the variable pass by\nthe relation hook first. If there are not define it will\nfallback to the global configuration of the charm.\n\n# Example deployment\n\n 1. Deployment with python-django for example::\n\n        juju bootstrap\n        juju deploy python-django\n        juju deploy postgresql\n        juju deploy gunicorn\n        juju add-relation python-django postgresql:db\n        juju add-relation gunicorn python-django\n        juju expose python-django\n\n 2. Accessing your new django app should be ready at::\n\n        http://<machine-addr>:8080/\n\n   To find out the public address of gunicorn/python-django, look for it in\n   the output of the `juju status` command.\n   I recommend using a reverse proxy like Nginx in front of Gunicorn. \n\n# Changelog\n\n4:\n\nNotable changes:\n\n- re-add support for env_extra parameter that was dropped in r3, but with new\n  standard shell format.  e.g. env_extra=\"FOO=BAR BAZ=QUX\". Also supports old\n  r2 format (env_extra=\"'foo': 'bar', 'baz': 'qux'\") to provide an upgrade\n  path.\n- if upgrading from r1 or r2, the old gunicorn config is removed, leaving just\n  the custom upstart job.\n\nNo backwards incompatible changes.\n\n3:\n\nNotable changes:\n\n- Rewrite the charm using python instead of BASH scripts\n- add listen_ip configuration variable\n\nBackwards incompatible changes:\n\n- Remove the Django mode since Gunicorn is not recommending it anymore.\n- Use Upstart to manage daemons\n- no start/stop hook anymore use related charms instead.\n- no configuration change directly on the charm anymore, use related charms instead.\n- no access logging by default\n- exposing a port must now be done in the linked charm instead of this one\n\n",
  "readme": "# Gunicorn\n\nAuthor: \n\n- Patrick Hetu <patrick@koumbit.org>\n\n# How to configure the charm\n\nTo deploy a charm with this subordinate it must minimally:\n\n 1. Provide the wsgi interface.\n 2. Set the `working_dir` relation variable in the wsgi hook.\n\nThe configuration of Gunicorn will use the variable pass by\nthe relation hook first. If there are not define it will\nfallback to the global configuration of the charm.\n\n# Example deployment\n\n 1. Deployment with python-django for example::\n\n        juju bootstrap\n        juju deploy python-django\n        juju deploy postgresql\n        juju deploy gunicorn\n        juju add-relation python-django postgresql:db\n        juju add-relation gunicorn python-django\n        juju expose python-django\n\n 2. Accessing your new django app should be ready at::\n\n        http://<machine-addr>:8080/\n\n   To find out the public address of gunicorn/python-django, look for it in\n   the output of the `juju status` command.\n   I recommend using a reverse proxy like Nginx in front of Gunicorn. \n\n# Changelog\n\n4:\n\nNotable changes:\n\n- re-add support for env_extra parameter that was dropped in r3, but with new\n  standard shell format.  e.g. env_extra=\"FOO=BAR BAZ=QUX\". Also supports old\n  r2 format (env_extra=\"'foo': 'bar', 'baz': 'qux'\") to provide an upgrade\n  path.\n- if upgrading from r1 or r2, the old gunicorn config is removed, leaving just\n  the custom upstart job.\n\nNo backwards incompatible changes.\n\n3:\n\nNotable changes:\n\n- Rewrite the charm using python instead of BASH scripts\n- add listen_ip configuration variable\n\nBackwards incompatible changes:\n\n- Remove the Django mode since Gunicorn is not recommending it anymore.\n- Use Upstart to manage daemons\n- no start/stop hook anymore use related charms instead.\n- no configuration change directly on the charm anymore, use related charms instead.\n- no access logging by default\n- exposing a port must now be done in the linked charm instead of this one\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}