{
  "name": "varnish Juju charm",
  "juju_charm_name": "varnish",
  "revision": "cs:precise/varnish-6",
  "latest": true,
  "uris": [
    "https://jujucharms.com/varnish",
    "https://jujucharms.com/varnish/precise",
    "https://jujucharms.com/varnish/precise/6",
    "https://api.jujucharms.com/v5/varnish",
    "https://api.jujucharms.com/v5/precise/varnish",
    "https://api.jujucharms.com/v5/precise/varnish-6"
  ],
  "labels": [
    "Juju charm",
    "cache-proxy",
    "Binding/Provider/HP",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Middleware/Web Server",
    "Type/Middleware/Proxy/Varnish",
    "Type/Middleware/Application Server",
    "Type/Middleware/Data Store/In-Memory",
    "Type/Middleware/Cache"
  ],
  "info_url": "https://jujucharms.com/varnish",
  "package_url": "https://api.jujucharms.com/v5/precise/varnish-6/archive",
  "created": "2015-06-17T09:33:30.773Z",
  "updated": "2015-06-17T09:33:30.773Z",
  "description": "state of the art, high-performance web accelerator\n\nVarnish Cache is a state of the art web accelerator written with\nperformance and flexibility in mind.  Varnish Cache stores web pages\nin memory so web servers don't have to create the same web page over\nand over again. Varnish serves pages much faster than any application\nserver; giving the website a significant speed up.  Some of the\nfeatures include: * A modern design * VCL - a very flexible\nconfiguration language * Load balancing with health checking of\nbackends * Partial support for ESI - Edge Side Includes * URL\nrewriting * Graceful handling of \"dead\" backends\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/http",
      "self_resolve": true,
      "juju_interface": "http",
      "juju_name": "reverseproxy",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "port": {
      "type": "int",
      "description": "varnish listening port",
      "default": 80,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "Juju Charm: varnish\nAuthor: Nathan Williams\n\n# Introduction\n\nVarnish Cache is a \"web application accelerator\", or an HTTP reverse \nproxy. By deploying varnish in front of an HTTP server, it can speed up \ndelivery by a factor of 300-1000x, depending on configuration.\n\nWhat makes Varnish Cache so powerful is the Varnish Cache Language (VCL). By \nusing VCL to configure Varnish Cache for your site, you can see \n*remarkable* performance improvements.\n\nThis varnish charm has also been set up to use a self-policing, round-\nrobin load-balancer (director) that distributes the load between your \nHTTP backends. Any backends defined by related website relations will \nbe monitored, and in the event that they repeatedly fail to respond, \nVarnish Cache will stop sending it requests until it is healthy.\n\n# Requirements\n\nVarnish Cache requires a backend that serves content with HTTP. \n \n# Getting started deploying Varnish\n\nBootstrap your juju environment:\n\n    juju bootstrap\n\nDeploy a varnish (reverse-proxy) instance:\n\n    juju deploy varnish\n\nExpose the service:\n\n    juju expose varnish\n\nConnect varnish and wordpress:\n\n    juju add-relation varnish wordpress\n\n# Configuring Varnish\n\nConfiguration options:\n\nThe varnish charm allows you to configure varnish's listening port in \nyour own config.yaml.\n\nTune your Varnish Cache deployment:\n\nIt also includes some common-sense tuning tweaks in data/extra.vcl.\n\nIf you wish to add extra (application-specific?) configuration, feel\nfree to add your VCL changes to data/extra.vcl. It shouldn't interfere\nwith the charm deployment, and will retain the round-robin director as\nas long as you keep the following line in your vcl_receive:\n\n    set req.backend = balance;\n\n\n# More Information\n\nTo verify Varnish Cache is delivering cached content, check the HTTP \nheaders by running the following command twice:\n\n    curl -I -H \"Host: <backend address>\" http://<varnish address>/\n\nTo verify the site content is delivered from the backend:\n\n    curl -H \"Host: 192.168.122.242\" http://192.168.122.111/\n\nFor more information about Varnish Cache, check out their official docs:\n\n    https://www.varnish-cache.org/docs/3.0/\n\n# Improvements? Bugs?\n\nIf you find a bug, or know any optimization tricks that are application \nagnostic, let us know!\n",
  "readme": "Juju Charm: varnish\nAuthor: Nathan Williams\n\n# Introduction\n\nVarnish Cache is a \"web application accelerator\", or an HTTP reverse \nproxy. By deploying varnish in front of an HTTP server, it can speed up \ndelivery by a factor of 300-1000x, depending on configuration.\n\nWhat makes Varnish Cache so powerful is the Varnish Cache Language (VCL). By \nusing VCL to configure Varnish Cache for your site, you can see \n*remarkable* performance improvements.\n\nThis varnish charm has also been set up to use a self-policing, round-\nrobin load-balancer (director) that distributes the load between your \nHTTP backends. Any backends defined by related website relations will \nbe monitored, and in the event that they repeatedly fail to respond, \nVarnish Cache will stop sending it requests until it is healthy.\n\n# Requirements\n\nVarnish Cache requires a backend that serves content with HTTP. \n \n# Getting started deploying Varnish\n\nBootstrap your juju environment:\n\n    juju bootstrap\n\nDeploy a varnish (reverse-proxy) instance:\n\n    juju deploy varnish\n\nExpose the service:\n\n    juju expose varnish\n\nConnect varnish and wordpress:\n\n    juju add-relation varnish wordpress\n\n# Configuring Varnish\n\nConfiguration options:\n\nThe varnish charm allows you to configure varnish's listening port in \nyour own config.yaml.\n\nTune your Varnish Cache deployment:\n\nIt also includes some common-sense tuning tweaks in data/extra.vcl.\n\nIf you wish to add extra (application-specific?) configuration, feel\nfree to add your VCL changes to data/extra.vcl. It shouldn't interfere\nwith the charm deployment, and will retain the round-robin director as\nas long as you keep the following line in your vcl_receive:\n\n    set req.backend = balance;\n\n\n# More Information\n\nTo verify Varnish Cache is delivering cached content, check the HTTP \nheaders by running the following command twice:\n\n    curl -I -H \"Host: <backend address>\" http://<varnish address>/\n\nTo verify the site content is delivered from the backend:\n\n    curl -H \"Host: 192.168.122.242\" http://192.168.122.111/\n\nFor more information about Varnish Cache, check out their official docs:\n\n    https://www.varnish-cache.org/docs/3.0/\n\n# Improvements? Bugs?\n\nIf you find a bug, or know any optimization tricks that are application \nagnostic, let us know!\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}