{
  "name": "kafka Juju charm",
  "juju_charm_name": "kafka",
  "revision": "cs:xenial/kafka-0",
  "latest": true,
  "uris": [
    "https://jujucharms.com/kafka",
    "https://jujucharms.com/kafka/xenial",
    "https://jujucharms.com/kafka/xenial/0",
    "https://api.jujucharms.com/v5/kafka",
    "https://api.jujucharms.com/v5/xenial/kafka",
    "https://api.jujucharms.com/v5/xenial/kafka-0"
  ],
  "labels": [
    "Juju charm",
    "apache",
    "big_data",
    "bigtop",
    "Type/Infrastructure/Operating System/macOS",
    "Type/Middleware/Runtime/Java",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/CLI",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Orchestration/Cluster-based",
    "Type/Middleware/Web Server/Apache HTTP Server",
    "Type/Middleware/Messaging"
  ],
  "info_url": "https://jujucharms.com/kafka",
  "package_url": "https://api.jujucharms.com/v5/xenial/kafka-0/archive",
  "created": "2016-10-08T17:36:40.627Z",
  "updated": "2016-10-08T17:36:40.627Z",
  "description": "High-performance distributed messaging system from Apache Bigtop\n\nFast\nA single Kafka broker can handle hundreds of megabytes of reads and writes per\nsecond from thousands of clients.\n\nScalable\nKafka is designed to allow a single cluster to serve as the central data\nbackbone for a large organization. It can be elastically and transparently\nexpanded without downtime. Data streams are partitioned and spread over a\ncluster of machines to allow data streams larger than the capability of any\nsingle machine and to allow clusters of co-ordinated consumers.\n\nDurable\nMessages are persisted on disk and replicated within the cluster to prevent\ndata loss. Each broker can handle terabytes of messages without performance\nimpact.\n\nDistributed by Design\nKafka has a modern cluster-centric design that offers strong durability and\nfault-tolerance guarantees.\n",
  "maintainer": {
    "name": "bigdata-charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "xenial",
  "juju_charm_owner": "bigdata-charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= xenial"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/zookeeper",
      "self_resolve": true,
      "juju_interface": "zookeeper",
      "juju_name": "zookeeper",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "network_interface": {
      "type": "string",
      "description": "Network interface to bind Kafka to. Defaults to accepting\nconnections on all interfaces. Accepts either the name of an\ninterface (e.g., 'eth0'), or a CIDR range. If the latter, we\\'ll\nbind to the first interface that we find with an IP address in\nthat range.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/kafka",
      "juju_interface": "kafka",
      "juju_name": "client",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/java",
      "juju_interface": "java",
      "juju_name": "java",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n# Overview\n\nApache Kafka is an open-source message broker project developed by the Apache\nSoftware Foundation written in Scala. The project aims to provide a unified,\nhigh-throughput, low-latency platform for handling real-time data feeds. Learn\nmore at [kafka.apache.org](http://kafka.apache.org/).\n\nThis charm deploys the Kafka component of the Apache Bigtop platform.\n\n\n# Deploying / Using\n\nA working Juju installation is assumed to be present. If Juju is not yet set\nup, please follow the\n[getting-started](https://jujucharms.com/docs/2.0/getting-started)\ninstructions prior to deploying this charm.\n\nKafka requires the Zookeeper distributed coordination service. Deploy and\nrelate them as follows:\n\n    juju deploy kafka\n    juju deploy zookeeper\n    juju add-relation kafka zookeeper\n\nOnce deployed, there are a number of actions available in this charm.\n> **Note**: Actions described below assume Juju 2.0 or greater. If using an\nearlier version of Juju, the action syntax is:\n`juju action do kafka/0 <action_name> <action_args>; juju action fetch <id>`.\n\nList the zookeeper servers that our kafka brokers\nare connected to. The following will list `<ip>:<port>` information for each\nzookeeper unit in the environment (e.g.: `10.0.3.221:2181`).\n\n    juju run-action kafka/0 list-zks\n    juju show-action-output <id>  # <-- id from above command\n\nCreate a Kafka topic with:\n\n    juju run-action kafka/0 create-topic topic=<topic_name> \\\n     partitions=<#> replication=<#>\n    juju show-action-output <id>  # <-- id from above command\n\nList topics with:\n\n    juju run-action kafka/0 list-topics\n    juju show-action-output <id>  # <-- id from above command\n\nWrite to a topic with:\n\n    juju run-action kafka/0 write-topic topic=<topic_name> data=<data>\n    juju show-action-output <id>  # <-- id from above command\n\nRead from a topic with:\n\n    juju run-action kafka/0 read-topic topic=<topic_name> partition=<#>\n    juju show-action-output <id>  # <-- id from above command\n\n\n# Verifying\n\n## Status\nApache Bigtop charms provide extended status reporting to indicate when they\nare ready:\n\n    juju status\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status\n\nThe message column will provide information about a given unit's state.\nThis charm is ready for use once the status message indicates that it is\nready.\n\n## Smoke Test\nThis charm provides a `smoke-test` action that can be used to verify the\napplication is functioning as expected. The test will verify connectivity\nbetween Kafka and Zookeeper, and will test creation and listing of Kafka\ntopics. Run the action as follows:\n\n    juju run-action slave/0 smoke-test\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action do kafka/0 smoke-test`.\n\nWatch the progress of the smoke test actions with:\n\n    watch -n 0.5 juju show-action-status\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action status`.\n\nEventually, the action should settle to `status: completed`.  If it\nreports `status: failed`, the application is not working as expected. Get\nmore information about a specific smoke test with:\n\n    juju show-action-output <action-id>\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action fetch <action-id>`.\n\n\n# Scaling\n\nExpanding a cluster with many brokers is as easy as adding more Kafka units:\n\n    juju add-unit kafka\n\nAfter adding additional brokers, topics may be created with\nreplication up to the number of ready units. For example, if there are two\nready units, create a replicated topic as follows:\n\n    juju run-action kafka/0 create-topic topic=my-replicated-topic \\\n        partitions=1 replication=2\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action do kafka/0 create-topic <args>`.\n\nQuery the description of the recently created topic:\n\n    juju run --unit kafka/0 'kafka-topics.sh --describe \\\n        --topic my-replicated-topic --zookeeper <zookeeperip>:2181'\n\nAn expected response should be similar to:\n\n    Topic: my-replicated-topic PartitionCount:1 ReplicationFactor:2 Configs:\n    Topic: my-replicated-topic Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0\n\n\n# Connecting External Clients\n\nBy default, this charm does not expose Kafka outside of the provider's network.\nTo allow external clients to connect to Kafka, first expose the service:\n\n    juju expose kafka\n\nNext, ensure the external client can resolve the short hostname of the kafka\nunit. A simple way to do this is to add an `/etc/hosts` entry on the external\nkafka client machine. Gather the needed info from juju:\n\n    user@juju-client$ juju run --unit kafka/0 'hostname -s'\n    kafka-0\n    user@juju-client$ juju status --format=yaml kafka/0 | grep public-address\n    public-address: 40.784.149.135\n\nUpdate `/etc/hosts` on the external kafka client:\n\n    user@kafka-client$ echo \"40.784.149.135 kafka-0\" | sudo tee -a /etc/hosts\n\nThe external kafka client should now be able to access Kafka by using\n`kafka-0:9092` as the broker.\n\n\n# Network Interfaces\n\nIn some network environments, kafka may need to be restricted to\nlisten for incoming connections on a specific network interface\n(e.g.: for security reasons). To do so, configure kafka with either a\nnetwork interface name or a CIDR range specifying a subnet. For example:\n\n    juju config kafka network_interface=eth0\n    juju config kafka network_interface=10.0.2.0/24\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju set-config kafka network_interface=eth0`.\n\nEach kafka machine in the cluster will lookup the IP address of that\nnetwork interface, or find the first network interface with an IP\naddress in the specified subnet, and bind kafka to that address.\n\nIf a mistake is made and an invalid name for the network interface is\nconfigured, recover by re-configuring with the correct name and then\nrun \"juju resolved\" on each unit:\n\n    juju config kafka network_interface=eth0\n    juju resolved kafka/0\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju set-config kafka network_interface=eth0;\njuju resolved -r kafka/0`.\n\nTo go back to listening on any network interface on the\nmachine, simply pass ``0.0.0.0`` to ``network_interface``.\n\n    juju config kafka network_interface=0.0.0.0\n\n\n# Network-Restricted Environments\n\nCharms can be deployed in environments with limited network access. To deploy\nin this environment, configure a Juju model with appropriate\nproxy and/or mirror options. See\n[Configuring Models](https://jujucharms.com/docs/2.0/models-config) for more\ninformation.\n\n\n# Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n# Resources\n\n- [Apache Bigtop](http://bigtop.apache.org/) home page\n- [Apache Bigtop mailing lists](http://bigtop.apache.org/mail-lists.html)\n- [Apache Kafka home page](http://kafka.apache.org/)\n- [Apache Kafka issue tracker](https://issues.apache.org/jira/browse/KAFKA)\n- [Juju Bigtop charms](https://jujucharms.com/q/apache/bigtop)\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme": "<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n# Overview\n\nApache Kafka is an open-source message broker project developed by the Apache\nSoftware Foundation written in Scala. The project aims to provide a unified,\nhigh-throughput, low-latency platform for handling real-time data feeds. Learn\nmore at [kafka.apache.org](http://kafka.apache.org/).\n\nThis charm deploys the Kafka component of the Apache Bigtop platform.\n\n\n# Deploying / Using\n\nA working Juju installation is assumed to be present. If Juju is not yet set\nup, please follow the\n[getting-started](https://jujucharms.com/docs/2.0/getting-started)\ninstructions prior to deploying this charm.\n\nKafka requires the Zookeeper distributed coordination service. Deploy and\nrelate them as follows:\n\n    juju deploy kafka\n    juju deploy zookeeper\n    juju add-relation kafka zookeeper\n\nOnce deployed, there are a number of actions available in this charm.\n> **Note**: Actions described below assume Juju 2.0 or greater. If using an\nearlier version of Juju, the action syntax is:\n`juju action do kafka/0 <action_name> <action_args>; juju action fetch <id>`.\n\nList the zookeeper servers that our kafka brokers\nare connected to. The following will list `<ip>:<port>` information for each\nzookeeper unit in the environment (e.g.: `10.0.3.221:2181`).\n\n    juju run-action kafka/0 list-zks\n    juju show-action-output <id>  # <-- id from above command\n\nCreate a Kafka topic with:\n\n    juju run-action kafka/0 create-topic topic=<topic_name> \\\n     partitions=<#> replication=<#>\n    juju show-action-output <id>  # <-- id from above command\n\nList topics with:\n\n    juju run-action kafka/0 list-topics\n    juju show-action-output <id>  # <-- id from above command\n\nWrite to a topic with:\n\n    juju run-action kafka/0 write-topic topic=<topic_name> data=<data>\n    juju show-action-output <id>  # <-- id from above command\n\nRead from a topic with:\n\n    juju run-action kafka/0 read-topic topic=<topic_name> partition=<#>\n    juju show-action-output <id>  # <-- id from above command\n\n\n# Verifying\n\n## Status\nApache Bigtop charms provide extended status reporting to indicate when they\nare ready:\n\n    juju status\n\nThis is particularly useful when combined with `watch` to track the on-going\nprogress of the deployment:\n\n    watch -n 0.5 juju status\n\nThe message column will provide information about a given unit's state.\nThis charm is ready for use once the status message indicates that it is\nready.\n\n## Smoke Test\nThis charm provides a `smoke-test` action that can be used to verify the\napplication is functioning as expected. The test will verify connectivity\nbetween Kafka and Zookeeper, and will test creation and listing of Kafka\ntopics. Run the action as follows:\n\n    juju run-action slave/0 smoke-test\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action do kafka/0 smoke-test`.\n\nWatch the progress of the smoke test actions with:\n\n    watch -n 0.5 juju show-action-status\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action status`.\n\nEventually, the action should settle to `status: completed`.  If it\nreports `status: failed`, the application is not working as expected. Get\nmore information about a specific smoke test with:\n\n    juju show-action-output <action-id>\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action fetch <action-id>`.\n\n\n# Scaling\n\nExpanding a cluster with many brokers is as easy as adding more Kafka units:\n\n    juju add-unit kafka\n\nAfter adding additional brokers, topics may be created with\nreplication up to the number of ready units. For example, if there are two\nready units, create a replicated topic as follows:\n\n    juju run-action kafka/0 create-topic topic=my-replicated-topic \\\n        partitions=1 replication=2\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju action do kafka/0 create-topic <args>`.\n\nQuery the description of the recently created topic:\n\n    juju run --unit kafka/0 'kafka-topics.sh --describe \\\n        --topic my-replicated-topic --zookeeper <zookeeperip>:2181'\n\nAn expected response should be similar to:\n\n    Topic: my-replicated-topic PartitionCount:1 ReplicationFactor:2 Configs:\n    Topic: my-replicated-topic Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0\n\n\n# Connecting External Clients\n\nBy default, this charm does not expose Kafka outside of the provider's network.\nTo allow external clients to connect to Kafka, first expose the service:\n\n    juju expose kafka\n\nNext, ensure the external client can resolve the short hostname of the kafka\nunit. A simple way to do this is to add an `/etc/hosts` entry on the external\nkafka client machine. Gather the needed info from juju:\n\n    user@juju-client$ juju run --unit kafka/0 'hostname -s'\n    kafka-0\n    user@juju-client$ juju status --format=yaml kafka/0 | grep public-address\n    public-address: 40.784.149.135\n\nUpdate `/etc/hosts` on the external kafka client:\n\n    user@kafka-client$ echo \"40.784.149.135 kafka-0\" | sudo tee -a /etc/hosts\n\nThe external kafka client should now be able to access Kafka by using\n`kafka-0:9092` as the broker.\n\n\n# Network Interfaces\n\nIn some network environments, kafka may need to be restricted to\nlisten for incoming connections on a specific network interface\n(e.g.: for security reasons). To do so, configure kafka with either a\nnetwork interface name or a CIDR range specifying a subnet. For example:\n\n    juju config kafka network_interface=eth0\n    juju config kafka network_interface=10.0.2.0/24\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju set-config kafka network_interface=eth0`.\n\nEach kafka machine in the cluster will lookup the IP address of that\nnetwork interface, or find the first network interface with an IP\naddress in the specified subnet, and bind kafka to that address.\n\nIf a mistake is made and an invalid name for the network interface is\nconfigured, recover by re-configuring with the correct name and then\nrun \"juju resolved\" on each unit:\n\n    juju config kafka network_interface=eth0\n    juju resolved kafka/0\n\n> **Note**: The above assumes Juju 2.0 or greater. If using an earlier version\nof Juju, the syntax is `juju set-config kafka network_interface=eth0;\njuju resolved -r kafka/0`.\n\nTo go back to listening on any network interface on the\nmachine, simply pass ``0.0.0.0`` to ``network_interface``.\n\n    juju config kafka network_interface=0.0.0.0\n\n\n# Network-Restricted Environments\n\nCharms can be deployed in environments with limited network access. To deploy\nin this environment, configure a Juju model with appropriate\nproxy and/or mirror options. See\n[Configuring Models](https://jujucharms.com/docs/2.0/models-config) for more\ninformation.\n\n\n# Contact Information\n\n- <bigdata@lists.ubuntu.com>\n\n\n# Resources\n\n- [Apache Bigtop](http://bigtop.apache.org/) home page\n- [Apache Bigtop mailing lists](http://bigtop.apache.org/mail-lists.html)\n- [Apache Kafka home page](http://kafka.apache.org/)\n- [Apache Kafka issue tracker](https://issues.apache.org/jira/browse/KAFKA)\n- [Juju Bigtop charms](https://jujucharms.com/q/apache/bigtop)\n- [Juju mailing list](https://lists.ubuntu.com/mailman/listinfo/juju)\n- [Juju community](https://jujucharms.com/community)\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}