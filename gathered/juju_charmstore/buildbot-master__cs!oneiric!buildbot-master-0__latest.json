{
  "name": "buildbot-master Juju charm",
  "juju_charm_name": "buildbot-master",
  "revision": "cs:oneiric/buildbot-master-0",
  "latest": true,
  "uris": [
    "https://jujucharms.com/buildbot-master",
    "https://jujucharms.com/buildbot-master/oneiric",
    "https://jujucharms.com/buildbot-master/oneiric/0",
    "https://api.jujucharms.com/v5/buildbot-master",
    "https://api.jujucharms.com/v5/oneiric/buildbot-master",
    "https://api.jujucharms.com/v5/oneiric/buildbot-master-0"
  ],
  "labels": [
    "Juju charm",
    "Binding/Provider/Amazon/RDS",
    "Mode/Executable/Image",
    "Mode/Executable/Bundle/Juju Charm",
    "Mode/GUI",
    "Type/Devopsware/Build",
    "Type/Devopsware/Test",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://jujucharms.com/buildbot-master",
  "package_url": "https://api.jujucharms.com/v5/oneiric/buildbot-master-0/archive",
  "created": "2015-06-17T09:34:10.563Z",
  "updated": "2015-06-17T09:34:10.563Z",
  "description": "system to automate the compile/test cycle\n\nThe BuildBot is a system to automate the compile/test cycle required by\nmost software projects to validate code changes. By automatically\nrebuilding and testing the tree each time something has changed, build\nproblems are pinpointed quickly, before other developers are\ninconvenienced by the failure. The guilty developer can be identified\nand harassed without human intervention.  By running the builds on a\nvariety of platforms, developers who do not have the facilities to\ntest their changes everywhere before checkin will at least know\nshortly afterwards whether they have broken the build or not. Warning\ncounts, lint checks, image size, compile time, and other build\nparameters can be tracked over time, are more visible, and are\ntherefore easier to improve.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "oneiric",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= oneiric"
    }
  ],
  "parameters": {
    "access-key": {
      "type": "string",
      "description": "Access key for EC2.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "bucket-name": {
      "type": "string",
      "description": "The bucket used to store buildbot history.  If not provided a\ndefault based on the access-key will be used.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "buildbot-pkg": {
      "type": "string",
      "description": "The package name, possibly with versioning information, to be\ninstalled for buildbot.  Example values are 'buildbot',\n'buildbot/lucid', or 'buildbot=0.7.9'.\n",
      "default": "buildbot",
      "mapping": "charm_option"
    },
    "config-file": {
      "type": "string",
      "description": "A master.cfg file.  Use of this configuration is mutually exclusive\nwith the use of config-transport and config-url.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "config-private-key": {
      "type": "string",
      "description": "The private key for `config-user`.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "config-transport": {
      "type": "string",
      "description": "The command transport for fetching the configuration directory\nfrom the `config-url`.  Must be one of [bzr, rsync].  If adding a\nnew supported protocol, ensure the program is installed in the\n`start` hook and that it is properly handled in the\n`config-changed` hook.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "config-url": {
      "type": "string",
      "description": "The location the buildbot master configuration is to be\nfetched.  It must be compatible with the `config-transport`.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "config-user": {
      "type": "string",
      "description": "The user for access to a restricted URL.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "extra-packages": {
      "type": "string",
      "description": "A space-separated list of packages to be installed.  The\nrepositories to use in getting these packages should have been\nset prior to setting this value.  Calling multiple times will\ninstall the newly specified packages while leaving the previous\nones installed.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "extra-repository": {
      "type": "string",
      "description": "The full line to be inserted into an apt sources.list for a repository.\nIf called multiple times the new repository will be added but\nones added previously will not be removed. An example would be:\ndeb http://us.archive.ubuntu.com/ubuntu/ lucid main universe\n",
      "default": null,
      "mapping": "charm_option"
    },
    "installdir": {
      "type": "string",
      "description": "The directory where the Buildbot master will be installed.\n",
      "default": "/var/lib/buildbot/masters/master",
      "mapping": "charm_option"
    },
    "save-history-now": {
      "type": "string",
      "description": "Configuration hack to fire off the saving of the buildbot master\nhistory.  Normally this would be done in the stop hook but due to\nBug 872264 that hook is not firing properly.  The value of the\nsetting is not important but it must change between invocations\nor the event will not be recogized.  Monotonically increasing\ninteger values would be a good choice.  Or a time string.\n",
      "default": null,
      "mapping": "charm_option"
    },
    "secret-key": {
      "type": "string",
      "description": "Secret key for EC2.\n",
      "default": null,
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/master",
      "juju_interface": "master",
      "juju_name": "buildbot",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "license": "Usage\n=====\n\nThis charm depends on the buildbot-slave charm.\n\nIt expects all configuration to be provided initially at deploy time,\nusing the --config option.\n\nYou can provide a master.cfg file to use inline with your config file,\nor you can provide a full branch that includes a master.cfg and any\nother desired support files.  If you provide a branch, be aware that\nthis charm expects to control the .tac file.\n\nIn both cases, you need to modify your master.cfg file to be used by\nthe charm.\n\n * The BuildmasterConfig's \"slaves\" key should usually be an empty\n   list.  This list will be populated by slaves dynamically as they\n   join.  You may be able to also define slaves that are hosted\n   elsewhere (not in juju).  This has not been tested and may need\n   some adjustments to work.\n\n * The \"builders\" key should contain instances of\n   buildbot.config.BuilderConfig, not dicts.  The \"slavenames\"\n   argument should be a list of a single empty string.  The empty\n   string will be removed and replaced with the names of slaves that\n   dynamically declare that they want to participate in those builds.\n\nExamples are below.\n\nDemo of a single master.cfg file\n--------------------------------\n\nThis uses the standard buildbot Pyflakes example.\n\nStart with the buildbot-slave and buildbot-master charm in your charm\nrepository.\n\njuju bootstrap\njuju deploy --repository=./charms local:buildbot-master --config=./charms/oneiric/buildbot-master/examples/pyflakes.yaml\njuju deploy --repository=./charms local:buildbot-slave\njuju set buildbot-slave builders=runtests\njuju add-relation buildbot-slave buildbot-master\n\nLook in the pyflakes.yaml file to see how the master.cfg was modified\nas described above.\n\nDemo of a master.cfg in a branch with supporting files\n------------------------------------------------------\n\nThis is a pretty odd example in several ways, but you can also run a\nmaster and slave that run Launchpad's tests, like so:\n\njuju bootstrap\njuju deploy --config=./charms/oneiric/buildbot-master/examples/lpbuildbot.yaml --repository=./charms local:buildbot-master\njuju deploy --config=./charms/oneiric/buildbot-slave/examples/lpbuildbot.yaml --repository=./charms local:buildbot-slave\njuju add-relation buildbot-slave buildbot-master\n\nNote that starting up the buildbot-slave for Launchpad takes a very,\nvery long time (over two hours) and requires a large EC2 instance to\navoid out of memory errors.\n\nRunning the charm tests\n=======================\n\n1) Establish a charm repository if you do not already have one.  A charm\n   repository is a directory with subdirectories for each Ubuntu version being\n   used.  Inside those per-Ubuntu-version directories are the charm\n   directories.  For example, to make a charm repository for this charm under\n   Oneiric follow these steps:\n\n    a) mkdir -p ~/juju-charms/oneiric\n    b) ln -s `pwd` ~/juju-charms/oneiric/buildbot-master\n\n2) Copy the juju_wrapper file into some place earlier in your PATH than the\n   real juju executable, naming it \"juju\".  Edit the CHARM_TEST_REPO variable\n   therein to reflect the location of the charm repo from step 1.\n\n3) Bootstrap the juju environment if not already done:\n\n    juju bootstrap\n\n4) Run the tests: RESOLVE_TEST_CHARMS=1 tests/buildbot-master.test\n\n\nXXX bac 2012-02-23: The tests do not run locally using precise.  Set\ndefault-series: oneiric to get them to pass.\n\nRunning the charm helper tests\n==============================\n\nJust run \"python hooks/tests.py\".\n",
  "readme": "Usage\n=====\n\nThis charm depends on the buildbot-slave charm.\n\nIt expects all configuration to be provided initially at deploy time,\nusing the --config option.\n\nYou can provide a master.cfg file to use inline with your config file,\nor you can provide a full branch that includes a master.cfg and any\nother desired support files.  If you provide a branch, be aware that\nthis charm expects to control the .tac file.\n\nIn both cases, you need to modify your master.cfg file to be used by\nthe charm.\n\n * The BuildmasterConfig's \"slaves\" key should usually be an empty\n   list.  This list will be populated by slaves dynamically as they\n   join.  You may be able to also define slaves that are hosted\n   elsewhere (not in juju).  This has not been tested and may need\n   some adjustments to work.\n\n * The \"builders\" key should contain instances of\n   buildbot.config.BuilderConfig, not dicts.  The \"slavenames\"\n   argument should be a list of a single empty string.  The empty\n   string will be removed and replaced with the names of slaves that\n   dynamically declare that they want to participate in those builds.\n\nExamples are below.\n\nDemo of a single master.cfg file\n--------------------------------\n\nThis uses the standard buildbot Pyflakes example.\n\nStart with the buildbot-slave and buildbot-master charm in your charm\nrepository.\n\njuju bootstrap\njuju deploy --repository=./charms local:buildbot-master --config=./charms/oneiric/buildbot-master/examples/pyflakes.yaml\njuju deploy --repository=./charms local:buildbot-slave\njuju set buildbot-slave builders=runtests\njuju add-relation buildbot-slave buildbot-master\n\nLook in the pyflakes.yaml file to see how the master.cfg was modified\nas described above.\n\nDemo of a master.cfg in a branch with supporting files\n------------------------------------------------------\n\nThis is a pretty odd example in several ways, but you can also run a\nmaster and slave that run Launchpad's tests, like so:\n\njuju bootstrap\njuju deploy --config=./charms/oneiric/buildbot-master/examples/lpbuildbot.yaml --repository=./charms local:buildbot-master\njuju deploy --config=./charms/oneiric/buildbot-slave/examples/lpbuildbot.yaml --repository=./charms local:buildbot-slave\njuju add-relation buildbot-slave buildbot-master\n\nNote that starting up the buildbot-slave for Launchpad takes a very,\nvery long time (over two hours) and requires a large EC2 instance to\navoid out of memory errors.\n\nRunning the charm tests\n=======================\n\n1) Establish a charm repository if you do not already have one.  A charm\n   repository is a directory with subdirectories for each Ubuntu version being\n   used.  Inside those per-Ubuntu-version directories are the charm\n   directories.  For example, to make a charm repository for this charm under\n   Oneiric follow these steps:\n\n    a) mkdir -p ~/juju-charms/oneiric\n    b) ln -s `pwd` ~/juju-charms/oneiric/buildbot-master\n\n2) Copy the juju_wrapper file into some place earlier in your PATH than the\n   real juju executable, naming it \"juju\".  Edit the CHARM_TEST_REPO variable\n   therein to reflect the location of the charm repo from step 1.\n\n3) Bootstrap the juju environment if not already done:\n\n    juju bootstrap\n\n4) Run the tests: RESOLVE_TEST_CHARMS=1 tests/buildbot-master.test\n\n\nXXX bac 2012-02-23: The tests do not run locally using precise.  Set\ndefault-series: oneiric to get them to pass.\n\nRunning the charm helper tests\n==============================\n\nJust run \"python hooks/tests.py\".\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}