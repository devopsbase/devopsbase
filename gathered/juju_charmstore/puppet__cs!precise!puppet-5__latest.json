{
  "name": "puppet Juju charm",
  "juju_charm_name": "puppet",
  "revision": "cs:precise/puppet-5",
  "latest": true,
  "uris": [
    "https://jujucharms.com/puppet",
    "https://jujucharms.com/puppet/precise",
    "https://jujucharms.com/puppet/precise/5",
    "https://api.jujucharms.com/v5/puppet",
    "https://api.jujucharms.com/v5/precise/puppet",
    "https://api.jujucharms.com/v5/precise/puppet-5"
  ],
  "labels": [
    "Juju charm",
    "misc",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Script",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Declarative",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju",
    "Type/Devopsware/Deployment/Puppet",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Runtime/JavaScript/Node.js"
  ],
  "info_url": "https://jujucharms.com/puppet",
  "package_url": "https://api.jujucharms.com/v5/precise/puppet-5/archive",
  "created": "2015-06-17T09:37:47.407Z",
  "updated": "2015-06-17T09:37:47.407Z",
  "description": "puppet agent for system policy\n\nThis charm deploys the startup script and compatbility scripts for\nthe puppet agent, which is the process responsible for configuring the\nlocal node.  Puppet lets you centrally manage every important aspect\nof your system using a cross-platform specification language that\nmanages all the separate elements normally aggregated in different\nfiles, like users, cron jobs, and hosts, along with obviously discrete\nelements like packages, services, and files.  Puppet's simple\ndeclarative specification language provides powerful classing\nabilities for drawing out the similarities between hosts while\nallowing them to be as specific as necessary, and it handles\ndependency and prerequisite relationships between objects clearly and\nexplicitly.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": true,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/juju-info",
      "self_resolve": true,
      "juju_interface": "juju-info",
      "juju_name": "juju-info",
      "juju_role": "requirer",
      "juju_limit": 1
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/requires/puppet",
      "self_resolve": true,
      "juju_interface": "puppet",
      "juju_name": "puppetmaster",
      "juju_role": "requirer",
      "juju_limit": 1
    }
  ],
  "parameters": {
    "external-puppetmaster": {
      "type": "string",
      "description": "This will be the external puppet master server string. If a\npuppet master is related, this will be ignored.\n",
      "default": "",
      "mapping": "charm_option"
    }
  },
  "license": "# Overview\n\nThis subordinate charm can be used to apply system level policy on top\nof any Juju charms deployed, using Puppet. As described by the project\n[website](https://puppetlabs.com/):\n\n> Puppet Open Source is a flexible, customizable framework available under\n> the Apache 2.0 license designed to help system administrators automate the\n> many repetitive tasks they regularly perform. As a declarative, model-based\n> approach to IT automation, it lets you define the desired state - or the\n> \"what\" - of your infrastructure using the Puppet configuration language.\n\n# Usage\n\nThis example will show how to deploy puppet on top of the WordPress+MySQL example.\n\n## Installing WordPress and MySQL\n\n    juju deploy wordpress\n    juju deploy mysql\n    juju add-relation mysql wordpress\n\n## Adding Puppet to WordPress and MySQL\n\n    juju deploy puppet\n    juju add-relation puppet wordpress\n    juju add-relation puppet mysql\n\n## Specifying an external puppetmaster\n\nIf you have an external puppetmaster, note that you will have to use\nsome method to classify nodes automatically.  The yaml from 'juju status'\nshould be parsable into an external node classifier.\n\n    juju set puppet external-puppetmaster=puppet.yourdomain.com\n\n# Setting up and configuring a puppetmaster\n\nFor environments without an existing puppetmaster, first deploy a new one:\n\n    juju deploy puppetmaster\n\nNext, you will need to setup Puppet classes 'mysql' and 'wordpress':\n\n    juju ssh puppetmaster/0\n\nThis next command will result in all nodes being put into a class\nthat is named after their primary service, so the example will have,\nas suggested, two classes, 'mysql' and 'wordpress'.\n\n    juju add-relation puppetmaster:puppetmaster puppet:puppetmaster\n\n# Conclusion\n\nThat should end up with puppet agent running on the WordPress and\nMySQL nodes, pointed at either your external puppetmaster, or the\nnewly deployed puppetmaster.\n\n",
  "readme": "# Overview\n\nThis subordinate charm can be used to apply system level policy on top\nof any Juju charms deployed, using Puppet. As described by the project\n[website](https://puppetlabs.com/):\n\n> Puppet Open Source is a flexible, customizable framework available under\n> the Apache 2.0 license designed to help system administrators automate the\n> many repetitive tasks they regularly perform. As a declarative, model-based\n> approach to IT automation, it lets you define the desired state - or the\n> \"what\" - of your infrastructure using the Puppet configuration language.\n\n# Usage\n\nThis example will show how to deploy puppet on top of the WordPress+MySQL example.\n\n## Installing WordPress and MySQL\n\n    juju deploy wordpress\n    juju deploy mysql\n    juju add-relation mysql wordpress\n\n## Adding Puppet to WordPress and MySQL\n\n    juju deploy puppet\n    juju add-relation puppet wordpress\n    juju add-relation puppet mysql\n\n## Specifying an external puppetmaster\n\nIf you have an external puppetmaster, note that you will have to use\nsome method to classify nodes automatically.  The yaml from 'juju status'\nshould be parsable into an external node classifier.\n\n    juju set puppet external-puppetmaster=puppet.yourdomain.com\n\n# Setting up and configuring a puppetmaster\n\nFor environments without an existing puppetmaster, first deploy a new one:\n\n    juju deploy puppetmaster\n\nNext, you will need to setup Puppet classes 'mysql' and 'wordpress':\n\n    juju ssh puppetmaster/0\n\nThis next command will result in all nodes being put into a class\nthat is named after their primary service, so the example will have,\nas suggested, two classes, 'mysql' and 'wordpress'.\n\n    juju add-relation puppetmaster:puppetmaster puppet:puppetmaster\n\n# Conclusion\n\nThat should end up with puppet agent running on the WordPress and\nMySQL nodes, pointed at either your external puppetmaster, or the\nnewly deployed puppetmaster.\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}