{
  "name": "chef-server Juju charm",
  "juju_charm_name": "chef-server",
  "revision": "cs:precise/chef-server-5",
  "latest": true,
  "uris": [
    "https://jujucharms.com/chef-server",
    "https://jujucharms.com/chef-server/precise",
    "https://jujucharms.com/chef-server/precise/5",
    "https://api.jujucharms.com/v5/chef-server",
    "https://api.jujucharms.com/v5/precise/chef-server",
    "https://api.jujucharms.com/v5/precise/chef-server-5"
  ],
  "labels": [
    "Juju charm",
    "applications",
    "Binding/Region/Europe/EU",
    "Binding/Region/North America/US",
    "Mode/Executable/Bundle/Juju Charm",
    "Type/Devopsware/Build/Java/Ant",
    "Type/Devopsware/Deployment/Juju"
  ],
  "info_url": "https://jujucharms.com/chef-server",
  "package_url": "https://api.jujucharms.com/v5/precise/chef-server-5/archive",
  "created": "2015-06-17T09:32:00.619Z",
  "updated": "2015-06-17T09:32:00.619Z",
  "description": "Installs a Chef Server.\n\nInstalls a Chef server (Opscode) which can then be used to deploy other\nservices.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "precise",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= precise"
    }
  ],
  "parameters": {
    "chef-version": {
      "type": "string",
      "description": "The version of Chef to install.",
      "default": "0.10",
      "mapping": "charm_option"
    },
    "hook-debug": {
      "type": "string",
      "description": "enable/disable verbose logging in hooks [yes|no]",
      "default": "no",
      "mapping": "charm_option"
    },
    "knife-user": {
      "type": "string",
      "description": "User for whom to install knife.rb file.",
      "default": "ubuntu",
      "mapping": "charm_option"
    },
    "restapi-port": {
      "type": "string",
      "description": "The port for the chef-server REST api.",
      "default": "4000",
      "mapping": "charm_option"
    },
    "solr-port": {
      "type": "string",
      "description": "The chef-server SOLR port.",
      "default": "8983",
      "mapping": "charm_option"
    },
    "webui-port": {
      "type": "string",
      "description": "The port for the chef-server webui.",
      "default": "4040",
      "mapping": "charm_option"
    },
    "webui-pw": {
      "type": "string",
      "description": "Admin password for the chef-server web interface.",
      "default": "",
      "mapping": "charm_option"
    },
    "webui-user": {
      "type": "string",
      "description": "Admin user for the chef-server web interface.",
      "default": "admin",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "http-rest-api",
      "juju_role": "provider",
      "juju_limit": 0
    },
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/http",
      "juju_interface": "http",
      "juju_name": "website",
      "juju_role": "provider",
      "juju_limit": 1
    }
  ],
  "license": "# Overview\n\nChef is a DevOps tool used for configuring cloud services or to streamline the\ntask of configuring a company's internal servers. Chef automatically sets up\nand tweaks the operating systems and programs that run in massive data centers.\n\nChef can run using a client/server model, or on a consolidated configuration\nnamed \"chef-solo\". Chef can be integrated with Cloud-based platforms such as\nRackspace and Amazon EC2. Traditionally, Chef is used to manage Linux but later\nversions support running on Windows as well.\n\nThe user writes \"recipes\" that describe how a Chef manages server applications\n(such as Apache, MySQL, or Hadoop) and how they are to be configured. These\nrecipes describe a series of resources that should be in a particular state -\npackages that should be installed, services that should be running, or files\nthat should be written. Chef makes sure each resource is properly configured,\nand automatically discovers data points of the system.\n\nChef can be used to create clones of Quality Assurance environments,\npre-production environments, and partner preview environments. Once automated,\na blueprint is created for the infrastructure, enabling the user to build, or\nrebuild, automatically in minutes or hours.\n\n\n# Configurable Options\n\nThe 'chef-server' charm allows for certain values to be configured using a \nconfig.yaml file.\n\nMost default values used in the config.yaml file are taken from those used in a\nstandard installation e.g.\n\n    chef-server:\n        chef-version: '0.10'\n        webui-port: '4040'\n        restapi-port: '4000'\n        solr-port: '8983'\n        webui-user: 'admin'\n        webui-pw: 'adminpass'\n        knife-user: 'ubuntu'\n\nIf the 'knife-user' option is set, the value must correspond to an user that\nexists on the install node. If not it is ignored. If it does exist, a knife\nconfiguration profile will be generated for that user which can be used as a\ntemplate for managing a chef repository.\n\nNote that in order to change the username and password for the chef-server\nwebgui, you must do so through the UI itself. The username and password set on\ninstall are just to seed the install. If a password is not provided, one will\nbe auto generated and saved in /var/cache/charms/chef-server/webui-pw.local.\nRoot permissions will be required to read this file.\n\n# Deployment\n\nBootstrap the juju environment (required before any operation can be performed)\n\n    juju bootstrap\n\nCheck that the environment has been bootstrapped successfully.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n\nNow deploy the service\n\n    juju deploy -n 1 --config config.yaml chef-server\n\nCheck the status. After a few minutes the service should be deployed and\nrunning.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n          1:\n            agent-state: running\n            dns-name: <server-ip-address>\n            instance-id: <service-instance-id>\n            instance-state: running\n        services:\n          chef-server:\n            charm: local:precise/chef-server-0\n            exposed: false\n            relations: {}\n            units:\n              chef-server/0:\n                agent-state: started\n                machine: 1\n                public-address: <server-ip-address>\n\nAnd then expose the service so that it is accessible over the internet.\n\n    juju expose chef-server\n\nAnd check status again to see that the requested ports have been exposed.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n          1:\n            agent-state: running\n            dns-name: <server-ip-address>\n            instance-id: <service-instance-id>\n            instance-state: running\n        services:\n          chef-server:\n            charm: local:precise/chef-server-0\n            exposed: true\n            relations: {}\n            units:\n              chef-server/0:\n                agent-state: started\n                machine: 1\n                open-ports:\n                - 4040/tcp\n                - 4000/tcp\n                public-address: <server-ip-address>\n\n\n# Contact Information\n\nAuthor: Edward Hope-Morley <edward.hope-morley@canonical.com>\nReport bugs at: http://bugs.launchpad.net/charms/+source/chef-server/+filebug\nLocation: http://jujucharms.com/charms/chef-server\n\n",
  "readme": "# Overview\n\nChef is a DevOps tool used for configuring cloud services or to streamline the\ntask of configuring a company's internal servers. Chef automatically sets up\nand tweaks the operating systems and programs that run in massive data centers.\n\nChef can run using a client/server model, or on a consolidated configuration\nnamed \"chef-solo\". Chef can be integrated with Cloud-based platforms such as\nRackspace and Amazon EC2. Traditionally, Chef is used to manage Linux but later\nversions support running on Windows as well.\n\nThe user writes \"recipes\" that describe how a Chef manages server applications\n(such as Apache, MySQL, or Hadoop) and how they are to be configured. These\nrecipes describe a series of resources that should be in a particular state -\npackages that should be installed, services that should be running, or files\nthat should be written. Chef makes sure each resource is properly configured,\nand automatically discovers data points of the system.\n\nChef can be used to create clones of Quality Assurance environments,\npre-production environments, and partner preview environments. Once automated,\na blueprint is created for the infrastructure, enabling the user to build, or\nrebuild, automatically in minutes or hours.\n\n\n# Configurable Options\n\nThe 'chef-server' charm allows for certain values to be configured using a \nconfig.yaml file.\n\nMost default values used in the config.yaml file are taken from those used in a\nstandard installation e.g.\n\n    chef-server:\n        chef-version: '0.10'\n        webui-port: '4040'\n        restapi-port: '4000'\n        solr-port: '8983'\n        webui-user: 'admin'\n        webui-pw: 'adminpass'\n        knife-user: 'ubuntu'\n\nIf the 'knife-user' option is set, the value must correspond to an user that\nexists on the install node. If not it is ignored. If it does exist, a knife\nconfiguration profile will be generated for that user which can be used as a\ntemplate for managing a chef repository.\n\nNote that in order to change the username and password for the chef-server\nwebgui, you must do so through the UI itself. The username and password set on\ninstall are just to seed the install. If a password is not provided, one will\nbe auto generated and saved in /var/cache/charms/chef-server/webui-pw.local.\nRoot permissions will be required to read this file.\n\n# Deployment\n\nBootstrap the juju environment (required before any operation can be performed)\n\n    juju bootstrap\n\nCheck that the environment has been bootstrapped successfully.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n\nNow deploy the service\n\n    juju deploy -n 1 --config config.yaml chef-server\n\nCheck the status. After a few minutes the service should be deployed and\nrunning.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n          1:\n            agent-state: running\n            dns-name: <server-ip-address>\n            instance-id: <service-instance-id>\n            instance-state: running\n        services:\n          chef-server:\n            charm: local:precise/chef-server-0\n            exposed: false\n            relations: {}\n            units:\n              chef-server/0:\n                agent-state: started\n                machine: 1\n                public-address: <server-ip-address>\n\nAnd then expose the service so that it is accessible over the internet.\n\n    juju expose chef-server\n\nAnd check status again to see that the requested ports have been exposed.\n\n    juju status\n\n        machines:\n          0:\n            agent-state: running\n            dns-name: <bootstrap-instance-ip-address>\n            instance-id: <bootstrap-instance-id>\n            instance-state: running\n          1:\n            agent-state: running\n            dns-name: <server-ip-address>\n            instance-id: <service-instance-id>\n            instance-state: running\n        services:\n          chef-server:\n            charm: local:precise/chef-server-0\n            exposed: true\n            relations: {}\n            units:\n              chef-server/0:\n                agent-state: started\n                machine: 1\n                open-ports:\n                - 4040/tcp\n                - 4000/tcp\n                public-address: <server-ip-address>\n\n\n# Contact Information\n\nAuthor: Edward Hope-Morley <edward.hope-morley@canonical.com>\nReport bugs at: http://bugs.launchpad.net/charms/+source/chef-server/+filebug\nLocation: http://jujucharms.com/charms/chef-server\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}