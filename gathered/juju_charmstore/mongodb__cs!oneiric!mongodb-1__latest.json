{
  "name": "mongodb Juju charm",
  "juju_charm_name": "mongodb",
  "revision": "cs:oneiric/mongodb-1",
  "latest": true,
  "uris": [
    "https://jujucharms.com/mongodb",
    "https://jujucharms.com/mongodb/oneiric",
    "https://jujucharms.com/mongodb/oneiric/1",
    "https://api.jujucharms.com/v5/mongodb",
    "https://api.jujucharms.com/v5/oneiric/mongodb",
    "https://api.jujucharms.com/v5/oneiric/mongodb-1"
  ],
  "labels": [
    "Juju charm",
    "Type/Middleware/Runtime/Java",
    "Binding/Provider/HP",
    "Binding/Region/North America/US",
    "Mode/Guide/Video",
    "Mode/Executable/Bundle/Juju Charm",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Devopsware/Deployment/Juju",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Store/Document-oriented/MongoDB"
  ],
  "info_url": "https://jujucharms.com/mongodb",
  "package_url": "https://api.jujucharms.com/v5/oneiric/mongodb-1/archive",
  "created": "2015-06-17T09:34:17.505Z",
  "updated": "2015-06-17T09:34:17.505Z",
  "description": "An object/document-oriented database (metapackage)\n\nMongoDB is a high-performance, open source, schema-free document-\noriented  data store that's easy to deploy, manage and use. It's\nnetwork accessible, written in C++ and offers the following features :\n* Collection oriented storage - easy storage of object-     style data\n* Full index support, including on inner objects   * Query profiling\n* Replication and fail-over support   * Efficient storage of binary\ndata including large     objects (e.g. videos)   * Auto-sharding for\ncloud-level scalability (Q209) High performance, scalability, and\nreasonable depth of functionality are the goals for the project.  This\nis a metapackage that depends on all the mongodb parts.\n",
  "maintainer": {
    "name": "charmers"
  },
  "juju_charm_subordinate": false,
  "juju_charm_series": "oneiric",
  "juju_charm_owner": "charmers",
  "requires": [
    {
      "kind": "host",
      "label": "Infrastructure/Operating System/Linux/Ubuntu",
      "version": "= oneiric"
    }
  ],
  "parameters": {
    "default_port": {
      "type": "int",
      "description": "Default MongoDB port",
      "default": 27017,
      "mapping": "charm_option"
    },
    "replicaset": {
      "type": "string",
      "description": "Name of the replica set",
      "default": "myset",
      "mapping": "charm_option"
    },
    "replicaset_master": {
      "type": "string",
      "description": "Replica Set master ( optional ). Possible values are 'auto' for automatic detection based on install time or 'host:port' to connect to 'host' on 'port' and register as a member.",
      "default": "auto",
      "mapping": "charm_option"
    },
    "web_admin_ui": {
      "type": "string",
      "description": "Replica Set Admin UI ( yes / no )",
      "default": "yes",
      "mapping": "charm_option"
    }
  },
  "provides": [
    {
      "kind": "peer",
      "uri": "https://jujucharms.com/provides/mongodb",
      "juju_interface": "mongodb",
      "juju_name": "database",
      "juju_role": "provider",
      "juju_limit": 0
    }
  ],
  "juju_peers": {
    "replica-set": {
      "Name": "replica-set",
      "Role": "peer",
      "Interface": "mongodb-replica-set",
      "Optional": false,
      "Limit": 1,
      "Scope": "global"
    }
  },
  "license": "Introduction\n============\n\nMongoDB is a high-performance, open source, schema-free document-oriented\ndata store that's easy to deploy, manage and use.\nIt's network accessible, written in C++ and offers the following features:\n\n1. Collection oriented storage - easy storage of object-style data\n1. Full index support, including on inner objects\n2. Query profiling\n3. Replication and fail-over support\n4. Efficient storage of binary data including large objects (e.g. videos)\n5. Auto-sharding for cloud-level scalability (Q209) High performance,\n   scalability, and  reasonable depth of functionality are the goals for\n   the project.  This is a metapackage that depends on all the mongodb parts.\n\n\nInstallation\n============\n\nGet the charm-tools and bzr packages\n1. sudo add-apt-repository ppa:juju/pkgs\n2. sudo apt-get update\n3. sudo apt-get install charm-tools bzr\n\n\nSet up the charm\n================\n\n1. mkdir -p ~/tmp/juju/charms/oneiric\n2. cd ~/tmp/juju/charms/oneiric\n3. charm get mongodb\n\n\nReview the configurable options\n===============================\n\nThe MongoDB charm allows for certain values to be configurable via the config.yaml file.\n\nA sample of the default settings of the config.yaml file at the time of writing are as follows:\n\noptions:\n  replicaset:\n    default: myset\n    type: string\n    description: Name of the replica set\n  web_admin_ui:\n    default: yes\n    type: string\n    description: Replica Set Admin UI ( yes / no )\n  replicaset_master:\n    default: auto\n    type: string\n    description: Replica Set master ( optional ). Possible values are 'auto' for automatic\n                 detection based on install time or 'host:port' to connect to 'host' on\n                 'port' and register as a member.\n\nWhere:\n\n1. replicaset\n   - ie: myreplicaset\n   - Each replicaset has a unique name to distinguish it’s members from other replicasets available in the network.\n   - The default value of myset should be fine for most single cluster scenarios.\n\n2. web_admin_ui\n   - MongoDB comes with a basic but very informative web user interface that provides health\n     and status information on the database node as well as the cluster.\n   - The default value of yes will start the Admin web UI on port 28017.\n\n3. replicaset_master\n   - If this node is going to be joining an existing replicaset, you can specify a member of that cluster\n     ( preferably the master node ) so we can join the existing replicaset.\n   - The value should be in the form of host[:port]\n   - ie:  hostname ( will connect to hostname on the default port of 27017 )\n   - ie:  hostname:port  ( will connect to hostname on port number <port> )\n\n\nDeployment\n==========\n\nSingle Node\n-----------\n\nDeploy the first MongoDB instance\n\n1. cd ~/tmp/juju/charms\n2. juju deploy --repository . local:oneiric/mongodb\n3. juju expose mongodb\n\nReplica Sets\n------------\n\nDeploy the first MongoDB instance\n\n1. cd ~/tmp/juju/charms\n2. juju deploy --repository . local:oneiric/mongodb\n3. juju expose mongodb\n\nYour deployment should look similar to this ( juju status ):\nmachines:\n 0:\n        dns-name: ec2-50-19-46-207.compute-1.amazonaws.com\n        instance-id: i-3817fc5a\n        instance-state: running\n        state: running\n 1:\n        dns-name: ec2-50-17-73-255.compute-1.amazonaws.com\n        instance-id: i-90c822f2\n        instance-state: running\n        state: running\nservices:\n mongodb:\n        charm: local:oneiric/mongodb-17\n        exposed: true\n        relations:\n         replica-set: mongodb\n        units:\n         mongodb/0:\n           machine: 1\n           open-ports:\n           - 27017/tcp\n           - 28017/tcp\n           public-address: ec2-50-17-73-255.compute-1.amazonaws.com\n           relations:\n             replica-set:\n               state: up\n           state: started\n\nIn addition, the MongoDB web interface should also be accessible via the services’\npublic-address and port 28017 ( ie: http://ec2-50-17-73-255.compute-1.amazonaws.com:28017 ).\n\n(Optional)Change the replicaset name\n------------------------------------\n\n1. juju set mongodb replicaset=<new_replicaset_name>\n\nAdd one more nodes to your replicaset\n-------------------------------------\n\n1. juju add-unit mongodb\n\n\nAdd multiple nodes to your replicaset\n-------------------------------------\n\n1. juju add-unit mongodb -n5\n\n\nWe now have a working MongoDB replica-set.\n\n\nTroubleshooting\n===============\n\n1. If your master/slave/replicaset deployment is not updating correctly, check the log files at /var/log/mongodb/mongodb.log to see if there is an obvious reason ( port not open etc.).\n2. Ensure that TCP port 27017 is accessible from all of the nodes in the deployment.\n3. If you are trying to access your MongoDB instance from outside your deployment, ensure that the service has been exposed ( juju expose mongodb )\n4. Make sure that the mongod process is running ( ps -ef | grep mongo ).\n5. Try restarting the database ( restart mongodb )\n6. If all else fails, remove the data directory on the slave ( rm -fr /var/log/mongodb/data/* ) and restart the mongodb-slave daemon ( restart mongodb ).\n7. The MongoDB website ( http://www.mongodb.org ) has a very good documentation section ( http://www.mongodb.org/display/DOCS/Home )\n\n\n",
  "readme": "Introduction\n============\n\nMongoDB is a high-performance, open source, schema-free document-oriented\ndata store that's easy to deploy, manage and use.\nIt's network accessible, written in C++ and offers the following features:\n\n1. Collection oriented storage - easy storage of object-style data\n1. Full index support, including on inner objects\n2. Query profiling\n3. Replication and fail-over support\n4. Efficient storage of binary data including large objects (e.g. videos)\n5. Auto-sharding for cloud-level scalability (Q209) High performance,\n   scalability, and  reasonable depth of functionality are the goals for\n   the project.  This is a metapackage that depends on all the mongodb parts.\n\n\nInstallation\n============\n\nGet the charm-tools and bzr packages\n1. sudo add-apt-repository ppa:juju/pkgs\n2. sudo apt-get update\n3. sudo apt-get install charm-tools bzr\n\n\nSet up the charm\n================\n\n1. mkdir -p ~/tmp/juju/charms/oneiric\n2. cd ~/tmp/juju/charms/oneiric\n3. charm get mongodb\n\n\nReview the configurable options\n===============================\n\nThe MongoDB charm allows for certain values to be configurable via the config.yaml file.\n\nA sample of the default settings of the config.yaml file at the time of writing are as follows:\n\noptions:\n  replicaset:\n    default: myset\n    type: string\n    description: Name of the replica set\n  web_admin_ui:\n    default: yes\n    type: string\n    description: Replica Set Admin UI ( yes / no )\n  replicaset_master:\n    default: auto\n    type: string\n    description: Replica Set master ( optional ). Possible values are 'auto' for automatic\n                 detection based on install time or 'host:port' to connect to 'host' on\n                 'port' and register as a member.\n\nWhere:\n\n1. replicaset\n   - ie: myreplicaset\n   - Each replicaset has a unique name to distinguish it’s members from other replicasets available in the network.\n   - The default value of myset should be fine for most single cluster scenarios.\n\n2. web_admin_ui\n   - MongoDB comes with a basic but very informative web user interface that provides health\n     and status information on the database node as well as the cluster.\n   - The default value of yes will start the Admin web UI on port 28017.\n\n3. replicaset_master\n   - If this node is going to be joining an existing replicaset, you can specify a member of that cluster\n     ( preferably the master node ) so we can join the existing replicaset.\n   - The value should be in the form of host[:port]\n   - ie:  hostname ( will connect to hostname on the default port of 27017 )\n   - ie:  hostname:port  ( will connect to hostname on port number <port> )\n\n\nDeployment\n==========\n\nSingle Node\n-----------\n\nDeploy the first MongoDB instance\n\n1. cd ~/tmp/juju/charms\n2. juju deploy --repository . local:oneiric/mongodb\n3. juju expose mongodb\n\nReplica Sets\n------------\n\nDeploy the first MongoDB instance\n\n1. cd ~/tmp/juju/charms\n2. juju deploy --repository . local:oneiric/mongodb\n3. juju expose mongodb\n\nYour deployment should look similar to this ( juju status ):\nmachines:\n 0:\n        dns-name: ec2-50-19-46-207.compute-1.amazonaws.com\n        instance-id: i-3817fc5a\n        instance-state: running\n        state: running\n 1:\n        dns-name: ec2-50-17-73-255.compute-1.amazonaws.com\n        instance-id: i-90c822f2\n        instance-state: running\n        state: running\nservices:\n mongodb:\n        charm: local:oneiric/mongodb-17\n        exposed: true\n        relations:\n         replica-set: mongodb\n        units:\n         mongodb/0:\n           machine: 1\n           open-ports:\n           - 27017/tcp\n           - 28017/tcp\n           public-address: ec2-50-17-73-255.compute-1.amazonaws.com\n           relations:\n             replica-set:\n               state: up\n           state: started\n\nIn addition, the MongoDB web interface should also be accessible via the services’\npublic-address and port 28017 ( ie: http://ec2-50-17-73-255.compute-1.amazonaws.com:28017 ).\n\n(Optional)Change the replicaset name\n------------------------------------\n\n1. juju set mongodb replicaset=<new_replicaset_name>\n\nAdd one more nodes to your replicaset\n-------------------------------------\n\n1. juju add-unit mongodb\n\n\nAdd multiple nodes to your replicaset\n-------------------------------------\n\n1. juju add-unit mongodb -n5\n\n\nWe now have a working MongoDB replica-set.\n\n\nTroubleshooting\n===============\n\n1. If your master/slave/replicaset deployment is not updating correctly, check the log files at /var/log/mongodb/mongodb.log to see if there is an obvious reason ( port not open etc.).\n2. Ensure that TCP port 27017 is accessible from all of the nodes in the deployment.\n3. If you are trying to access your MongoDB instance from outside your deployment, ensure that the service has been exposed ( juju expose mongodb )\n4. Make sure that the mongod process is running ( ps -ef | grep mongo ).\n5. Try restarting the database ( restart mongodb )\n6. If all else fails, remove the data directory on the slave ( rm -fr /var/log/mongodb/data/* ) and restart the mongodb-slave daemon ( restart mongodb ).\n7. The MongoDB website ( http://www.mongodb.org ) has a very good documentation section ( http://www.mongodb.org/display/DOCS/Home )\n\n\n",
  "readme_name": "README.md",
  "gatherbase_origin": "juju-charmstore"
}