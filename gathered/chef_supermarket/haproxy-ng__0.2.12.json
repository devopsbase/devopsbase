{
  "name": "haproxy-ng Chef cookbook",
  "chef_cookbook_name": "haproxy-ng",
  "revision": "0.2.12",
  "uris": [
    "https://supermarket.chef.io/cookbooks/haproxy-ng",
    "https://supermarket.chef.io/cookbooks/haproxy-ng/download",
    "https://supermarket.chef.io/cookbooks/haproxy-ng/versions/0.2.12",
    "https://supermarket.chef.io/cookbooks/haproxy-ng/versions/0.2.12/download",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy-ng/versions/0.2.12",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy-ng",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy-ng/versions/0.2.12/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/haproxy-ng",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/haproxy-ng/versions/0.2.12/download",
  "deprecated": false,
  "created": "2015-02-03T14:16:00.097Z",
  "updated": "2015-12-04T23:03:47.618Z",
  "description": "modern, resource-driven cookbook for managing haproxy",
  "maintainer": {
    "name": "nathwill",
    "email": "nath.e.will@gmail.com"
  },
  "license": "apache2",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 11,
  "downloads_count": 9340534,
  "downloads_count_revision": 170379,
  "repository_url": "https://github.com/nathwill/chef-haproxy-ng",
  "issues_url": "https://github.com/nathwill/chef-haproxy-ng/issues",
  "chef_source_url": "https://github.com/nathwill/chef-haproxy-ng",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# haproxy-ng cookbook  [![Build Status](https://travis-ci.org/nathwill/chef-haproxy-ng.svg?branch=master)](https://travis-ci.org/nathwill/chef-haproxy-ng)\n\nA resource-driven cookbook for configuring [HAProxy](http://www.haproxy.org/).\n\nCookbook builds on 2 core resources:\n\n- `haproxy_instance`: the \"parent\" resource, which maps to a complete configuration and (probably) a running haproxy daemon\n- `haproxy_proxy`: the \"core\" proxy resource, which maps to a specific proxy\n\nAdditional resources `haproxy_peers`, `haproxy_userlist`, `haproxy_frontend`, \n`haproxy_backend`, `haproxy_defaults`, and `haproxy_listen` extend the `haproxy_proxy` \nresource with additional validation for common configuration keywords for their respective \nproxy types.\n\nSuggested background reading:\n\n- [The Fine Manual](http://cbonte.github.io/haproxy-dconv/configuration-1.5.html)\n- This README, the modules in `libraries/00_helpers.rb`, and the individual resources/providers\n- the test target and example wrapper cookbook 'test/fixtures/cookbooks/my-lb'\n\n## Recipes\n\n### haproxy-ng::default\n\nConfigures a default instance, 'haproxy_instance[haproxy]', and corresponding \n'haproxy' service via the `config`, `tuning`, and `proxies` cookbook attributes \n(which are mapped onto the corresponding resource attributes).\n\nThis recipe also provides a useful example of using the provided helper, \n`Haproxy::Helpers#proxy`, to map a list of proxies to their corresponding \nresources in the resource collection. It also illustrates the recommended \npattern of proxying service reloads through a validating execute resource. \n\nSee wrapper cookbook example at 'test/fixtures/cookbooks/my-lb'.\n\n### haproxy-ng::install\n\nInstalls haproxy via the `node['haproxy']['install_method']` method.\nSupports 'package', 'source', and 'ppa'.\n\n### haproxy-ng::service\n\nConfigures a default-named (\"haproxy\") service resource.\n \nUseful for typical installs running a single haproxy daemon under the default \n'haproxy' service name. Service providers, or those running multiple haproxy \ndaemons on a single host will most likely want to configure a service instance \nper haproxy_instance.\n\n## Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>install_method</td>\n      <td>\n        One of: 'package', 'source', 'ppa'\n      </td>\n      <td><code>package</code></td>\n    </tr>\n    <tr>\n      <td>proxies</td>\n      <td>\n        Array of proxy names for the default haproxy_instance[haproxy].\n        Useful when used in conjunction with a wrapper cookbook that\n        includes the default recipe.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of global configuration keywords passed to the `config` attribute\n        of the haproxy_instance[haproxy] resource in the default recipe.\n      </td>\n      <td><code>See `attributes/default.rb`</code></td>\n    </tr>\n    <tr>\n      <td>tuning</td>\n      <td>\n        Array of global configuration keywords passed to the `tuning` attribute\n        of the haproxy_instance[haproxy] resource in the default recipe.\n      </td>\n      <td><code>See `attributes/default.rb`</code></td>\n    </tr>\n  </tbody>\n</table>\n\n## Resources\n\n### haproxy_instance\n\nThe \"parent\" resource. Maps 1-to-1 with a generated haproxy config file, \nand most likely to a running service.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of global keywords relevant to process management.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>['daemon']</code></td>\n    </tr>\n    <tr>\n      <td>tuning</td>\n      <td>\n        Array of global keywords relevant to performance tuning.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>['maxconn 256']</code></td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>\n        Global keyword string relevant to debugging (either 'debug', or 'quiet').\n      </td>\n      <td><code>app</code></td>\n    </tr>\n    <tr>\n      <td>proxies</td>\n      <td>\n        Array of Chef::Resource::HaproxyProxy instances\n        (`haproxy_{peers,userlist,defaults,frontend,backend,listen}` included).\n        See the `default` recipe for an example of using the provided\n        `Haproxy::Helpers#proxy` method to generate this list from the\n        resource_collection.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_proxy\n\nThe simplest proxy representation and base class for the other\nproxy resources (peers, userlist, defaults, frontend, backend, listen).\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>type</td>\n      <td>\n        String representing the proxy type. One of: \n        defaults, frontend, backend, listen, peers, userlist.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of proxy keywords, validated against specified proxy type.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_peers\n\nMaps to a peers block in haproxy configuration. Not actually a proxy,\nbut treating it like one is useful for code reusability. Don't judge me.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>peers</td>\n      <td>\n        Array of Hashes. Hashes require keys 'name', 'config'.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of peers keywords, validated against valid peers keywords.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_userlist\n\nMaps to a userlist block in haproxy configuration. Also not actually a proxy, \nas such.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>groups</td>\n      <td>\n        Array of Hashes. Hashes require keys 'name', 'config.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>users</td>\n      <td>\n        Array of Hashes. Hashes require keys 'name', 'config'.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of userlist keywords, validated against valid userlist keywords.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n\n### haproxy_defaults\n\nMaps to a 'defaults' block in haproxy configuration. Convention\nsuggests that resource names be capitalized (e.g. haproxy_defaults[HTTP]).\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>mode</td>\n      <td>\n        String specifying listener mode. One of: http, tcp, health.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>default_backend</td>\n      <td>\n        String specifying argument to `default_backend` keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>balance</td>\n      <td>\n        String specifying the desired load-balancing algorithm.\n        See `BALANCE_ALGORITHMS` in libraries/00_helpers.rb or haproxy\n        manual for permissible `balance` keyword arguments.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>source</td>\n      <td>\n        `String` specifying arguments to the 'source' keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of proxy keywords, validated against 'defaults' proxy type.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_frontend\n\nMaps to a frontend block in the instance configuration, \nand typically to one or more listening ports or sockets.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>mode</td>\n      <td>\n        String specifying listener mode. One of: http, tcp, health.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>acls</td>\n      <td>\n        Array of hashes. Each hash must contain keys `name`, and `criterion`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        A `String` describing the related proxy.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>bind</td>\n      <td>\n        `String` or `Array` of strings containing arguments to `bind` keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>default_backend</td>\n      <td>\n        String specifying argument to `default_backend` keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>use_backends</td>\n      <td>\n        Array of Hashes mapping to a list of `use_backend` directives.\n        Each hash is verified to have keys `backend` and `condition`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of proxy keywords, validated against 'frontend' proxy type.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_backend\n\nMaps to a backend configuration block in haproxy configuration.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>mode</td>\n      <td>\n        String specifying proxy mode. One of: http, tcp, health.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>acls</td>\n      <td>\n        Array of hashes. Each hash must contain keys `name`, and `criterion`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        A `String` describing the related proxy.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>balance</td>\n      <td>\n        String specifying the desired load-balancing algorithm.\n        See `BALANCE_ALGORITHMS` in libraries/00_helpers.rb or haproxy\n        manual for permissible `balance` keyword arguments.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>source</td>\n      <td>\n        `String` specifying arguments to the 'source' keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>servers</td>\n      <td>\n        Array of `Hashes`. Each `Hash` must contain keys `name`, `address`, `port`,\n        and optionally `config`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of proxy keywords, validated against 'backend' proxy type.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### haproxy_listen\n\nMaps to a listen configuration block, combines frontend and backend config\nblocks into a single proxy. Less flexible, but more concise. Typically used\nfor tcp-mode proxies with a 1:1 frontend:backend mapping.\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>mode</td>\n      <td>\n        String specifying proxy mode. One of: http, tcp, health.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>acls</td>\n      <td>\n        Array of hashes. Each hash must contain keys `name`, and `criterion`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        A `String` describing the related proxy.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>balance</td>\n      <td>\n        String specifying the desired load-balancing algorithm.\n        See `BALANCE_ALGORITHMS` in libraries/00_helpers.rb or haproxy\n        manual for permissible `balance` keyword arguments.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>source</td>\n      <td>\n        `String` specifying arguments to the 'source' keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>servers</td>\n      <td>\n        Array of `Hashes`. Each `Hash` must contain keys `name`, `address`, `port`,\n        and optionally `config`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>bind</td>\n      <td>\n        `String` or `Array` of strings containing arguments to `bind` keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>default_backend</td>\n      <td>\n        String specifying argument to `default_backend` keyword.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>use_backends</td>\n      <td>\n        Array of `Hash`es mapping to a list of `use_backend` directives.\n        Each hash is verified to have keys `backend` and `condition`.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n    <tr>\n      <td>config</td>\n      <td>\n        Array of proxy keywords, validated against 'backend' proxy type.\n        See `libraries/00_helpers.rb` or haproxy manual for permissible keywords.\n      </td>\n      <td><code>[]</code></td>\n    </tr>\n  </tbody>\n</table>\n",
  "requires": [
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}