{
  "name": "noosfero Chef cookbook",
  "chef_cookbook_name": "noosfero",
  "revision": "2.3.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/noosfero",
    "https://supermarket.chef.io/cookbooks/noosfero/download",
    "https://supermarket.chef.io/cookbooks/noosfero/versions/2.3.3",
    "https://supermarket.chef.io/cookbooks/noosfero/versions/2.3.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/noosfero/versions/2.3.3",
    "https://supermarket.chef.io/api/v1/cookbooks/noosfero",
    "https://supermarket.chef.io/api/v1/cookbooks/noosfero/versions/2.3.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Hardware/Network",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/noosfero",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/noosfero/versions/2.3.3/download",
  "deprecated": false,
  "created": "2014-05-14T03:17:29.000Z",
  "updated": "2015-10-07T00:43:00.098Z",
  "description": "Install/configure Noosfero social-economic network",
  "maintainer": {
    "name": "brauliobo",
    "email": "braulio@eita.org.br"
  },
  "license": "GPLv3+",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 43680723,
  "downloads_count_revision": 1129723,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "noosfero Cookbook\n========================\nInstall/configure Noosfero social-economic network (see http://noosfero.org) \n\nAttributes\n----------\n#### noosfero::default\n\nThe default recipe runs others recipes according to the settings\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:service_name]</tt>  | The Noosfero's service name, which defines the init.d script name and paths | <tt>\"noosfero\"</tt> |\n| <tt>node[:noosfero][:rails_env]</tt> | The Rails environment to be used | <tt>\"production\"</tt> |\n| <tt>node[:noosfero][:rvm_load]</tt> | The ruby string to be load (e.g. \"ree@noosfero\") | <tt>\"system\"</tt> |\n\n#### noosfero::install\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:install_from]</tt> | What is used to install noosfero: \"git\" (default) to fetch code from git and \"package\" to install noosfero from debian repository | <tt>\"git\"</tt> |\n\n#### noosfero::git\\_install (on install\\_from == \"git\")\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:user]</tt> | The user to create and to run noosfero | <tt>default[:noosfero][:service_name]</tt> |\n| <tt>node[:noosfero][:group]</tt> | The group to create and to run noosfero | tt>default[:noosfero][:service_name]</tt> |\n| <tt>node[:noosfero][:git_url]</tt> | The git repo containing Noosfero to be used | tt>https://gitlab.com/noosfero/noosfero.git</tt> |\n| <tt>node[:noosfero][:git_revision]</tt> | The branch, tag or commit to be used | <tt>\"stable\"</tt> |\n| <tt>node[:noosfero][:upgrade_script]</tt> | A script to be run on git sync | <tt>''</tt> |\n|  Paths  |\n| <tt>node[:noosfero][:path]</tt> | Set the path to clone the git repo to be the base path for code, log, tmp and others noosfero directories | <tt>nil</tt> (use default system dirs, see below) |\n| <tt>node[:noosfero][:code_path]</tt> | Overwrite the code's path | <tt>node[:noosfero][:path]</tt> (with node[:noosfero][:path]) or <tt>\"/usr/share/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n| <tt>node[:noosfero][:data_path]</tt> | Overwrite the data path | <tt>node[:noosfero][:path]</tt> (with node[:noosfero][:path]) or <tt>\"/var/lib/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n| <tt>node[:noosfero][:config_path]</tt> | Overwrite the config path | <tt>\"#{node[:noosfero][:path]}/config\"</tt> (with node[:noosfero][:path]) or <tt>\"/etc/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n| <tt>node[:noosfero][:log_path]</tt> | Overwrite the log path | <tt>\"#{node[:noosfero][:path]}/log\"</tt> (with node[:noosfero][:path]) or <tt>\"/var/log/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n| <tt>node[:noosfero][:run_path]</tt> | Overwrite the run path | <tt>\"#{node[:noosfero][:path]}/run\"</tt> (with node[:noosfero][:path]) or <tt>\"/var/run/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n| <tt>node[:noosfero][:tmp_path]</tt> | Overwrite the tmp path | <tt>\"#{node[:noosfero][:path]}/tmp\"</tt> (with node[:noosfero][:path]) or <tt>\"/var/tmp/#{service_name}\"</tt> (without node[:noosfero][:path]) |\n\n\n#### noosfero::package\\_install (on install\\_from == \"package\")\n\nInstall noosfero using the Colivre's apt repository\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n|  |  |  |\n\n#### noosfero::dependencies (on install\\_from == \"git\")\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:dependencies_with]</tt> | How to install dependencies: \"quick_start\", \"bundler\" or \"packages\" | <tt>\"quick_start\"</tt> |\n\n#### noosfero::database (on install\\_from == \"git\")\n\nGenerate Rails' database.yml\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:db][:name]</tt> | Database name | <tt>node[:noosfero][:service_name]</tt> |\n| <tt>node[:noosfero][:db][:hostname]</tt> | Database hostname | <tt>\"locahost\"</tt> |\n| <tt>node[:noosfero][:db][:port]</tt> | Database port | <tt>\"\"</tt> |\n| <tt>node[:noosfero][:db][:username]</tt> | Database username | <tt>node[:noosfero][:user]</tt> |\n| <tt>node[:noosfero][:db][:password]</tt> | Database password | <tt>nil</tt> |\n| <tt>node[:noosfero][:db][:create_from_dump]</tt> | Load speficied dump file after database creation (if it don't exist yet) | <tt>nil</tt> |\n\n#### noosfero::environment (on install\\_from == \"git\")\n\nCreate, if there isn't any default yet, a default Noosfero Environment, after database creation.\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:environment]</tt> | A hash with the config of the default environment. If nil, skip environment check and creation | <tt>nil</tt> |\n| <tt>node[:noosfero][:environment][:name]</tt> | The name of the environment. This is used in all pages' &lttitle&gt | <tt>-</tt> |\n| <tt>node[:noosfero][:environment][:domain]</tt> | The default domain associated with the environment. | <tt>-</tt> |\n| <tt>node[:noosfero][:environment][:default_language]</tt> | Set default language | <tt>-</tt> |\n\n#### noosfero::settings\n\nWrite noosfero.yml settings file. Use key/value pairs from `node[:noosfero][:settings]` hash.\n\n#### noosfero::plugins\n\nEnable and configure plugins.\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:plugins]</tt> | An array of plugins to enable with script/noosfero-plugins | <tt>[]</tt> |\n| <tt>node[:noosfero][:plugins_settings]</tt> | Configure each plugin' settings | See <tt>attributes/default.rb</tt> |\n\n#### noosfero::server\n\nConfigure proxy and backend (rails app) servers\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:server][:proxy]</tt> | Proxy server to use. Choose between nginx or apache | <tt>nginx</tt> |\n| <tt>node[:noosfero][:server][:backend]</tt> | Rails application server. Choose between unicorn and thin | <tt>thin</tt> |\n| <tt>node[:noosfero][:server][:workers]</tt> | Number of workers to start | <tt>4</tt> |\n| <tt>node[:noosfero][:server][:port]</tt> | Backend port | <tt>50000</tt> |\n| <tt>node[:noosfero][:server][:timeout]</tt> | Backend timeout | <tt>60</tt> if backend is nginx and <tt>1200</tt> if apache is used |\n| <tt>node[:noosfero][:server][:proxy_port]</tt> | Proxy port to listen | <tt>node[:nginx][:listen_ports].first</tt> or <tt>node[:apache][:listen_ports].first</tt> |\n\n#### noosfero::cache\n\nConfigure cache options\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:cache][:server]</tt> | Cache server to use. Supports `varnish` or set to empty to disable | <tt>varnish</tt> |\n| <tt>node[:noosfero][:cache][:backend_port]</tt> | Backend port | <tt>node[:noosfero][:server][:proxy_port]</tt> |\n\n#### noosfero::logrotate\n\nRotate logs\n\n| Attribute | Description | Default |\n| --------  | --------    | ------- |\n| <tt>node[:noosfero][:logrotate][:rotate]</tt> | Number of maximum rotated logs | <tt>100_000</tt> |\n| <tt>node[:noosfero][:logrotate][:frequency]</tt> | Frequency to rotate logs | <tt>daily</tt> |\n\nUsage\n-----\n\nJust include `noosfero` in your node's `run_list`, the below configuration is an example:\n\n```json\n{\n  \"rvm\": {\n    \"user_installs\": [\n      {\n        \"user\": \"noosfero\",\n        \"rubies\": [ \"ree\" ],\n        \"default_ruby\": \"ree\",\n        \"gems\": {\n          \"ree@noosfero\": []\n        }\n      }\n    ]\n  },\n\n  \"postgresql\": {\n    \"version\": \"9.3\",\n    \"password\": {\n      // needed for chef-solo\n      \"postgres\": \"iqHDDo1o\"\n    },\n  },\n\n  \"memcached\": {\n    \"memory\": 128,\n    \"listen\": \"127.0.0.1\"\n  },\n\n  \"varnish\": {\n    \"version\": \"2.1\",\n    \"listen_address\": \"0.0.0.0\",\n    \"listen_port\": 80,\n    \"storage\": \"file\",\n    \"storage_size\": \"1G\",\n    \"vcl_cookbook\": \"noosfero\"\n  },\n\n  \"nginx\": {\n    \"listen_ports\": [81],\n    \"keepalive_timeout\": 20,\n    \"default_site_enabled\": false\n  },\n\n  \"apache\": {\n    \"version\": \"2.4\",\n    \"listen_addresses\": [\"127.0.0.1\"],\n    \"listen_ports\": [82],\n    \"keepalivetimeout\": 20,\n    \"keepaliverequests\": 1000\n  },\n\n  \"noosfero\": {\n    \"service_name\": \"noosfero\",\n    \"path\": \"/home/braulio/escambo.org.br\",\n    \"user\": \"braulio\",\n    \"group\": \"braulio\",\n\n    \"git_url\": \"https://github.com/ESCAMBO/noosfero-ecosol.git\",\n    \"git_revision\": \"master\",\n\n    \"dependencies_with\": \"bundler\",\n    \"rvm_load\": \"ree@noosfero\",\n\n    \"server_name\": \"escambo.org.br\",\n    \"custom_domains\": [\n      \"escambo.org\"\n    ],\n\n    \"server\": {\n      \"proxy\": \"nginx\",\n      \"backend\": \"unicorn\",\n      \"workers\": 1\n    },\n    \"cache\": {\n      \"server\": \"varnish\"\n    },\n\n    \"db\": {\n      \"name\": \"noosfero_escambo.org.br_production\",\n      \"port\": 5433\n    },\n\n    \"environment\": {\n      \"name\": \"ESCAMBO\",\n      \"domain\": \"escambo.org.br\"\n    },\n    \"plugins\": [\"cms_learning\", \"currency\", \"escambo\", \"evaluation\", \"exchange\", \"sniffer\", \"solr\"],\n\n    \"settings\": {\n      \"exception_recipients\": [\"alantygel@gmail.com\", \"brauliobo@gmail.com\"]\n    },\n\n    \"plugin_settings\": {\n      \"solr\": {\n        \"port\": 8983,\n        \"memory\": 128\n      }\n\n    }\n  }\n  \"run_list\": [\n    \"recipe[noosfero]\"\n  ]\n}\n```\n\nTODO\n----\n- Support others besides RVM (rbenv), by replacing rvm_shell with a generic noosfero_shell\n\nContributing\n------------\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nAfter 3 consistent patches you become a commiter :)\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/rvm",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/postfix",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/database",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/postgresql",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/varnish",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/memcached",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/logrotate",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/backup",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}