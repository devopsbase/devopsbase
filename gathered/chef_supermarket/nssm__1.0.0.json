{
  "name": "nssm Chef cookbook",
  "chef_cookbook_name": "nssm",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/nssm",
    "https://supermarket.chef.io/cookbooks/nssm/download",
    "https://supermarket.chef.io/cookbooks/nssm/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/nssm/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/nssm/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/nssm",
    "https://supermarket.chef.io/api/v1/cookbooks/nssm/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/nssm",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/nssm/versions/1.0.0/download",
  "deprecated": false,
  "created": "2014-09-30T22:01:53.556Z",
  "updated": "2016-10-03T17:52:58.496Z",
  "description": "Installs/Configures NSSM",
  "maintainer": {
    "name": "dhoer",
    "email": "dennis.hoer@gmail.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 2797858,
  "downloads_count_revision": 586431,
  "repository_url": "https://github.com/dhoer/chef-nssm",
  "issues_url": "https://github.com/dhoer/chef-nssm/issues",
  "chef_source_url": "https://github.com/dhoer/chef-nssm",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# NSSM Cookbook\n\n[![Build Status](https://travis-ci.org/dhoer/chef-nssm.svg)](https://travis-ci.org/dhoer/chef-nssm)\n\nThis cookbook installs the Non-Sucking Service Manager (http://nssm.cc), and exposes resources to `install` and `remove` Windows services.\n\n## Requirements\n\nChef 11.14.2 and Ruby 1.9.3 or higher.\n\n### Platform\n\n- Windows\n\n### Cookbooks\n\n- windows\n\n## Usage\n\nAdd `recipe[nssm]` to a run list.\n\n### Quick Start\n\nTo install a Windows service:\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Windows\\System32\\java.exe'\n  args '-jar C:/path/to/my-executable.jar'\n  action :install\nend\n```\n\nTo remove a Windows service:\n\n```ruby\nnssm 'service name' do\n  action :remove\nend\n```\n\n### Using Parameters\n\nA parameter is a hash key representing the same name as the registry entry which controls the associated functionality. So, for example, the following sets the Startup directory, I/O redirection, and File rotation for a service:\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Windows\\System32\\java.exe'\n  args '-jar C:/path/to/my-executable.jar'\n  params(\n    AppDirectory: 'C:/path/to',\n    AppStdout: 'C:/path/to/log/service.log',\n    AppStderr: 'C:/path/to/log/error.log',\n    AppRotateFiles: 1\n  )\n  action :install\nend\n```\n\n### Arguments with Spaces\n\nHaving spaces in `servicename`, `program` and `params` attributes is not a problem, but spaces in an argument is a different matter.\n\nWhen dealing with an argument containing spaces, surround it with [3 double quotes](http://stackoverflow.com/a/15262019):\n\n```ruby\nnssm 'service name' do\n  program 'C:\\Program Files\\Java\\jdk1.7.0_67\\bin\\java.exe'\n  args '-jar \"\"\"C:/path/with spaces to/my-executable.jar\"\"\"'\n  action :install\nend\n```\n    \nWhen dealing with arguments requiring [interpolation](http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Interpolation) and it contains one or more arguments with spaces, then encapsulate the `args` string using `%()` notation and use `\"\"\"` around arguments with spaces:\n\n```ruby\nmy_path_with_spaces = 'C:/path/with spaces to/my-executable.jar'\nnssm 'service name' do\n  program 'C:\\Program Files\\Java\\jdk1.7.0_67\\bin\\java.exe'\n  args %(-jar \"\"\"#{my_path_with_spaces}\"\"\")\n  action :install\nend\n```\n\n### Attributes\n\n- `node['nssm']['src']` - This can either be a URI or a local path to nssm zip.\n- `node['nssm']['sha256']` - SHA-256 checksum of the file. Chef will not download it if the local file matches the checksum.\n\n### Resource/Provider\n\n#### Actions\n\n- :install: Install a Windows service.\n- :remove: Remove Windows service.\n\n#### Attribute Parameters\n\n- :servicename: Name attribute. The name of the Windows service.\n- :program: The program to be run as a service. \n- :args: String of arguments for the program. Optional\n- :params: Hash of key value pairs where key represents associated registry entry. Optional \n- :start: Start service after installing. Default: true\n\n## ChefSpec Matchers\n\nThe NSSM cookbook includes custom [ChefSpec](https://github.com/sethvargo/chefspec) matchers you can use to test your own cookbooks that consume Windows cookbook LWRPs.\n\nExample Matcher Usage\n\n```ruby\nexpect(chef_run).to install_nssm('service name').with(\n  :program 'C:\\Windows\\System32\\java.exe'\n  :args '-jar C:/path/to/my-executable.jar'    \n)\n```\n      \nNSSM Cookbook Matchers\n\n- install_nssm(servicename)\n- remove_nssm(servicename)\n\n## Getting Help\n\n- Ask specific questions on [Stack Overflow](http://stackoverflow.com/questions/tagged/chef-nssm).\n- Report bugs and discuss potential features in [Github issues](https://github.com/dhoer/chef-nssm/issues).\n\n## Contributing\n\nPlease refer to [CONTRIBUTING](https://github.com/dhoer/chef-nssm/blob/master/CONTRIBUTING.md).\n\n## License\n\nMIT - see the accompanying [LICENSE](https://github.com/dhoer/chef-nssm/blob/master/LICENSE.md) file for details.\n",
  "requires": [
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/windows",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}