{
  "name": "munin Chef cookbook",
  "chef_cookbook_name": "munin",
  "revision": "1.4.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/munin",
    "https://supermarket.chef.io/cookbooks/munin/download",
    "https://supermarket.chef.io/cookbooks/munin/versions/1.4.2",
    "https://supermarket.chef.io/cookbooks/munin/versions/1.4.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/munin/versions/1.4.2",
    "https://supermarket.chef.io/api/v1/cookbooks/munin",
    "https://supermarket.chef.io/api/v1/cookbooks/munin/versions/1.4.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/munin",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/munin/versions/1.4.2/download",
  "deprecated": false,
  "created": "2009-10-28T19:16:28.000Z",
  "updated": "2014-03-24T22:00:23.000Z",
  "description": "Installs and configures munin",
  "maintainer": {
    "name": "sge-jesse-adams",
    "email": "jesse@techno-geeks.org"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 44,
  "downloads_count": 21325326,
  "downloads_count_revision": 1254091,
  "repository_url": "http://github.com/opscode-cookbooks/munin",
  "issues_url": "http://github.com/opscode-cookbooks/munin",
  "chef_source_url": "http://github.com/opscode-cookbooks/munin",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "munin Cookbook\n==============\n[![Build Status](https://secure.travis-ci.org/jesseadams/munin.png?branch=master)](http://travis-ci.org/jesseadams/munin)\n\nInstalls and configures Munin for a server and for clients using Chef Server search capabilities.\n\nRequirements\n------------\nRequires Chef 0.10.0+ for Chef environments. Supports both chef-solo and chef-client ( with node searches support ).\n\nChef-solo:\n- Since there is no search support for chef-solo, current node object will be used instead.\n- See Data Bags section below in order to configure access to Munin web UI.\n\nChef-client:\n- The monitoring server that uses this recipe should have a role named '`monitoring`'. This is configurable with an attribute (see below). The recipes use search, and narrow the results to nodes in the same `chef_environment`.\n\n### Platforms\n- Debian/Ubuntu\n- Red Hat 5.7, 6.1\n- ArchLinux\n\n## Cookbooks\n\n- apache2 - Not required (users can simply be in a data bag and the recipe will search), but useful for setting the openid list (see __OpenID Authentication__, below).\n- users (see __Data Bags__) - Not required, but recommended to install perl cpan modules for munin plugins\n- perl\n- nginx\n\n\nAttributes\n----------\n- `node['munin']['web_server_port']` - port that the munin vhost runs on, default 80\n- `node['munin']['sysadmin_email']` - default email address for serveradmin in vhost.\n- `node['munin']['server_auth_method']` - the authentication method to use, default is openid. Any other value will use htauth basic with an htpasswd file.\n- `node['munin']['multi_environment_monitoring']` - allow multi-environment monitoring.  Default is false. Allowed values are 'true', 'false' or a list of names of chef-environments.\n- `node['munin']['server_role']` - role of the munin server. Default is monitoring.\n- `node['munin']['docroot']` - document root for the server apache vhost. on archlinux, the default is `/srv/http/munin`, or `/var/www/munin` on other platforms.\n- `node['munin']['web_server']` - supports apache or nginx, default is \"apache\"\n- `node['munin']['public_domain']` - override munin domain.\n- `node['munin']['max_processes']` - Maximum number of simultaneous Munin-update processes. When not set, munin will use as many as necessary. Default is to use as many as necessary.\n- `node['munin']['max_graph_jobs']` - Maximum number of parallel processes used by munin-graph when calling rrdgraph, default is \"6\"\n- `node['munin']['max_cgi_graph_jobs']` - Maximum number of parallel munin-cgi-graph or munin-fastcgi-graph jobs, default is \"6\"\n\n\nRecipes\n-------\n### client\nThe client recipe installs munin-node package and starts the service. It also searches for a node with the role for the munin server, by default `node['munin']['server_role']`. On Archlinux, it builds the list of plugins to enable.\n\n### server\nThe server recipe will set up the munin server with Apache. It will create a cron job for generating the munin graphs, search for any nodes that have munin attributes (`node['munin']`), and use those nodes to connect for the graphs.\n\nOptionally the server can be setup with NGINX.\n\n\nData Bags\n---------\nCreate a `users` data bag that will contain the users that will be able to log into the Munin webui. Each user can use htauth with a specified password, or an openid. Users that should be able to log in should be in the sysadmin group. Example user data bag item:\n\n```json\n{\n  \"id\": \"munin\",\n  \"groups\": \"sysadmin\",\n  \"htpasswd\": \"hashed_htpassword\",\n  \"openid\": \"http://munin.myopenid.com/\"\n}\n```\n\nWhen using `server_auth_method` 'openid', use the openid in the data bag item. Any other value for this attribute (e.g., \"htauth\", \"htpasswd\", etc) will use the htpasswd value as the password in `/etc/munin/htpasswd.users`.\n\n- The openid must have the http:// and trailing /*. See __OpenID Authentication__ below for more information.\n\nThe htpasswd must be the hashed value. Get this value with htpasswd:\n\n```text\n% htpasswd -n -s munin\nNew password:\nRe-type new password:\nnagiosadmin:{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=\n```\n\nFor example use the `{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=` value in the data bag.\n\n\nUsage\n-----\nCreate a role named `monitoring` that includes the munin::server recipe in the run list. Adjust the docroot to suit your environment.\n\n```ruby\nname 'monitoring'\ndescription 'The monitoring server'\nrun_list(\n  'recipe[munin::server]'\n)\n```\n\nApply this role to a node and it will be the munin server. Optionally create a DNS entry for it as munin, that will be used in the Apache vhost.\n\nUse Chef 0.10's environments. For example, create a \"production\" environment Ruby DSL file and upload it to the Chef Server\n\n```ruby\nname 'production'\ndescription 'Nodes in production'\n```\n\nFor chef-client mode clients will automatically search for the server based on the value of the `node['munin']['server_role']` attribute in the same environment. If you don't use `monitoring` as the role name, change it in a role that is applied to any nodes that get the `munin::client` recipe.\n\n### Multi-Environment Monitoring\nBy default munin-server will only search the nodes own chef-environment for clients to monitor. Monitoring all available clients in all environment can be done by setting the ```node['munin']['multi_environment_monitoring'] = 'true'```.\n\nWhen ```node['munin']['multi_environment_monitoring']``` is set to a list of environment-names, only these environments are searched for munin-clients to monitor. So if you have the environments 'prod', 'staging' and 'dev' and want only nodes in 'prod' and 'staging' to be monitoried by munin-server, set ```node['munin']['multi_environment_monitoring'] = ['prod', 'staging']```.\n\n### OpenID Authentication\nThe recipe `apache2::mod_auth_openid` is updated to a version of the module that apparently does not support the `AuthOpenIDUserProgram` directive anymore. The virtual host file has been updated to use the Apache HTTPD `require user` directive, with a concatenated list from `node['apache']['allowed_openids']`. This value must be an array of OpenIDs. Use of the `users::sysadmins` recipe will set this up based on data bag search results.\n\n### Custom Plugins\nThis section describes how to add custom munin plugins.\n\nThe munin cookbook now has a definition that can be used to enable a new plugin for data gathering on a client. If an existing munin plugin is desired, call the definition\n\n```ruby\nmunin_plugin 'nfs_client'\n```\n\nBy default the plugin file name is the name parameter here. Specify the plugin parameter to use something else.\n\n```ruby\nmunin_plugin 'nfs_client'\n  plugin 'nfs_client_'\nend\n```\n\nThis creates a symlink from the plugins distribution directory, `/usr/share/munin/plugins` to the enabled plugins directory, `/etc/munin/plugins`, and once the server poller picks it up will have new graph data for that plugin. See the plugins distribution directory for available plugins or add your own.\n\nIf a custom plugin is required, add the plugin file to the munin cookbook in `site-cookbooks/munin/files/default/plugins`. Call the definition specifying that the plugin file should be downloaded from the cookbook.\n\n```ruby\nmunin_plugin 'nfs_client_custom'\n  create_file true\nend\n```\n\nBy default in both cases, the plugin is enabled. If a plugin should be disabled, use the `enable` parameter\n\n```ruby\nmunin_plugin 'nfs_client_custom'\n  enable false\nend\n```\n\nSome plugins may require other configuration. For example, to use the memcache plugins, you'll need the `Cache::Memcache` cpan module installed, and use the `munin_plugin` definition. The perl cookbook from opscode includes a definition to handle this easily.\n\n```ruby\ncpan_module 'Cache::Memcached'\n```\n\nThen for example in your memcache recipe\n\n```ruby\n%w(\n  memcached_bytes_\n  memcached_connections_\n  memcached_hits_\n  memcached_items_\n  memcached_requests_\n  memcached_responsetime_\n  memcached_traffic_\n).each do |plugin_name|\n  munin_plugin plugin_name do\n    plugin \"#{plugin_name}#{node['ipaddress'].gsub('.', '_')}_#{node[:memcached][:port]}\"\n    create_file true\n  end\nend\n```\n\n\nLicense & Authors\n-----------------\n- Author:: Nathan Haneysmith <nathan@opscode.com>\n- Author:: Joshua Timberman <joshua@opscode.com>\n\n```text\nCopyright 2009-2013, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "arch",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "freebsd",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 1.7",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 1.8",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "munin": "Empty, use one of the other recipes",
    "munin::client": "Instlls munin and configures a client by searching for the server, which should have a role named monitoring",
    "munin::server": "Installs munin and configures a server, node should have the role \"monitoring\" so clients can find it"
  }
}