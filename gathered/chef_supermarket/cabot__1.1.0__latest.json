{
  "name": "cabot Chef cookbook",
  "chef_cookbook_name": "cabot",
  "revision": "1.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/cabot",
    "https://supermarket.chef.io/cookbooks/cabot/download",
    "https://supermarket.chef.io/cookbooks/cabot/versions/1.1.0",
    "https://supermarket.chef.io/cookbooks/cabot/versions/1.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/cabot/versions/1.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/cabot",
    "https://supermarket.chef.io/api/v1/cookbooks/cabot/versions/1.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/cabot",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/cabot/versions/1.1.0/download",
  "deprecated": false,
  "created": "2015-08-31T10:47:32.976Z",
  "updated": "2015-08-31T11:53:04.201Z",
  "description": "Installs and configures Cabot",
  "maintainer": {
    "name": "rafaelmagu",
    "email": "rafael.magu@gmail.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 594,
  "downloads_count_revision": 348,
  "repository_url": "https://github.com/rafaelmagu/chef-cabot",
  "issues_url": "https://github.com/rafaelmagu/chef-cabot/issues",
  "chef_source_url": "https://github.com/rafaelmagu/chef-cabot",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# cabot-cookbook\n![travis build status](https://travis-ci.org/rafaelmagu/chef-cabot.svg?branch=master)\n\n\n[Cabot](http://cabotapp.com) is a self-hosted watchdog for your websites and infrastructure. This cookbook installs and configures a basic setup.\n\n## Supported Platforms\n\nMade with love for Ubuntu (12.04, 14.04)\n\n## Dependencies\n\nThis cookbook depends on community versions of the following cookbooks:\n\n* build-essential\n* git\n* nginx\n* nodejs\n* npm\n* python\n* redis\n\nAdditionally, it will install Ruby from default APT repos, and Foreman.\n\n## Attributes\n\nAll keys below live under the <tt>cabot</tt> namespace. Eg. <tt>user</tt> is available as <tt>node[:cabot][:user]</tt>\n\n<table>\n  <tr>\n    <th>Key</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>user</tt></td>\n    <td>String</td>\n    <td>User to run Cabot as</td>\n    <td><tt>cabot</tt></td>\n  </tr>\n  <tr>\n    <td><tt>group</tt></td>\n    <td>String</td>\n    <td>Group to run Cabot as</td>\n    <td><tt>cabot</tt></td>\n  </tr>\n  <tr>\n    <td><tt>home_dir</tt></td>\n    <td>String</td>\n    <td>Home dir</td>\n    <td><tt>/opt/cabot</tt></td>\n  </tr>\n  <tr>\n    <td><tt>log_dir</tt></td>\n    <td>String</td>\n    <td>Log dir</td>\n    <td><tt>/var/log/cabot</tt></td>\n  </tr>\n  <tr>\n    <td><tt>repo_url</tt></td>\n    <td>String</td>\n    <td>GitHub repository to pull Cabot code from.</td>\n    <td><tt>https://github.com/arachnys/cabot.git</tt></td>\n  </tr>\n  <tr>\n    <td><tt>environment</tt></td>\n    <td>String</td>\n    <td>Sets the environment type (development or production). This sets whether to use SQLite or PostgreSQL databases.</td>\n    <td><tt>production</tt></td>\n  </tr>\n  <tr>\n    <td><tt>database_url</tt></td>\n    <td>String</td>\n    <td>Sets the Django database URL</td>\n    <td><tt>sqlite:///cabot.db</tt></td>\n  </tr>\n  <tr>\n    <td><tt>port</tt></td>\n    <td>Integer</td>\n    <td>Sets the port on which Cabot UI listens for requests</td>\n    <td><tt>5000</tt></td>\n  </tr>\n  <tr>\n    <td><tt>admin_email</tt></td>\n    <td>String</td>\n    <td>Emails sent from Django are sent to</td>\n    <td><tt>you@example.com</tt></td>\n  </tr>\n  <tr>\n    <td><tt>from_email</tt></td>\n    <td>String</td>\n    <td>From address to send emails with</td>\n    <td><tt>cabot@example.com</tt></td>\n  </tr>\n  <tr>\n    <td><tt>ical_url</tt></td>\n    <td>String</td>\n    <td>URL of calendar to synchronise rota with</td>\n    <td><tt>http://www.google.com/calendar/ical/example.ics</tt></td>\n  </tr>\n  <tr>\n    <td><tt>celery_broker_url</tt></td>\n    <td>String</td>\n    <td>Django setting</td>\n    <td><tt>redis://:yourrediskey@localhost:6379/1</tt></td>\n  </tr>\n  <tr>\n    <td><tt>django_secret_key</tt></td>\n    <td>String</td>\n    <td>Django setting</td>\n    <td><tt>2FL6ORhHwr5eX34pP9mMugnIOd3jzVuT45f7w430Mt5PnEwbcJgma0q8zUXNZ68A</tt></td>\n  </tr>\n  <tr>\n    <td><tt>graphite_api_url</tt></td>\n    <td>String</td>\n    <td>Hostname of Graphite server instance</td>\n    <td><tt>http://graphite.example.com/</tt></td>\n  </tr>\n  <tr>\n    <td><tt>graphite_username</tt></td>\n    <td>String</td>\n    <td>Username used to authenticate with Graphite</td>\n    <td><tt>username</tt></td>\n  </tr>\n  <tr>\n    <td><tt>graphite_password</tt></td>\n    <td>String</td>\n    <td>Password used to authenticate with Graphite</td>\n    <td><tt>password</tt></td>\n  </tr>\n  <tr>\n    <td><tt>hipchat_room_id</tt></td>\n    <td>String</td>\n    <td>Hipchat room ID (find it at https://hipchat.com/admin/rooms)</td>\n    <td><tt>123456</tt></td>\n  </tr>\n  <tr>\n    <td><tt>hipchat_api_key</tt></td>\n    <td>String</td>\n    <td>Hipchat API key (get one at https://hipchat.com/admin/api)</td>\n    <td><tt>your_hipchat_api_key</tt></td>\n  </tr>\n  <tr>\n    <td><tt>jenkins_api_url</tt></td>\n    <td>String</td>\n    <td>Jenkins server URL</td>\n    <td><tt>https://jenkins.example.com/</tt></td>\n  </tr>\n  <tr>\n    <td><tt>jenkins_username</tt></td>\n    <td>String</td>\n    <td>Username used to authenticate with Jenkins (optiona/td>\n    <td><tt>username</tt></td>\n  </tr>\n  <tr>\n    <td><tt>jenkins_password</tt></td>\n    <td>String</td>\n    <td>Password used to authenticate with Jenkins</td>\n    <td><tt>password</tt></td>\n  </tr>\n  <tr>\n    <td><tt>smtp_host</tt></td>\n    <td>String</td>\n    <td>SMTP hostname to use for sending emails</td>\n    <td><tt>email-smtp.us-east-1.amazonaws.com</tt></td>\n  </tr>\n  <tr>\n    <td><tt>smtp_username</tt></td>\n    <td>String</td>\n    <td>SMTP username</td>\n    <td><tt>username</tt></td>\n  </tr>\n  <tr>\n    <td><tt>smtp_password</tt></td>\n    <td>String</td>\n    <td>SMTP password</td>\n    <td><tt>password</tt></td>\n  </tr>\n  <tr>\n    <td><tt>smtp_port</tt></td>\n    <td>String</td>\n    <td>SMTP port</td>\n    <td><tt>465</tt></td>\n  </tr>\n  <tr>\n    <td><tt>twilio_account_sid</tt></td>\n    <td>String</td>\n    <td>Your Twilio account SID</td>\n    <td><tt>your_twilio_account_sid</tt></td>\n  </tr>\n  <tr>\n    <td><tt>twilio_auth_token</tt></td>\n    <td>String</td>\n    <td>Your Twilio auth token</td>\n    <td><tt>your_twilio_auth_token</tt></td>\n  </tr>\n  <tr>\n    <td><tt>twilio_outgoing_number</tt></td>\n    <td>String</td>\n    <td>Your Twilio number for outbound calls</td>\n    <td><tt>+1234567890</tt></td>\n  </tr>\n  <tr>\n    <td><tt>www_http_host</tt></td>\n    <td>String</td>\n    <td>Used for pointing links back in alerts, etc.</td>\n    <td><tt>localhost</tt></td>\n  </tr>\n  <tr>\n    <td><tt>www_scheme</tt></td>\n    <td>String</td>\n    <td>Which URL scheme to use (http or https)</td>\n    <td><tt>http</tt></td>\n  </tr>\n  <tr>\n    <td><tt>www_port</tt></td>\n    <td>Integer</td>\n    <td>Port to set reverse proxy on</td>\n    <td><tt>80</tt></td>\n  </tr>\n</table>\n\n## Usage\n\n### cabot::default\n\nInclude `cabot` in your node's `run_list`:\n\n```json\n{\n  \"run_list\": [\n    \"recipe[cabot::default]\"\n  ]\n}\n```\n\n### cabot::proxy\n\nInclude `cabot::proxy` in your node's `run_list` to have Nginx as a reverse proxy to Cabot on port 80.\n\n## Contributing\n\n1. Fork the repository on Github\n2. Create a named feature branch (i.e. `add-new-recipe`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request\n\n## License and Authors\n\nAuthor:: Rafael Fonseca (<rafael.magu@gmail.com>)\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": "~> 2.0.4",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/git",
      "revision": "~> 4.0.2",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": "~> 2.7.4",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nodejs",
      "revision": "~> 1.3.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/npm",
      "revision": "~> 0.1.2",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": "~> 1.4.6",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/redis",
      "revision": "~> 3.0.4",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ubuntu",
      "revision": "~> 1.1.6",
      "self_resolve": true
    }
  ]
}