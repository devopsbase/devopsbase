{
  "name": "aix Chef cookbook",
  "chef_cookbook_name": "aix",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/aix",
    "https://supermarket.chef.io/cookbooks/aix/download",
    "https://supermarket.chef.io/cookbooks/aix/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/aix/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/aix/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/aix",
    "https://supermarket.chef.io/api/v1/cookbooks/aix/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/aix",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/aix/versions/1.0.0/download",
  "deprecated": false,
  "created": "2014-09-25T14:22:04.503Z",
  "updated": "2016-09-12T17:43:02.519Z",
  "description": "Custom resources useful for AIX systems",
  "maintainer": {
    "name": "chef",
    "email": "jdunn@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 17,
  "downloads_count": 1507508,
  "downloads_count_revision": 460,
  "repository_url": "https://github.com/chef-cookbooks/aix",
  "issues_url": "https://github.com/chef-cookbooks/aix/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/aix",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# AIX Cookbook\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/aix.svg?branch=master)](https://travis-ci.org/chef-cookbooks/aix)\n[![Cookbook Version](https://img.shields.io/cookbook/v/aix.svg)](https://supermarket.chef.io/cookbooks/aix)\n\nThis cookbook contains useful resources for using Chef with AIX systems.\n\n## Supported Platforms\n\n* AIX 6.1\n* AIX 7.1\n\n## Usage\n\nThis cookbook has no recipes.\n\n## Resources\n\n### inittab\n\nManage the inittab entries. Example:\n\n```ruby\naix_inittab 'my-awesome-aix-daemon' do\n  runlevel '2'\n  processaction 'once'\n  command '/opt/mycompany/libexec/mydaemon -d > /dev/console 2>&1'\n  action :install\nend\n```\n\nParameters:\n\n* `runlevel` - the runlevel of the inittab entry\n* `processaction` - the action of the process (e.g. \"once\", \"boot\", etc.)\n* `command` - the command to run\n\n### subserver\n\nManage the services started by `inetd` by editing `/etc/inetd.conf`. Example:\n\n```ruby\naix_subserver 'tftp' do\n  protocol 'udp'\n  action :disable\nend\n```\n\nParameters:\n\n* `servicename` - name of the service as it appears in the first field of `/etc/inetd.conf`\n* `type` - type of service. Valid values: `dgram stream sunrpc_udp sunrpc_tcp`\n* `protocol` - protocol of service. Valid values: `tcp udp tcp6 udp6`\n* `wait` - blocking, nonblocking, or SRC. Valid values: `wait nowait SRC`\n* `user` - user to the run the service under. Default: `root`\n* `program` - program to run (typically specified by full path)\n* `args` - program, with arguments\n\n### tcpservice\n\nManage the services started by `/etc/rc.tcpip`. Example:\n\n```ruby\naix_tcpservice 'xntpd' do\n  action :enabled\nend\n```\n\nParameters:\n\n* `immediate` (optional) - whether to start/stop the TCP/IP service\n  immediately by contacting the SRC. It's much better to declaratively\n  specify this separately using the built-in `service` resource in\n  Chef.\n\n### toolboxpackage\n\nTo install packages from the IBM AIX Toolbox for Linux off the IBM FTP\nsite. Example:\n\n```ruby\naix_toolboxpackage \"a2ps\" do\n  action :install\nend\n```\n\nParameters:\n\n* `base_url` (optional) - the base URL to use to retrieve the package.\n  If you are behind a firewall or your AIX system doesn't have access\n  to the Internet, you can override this to an HTTP/FTP server where\n  you have stored the RPMs.\n\n### chdev\n\nChange any AIX device attribute. Example:\n\n```ruby\naix_chdev \"sys0\" do\n  attributes(:maxuproc => 1026, :ncargs => 1024)\n  need_reboot false\n  action :update\nend\n\naix_chdev \"fcs0\" do\n  attributes(:num_cmd_elems => 200, :max_xfer_size => \"0x800000\")\n  need_reboot true\n  action :update\nend\n\naix_chdev \"ent0\" do\n  attributes(:poll_uplin => \"yes\")\n  need_reboot true\n  action :update\nend\n```\n\nParameters:\n\n* `need_reboot` (optional) - Add -P to the chdev command if device is busy\n\n\n### no\n\nChange any AIX no (network) tunables. Example:\n\n```ruby\naix_no \"changing no tunables\" do\n  tunables(:udp_recv_perf => 0, :udprecvspace => 42083, :psetimers => 23)\n  set_default\n  action :update\nend\n\naix_no \"reseting no tunables\" do\n  tunables(:udp_recv_perf => 0, :udprecvspace => 0)\n  set_default false\n  action :reset\nend\n\naix_no \"reseting all no tunables\" do\n  action: reset_all\nend\n\naix_no \"reseting all no tunables reboot needed\" do\n  action: reset_all_with_reboot\nend\n```\n\nParameters:\n\n* `set_default` (optional) (default true) - All change are persistant to reboot (/etc/tunables/nextboot)\n* `bootlist` (optional) (default false) - If set to true, the bootlist is not changed\n\nActions:\n\n* `update` - update a list of tunables\n* `reset` - reset a list of tunabes\n* `reset_all` - reset all tunables to default\n* `reset_all_with_reboot` - reset all tunables to default even if the ones that need a reboot\n\n### tunables\n\nChange any AIX unrestricted tunables(vmo, ioo, schedo). Example:\n\n```ruby\naix_tunables \"reset schedo values\" do\n  mode :schedo\n  action :reset_all\n  permanent\nend\n\naix_tunables \"change vpm_throughput_mode\" do\n  mode :schedo\n  tunables(:vpm_throughput_mode => 2)\n  permanent\nend\n\naix_tunables \"change posix AIO servers\" do\n  mode :ioo\n  tunables(posix_aio_minservers: 6, posix_aio_maxservers: 36)\nend\n\naix_tunables \"tune minperm%\" do\n  mode :vmo\n  tunables( :\"minperm%\" => 6)\n  permanent\nend\n\naix_tunables \"tune tcp buffers\" do\n  mode :no\n  tunables( :udp_recvspace => 655360, :udp_sendspace => 65536 )\n  permanent\nend\n```\n\nParameters:\n\n* `mode` (mandatory) (no default) - must be :ioo, :vmo or :schedo\n* `permament` (optional) (default false) - All changes are persistent\n* `nextboot` (optional) (default false) - All changes applied on next boot only\n\nActions:\n\n* `update` - update a list of tunables\n* `reset` - reset a list of tunabes\n* `reset_all` - reset all tunables to default\n\n### multibos\n\nCreate, remove or update multibos on AIX. Example:\n\n```ruby\naix_multibos \"create a multibos no bootlist\" do\n  action :create\n  bootlist true\nend\n\naix_multibos \"create and update a multibos\" do\n  action :create\n  update_device \"/mnt/7100-03-05-1524\"\nend\n\naix_multibos \"remove standby multibos\" do\n  action :remove\nend\n\naix_multibos \"update a multibos\" do\n  action :update\n  update_device \"/mnt/7100-03-05-1524\"\nend\n\naix_multibos \"mount a bos\" do\n  action :mount\nend\n\naix_multibos \"mount a bos\" do\n  action :umount\nend\n```\n\nParameters:\n\n*  `update_device` (optional) - mount point used for update\n\nActions:\n\n* `create` - create (and update if needed) a bos instance\n* `remove` - remove a standby bos\n* `update` - update all already create bos\n* `mount` - mount a standby bos\n* `umount` - umount a standby bos\n\n### chsec\nChanges the attributes in the security stanza files.\n\n```ruby\naix_chsec \"/etc/security/login.cfg\" do\n  attributes(:maxlogins => 16000, :maxroles => 7, :shells => \"/bin/sh,/usr/bin/ksh\")\n  stanza \"usw\"\n  action :update\nend\n```\n\nParameters:\n\n* `file_name` (name_attribute) - security file to change\n* `attribute` - array of attribut to change\n* `stanza` - stanza to change\n\n### etchosts\n\nAdd, change or remove entries in the /etc/hosts file.\n\n```ruby\naix_etchosts \"test\" do\n  ip_address \"1.1.1.1\"\n  action :add\nend\n\naix_etchosts \"test\" do\n  ip_address \"2.2.2.2\"\n  action :change\nend\n\naix_etchosts \"test\" do\n  new_hostname \"test2\"\n  action :change\nend\n\naix_etchosts \"test\" do\n  ip_address \"1.1.1.1\"\n  aliases [\"test2\", \"test3\"]\n  action :add\nend\n\naix_etchosts \"test\" do\n  action :delete\nend\n\naix_etchosts \"delete all entries\" do\n  action :delete_all\nend\n```\n\nParameters:\n\n* `name` - name of the host to change/add/delete\n* `ip_address` - ip address\n* `new_hostname` - new_hostame (use with change action)\n* `aliases` - aliases\n\nActions:\n* `add`  - add an entry in /etc/hosts\n* `delete` - remove an entry in /etc/hosts\n* `delete_all` - remove all entries in /etc/hosts\n* `change` - change an entry in /etc/hosts\n\n### niminit\n\nUse niminit to configure the nimclient package.\nThis will look if /etc/niminfo exists and create it if it does not exist.\nYou can the use nimclient provider after niminiting the client.\n\n```ruby\naix_niminit node[:hostname] do\n  master \"nimmaster\"\n  connect \"nimsh\"\n  pif_name node[:network][:default_interface]\n  action :setup\nend\n\naix_niminit node[:hostname] do\n  action :remove\nend\n\naix_niminit node[:hostname] do\n  master \"nimmaster\"\n  connect \"nimsh\"\n  pif_name \"en1\"\n  action :setup\nend\n```\nParameters:\n\n* `name` - hostname of the nimclient\n* `master` - hostname of the nim master\n* `pif_name` - interface name\n* `connect` - nimsh or shell\n\nActions:\n* `setup` - setup the nimclient\n* `remove` - remove nimclient configuration\n\n### nimclient\n\nUse nimclient to install packages, update service pack, or technology level.\nYour NIM server should meet these requirements to work with the nimclient provider:\n* All resources name must end with the type of the resource (check example below):\n * 7100-03-05-1514-lpp_source\n * 7100-03-05-1514-spot\n * myinstallpbundle-installp_bundle\n* All spot and lpp_source must match the exact oslevel output. To find the next available lpp_source or spot the provider is checking for your oslevel and comparing it with the lpp_source name\n * 7100-03-01-1341-lpp_source\n * 7100-03-02-1412-lpp_source\n * 7100-03-03-1415-lpp_source\n * 7100-03-04-1441-lpp_source\n * 7100-03-05-1524-lpp_source\n * 7100-03-01-1341-spot\n * 7100-03-02-1412-spot\n * 7100-03-03-1415-spot\n * 7100-03-04-1441-spot\n * 7100-03-05-1524-spot\n\nRecommendation: create all the lpp_source with the simage attribute to avoid ambiguity.\n\n```\n$ lsnim -l 7100-03-05-1524-lpp_source\n7100-03-05-1524-lpp_source:\n   class       = resources\n   type        = lpp_source\n   arch        = power\n   Rstate      = ready for use\n   prev_state  = unavailable for use\n   location    = /export/nim/lpp_source/7100-03-05-1524\n   simages     = yes\n   alloc_count = 1\n   server      = master\n```\n\nHere are a few examples of recipes using nimclient:\n\n```ruby\naix_nimclient \"updating to latest available sp\" do\n  installp_flags \"aXYg\"\n  lpp_source \"latest_sp\"\n  fixes \"update_all\"\n  action :cust\nend\n\naix_nimclient \"installing filesets from the latest available tl\" do\n  installp_flags \"aXYg\"\n  lpp_source \"latest_tl\"\n  filesets [\"openssh.base.client\",\"openssh.base.server\",\"openssh.license\"]\n  action :cust\nend\n\naix_nimclient \"installing filesets from the next sp\" do\n  installp_flags \"aXYg\"\n  lpp_source \"next_sp\"\n  filesets [\"security.pkcs11.tools\"]\n  action :cust\nend\n\naix_nimclient \"installing filesets\" do\n  installp_flags \"aXYg\"\n  lpp_source \"latest_sp\"\n  filesets [\"Java6_64.samples\"]\n  action :cust\nend\n\naix_nimclient \"reset\" do\n  action :reset\nend\n\naix_nimclient \"deallocate\" do\n  action :deallocate\nend\n\naix_nimclient \"set date to nimmaster value\" do\n  action :set_date\nend\n\naix_nimclient \"disable push operations\" do\n  action :disable_push\nend\n\naix_nimclient \"enable push operations\" do\n  action :enable_push\nend\n\naix_nimclient \"maintbooting client\" do\n  spot \"7100-03-01-1341-spot\"\n  action :maint_boot\nend\n\naix_nimclient \"bos_inst client\" do\n  spot \"7100-03-01-1341-spot\"\n  lpp_source \"7100-03-01-1341-lpp_source\"\n  action :bos_inst\nend\n\naix_nimclient \"allocating resources\" do\n  installp_bundle \"toolbox-installp_bundle\"\n  lpp_source \"7100-03-01-1341-lpp_source\"\n  spot \"7100-03-01-1341-spot\"\n  action :allocate\nend\n```\n\nParameters:\n\n* `spot` (optional) - name of the spot\n* `lpp_source` (optional) - name of the lpp_source\n* `installp_bundle` (optional) - name of the installp_bundle\n* `filesets` - list of filesets to install\n* `fixes` - fixe to install\n* `installp_flags` - flags used for installp\n\nActions:\n\n* `allocate` - create (and update if needed) a bos instance\n* `deallocate` - remove a standby bos\n* `cust` - update all already create bos\n* `enable_push` - allow push operation from client\n* `disable_push` -  disable push operation from client\n* `set_date` - set date to that of the nim master\n* `enable_crypto` - enable secure nimsh\n* `disable_crypto` - disable secure nimsh\n* `reset` - reset the client\n* `bos_inst` - enable bos_install installation (you need to reboot the virtual machine after that)\n* `maint_boot` - ennable maintenance boot (you need to reboot the virtual machine after that)\n\n### bootlist\n\nChange AIX bootlist. Example:\n\n```ruby\naix_bootlist 'invalidate normal mode bootlist' do\n  action :invalidate\n  mode :normal\nend\n\naix_bootlist 'set normal and service bootlist on hdisk0' do\n  mode :both\n  devices [\"hdisk0\"]\nend\n\naix_bootlist 'set bootlist for normal mode' do\n  mode :normal\n  devices [\"hdisk0\",\"hdisk1\"]\n  device_options(\"hdisk0\" => \"pathid=0\", \"hdisk1\" => \"pathid=0,1\")\nend\n```\n\nParameters:\n\n* `mode` (mandatory) (no default) - must be :both, :normal or :service\n* `devices` (no default) - List boot devices to setup\n* `device_options` (optional) (default false) - Specify boot options for specific device\n\nActions:\n\n* `update` - update bootlist\n* `invalidate` - invalidate the bootlist\n\n### altdisk\n\nCreate an alternate disk on a free disk\nUpdate an existing alternate disk\n\n```ruby\naix_altdisk \"cloning rootvg by name hdisk3\" do\n  type :name\n  value \"hdisk3\"\nend\n\naix_altdisk \"cloning rootvg by size 66560\" do\n  type :size\n  value \"66560\"\nend\n\naix_altdisk \"cloning rootvg by size 66561\" do\n  type :size\n  value \"66561\"\nend\n\naix_altdisk \"cloning rootvg by auto\" do\n  type :auto\n  value \"bigger\"\n  action :create\n  altdisk_name \"myvg\"\nend\n\naix_altdisk \"cleanup alternate rootvg\" do\n  action :cleanup\n  altdisk_name \"rootvg_alt\"\nend\n\naix_altdisk \"altdisk_by_auto\" do\n  type :auto\n  value \"bigger\"\n  change_bootlist true\n  action :create\nend\n\naix_altdisk \"altdisk_wake_up\" do\n  action :wakeup\nend\n\naix_altdisk \"altdisk_update\" do\n  image_location \"/mnt/7100-03-05-1524\"\n  action :customize\nend\n\naix_altdisk \"altdisk_sleep\" do\n  action :sleep\nend\n\naix_altdisk \"rename altdisk\" do\n  new_altdisk_name \"altdisk_vg\"\n  action :rename\nend\n```\n\nParameters:\n\n* `type` (optional) - size (choose the disk on which creating the alternate disk by it's size in MB)\n* `type` (optional) - name (choose the disk on which creating the alternate disk by it's name)\n* `type` (optional) - auto (automatically choose the disk on which creating the rootvg)\n* `value` (optional) - bigger (if type is auto choose a disk bigger than the current rootvg size)\n* `value` (optional) - equal (if type is auto choose a disk with the exact same size of the rootvg size)\n* `value` (optional) - size or name (if type is size or name it's the size or the exact name of the disk)\n* `altdisk_name` (optional) - name of the alternate disk to create\n* `change_bootlist` (optional) (default false) - change the bootlist to boot to the new alternate disk\n* `image_location` (optional) - directory containing filesets used for the cust operation\n* `new_altdisk_name` (optional) - new name use for rename action\n\nActions:\n\n* `create` - create an alternate rootvg disk\n* `cleanup` - cleanup an alternate rootvg disk\n* `wakeup` - wakeup an alternate rootvg disk\n* `rename` - rename an alterante rootvg disk\n* `sleep` - put an alternate rootvg in sleep\n* `customize` - customiz an alternate rootvg (update)\n\n### fixes\n\nInstall and remove fixes\nExample:\n\n```ruby\naix_fixes \"removing all fixes\" do\n  fixes [\"all\"]\n  action :remove\nend\n\naix_fixes \"installing fixes\" do\n  fixes [\"IV75031s5a.150716.71TL03SP05.epkg.Z\", \"IV77596s5a.150930.71TL03SP05.epkg.Z\"]\n  directory \"/root/chefclient\"\n  action :install\nend\n\naix_fixes \"removing fix IV75031s5a\" do\n  fixes [\"IV75031s5a\", \"IV77596s5a\"]\n  action :remove\nend\n```\n\nParameters:\n\n* `fixes` (mandatory) - Array of fixes to install or remove\n* `directory` (optional) - Directory where stands the fixes to install\n\nActions:\n\n* `install` - install fixes\n* `remove` - remove fixes\n\n\n## License and Authors\n\n* Author:: Julian C. Dunn (<jdunn@chef.io>)\n* Author:: Christoph Hartmann (<chris@lollyrock.com>)\n* Author:: Benoit Creau (<benoit.creau@chmod666.org>)\n* Author:: Alain Dejoux (<adejoux@djouxtech.net>)\n\n```text\nCopyright:: 2014-2015 Chef Software, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "aix",
      "revision": ">= 6.1",
      "one_of_group": "os"
    }
  ]
}