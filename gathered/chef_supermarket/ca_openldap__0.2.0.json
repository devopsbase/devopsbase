{
  "name": "ca_openldap Chef cookbook",
  "chef_cookbook_name": "ca_openldap",
  "revision": "0.2.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/ca_openldap",
    "https://supermarket.chef.io/cookbooks/ca_openldap/download",
    "https://supermarket.chef.io/cookbooks/ca_openldap/versions/0.2.0",
    "https://supermarket.chef.io/cookbooks/ca_openldap/versions/0.2.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/ca_openldap/versions/0.2.0",
    "https://supermarket.chef.io/api/v1/cookbooks/ca_openldap",
    "https://supermarket.chef.io/api/v1/cookbooks/ca_openldap/versions/0.2.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Mode/CLI",
    "Type/Middleware/Runtime/JavaScript/Node.js"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/ca_openldap",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/ca_openldap/versions/0.2.0/download",
  "deprecated": false,
  "created": "2013-05-08T07:57:01.000Z",
  "updated": "2016-03-24T11:36:05.167Z",
  "description": "Configures a node to be an OpenLDAP server or client.",
  "maintainer": {
    "name": "carguel",
    "email": "christophe.arguel@free.fr"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 9444502,
  "downloads_count_revision": 1271732,
  "repository_url": "https://github.com/carguel/chef-cookbook-ca-openldap",
  "issues_url": "https://github.com/carguel/chef-cookbook-ca-openldap",
  "chef_source_url": "https://github.com/carguel/chef-cookbook-ca-openldap",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "ca\\_openldap Chef Cookbook\n==========================\n\nThis cookbook provides several recipes to perform the following actions:\n* configure a node to be an OpenLDAP server or OpenLDAP client,\n* import specific schemas, \n* create a DIT, \n* configure the PPolicy module\n* enable TLS support\n* populate the directory.\n\nThis cookbooks only supports OpenLDAP 2.4+, as it is based on the new on line configuration method.\n\n## Requirements\n\n### Platform:\n\nRedHat and CentOS 6.0+ are the target platforms.\nDebian and Ubuntu are planned but currently not supported.\n\n### Cookbooks:\n\n* [certificate](http://community.opscode.com/cookbooks/certificate) (optional): ca\\_openldap supports the certificates and the related key file deployed with this cookbook.\n\n## Attributes\n\n### Common attributes\n\n* `node.ca_openldap.basedn` - base DN of the directory (default: `\"dc=example,dc=com\"`).\n* `node.ca_openldap.ldap_server` - IP or hostname of the node which hosts the ldap server (default: `\"localhost\"`).\n* `node.ca_openldap.ldap_port` - TC port of the ldap server (default: `636`).\n\n### Server attributes\n\n* `node.ca_openldap.db_dir` - Directory where the DBD files are created (default: `\"/var/lib/ldap\"`).\n* `node.ca_openldap.rootdn` - RootDN, relative to `node.ca_openldap.basedn` (default: `\"cn=Manager\"`)\n* `node.ca_openldap.rootpassword` - Root Password, it is strongly recommended to modify the default value (default: `\"pa$$word\"`) \n* `node.ca_openldap.ldap_log_level` - Log level - see [Slapd config] (http://www.openldap.org/doc/admin24/slapdconfig.html) for explanation of supported values (default: `\"-1\"`)\n* `node.ca_openldap.acls` - ACLs, this is a ruby Array of the ACL to create, each line must comply with the OpenLDAP ACL syntax (default allows to read any attributes (except password) from any authenticated users and to write any attributes that belongs to the current user)\n* `node.ca_openldap.tls.enable` - Configure the TLS access support, accepted values are (default `:exclusive`): \n    * `:no` TLS access is not allowed\n    * `:yes` both clear and TLS accesses are allowed\n    * `:exclusive` only TLS access is allowed (`node.ca_openldap.ldap_port` shall be correctly set)\n* `node.ca_openldap.tls.cacert_path` - Path of the directory where the CA certificates are stored (default: `\"/etc/openldap/cacerts\"`).\n* `node.ca_openldap.tls.cert_file` - Path of the node certificate (default: `\"/etc/openldap/certs/#{node.fqdn}.pem\"`). \n* `node.ca_openldap.tls.key_file` - Path of the private key related to the node certificate (default: `\"/etc/openldap/certs/#{node.fqdn}.key\"`). \n* `node.ca_openldap.use_existing_certs_and_key` - boolean configuring the support of certificates deployed with the _certificate_ cookbook. When true, assume the CA certificate, the server certificate and its related key already exist under default directory set by the _certificate_ cookbook (/etc/pki/tls for RHEL). Consequently, the following links are created:\n    * `node.ca_openldap.tls.cert_file`: points to the Server certificate (/etc/pki/tls/certs/\\<fqdn\\>.pem for RHEL).\n    * `node.ca_openldap.tls.cacert_path + \"/\" + cacert_hash + \".0\"`: points to the CA certificate chain (/etc/pki/tls/certs/\\<_hostname_\\>-bundle.crt for RHEL), cacert_hash is the X509 hash of the CA certificate file.\nAdditionally the key file (/etc/pki/tls/private/\\<_fqdn_\\>.key) is copied to `node.ca_openldap.tls.key_file`.\n\n### PPolicy attributes\n* `node.ca_openldap.ppolicy_default_config_dn` - DN where the default ppolicy configuration is stored, relatively to the `node.ca_openldap.basedn` (default: `\"cn=passwordDefault,ou=policies\"`).\n* `node.ca\\_openldap.ppolicy\\_default\\_config` - Default ppolicy configuration, supported attributes are defined by section \"Object Class Attributes\" in slapo-ppolicy(5) (check default value in `attributes/default.rb`)\n\n\n### Schema attributes\n\n* `node.ca_openldap.schema_cookbook` - cookbook name which includes additional schema do set up, schemas are search as cookbook distribution files, under files/default/schemas/ (default: nil)\n* `node.ca_openldap.additional_schemas` - List of schemas to import in the directory, the suffix \".schema\" is added to each item of the list to build the complete file name (default : [])\n\n### DIT attributes\n* `node.ca_openldap.dit` - JSON structure which defines the DIT, this attribute can be overriden by the `ca_openldap/dit` data bag item, see `dit` recipe for additional information.\n\n\n## Recipes\n\n### server\n\nSets up a slapd daemon on the current node.\n\nThis recipe performs the following actions:\n* install the relevant packages provided by the distribution\n* configure the base DN, root DN and root password according to the related attributes\n* enable if requested the TLS support (see dedicated section below)\n* set the base directory for the BDB files\n* set the slapd log level\n* configure ACLs \n\n### client\n\nInstall the OpenLDAP client packages and configure access to an OpenLDAP Server.\n\nThis recipe depends on the common attributes and the `node.ca_openldap.use_existing_certs_and_key` and `node.ca_openldap.tls.cacert_path`attributes.\n\n### dit\n\nInstall the DIT based on a provided data bag item. \n\nThe DIT is defined by the `ca_openldap/dit` data bag item if it exists, otherwise by the `node.ca_openldap.dit` attribute.\n\nEach entry of the DIT is defined by an hash, where:\n* the key is the part of the DN relative to its parent\n* the value is a hash including the following keys:\n    * `\"attrs\"`: hash defining all attributes of the entry\n    * `\"children\"`: hash of the children entries\n\nIn the case of the data bag item, the DIT structure is found under the `\"dit\"` hash key.\n\nExample of `ca_openldap/dit` data bag item:\n\n```json\n    {\n      \"id\": \"dit\",\n      \"dit\": {\n        \"dc=example,dc=fr\": {\n          \"attrs\": {\n            \"objectClass\": [\"organization\", \"dcObject\"],\n            \"description\": \"root of the directory\",\n            \"o\": \"organization\"\n          },\n          \"children\": {\n            \"ou=groups\": {\n              \"attrs\": {\n                \"objectClass\": [\"top\", \"organizationalUnit\"]\n              }\n            },\n            \"ou=users\": {\n              \"attrs\": {\n                \"objectClass\": [\"top\", \"organizationalUnit\"]\n              }\n            }\n          }\n        }\n      }\n    }\n```\n\n\n### schemas\n\nInstall additional schemas provided as a file distribution (from another cookbook for example).\n\nSee the schema attributes above to configure this recipe.\n\nEach provided schema file must comply with the standard schema format (have a look to the official schemas stored under /etc/openldap/schemas).\n\n### populate\n\nPopulate the directory based on a provided data bag item.\n\nThe data bag item is `ca_openldap/populate`. This data bag item shall defines the following entries:\n* a `\"base\"` which specify the DN to append to each consecutive branch DN\n* a list of branches (under `\"branches\"`) . Each branch is defined by the following entries:\n    * a `\"name\"` which defines the relative DN of the branch\n    * a list of default classes (under `\"default_classes\"`) to apply to each consecutive entry\n    * a list of entries (under `\"entries\"`), each item of this list defines an entry to create or update in the directory under the related branch. An item is a hash where keys and values maps the LDAP attribute names and values.\n\nExample of `ca_openldap/populate` data bag item:\n\n```json\n    {\n      \"id\": \"populate\",\n      \"base\": \"dc=example,dc=fr\",\n      \"branches\": [\n        {\n          \"name\": \"ou=unixAccounts,ou=users\",\n          \"default_classes\": [\"top\", \"posixAccount\", \"inetOrgPerson\"],\n          \"entries\": [\n            {\n              \"dn\": \"uid=test1\",\n              \"uidNumber\": \"12001\",\n              \"uid\": \"test\",\n              \"cn\": \"test\",\n              \"gidNumber\": \"12001\",\n              \"sn\": \"test user\",\n              \"userPassword\": \"pa$$word\",\n              \"homeDirectory\": \"/home/test\"\n            },\n            {\n              \"dn\": \"uid=test2\",\n              \"uidNumber\": \"12002\",\n              \"uid\": \"test2\",\n              \"cn\": \"test2\",\n              \"gidNumber\": \"12002\",\n              \"sn\": \"test user 2\",\n              \"userPassword\": \"pa$$word\",\n              \"homeDirectory\": \"/home/test2\"\n            }\n          ]\n        },\n        {\n          \"name\": \"ou=groups\",\n          \"default_classes\": [\"top\", \"posixGroup\"],\n          \"entries\": [\n            {\n              \"dn\": \"cn=test1\",\n              \"gidNumber\": \"12001\",\n              \"memberUid\": \"test1\"\n            },\n            {\n              \"dn\": \"cn=test2\",\n              \"gidNumber\": \"12002\",\n              \"memberUid\": \"test2\"\n            },\n            {\n              \"dn\": \"cn=test\",\n              \"gidNumber\": \"12000\",\n              \"memberUid\": [\"test1\", \"test2\"]\n            }\n          ]\n        }\n      ]\n    }\n```\n\n### ppolicy\n\nConfigure the PPolicy module.\n\n## TLS support\n\nTLS support is managed by the `server` recipe and configured by the `node.ca_openldap.tls.*` attributes and `node.ca_openldap.use_existing_certs_and_key` attribute.\nIf `node.ca_openldap.use_existing_certs_and_key` is set to false, the recipe assumes that the server and CA certificates and the server key are already provided by another cookbook.\nNote that openldap expects that CA certificate names should have their names of the form \"xxxxx.0\", where \"xxxxx\" is x509 hash of the certificate.\n\nThe x509 hash can be easily generated with the following command:\n\n    openssl x509 -noout -hash -in /path/to/certificate.pem\n\nIf `node.ca_openldap.use_existing_certs_and_key` is set to true, \nthe recipe assumes that the server and CA certificates \nwere previously deployed by the _certificate_ cookbook under the default locations.\nConsequently, the recipe creates two links which point to the server and CA certificates:\n* the server certificate link is created under the `node.ca_openldap.tls.cert_file` location,\n* the CA certification link is created in the `node.ca_openldap.tls.cacert_path` directory, with the proper name as explaine above.  \nAdditionaly, the recipe copies the server key to the `node.ca_openldap.tls.key_file` location.\n\nTake care to correctly set the `node.ca_openldap.ldap_port` attribute \nto the LDAPS default port (636) when `node.ca_openldap.tls.enable_tls` is set to `:exclusive`, \notherwise the `dit` and `populate` recipes will not work.\n\nLicense and Author\n==================\n\nAuthor:: Christophe Arguel (<christophe.arguel@free.fr>)\nCopyright:: 2013, Christophe Arguel.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 6.0",
      "one_of_group": "os"
    }
  ]
}