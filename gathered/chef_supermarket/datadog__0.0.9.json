{
  "name": "datadog Chef cookbook",
  "chef_cookbook_name": "datadog",
  "revision": "0.0.9",
  "uris": [
    "https://supermarket.chef.io/cookbooks/datadog",
    "https://supermarket.chef.io/cookbooks/datadog/download",
    "https://supermarket.chef.io/cookbooks/datadog/versions/0.0.9",
    "https://supermarket.chef.io/cookbooks/datadog/versions/0.0.9/download",
    "https://supermarket.chef.io/api/v1/cookbooks/datadog/versions/0.0.9",
    "https://supermarket.chef.io/api/v1/cookbooks/datadog",
    "https://supermarket.chef.io/api/v1/cookbooks/datadog/versions/0.0.9/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Monitoring/Datadog"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/datadog",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/datadog/versions/0.0.9/download",
  "deprecated": false,
  "created": "2011-11-19T10:07:30.000Z",
  "updated": "2016-09-20T14:16:31.130Z",
  "description": "Installs/Configures datadog components",
  "maintainer": {
    "name": "datadoghq",
    "email": "package@datadoghq.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 36,
  "downloads_count": 25572569,
  "downloads_count_revision": 1209811,
  "repository_url": "https://github.com/DataDog/chef-datadog",
  "issues_url": "https://github.com/DataDog/chef-datadog/issues",
  "chef_source_url": "https://github.com/DataDog/chef-datadog",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Datadog Cookbook\n================\n\nChef recipes to deploy Datadog's components and configuration automatically.\n\nRequirements\n============\n- python >= 2.6\n- chef >= 0.9\n\nPlatform\n--------\n\n* Debian, Ubuntu, RedHat, CentOS\n\nCookbooks\n---------\n\nThe following Opscode cookbooks are dependencies:\n\n* apt\n* chef_handler\n* yum\n\n\nAttributes\n==========\n\n* `node[:datadog][:api_key]`    \t= This needs to be retrieved from your Account Settings page.\n* `node[:datadog][:application_key]`= There are none by default. Visit the Account Settings page to create a new Application Key, to be used in conjunction with your API key.\n* `node[:datadog][:url]` \t\t\t= The location of where Datadog is hosted. Should never change.\n* `node[:datadog][:repo]` \t\t\t= Where the Datadog-maintained packages are located. Should never change.\n* `node[:datadog][:debug]` \t\t\t= Will trigger heavy logging to /tmp/dd-agent.log\n* `node[:datadog][:check_freq]`\t\t= How often checks should be run. By default, set to 15s.\n\napache\n-------\n* `node[:apache][:status_url]` \t\t= Url to Apache's status page. Must have mod_status installed.  See http://httpd.apache.org/docs/2.0/mod/mod_status.html for details.\n\nganglia\n-------\n* `node[:ganglia][:url]` \t\t\t= Ganglia host where gmetad is running\n* `node[:ganglia][:port]` \t\t\t= Ganglia port where gmetad is running\n\nmysql\n-------\n* `node[:mysql][:server]`\t\t\t= MySQL host\n* `node[:mysql][:user]`\t\t\t\t= MySQL user. It only runs \"SHOW STATUS\" queries, which doesn't require any privileges, so you should consider creating a separate, unprivileged user.\n* `node[:mysql][:pass]`\t\t\t\t= MySQL user's password\n\nnginx\n-------\n* `node[:nginx][:status_url]`\t\t= Url to nginx's status page. Must have http_stub_status_module installed.  See http://wiki.nginx.org/HttpStubStatusModule for details.\n\nrabbitmq\n-------\n* `node[:rabbitmq][:status_url]`\t= Url to RabbitMQ's status page. Must have rabbitmq-status plugin installed.  See http://www.lshift.net/blog/2009/11/30/introducing-rabbitmq-status-plugin for details.\n* `node[:rabbitmq][:user]`\t\t\t= RabbitMQ user\n* `node[:rabbitmq][:pass]`\t\t\t= RabbitMQ user's password\n\nmongodb\n-------\n* `node[:mongodb][:server]`\t\t\t= MongoDB uri. For example: mongodb://my_user:my_pass@localhost/my_db\n\ncouchdb\n-------\n* `node[:couchdb][:server]`\t\t\t= CouchDB host\n\njenkins\n-------\n* `node[:jenkins][:home_dir]`\t\t= Path to Jenkins's home directory\n\nnagios\n-------\n* `node[:nagios][:log_dir]`\t\t\t= Path to Nagios's event log file\n* `node[:nagios][:conf_dir]`\t\t= If you use perfdata, dd-agent can import automatically and in real-time performance data collected by nagios.  For more information on perfdata configuration, please refer to http://nagios.sourceforge.net/docs/3_0/perfdata.html.  Path to Nagios' ***configuration*** file where the properties host|service_perfdata_file and host|service_perfdata_file_template are defined.\n\ncassandra\n-------\n* `node[:cassandra][:host]`\t\t\t= Cassandra host\n* `node[:cassandra][:port]`\t\t\t= Cassandra port\n* `node[:cassandra][:nodetool]`\t\t= Path to nodetool\n\njava\n-------\n* `node[:jvm_jmx][:server]`\t\t\t= JMX server:port to connect to\n* `node[:jvm_jmx][:user]`\t\t\t= JMX user to log in with, if needed\n* `node[:jvm_jmx][:pass]`\t\t\t= Password for the configured JMX user\n* `node[:jvm_jmx][:name]`\t\t\t= Name to report the statistics for this java VM. This will allow to monitor several JVMs running on the same machine.\n\ntomcat\n-------\n* `node[:tomcat_jmx][:server]`\t\t= host:port to connect to. Must be configured in tomcat setenv.sh or similar\n* `node[:tomcat_jmx][:user]`\t\t= JMX user to log in with, if needed\n* `node[:tomcat_jmx][:pass]`\t\t= Password for the configured JMX user\n\nRecipes\n=======\n\ndefault\n-------\nJust a placeholder for now, when we have more shared components they will probably live there.\n\ndd-agent\n--------\nInstalls the Datadog agent on the target system, sets the API key, and start the service to report on the local system metrics\n\ndd-handler\n----------\nInstalls the `chef-handler-datadog` gem and invokes the handler at the end of a chef run to report the details back to the newsfeed.\n\n\nUsage\n=====\n\n1. Add this cookbook to your Chef Server, either by installing with knife or downloading and uploading to your chef-server with knife.\n2. Add your API Key, either to `attributes/default.rb`, or by using the inheritance model and placing it on the node/\n3. Upload the new recipe via: `knife cookbook upload datadog`\n4. Associate the recipes with the desired `roles`, i.e. \"role:chef-client\" should contain \"datadog::dd-handler\" and a \"role:somethingelse\" should start the dd-agent with \"datadog::dd-agent\".\n4. Wait until chef-client runs on the target node (or trigger chef-client if you're impatient)\n\nWe are not making use of data_bags in this recipe at this time, as it is unlikely that you will have more than 1 API key.\n\n\nChanges/Roadmap\n===============\n## v0.0.8\n* `dd-agent` - Add varnish support.\n\n## v0.0.7\n* `dd-agent` - default to using instance IDs as hostnames when running dd-agent on EC2\n\n## v0.0.5\n* `dd-agent` - Full datadog.conf template using attributes (thanks @drewrothstein)\n\n## v0.0.4\n* `dd-agent` - Added support for Nagios PerfData and Graphite.\n\n## v0.0.3\n* `dd-agent` - Added support for RPM installs - Red Hat, CentOS, Scientific, Fedora\n\n## v0.0.2\n* Initial refactoring, including the `dd-agent` cookbook here\n* Adding chef-handler-datadog to report to the newsfeed\n* Added ruby-dev dependency\n\nLicense and Author\n==================\n\nAuthor:: Mike Fiedler (<miketheman@gmail.com>)\nAuthor:: Alexis Le-quoc (<alq@datadoghq.com>)\n\nCopyright 2012, Datadog, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef_handler",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "datadog::default": "Default",
    "datadog::dd-agent": "Installs the Datadog Agent",
    "datadog::dd-handler": "Installs a Chef handler for Datadog"
  }
}