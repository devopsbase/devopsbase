{
  "name": "eye Chef cookbook",
  "chef_cookbook_name": "eye",
  "revision": "0.6.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/eye",
    "https://supermarket.chef.io/cookbooks/eye/download",
    "https://supermarket.chef.io/cookbooks/eye/versions/0.6.1",
    "https://supermarket.chef.io/cookbooks/eye/versions/0.6.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/eye/versions/0.6.1",
    "https://supermarket.chef.io/api/v1/cookbooks/eye",
    "https://supermarket.chef.io/api/v1/cookbooks/eye/versions/0.6.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/eye",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/eye/versions/0.6.1/download",
  "deprecated": false,
  "created": "2013-10-06T17:59:09.000Z",
  "updated": "2014-09-15T09:22:47.035Z",
  "description": "Installs eye gem and configures it to manage services, includes eye_service LWRP",
  "maintainer": {
    "name": "keeney",
    "email": "holger@fehu.org"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 3,
  "downloads_count": 16562695,
  "downloads_count_revision": 1207255,
  "repository_url": "https://github.com/hamann/eye-chef-cookbook",
  "issues_url": "https://github.com/hamann/eye-chef-cookbook",
  "chef_source_url": "https://github.com/hamann/eye-chef-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "eye Cookbook\n============\n[eye](https://github.com/kostya/eye) is a process monitoring tool, inspired by bluepill and god.\nThis chef cookbook installs the eye RubyGem and configures it to manage services. It also includes a LWRP.\n\nRequirements\n------------\neye is written in Ruby, so it should work on any system. If you want to use eye's `uid` or `gid` features, Ruby > 2.0.0 is required.\n\n\nAttributes\n----------\n* `node['eye']['version']` - Version of eye, default is '0.6.1'\n* `node['eye']['conf_dir']` - Location of eye's configuration files, default '/etc/eye'\n* `node['eye']['bin']` - Location of eye binary, default \"node['languages']['ruby']['bin_dir']/eye\"\n* `node['eye']['log_dir']` - Location of eye's logfiles, default '/var/log/eye'\n* `node['eye']['run_dir']` - Path of state directory, default '/var/run/eye'\n* `node['eye']['user']` - Owner of eye process, directories and configuration files, default 'root'\n* `node['eye']['group']` - Group of eye process, directories and configuration files, default 'root'\n* `node['eye']['http']['install']` - if set to true, `eye-http` gem will be installed, default 'false'\n* `node['eye']['http']['version']` - Version of eye-http, default is '0.6'\n\nResources/Providers\n-------------------\nThis cookbook contains a LWRPs, eye_service.\n\n\teye_service 'my_service' do\n \t\taction [:enable, :reload, :restart]\n\tend\n\nThis loads eye daemon with a needed configuration 'my_service.eye' in a subdirectory of `node['eye']['conf_dir']` named by the default eye owner (e.g /etc/eye/root/my_service.rb) and starts the according process. The owner of eye daemon and the process itself is the user defined with `node['eye']['user']`\n\nAn (additional) eye daemon can also be started by a different owner (with it's own logfile, e.g in '/var/log/eye/deploy/eye.log')\n\n\teye_service 'my_service' do\n\t\tuser_srv true\n\t\tuser_srv_uid 'deploy'\n\t\tuser_srv_gid 'deploy'\n \t\taction [:enable, :reload, :restart]\n\tend\n\nIn that case the configuration file should be in '/etc/eye/deploy/my_service.eye'\n\nIf eye daemon should by controlled by `node['eye']['user']`, but the process should be started as different user, use eye's `uid` or `gid` configuration features.\n\n`eye_service` creates an init script, e.g. '/etc/init.d/my_service'. This init script can be prefixed, like\n\n\teye_service 'my_service' do\n\t\tinit_script_prefix 'eye-'\n\t\t...\n\tend\n\n\nThere's also a definition `eye_app` which creates the necessary configuration files, log directories and calls `eye_service` afterwards.\n\nExample for unicorn:\n\t\n\teye_app \"test_unicorn\" do\n  \t\tuser_srv true\n  \t\tuser_srv_uid \"deploy\"\n  \t\tuser_srv_gid \"deploy\"\n  \t\ttemplate \"rails_unicorn.conf.erb\"\n  \t\tcookbook \"rails_app\"\n  \t\tvariables :ruby => \"#{node['languages']['ruby']['bin_dir']}/ruby\",\n    \t          :environment => 'test',\n    \t          :working_dir => '/var/www/rails_dir'\n\tend\n\t\nwith according template:\n\n```\nEye.application \"test_unicorn\" do\n  env \"RAILS_ENV\" => '<%= @environment %>'\n  env \"PATH\" => \"#{File.dirname(\"<%= @ruby %>\")}:#{ENV['PATH']}\"\n\n  working_dir \"<%= @working_dir %>\"\n\n  process(\"unicorn\") do\n    pid_file \"tmp/pids/unicorn.pid\"\n    start_command \"<%= @ruby %> ./bin/unicorn -Dc ./config/unicorn.rb -E <%= @environment %>\"\n    stdall \"log/unicorn.log\"\n\n    stop_signals [:TERM, 10.seconds]\n\n    restart_command \"kill -USR2 {PID}\"\n\n    check :cpu, :every => 30, :below => 80, :times => 3\n    check :memory, :every => 30, :below => 150.megabytes, :times => [3,5]\n\n    start_timeout 30.seconds\n    restart_grace 30.seconds\n\n    monitor_children do\n      stop_command \"kill -QUIT {PID}\"\n      check :cpu, :every => 30, :below => 80, :times => 3\n      check :memory, :every => 30, :below => 150.megabytes, :times => [3,5]\n    end\n  end\n\nend\n```\n\nUsage\n-----\n\ne.g.\nJust include `eye` in your node's `run_list`:\n\n```json\n{\n  \"name\":\"my_node\",\n  \"run_list\": [\n    \"recipe[eye]\"\n  ]\n}\n```\n\nContributing\n------------\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write you change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\nAuthors: Holger Amann <holger@fehu.org>\n\nLicensed under Apache License, Version 2.0 \nhttp://www.apache.org/licenses/LICENSE-2.0\n",
  "chef_recipes": {
    "eye::default": "Installs eye rubygem"
  }
}