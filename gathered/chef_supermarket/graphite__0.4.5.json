{
  "name": "graphite Chef cookbook",
  "chef_cookbook_name": "graphite",
  "revision": "0.4.5",
  "uris": [
    "https://supermarket.chef.io/cookbooks/graphite",
    "https://supermarket.chef.io/cookbooks/graphite/download",
    "https://supermarket.chef.io/cookbooks/graphite/versions/0.4.5",
    "https://supermarket.chef.io/cookbooks/graphite/versions/0.4.5/download",
    "https://supermarket.chef.io/api/v1/cookbooks/graphite/versions/0.4.5",
    "https://supermarket.chef.io/api/v1/cookbooks/graphite",
    "https://supermarket.chef.io/api/v1/cookbooks/graphite/versions/0.4.5/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Monitoring/Graphite",
    "Type/Middleware/Data Store/Graph"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/graphite",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/graphite/versions/0.4.5/download",
  "deprecated": false,
  "created": "2011-02-21T01:54:12.000Z",
  "updated": "2016-01-29T22:30:59.492Z",
  "description": "Installs/Configures graphite",
  "maintainer": {
    "name": "heavywater",
    "email": "ops@hw-ops.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 66,
  "downloads_count": 27185684,
  "downloads_count_revision": 1262836,
  "repository_url": "https://github.com/hw-cookbooks/graphite",
  "issues_url": "https://github.com/hw-cookbooks/graphite/issues",
  "chef_source_url": "https://github.com/hw-cookbooks/graphite",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstalls and configures Graphite http://graphite.wikidot.com/\n\nConsult the Graphite documentation for more information:\n\n- http://graphite.readthedocs.org/en/latest/\n- http://graphite.wikidot.com/\n\nRequirements\n============\n\n* Ubuntu 10.04 / Ubuntu 12.04\n* Debian\n* RHEL and derivatives (Centos, Amazon Linux, Oracle Linux, Scientific Linux)\n* Fedora\n\nAttributes\n==========\n\n* `node['graphite']['version']` - version of graphite to install (defaults to 0.9.10)\n* `node['graphite']['password']` - password for graphite root user (default to `change_me` and is only used if encrypted databag isn't)\n* `node['graphite']['chef_role']` - chef role name for graphite instances, used by the *federated* recipe (defaults to \"graphite\")\n* `node['graphite']['url']` - url of the graphite server (defaults to graphite)\n* `node['graphite']['url_aliases']` - array of url aliases (defaults to nil)\n* `node['graphite']['listen_port']` - port to listen on (defaults to 80)\n* `node['graphite']['base_dir']` = \"/opt/graphite\"\n* `node['graphite']['doc_root']` = \"/opt/graphite/webapp\"\n* `node['graphite']['storage_dir']` = \"/opt/graphite/storage\"\n* `node['graphite']['django_root']` = \"@DJANGO_ROOT@\" - configurable path to your django installation\n* `node['graphite']['timezone']` - set the timezone for the graphite web interface, defaults to America/Los_Angeles\n* `node['graphite']['whisper']['uri']` - download url for whisper\n* `node['graphite']['whisper']['checksum']` - checksum of the whisper download\n* `node['graphite']['encrypted_data_bag']['name']` - the name of the encrypted data bag containing the default password for the graphite \"root\" user. If this attribute is set it will not use `node['graphite']['password']`.\n\ncarbon-cache.py attributes\n--------------------------\n\n* `node['graphite']['storage_schemas']` - an array with retention rates for storing metrics, used to generate the *storage-schemas.conf* file ([see the example below](#storage_schemas-example))\n* `node['graphite']['storage_aggregation']` - an array with rules to configure how to aggregate data to lower-precision retentions, used to generate the *storage-aggregation.conf* file\n* `node['graphite']['carbon']['uri']` - download url for carbon\n* `node['graphite']['carbon']['checksum']` - checksum for the carbon download\n* `node['graphite']['carbon']['caches']['a']['line_receiver_interface']` - line interface IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['caches']['a']['line_receiver_port']` - line interface port (defaults to 2003)\n* `node['graphite']['carbon']['caches']['a']['udp_receiver_interface']` - line interface IP for UDP listener (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['caches']['a']['udp_receiver_port']` - line interface port for UDP listener (defaults to 2003)\n* `node['graphite']['carbon']['caches']['a']['pickle_receiver_interface']` - pickle receiver IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['caches']['a']['pickle_receiver_port']` - pickle receiver port (defaults to 2004)\n* `node['graphite']['carbon']['enable_udp_listener']` - set this to \"True\" to enable the UDP listener (defaults to \"False\")\n* `node['graphite']['carbon']['use_insecure_unpickler']` - set this to \"True\" to use the old-fashioned insecure unpickler (defaults to \"False\")\n* `node['graphite']['carbon']['cache_query_interface']` - cache query IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['cache_query_port']` - cache query port (defaults to 7002)\n* `node['graphite']['carbon']['use_flow_control']` - set this to \"False\" to drop datapoints received after the cache reaches *MAX_CACHE_SIZE* (defaults to \"True\")\n* `node['graphite']['carbon']['max_cache_size']` - max size of the carbon cache (defaults to \"inf\")\n* `node['graphite']['carbon']['max_creates_per_second']` - max number of new metrics to create per second (defaults to \"inf\")\n* `node['graphite']['carbon']['max_updates_per_second']` - max updates to carbon per second (defaults to \"1000\")\n* `node['graphite']['carbon']['log_whisper_updates']` - log updates to whisper (defaults to \"False\")\n* `node['graphite']['carbon']['whisper_autoflush']` - set this option to \"True\" if you want whisper to write synchronously (defaults to \"False\")\n* `node['graphite']['carbon']['service_type']` - init service to use for carbon (defaults to runit)\n\ncarbon-relay.py attributes\n--------------------------\n\n* `node['graphite']['relay_rules']` - an array with relay rules for sending metrics to a certain backends, used to generate the *relay-rules.conf* file ([see the example below](#relay_rules-example))\n* `node['graphite']['carbon']['relay']['line_receiver_interface']` - line interface IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['relay']['line_receiver_port']` - line interface port (defaults to 2013)\n* `node['graphite']['carbon']['relay']['pickle_receiver_interface']` - pickle receiver IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['relay']['pickle_receiver_port']` - pickle receiver port (defaults to 2014)\n* `node['graphite']['carbon']['relay']['relay_method']` - choose between *consistent-hashing* and *rules* (defaults to \"rules\")\n* `node['graphite']['carbon']['relay']['replication_factor']` - used to replicate datapoint data to more than one machine (defaults to 1)\n* `node['graphite']['carbon']['relay']['destinations']` - list of carbon daemons to send metrics to\n* `node['graphite']['carbon']['relay']['max_datapoints_per_message']` - maximum datapoints to send in a message between carbon daemons (defaults to 500)\n* `node['graphite']['carbon']['relay']['max_queue_size']` - maximum queue of messages used to comunicate to other carbon daemons (defaults to 10000)\n* `node['graphite']['carbon']['relay']['use_flow_control']` - set this to \"False\" to drop datapoints received after the cache reaches *MAX_CACHE_SIZE* (defaults to \"True\")\n\ncarbon-aggregator.py attributes\n-------------------------------\n\n* `node['graphite']['aggregation_rules']` - an array with rules that allow you to add several metrics together, used to generate the *aggregation-rules.conf* file ([see the example below](#aggregation_rules-example))\n* `node['graphite']['carbon']['aggregator']['line_receiver_interface']` - line interface IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['aggregator']['line_receiver_port']` - line interface port (defaults to 2023)\n* `node['graphite']['carbon']['aggregator']['pickle_receiver_interface']` - pickle receiver IP (defaults to 0.0.0.0)\n* `node['graphite']['carbon']['aggregator']['pickle_receiver_port']` - pickle receiver port (defaults to 2024)\n* `node['graphite']['carbon']['aggregator']['destinations']` - list of carbon daemons to send metrics to\n* `node['graphite']['carbon']['aggregator']['replication_factor']` - used to add redundancy to your data by replicating every datapoing to more than one machinne (defaults to 1)\n* `node['graphite']['carbon']['aggregator']['max_queue_size']` - maximum queue of messages used to comunicate to other carbon daemons (defaults to 10000)\n* `node['graphite']['carbon']['aggregator']['use_flow_control']` - set this to \"False\" to drop datapoints received after the cache reaches *MAX_CACHE_SIZE* (defaults to \"True\")\n* `node['graphite']['carbon']['aggregator']['max_datapoints_per_message']` - maximum datapoints to send in a message between carbon daemons (defaults to 500)\n* `node['graphite']['carbon']['aggregator']['max_aggregation_intervals']` - sets how many datapoints the aggregator remembers for each metric (defaults to 5)\n\ngraphite-web attributes\n-----------------------\n\n* `node['graphite']['web']['uri']` - download url for the graphite web ui\n* `node['graphite']['web']['checksum']` - checksum for the graphite web ui download\n* `node['graphite']['web']['debug']` - debug mode (defaults to \"False\")\n* `node['graphite']['web']['admin_email']` - admin contact email (defaults to \"admin@org.com\")\n* `node['graphite']['web']['cluster_servers']` - IP address (and optionally port) of the webapp on each remote server in the cluster\n* `node['graphite']['web']['carbonlink_hosts']` - list the IP address, cache query port and instance name of each carbon cache instance on the **local** machine\n* `node['graphite']['web_server']` - defaults to `apache`. Anything else will use uwsgi instead of apache\n* `node['graphite']['user_account']` - user (default `node['apache']['user']`)\n* `node['graphite']['group_account']` - group (default `node['apache']['group']`)\n* `node['graphite']['create_user']`- should the user be created, boolean (defaults to false)\n* `node['graphite']['ssl']['enabled']` - enable ssl in the apache2 vhost\n* `node['graphite']['ssl']['cipher_suite']` - the cipher suite to use if ssl is enabled\n* `node['graphite']['ssl']['certificate_file']` - the path to the certificate file if ssl is enabled\n* `node['graphite']['ssl']['certificate_key_file']` - the path to the vertificate key file if ssl is enabled\n* `node['graphite']['ssl']['ca_certificate_file']` - the path to the intermediate CA certificate file if ssl is enabled. Leave blank if you don't have or need one.\n* `node['graphite']['apache']['basic_auth']['enabled']` - enable basic auth in the apache2 vhost to require authentication for access to web interface (defaults to false)\n* `node['graphite']['apache']['basic_auth']['file_path']` - location of htpasswd file for basic auth (defaults to node['graphite']['doc_root']/htpasswd)\n* `node['graphite']['apache']['basic_auth']['user']` - username for basic auth\n* `node['graphite']['apache']['basic_auth']['pass']` - password for basic auth\n* `node['graphite']['uwsgi_socket']` - the socket to bind uwsgi process to (only needed if using uwsgi)\n\n### database settings\n\n* `default['graphite']['web']['database']['NAME']` - the database name defaults to sqlite database in the storage folder\n* `default['graphite']['web']['database']['ENGINE']` - the django database engine that will be used. The default is sqlite. If you want to use mysql set this to `django.db.backends.mysql`\n* `default['graphite']['web']['database']['USER']` - database username leave this blank if you're using sqlite\n* `default['graphite']['web']['database']['PASSWORD']` - database password leave this blank if you're using sqlite.\n* `default['graphite']['web']['database']['HOST']` - database host leave this blank if you're using sqlite.\n* `default['graphite']['web']['database']['PORT']` - database port leave this blank if you're using sqlite.\n\n### ldap settings\n\n* `default['graphite']['web']['ldap']['SERVER']` - ldap server you want to use\n* `default['graphite']['web']['ldap']['BASE_USER']` - the base dn of the user graphite web should use\n* `default['graphite']['web']['ldap']['BASE_PASS']` - password for the base dn user\n* `default['graphite']['web']['ldap']['USER_QUERY']` - the ldap query to find the user by name. If you're using MS AD this should be `\"(sAMAccountName=%s)\"`\n* `default['graphite']['web']['ldap']['SEARCH_BASE']` - the search base the query should run against\n\n### email settings\n\n* `default['graphite']['web']['email']['BACKEND']` - django email backend \"django.core.mail.backends.smtp.EmailBackend\"\n* `default['graphite']['web']['email']['HOST']` - the smtp host. This defaults to `\"localhost\"`\n* `default['graphite']['web']['email']['PORT']` - the smtp port.\n* `default['graphite']['web']['email']['HOST_USER']` - the smtp user. Just use this if you need to authenticate against smtp\n* `default['graphite']['web']['email']['HOST_PASSWORD']` - the smtp password\n* `default['graphite']['web']['email']['USE_TLS']` - if you want to use tls change this to `true`\n\n\nstorage_schemas example\n-----------------------\n\n```ruby\nnode.default['graphite']['storage_schemas'] = [\n  {\n    'name' => 'carbon',\n    'pattern' => /^carbon\\./,\n    'retentions' => '1m:10d'\n  },\n  {\n    'name' => 'sensu',\n    'pattern' => /^sensu\\./,\n    'retentions' => '1m:30d'\n  },\n  {\n    'name' => 'everything_30s7d_15m1m',\n    'match-all' => true,\n    'retentions' => '30s:7d,15m:1m'\n  }\n]\n```\n\nrelay_rules example\n-------------------\n\n```ruby\nnode.default['graphite']['relay_rules'] = [\n  {\n    'name' => 'example_pattern',\n    'pattern' => /^mydata\\.foo\\..+/,\n    'destinations' => [ '10.1.2.3', '10.1.2.4:2004', 'myserver.mydomain.com' ]\n  },{\n    'name' => 'example_default',\n    'default' => true,\n    'destinations' => [ '10.1.2.5:2004' ]\n  }\n]\n```\n\naggregation_rules example\n-------------------------\n\n```ruby\nnode.default['graphite']['aggregation_rules'] = [\n  {\n    'output_template' => '<env>.applications.<app>.all.requests',\n    'frequency' => '60',\n    'method' => 'sum',\n    'input_pattern' => '<env>.applications.<app>.*.requests'\n  },\n  {\n    'output_template' => '<env>.applications.<app>.all.latency',\n    'frequency' => '60',\n    'method' => 'sum',\n    'input_pattern' => '<env>.applications.<app>.*.latency'\n  },\n]\n```\n\nstorage_aggregation example\n---------------------------\n```ruby\nnode.default['graphite']['storage_aggregation'] = [\n  {\n    'name' => 'all_min',\n    'pattern' => '\\.min$',\n    'xFilesFactor' => '0.1',\n    'aggregationMethod' => 'min'\n  },\n  {\n    'name' => 'count',\n    'pattern' => '\\.count$',\n    'xFilesFactor' => '0',\n    'aggregationMethod' => 'sum'\n  },\n]\n```\n\ngraph_templates example\n-----------------------\n\n```ruby\nnode.default['graphite']['graph_templates'] = [\n  {\n    'name' => 'basic',\n    'background' => 'white',\n    'foreground' => 'black',\n    'majorLine' => 'grey',\n    'minorLine' => 'rose',\n    'lineColors' => 'blue,green,red,purple,brown,yellow,aqua,grey,magenta,pink,gold,rose'\n  },\n  {\n    'name' => 'custom',\n    'background' => 'black',\n    'foreground' => 'white',\n    'majorLine' => 'grey',\n    'minorLine' => 'rose',\n    'lineColors' => '#f29709,#41546f,#0ebadc,#a48ad5,#49c28d,#c75551'\n  },\n]\n```\n\nData Bags\n=========\n\nThis cookbook optionally uses an encrypted data bag to store the graphite password.\nIf this data bag is not present the cookbook will use `node['graphite']['password']`\ninstead. To use the encrypted data bag set `node['graphite']['encrypted_data_bag']['name']`\nwith the name of the data bag you wish to use.\n\nHelper Scripts\n==============\n\nThe following helper scripts are included in the `graphite/bin` directory:\n\n* `whisper-clean-this-node.sh` - this script cleans the whisper metrics that belong to other machines in the cluster. Usually used after synchronizing the *storage/whisper* directory. Uses the [whisper-clean.py](https://gist.github.com/rcrowley/3153844) script internally\n\nUsage\n=====\n\n`recipe[graphite]` should build a stand-alone Graphite installation.\n\n`recipe[graphite::carbon_aggregator]` builds the aggregation_rules and storage-aggregation config files,\nand configures the `carbon-aggregator` service.\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": "~> 1.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/memcached",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "recommends": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/systemd",
      "revision": ">= 0.0.0"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/s6",
      "revision": ">= 0.0.0"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/graphiti",
      "revision": ">= 0.0.0"
    }
  ]
}