{
  "name": "lsyncd Chef cookbook",
  "chef_cookbook_name": "lsyncd",
  "revision": "0.2.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/lsyncd",
    "https://supermarket.chef.io/cookbooks/lsyncd/download",
    "https://supermarket.chef.io/cookbooks/lsyncd/versions/0.2.0",
    "https://supermarket.chef.io/cookbooks/lsyncd/versions/0.2.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/lsyncd/versions/0.2.0",
    "https://supermarket.chef.io/api/v1/cookbooks/lsyncd",
    "https://supermarket.chef.io/api/v1/cookbooks/lsyncd/versions/0.2.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/lsyncd",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/lsyncd/versions/0.2.0/download",
  "deprecated": false,
  "created": "2013-04-09T00:48:41.000Z",
  "updated": "2015-03-27T17:00:35.982Z",
  "description": "Installs/Configures lsyncd",
  "maintainer": {
    "name": "danielgivens",
    "email": "daniel.givens@rackspace.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 5872570,
  "downloads_count_revision": 1259609,
  "repository_url": "https://github.com/dgivens/chef-lsyncd/",
  "issues_url": "https://github.com/dgivens/chef-lsyncd/issues",
  "chef_source_url": "https://github.com/dgivens/chef-lsyncd/",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# lsyncd Cookbook\n\nThe lsyncd cookbook installs lsyncd, creates a basic config, and starts the\nservice. Additionally, it exposes the lsyncd_target resource to easily add sync\nconfigs.\n\nThrough some ugly Lua hackery, the main config, `/etc/lsyncd/lsyncd.conf.lua`,\nis setup such that it will include all sync configs in `/etc/lsyncd/conf.d/`.\nThe lsyncd_target resource pretty much just creates the configs in \n`/etc/lsyncd/conf.d/`.\n\nThe basis for this cookbook came from \n[bflad's lsyncd cookbook](https://github.com/bflad/chef-lsyncd).\n\n## Requirements\n\n- Chef 11 or greater\n\nTested on:\n\n- Debian 7.2 (Wheezy)\n- Ubuntu 12.04\n- CentOS 6.5\n\n## Resources/Providers\n\n### lsyncd_target\n\n#### Actions\n\n- `:create` - creates a sync config\n- `:delete` - deletes the sync config\n\n#### Parameters\n\n- `mode` - lsyncd sync mode. Defaults to `rsync`\n- `source` - source directory. Required\n- `target` - target directory to sync files to. Required\n- `host` - IP or hostname of remote host. Required for remote syncing with the `rsync` or `rsyncssh` modes.\n- `rsync_opts` - list of rsync options\n- `exclude` - list of [exclusions](https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%204%20Config%20%E2%80%96%20Default%20Behavior#exclusions)\n- `exclude_from` - path to file containing exclusions\n\n#### Example\n\nSync a directory to another local directory:\n\n```ruby\ninclude_recipe 'lsyncd'\n\nlsyncd_target 'foo' do\n  source '/tmp/foo'\n  target '/tmp/bar'\n  notifies :restart, 'service[lsyncd]', :delayed\nend\n```\n\nYou can also do remote rsync by specifying `rsync` or `rsyncssh` for the mode:\n\n```ruby\ninclude_recipe 'lsyncd'\n\nlsyncd_target 'foo' do\n  host 'test'\n  source '/tmp/foo'\n  target '/tmp/bar'\n  notifies :restart, 'service[lsyncd]', :delayed\nend\n```\n\n## Recipes\n\n### default.rb\n\nInstalls lsyncd, creates `/etc/lsyncd/conf.d`, sets up base config, and starts\nlsyncd service. Note that the service will not actually start until you have a sync config in place.\n\n## Attributes\n\n```ruby\ndefault[:lsyncd][:conf_d] = '/etc/lsyncd/conf.d'\ndefault[:lsyncd][:log_file] = '/var/log/lsyncd.log'\ndefault[:lsyncd][:status_file] = '/var/log/lsyncd-status.log'\ndefault[:lsyncd][:interval] = 20\n```\n\n## Testing\n\nThis cookbook includes chefspec unit tests and integration tests via test-kitchen and serverspec.\nThere is a test cookbook to exercise the lsync_target LWRP included. \n\nI've included a custom matcher for chefspec. The methods available are:\n\n- `create_lsyncd_target`\n- `delete_lsyncd_target`\n\nThere is also an `lsyncd_target` chef_runner method, so you can do things like:\n\n```ruby\nresource = chef_run.lsyncd_target('test1')\nexpect(resource).to notify('service[lsyncd]').to(:restart).delayed\n```\n\n## License & Authors\n\nAuthors:: Daniel Givens (<daniel.givens@rackspace.com>)\nAuthors:: Brian Flad (<bflad417@gmail.com>)\n\n```text\nCopyright 2014, Rackspace, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 12.04",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 7.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": "~> 3.0.0",
      "self_resolve": true
    }
  ]
}