{
  "name": "docker Chef cookbook",
  "chef_cookbook_name": "docker",
  "revision": "0.40.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/docker",
    "https://supermarket.chef.io/cookbooks/docker/download",
    "https://supermarket.chef.io/cookbooks/docker/versions/0.40.0",
    "https://supermarket.chef.io/cookbooks/docker/versions/0.40.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.40.0",
    "https://supermarket.chef.io/api/v1/cookbooks/docker",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.40.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Deployment/Docker"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/docker",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.40.0/download",
  "deprecated": false,
  "created": "2013-05-11T04:44:23.000Z",
  "updated": "2016-10-14T14:55:11.291Z",
  "description": "Provides docker_service, docker_image, and docker_container resources",
  "maintainer": {
    "name": "chef",
    "email": "bflad417@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 178,
  "downloads_count": 70082664,
  "downloads_count_revision": 73326,
  "repository_url": "https://github.com/chef-cookbooks/chef-docker",
  "issues_url": "https://github.com/chef-cookbooks/chef-docker/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/chef-docker",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Docker Cookbook\n===============\n[![Build Status](https://secure.travis-ci.org/bflad/chef-docker.png?branch=master)](http://travis-ci.org/bflad/chef-docker)\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/bflad/chef-docker?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThe Docker Cookbook is a library cookbook that provides resources\n(LWRPs) for use in recipes.\n\nBreaking Changes Alert\n----------------------\nIn version 1.0 of this cookbook, we have made a significant\nbreaking changes including the way that we handle resources\n(`docker_image`, `docker_container` and `docker_registry`). It is\nhighly recommended that you constrain the version of the cookbook you\nare using in the appropriate places.\n\n- metadata.rb\n- Chef Environments\n- Berksfile\n- Chef Policyfile\n\nMore details about specific changes will be documented in the\n[1.0_CHANGES.md](1.0_CHANGES.md) file.\n\nScope\n-----\nThis cookbook is concerned with the [Docker](http://docker.io)\ncontainer engine as distributed by Docker, Inc. It does not address\nwith docker ecosystem tooling or prerequisite technology such as\ncgroups or aufs.\n\nRequirements\n------------\n- Chef 11 or higher\n- Ruby 1.9 or higher (preferably from the Chef full-stack installer)\n- Network accessible web server hosting the docker binary.\n\nPlatform Support\n----------------\nThe following platforms have been tested with Test Kitchen:\n\n```\n|--------------+-------|\n|              | 1.6.0 |\n|--------------+-------|\n| amazon       | X     |\n|--------------+-------|\n| centos-6     | X     |\n|--------------+-------|\n| centos-7     | X     |\n|--------------+-------|\n| fedora-21    | X     |\n|--------------+-------|\n| debian-7     | X     |\n|--------------+-------|\n| ubuntu-12.04 | X     |\n|--------------+-------|\n| ubuntu-14.04 | X     |\n|--------------+-------|\n| ubuntu-15.04 | X     |\n|--------------+-------|\n```\n\nCookbook Dependencies\n---------------------\n- none!\n\nUsage\n-----\n- Add ```depends 'docker', '~> 1.0'``` to your cookbook's metadata.rb\n- Place resources shipped in this cookbook in a recipe, the same way\n  you'd use core Chef resources (file, template, directory, package, etc).\n\n```ruby\ndocker_service 'default' do\n  action [:create, :start]\nend\n\ndocker_image 'busybox' do\n  action :pull\nend\n\ndocker_container 'an echo server' do\n  image 'busybox'\n  port '1234:1234'\n  command \"nc -ll -p 1234 -e /bin/cat\"\n  detach true\n  init_type false\nend\n```\nTest Cookbooks as Examples\n--------------------------\nThe cookbooks ran under test-kitchen make excellent usage examples.\nThe above recipe is actually used as a smoke test, and is converged by\ntest-kitchen during development. It is located in this repo at\n`test/cookbooks/docker_test/recipes/hello_world.rb`\n\nMore example recipes can be found at:\n```ruby\ntest/cookbooks/docker_test/\ntest/cookbooks/docker_service_test/\n```\n\nCgroups, Execution and Storage drivers\n--------------------------------------\nBeginning in chef-docker 1.0, support for LXC execution driver has\nbeen removed in favor of native. Cgroups and storage drivers are now\nloosely coupled dependencies and should be configured using other\ncookbooks.\n\nStorage drivers can be selected with the `storage_driver` property on\nthe `docker_service` resource like this:\n\n```ruby\ndocker_service 'default' do\n   storage_driver 'overlay'\nend\n```\n\nConfiguration of the backing storage driver, including kernel module\nloading, is out of scope for this cookbook.\n\nResources Overview\n------------------\n* `docker_service`: docker daemon installation and configuration\n* `docker_container`: container operations\n* `docker_image`: image/repository operations\n* `docker_registry`: registry operations\n\n### Getting Started\nHere's a quick example of pulling the latest image and running a\ncontainer with exposed ports (creates service automatically):\n\n```ruby\n# Pull latest image\ndocker_image 'samalba/docker-registry'\n\n# Run container exposing ports\ndocker_container 'samalba/docker-registry' do\n  detach true\n  port '5000:5000'\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\nMaybe you want to automatically update your private registry with\nchanges from your container?\n\n```ruby\n# Login to private registry\ndocker_registry 'https://docker-registry.example.com/' do\n  username 'shipper'\n  password 'iloveshipping'\nend\n\n# Pull tagged image\ndocker_image 'apps/crowsnest' do\n  tag 'not-latest'\nend\n\n# Run container\ndocker_container 'crowsnest'\n\n# Save current timestamp\ntimestamp = Time.new.strftime('%Y%m%d%H%M')\n\n# Commit container changes\ndocker_container 'crowsnest' do\n   repository 'apps'\n   tag timestamp\n   action :commit\nend\n\n# Push image\ndocker_image 'crowsnest' do\n  repository 'apps'\n  tag timestamp\n  action :push\nend\n```\n\nSee full documentation for each resource and action below for more\ninformation.\n\nResources Details\n------------------\nThe ```docker_service```, ```docker_image```, ```docker_container```,\nand ```docker_registry``` resources are documented in full below.\n\n### docker_service\nThe `docker_service` manages a Docker daemon.\n\nThe `:create` action manages software installation.\nThe `:start` action manages the running docker service on the machine.\n\nThe service management strategy for the host platform is dynamically\nchosen based on platform, but can be overridden. See the \"providers\"\nsection below for more information.\n\n#### Example\n```ruby\ndocker_service 'tls_test:2376' do\n  host [\"tcp://#{node['ipaddress']}:2376\", 'unix:///var/run/docker.sock']\n  tlscacert '/path/to/ca.pem'\n  tlscert '/path/to/server.pem'\n  tlskey '/path/to/serverkey.pem'\n  tlsverify true\n  provider Chef::Provider::DockerService::Systemd\n  action [:create, :start]\nend\n```\n\nWARNING - As of the 1.0 version of this cookbook, `docker_service`\nis a singleton resource. This means that if you create multiple\n`docker_service` resources on the same machine, you will only\ncreate one actual service and things may not work as expected.\n\n#### Properties\nThe `docker_service` resource property list mostly corresponds to\nthe options found in the\n[Docker Command Line Reference](https://docs.docker.com/reference/commandline/cli/)\n\n- `source` - URL to the pre-compiled Docker binary used for\n  installation. Defaults to a calculated URL based on kernel version,\n  Docker version, and platform arch. By default, this will try to get\n  to \"http://get.docker.io/builds/\".  \n- `version` - Docker version to install\n- `checksum` - sha256 checksum of Docker binary\n- `instance` - Identity for ```docker_service``` resource. Defaults to\n  name. Mostly unimportant for the 1.0 version because of its\n  singleton status. | String | nil \n- `api_cors_header` - Set CORS headers in the remote API\n- `bridge` - Attach containers to a network bridge\n- `bip` - Specify network bridge IP\n- `debug` - Enable debug mode\n- `daemon` - Enable daemon mode\n- `dns` - DNS server to use\n- `dns_search` - DNS search domains to use\n- `exec_driver` - Exec driver to use\n- `fixed_cidr` - IPv4 subnet for fixed IPs\n- `fixed_cidr_v6` - IPv6 subnet for fixed IPs\n- `group` - Posix group for the unix socket\n- `graph` - Root of the Docker runtime - Effectively, the \"data\n  directory\"  \n- `host` - Daemon socket(s) to connect to - `tcp://host:port`,\n  `unix:///path/to/socket`, `fd://*` or `fd://socketfd`  \n- `icc` - Enable inter-container communication\n- `ip` - Enable inter-container communication\n- `ip_forward` - Enable ip forwarding\n- `ipv4_forward` - Enable net.ipv4.ip_forward\n- `ipv6_forward` - Enable net.ipv6.ip_forward\n- `ip_masq` - Enable IP masquerading\n- `iptables` - Enable addition of iptables rules\n- `ipv6` - Enable IPv6 networking\n- `log_level` - Set the logging level\n- `label` - Set key=value labels to the daemon\n- `log_driver` - Container's logging driver (json-file/none)\n- `mtu` - Container's logging driver (json-file/none)\n- `pidfile` - Path to use for daemon PID file\n- `registry_mirror` - Preferred Docker registry mirror\n- `storage_driver` - Storage driver to use\n- `selinux_enabled` - Enable selinux support\n- `storage_opt` - Set storage driver options\n- `tls` - Use TLS; implied by --tlsverify\n- `tlscacert` - Trust certs signed only by this CA\n- `tlscert` - Path to TLS certificate file\n- `tlskey` - Path to TLS key file\n- `tlsverify` - Use TLS and verify the remote\n- `default_ulimit` - Set default ulimit settings for containers\n- http_proxy - ENV variable set before for Docker daemon starts\n- https_proxy - ENV variable set before for Docker daemon starts\n- no_proxy - ENV variable set before for Docker daemon starts\n- tmpdir - ENV variable set before for Docker daemon starts\n- logfile - Location of Docker daemon log file\n\n# SAVEGAME: YOU ARE HERE\n\n### docker_container\n\nBelow are the available actions for the LWRP, default being `run`.\n\nThese attributes are associated with all LWRP actions.\n\nProperty | Description | Type | Default\n---------|-------------|------|---------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Container::CommandTimeout`) | Integer | 60\ncommand | Command to run in or identify container | String  | nil\ncontainer_name | Name for container/service | String | nil\n\n#### docker_container action :commit\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nauthor | Author for commit | String | nil\nmessage | Message for commit | String | nil\nrepository | Remote repository | String | nil\nrun | Configuration to be applied when the image is launched with `docker run` | String | nil\ntag | Specific tag for image | String | nil\n\nCommit a container with optional repository, run specification, and tag:\n\n```ruby\ndocker_container 'myApp' do\nrepository 'myRepo'\ntag Time.new.strftime(\"%Y%m%d%H%M\")\nrun '{\"Cmd\": [\"cat\", \"/world\"], \"PortSpecs\": [\"22\"]}'\naction :commit\nend\n```\n\n#### docker_container action :cp\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to copy file | String | nil\nsource | Container path to get file | String | nil\n\nCopying a file from container to host:\n\n```ruby\ndocker_container 'myApp' do\n  source '/path/to/container/file'\n  destination '/path/to/save/on/host'\n  action :cp\nend\n```\n\n#### docker_container action :create\n\nBy default, this will handle creating a service for the container when action is create, run or start. `set['docker']['container_init_type'] = false` or add `init_type false` for LWRP to disable this behavior.\n\nAttributes for this action can be found in the `run` action (except for the `detach` attribute).\n\n#### docker_container action :export\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to save tarball | String | nil\n\nExporting container to host:\n\n```ruby\ndocker_container 'myApp' do\n  destination '/path/to/save/on/host.tgz'\n  action :export\nend\n```\n\n#### docker_container action :kill\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsignal | Signal to send to the container | String | nil (implicitly KILL)\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nKill a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :kill\nend\n```\n\nSend SIGQUIT to a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  signal 'QUIT'\n  action :kill\nend\n```\n\n#### docker_container action :redeploy\n\nStops, removes, and runs a container. Useful for notifications from image build/pull.\n\nAttributes for this action can be found in the `stop`, `remove`, and `run` actions.\n\nRedeploy container when new image is pulled:\n\n```ruby\ndocker_image 'shipyard/shipyard' do\n  action :pull\n  notifies :redeploy, 'docker_container[shipyard]', :immediately\nend\n\ndocker_container 'shipyard' do\n  # Other attributes\n  action :run\nend\n```\n\n#### docker_container action :remove\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\nforce | Force removal | TrueClass, FalseClass | nil\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRemove a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :remove\nend\n```\n\n#### docker_container action :remove_link\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nlink | Link to remove from container | String | nil\n\nRemove a container:\n\n```ruby\ndocker_container 'shipyard' do\n  link 'foo'\n  action :remove_link\nend\n```\n\n#### docker_container action :remove_volume\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nvolume | Volume(s) to remove from container | String, Array | nil\n\nRemove a container:\n\n```ruby\ndocker_container 'shipyard' do\n  volume %w(/extravol1 /extravol2)\n  action :remove_volume\nend\n```\n\n#### docker_container action :restart\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRestart a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :restart\nend\n```\n\n#### docker_container action :run\n\nBy default, this will handle creating a service for the container when action is create, run or start. `set['docker']['container_init_type'] = false` or add `init_type false` for LWRP to disable this behavior.\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nadditional_host | Add a custom host-to-IP mapping (host:ip) | String, Array | nil\nattach | Attach container's stdout/stderr and forward all signals to the process | TrueClass, FalseClass | nil\ncap_add | Capabilities to add to container | String, Array | nil\ncidfile | File to store container ID | String | nil\ncontainer_name | Name for container/service | String | nil\ncookbook | Cookbook to grab any templates | String | docker\ncpu_shares | CPU shares for container | Fixnum | nil\ndetach | Detach from container when starting | TrueClass, FalseClass | nil\ndevice | Device(s) to pass through to container | String, Array | nil\ndns | DNS servers for container | String, Array | nil\ndns_search | DNS search domains for container | String, Array | nil\nentrypoint | Overwrite the default entrypoint set by the image | String | nil\nenv | Environment variables to pass to container | String, Array | nil\nenv_file | Read in a line delimited file of ENV variables | String | nil\nexpose | Expose a port from the container without publishing it to your host | Fixnum, String, Array | nil\nhostname | Container hostname | String | nil\nimage | Image for container | String | LWRP name\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nlink | Add link to another container | String, Array | nil\nlabel | Options to pass to underlying labeling system | String | nil\nlxc_conf | Custom LXC options | String, Array | nil\nmemory | Set memory limit for container | Fixnum, String | nil\nnet | [Configure networking](http://docs.docker.io/reference/run/#network-settings) for container | String | nil\nnetworking (*DEPRECATED*) | Configure networking for container | TrueClass, FalseClass | true\nopt | Custom driver options | String, Array | nil\nport | Map network port(s) to the container | Fixnum (*DEPRECATED*), String, Array | nil\nprivileged | Give extended privileges | TrueClass, FalseClass | nil\npublic_port (*DEPRECATED*) | Map host port to container | Fixnum | nil\npublish_exposed_ports | Publish all exposed ports to the host interfaces | TrueClass, FalseClass | false\nremove_automatically | Automatically remove the container when it exits (incompatible with detach) | TrueClass, FalseClass | false\nrestart | Restart policy for the container (no, on-failure, always) | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\ntty | Allocate a pseudo-tty | TrueClass, FalseClass | nil\nuser | User to run container | String | nil\nvolume | Create bind mount(s) with: [host-dir]:[container-dir]:[rw\\|ro]. If \"container-dir\" is missing, then docker creates a new volume. | String, Array | nil\nvolumes_from | Mount all volumes from the given container(s) | String | nil\nworking_directory | Working directory inside the container | String | nil\n\nRun a container:\n\n```ruby\ndocker_container 'myImage' do\n  detach true\nend\n```\n\nRun a container via command:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  detach true\nend\n```\n\nRun a container from image (docker-registry for example):\n\n```ruby\ndocker_container 'docker-registry' do\n  image 'samalba/docker-registry'\n  detach true\n  hostname 'docker-registry.example.com'\n  port '5000:5000'\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\n#### docker_container action :start\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nattach | Attach container's stdout/stderr and forward all signals to the cookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\n\nStart a stopped container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :start\nend\n```\n\n#### docker_container action :stop\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nStop a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :stop\nend\n```\n\n#### docker_container action :wait\n\nWait for a container to finish:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  action :wait\nend\n```\n\n### docker_image\n\nBelow are the available actions for the LWRP, default being `pull`.\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Image::CommandTimeout`) | Integer | `node['docker']['image_cmd_timeout']`\n\n#### docker_image action :build and :build_if_missing\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndockerfile (*DEPRECATED*) | Dockerfile to build image | String | nil\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\nno_cache | Do not use the cache when building the image | TrueClass, FalseClass | false\npath (*DEPRECATED*) | Local path to files | String | nil\nrm | Remove intermediate containers after a successful build | TrueClass, FalseClass | false\nsource | Source dockerfile/directory/URL to build | String | nil\ntag | Optional tag for image | String | nil\n\nBuild image from Dockerfile:\n\n```ruby\ndocker_image 'myImage' do\n  tag 'myTag'\n  source 'myImageDockerfile'\n  action :build_if_missing\nend\n```\n\nBuild image from remote repository:\n\n```ruby\ndocker_image 'myImage' do\n  source 'example.com/foo/myImage'\n  tag 'myTag'\n  action :build_if_missing\nend\n```\n\nConditionally rebuild image if changes upstream:\n\n```ruby\ngit \"#{Chef::Config[:file_cache_path]}/docker-testcontainerd\" do\n  repository 'git@github.com:bflad/docker-testcontainerd.git'\n  notifies :build, 'docker_image[tduffield/testcontainerd]', :immediately\nend\n\ndocker_image 'tduffield/testcontainerd' do\n  action :pull_if_missing\nend\n```\n\n#### docker_image action :import\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\nrepository | Optional repository | String | nil\nsource | Source file/directory/URL | String | nil\ntag | Optional tag for image | String | nil\n\nImport image from local directory:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test'\n  action :import\nend\n```\n\nImport image from local file:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :import\nend\n```\n\nImport image from remote URL:\n\n```ruby\ndocker_image 'test' do\n  source 'https://example.com/testimage.tgz'\n  action :import\nend\n```\n\n#### docker_image action :load\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ninput | Image source (via tar archive file) | String | nil\nsource | Image source (via stdin) | String | nil\n\nLoad repository via input:\n\n```ruby\ndocker_image 'test' do\n  input '/path/to/test.tar'\n  action :load\nend\n```\n\nLoad repository via stdin:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :load\nend\n```\n\n#### docker_image action :pull and :pull_if_missing\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nregistry | Optional registry server | String | nil\ntag | Optional tag for image | String | nil\n\nPull latest image every Chef run:\n\n```ruby\ndocker_image 'busybox'\n```\n\nPull latest image only if missing:\n\n```ruby\ndocker_image 'busybox' do\n  action :pull_if_missing\nend\n```\n\nPull tagged image:\n\n```ruby\ndocker_image 'bflad/test' do\n  tag 'not-latest'\nend\n```\n\n#### docker_image action :push\n\nPush image (after logging in with `docker_registry`):\n\n```ruby\ndocker_image 'bflad/test' do\n  action :push\nend\n```\n\n#### docker_image action :remove\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nforce | Force removal | TrueClass, FalseClass | nil\nno_prune | Do not delete untagged parents | TrueClass, FalseClass | nil\n\nRemove image:\n\n```ruby\ndocker_image 'busybox' do\n  action :remove\nend\n```\n\n#### docker_image action :save\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Destination path (via stdout) | String | nil\noutput | Destination path (via file) | String | nil\ntag | Save specific tag | String | nil\n\nSave repository via file to path:\n\n```ruby\ndocker_image 'test' do\n  destination '/path/to/test.tar'\n  action :save\nend\n```\n\nSave repository via stdout to path:\n\n```ruby\ndocker_image 'test' do\n  destination '/path/to/test.tgz'\n  action :save\nend\n```\n\n#### docker_image action :tag\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nforce | Force operation | Boolean | false\nrepository | Remote repository | String | nil\ntag | Specific tag for image | String | nil\n\nTag image:\n\n```ruby\ndocker_image 'test' do\n  repository 'bflad'\n  tag '1.0.0'\n  action :tag\nend\n```\n\n### docker_registry\nFIXME: blah blah blah\n\n#### docker_registry action :login\n\nLog into or register with public registry:\n\n```ruby\ndocker_registry 'https://index.docker.io/v1/' do\n  email 'publicme@example.com'\n  username 'publicme'\n  password 'hope_this_is_in_encrypted_databag'\nend\n```\n\nLog into private registry with optional port:\n\n```ruby\ndocker_registry 'https://docker-registry.example.com:8443/' do\n   username 'privateme'\n   password 'still_hope_this_is_in_encrypted_databag'\nend\n```\n\n## Testing and Development\n\n* Quickly testing with Vagrant: [VAGRANT.md](VAGRANT.md)\n* Full development and testing workflow with Test Kitchen and friends: [TESTING.md](TESTING.md)\n\n## Contributing\n\nPlease see contributing information in: [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Maintainers\n\n* Tom Duffield (http://tomduffield.com)\n* Brian Flad (<bflad417@gmail.com>)\n* Fletcher Nichol (<fnichol@nichol.ca>)\n* Sean OMeara (sean@chef.io)\n\n## License\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}