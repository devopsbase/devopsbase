{
  "name": "karaf Chef cookbook",
  "chef_cookbook_name": "karaf",
  "revision": "1.2.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/karaf",
    "https://supermarket.chef.io/cookbooks/karaf/download",
    "https://supermarket.chef.io/cookbooks/karaf/versions/1.2.1",
    "https://supermarket.chef.io/cookbooks/karaf/versions/1.2.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/karaf/versions/1.2.1",
    "https://supermarket.chef.io/api/v1/cookbooks/karaf",
    "https://supermarket.chef.io/api/v1/cookbooks/karaf/versions/1.2.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/karaf",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/karaf/versions/1.2.1/download",
  "deprecated": false,
  "created": "2016-01-25T17:15:48.558Z",
  "updated": "2016-09-22T21:55:48.233Z",
  "description": "Installs/Configures karaf",
  "maintainer": {
    "name": "jcapriotti",
    "email": "jason.capriotti@gmail.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 1954,
  "downloads_count_revision": 254,
  "repository_url": "https://github.com/JCapriotti/apache-karaf-cookbook",
  "issues_url": "https://github.com/JCapriotti/apache-karaf-cookbook/issues",
  "chef_source_url": "https://github.com/JCapriotti/apache-karaf-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "karaf \n=====\nThis cookbook installs [Apache Karaf](http://karaf.apache.org/).\n\nUsage\n-----\nUse the provided resources to install karaf and configure users and features.\n\nRequirements\n------------\n* java cookbook\n* ark cookbook\n\n### Platform\n* Tested on CentOS 6.6 and Ubuntu 14.04 (via Kitchen)\n\n## Resources\n\n### `karaf`\n```ruby\nkaraf 'install karaf' do\n  install_java  true\n  version       '4.0.4'\n  user         'someuser'  \n  action        :install\nend\n\n```\n#### Actions\n* `:install` - Installs Karaf and the karaf-service wrapper feature, and starts the service.\n* `:remove` - Removes Karaf and the karaf-service wrapper\n\n#### Attributes\n* `install_java` - Whether or not to install Java. *(default: true)*\n* `source_url` - Optional URL to download the Karaf file tar file from.\n* `version` - The version of Karaf to install.\n* `install_path` - Optional install path. *(default: /usr/local)*\n* `user` - The user to run karaf-service as. *(default: root)*\n* `retry_count` - The number of times to retry when performing Karaf client actions. This is important for slower platforms but generally shouldn't need to be changed. *(default: 20)*\n* `retry_delay` - The number of seconds to wait when retrying a Karaf client action. This is important for slower platforms but generally shouldn't need to be changed. *(default: 3)*\n\n> **Note:**\n> When setting the user to run Karaf as, it is assumed the user is already configured properly. When installing features, Maven may use a local repository for the user, which may require a home directory to be set. \n\n### `karaf_feature_repository`\n```ruby\nkaraf_feature_repository 'hawtio' do\n  version \t\t'1.4.51'\n  client_user\t'karaf'\n  :install\nend\n```\n\n#### Actions\n* `:install` - Installs the specified feature repository.\n\n#### Attributes\n* `install_path` - The path to the installation folder. Needs to match the value in `karaf`. Will be cleaned-up/deprecated once a link is added from this resource to `karaf`. *(default: '/usr/local')*\n* `client_user` - The user to run the karaf client as. *(default: karaf)*\n* `repository_name` - The name of the repository to add. *(name attribute)*\n* `version` - The version of the repository to add. *(default: '')*\n\n\n### `karaf_feature`\n```ruby\nkaraf_feature 'hawtio' do\n  :install\nend\n\n```\n#### Actions\n* `:install` - Installs the specified feature.\n\n#### Attributes\n* `install_path` - The path to the installation folder. Needs to match the value in `karaf`. Will be cleaned-up/deprecated once a link is added from this resource to `karaf`. *(default: '/usr/local')*\n* `client_user` - The user to run the karaf client as. *(default: karaf)*\n* `feature_name` - The name of the feature to add. *(name attribute)*\n* `version` - The version of the feature to add. *(default: '')*\n\n\n### `karaf_bundle`\n```ruby\nkaraf_bundle 'com.fasterxml.jackson.core/jackson-core' do\n  version '2.4.3'\n  :install\nend\n\n```\n#### Actions\n* `:install` - Installs the specified bundle.\n\n#### Attributes\n* `install_path` - The path to the installation folder. Needs to match the value in `karaf`. Will be cleaned-up/deprecated once a link is added from this resource to `karaf`. *(default: '/usr/local')*\n* `client_user` - The user to run the karaf client as. *(default: karaf)*\n* `bundle_name` - The name of the feature to add. *(name attribute)*\n* `version` - The version of the feature to add. *(default: '')*\n* `wrap` - If this bundle needs to be wrapped. Prepends . *(default: false)*\n\n\n### `karaf_user`\nManages the users defined in user.properties\n```ruby\nkaraf_user 'newuser' do\n  groups    ['group1', 'group2']\n  password  'ultrafubar'\n  :create\nend\n```\n\n#### Actions\n* `:create` - Creates or updates the specified karaf user.\n\n#### Attributes\n* `install_path` - The path to the installation folder. Needs to match the value in `karaf`. Will be cleaned-up/deprecated once a link is added from this resource to `karaf`. *(default: '/usr/local')*\n* `user_name` - The name of the user to create. *(name attribute)*\n* `password` - The password for the user.\n* `groups` - An array of groups to add the user to.\n\n\n### `karaf_group`\nManages the groups defined in user.properties\n```ruby\nkaraf_group 'newgroup' do\n  roles   ['role1', 'role2']\n  :create\nend\n```\n\n#### Actions\n* `:create` - Creates or updates the specified karaf group.\n\n#### Attributes\n* `install_path` - The path to the installation folder. Needs to match the value in `karaf`. Will be cleaned-up/deprecated once a link is added from this resource to `karaf`. *(default: '/usr/local')*\n* `group_name` - The name of the group to create. *(name attribute)*\n* `roles` - An array of roles to add the group to.\n\n#### Notes\nThis resource automatically adds the (apparently) required `group` role to the group definition. That is:\n```ruby\nkaraf_group 'newgroup' do\n  roles   ['role1', 'role2']\n  :create\nend\n```\n\nWill generate this line in user.properties:\n\n    _g_\\:newgroup = group,role1,role2,\n\nContributing\n------------\n1. Fork the repository on Github\n1. Create a named feature branch (like `add_component_x`)\n1. Write your change\n1. Write tests for your change\n1. Run the tests, ensuring they all pass\n1. Run foodcritic and rubocop to make sure code is clean.\n1. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\nAuthors: Jason Capriotti\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ark",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}