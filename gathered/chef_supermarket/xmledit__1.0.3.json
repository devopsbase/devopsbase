{
  "name": "xmledit Chef cookbook",
  "chef_cookbook_name": "xmledit",
  "revision": "1.0.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/xmledit",
    "https://supermarket.chef.io/cookbooks/xmledit/download",
    "https://supermarket.chef.io/cookbooks/xmledit/versions/1.0.3",
    "https://supermarket.chef.io/cookbooks/xmledit/versions/1.0.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/xmledit/versions/1.0.3",
    "https://supermarket.chef.io/api/v1/cookbooks/xmledit",
    "https://supermarket.chef.io/api/v1/cookbooks/xmledit/versions/1.0.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Binding/Provider",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/xmledit",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/xmledit/versions/1.0.3/download",
  "deprecated": false,
  "created": "2015-05-28T15:31:27.950Z",
  "updated": "2016-05-04T22:43:32.365Z",
  "description": "Provides a resource and provider for incremental editing of XML files",
  "maintainer": {
    "name": "martinb3",
    "email": "martin@mbs3.org"
  },
  "license": "apache2",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 1910285,
  "downloads_count_revision": 131155,
  "repository_url": "https://github.com/martinb3/xmledit-cookbook",
  "issues_url": "https://github.com/martinb3/xmledit-cookbook/issues",
  "chef_source_url": "https://github.com/martinb3/xmledit-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# xmledit-cookbook\n\nThis cookbook allows incremental editing of XML files. You must include the\ndefault recipe to ensure nokogiri and its dependencies are installed using the\nupstream community xml cookbook.\n\nSpecifically, this library cookbooks offers a resource and provider that can be\ncalled by the name `xml_edit`. This resource accepts XPath expressions and will\nperform the expected action on the very first node found.\n\n## Important notes\n\n- If no XML nodes match the XPath expression, no actions will be performed. If a file cannot be found, this provider will raise an error by virtue of `::File` raising an error.\n\n- This cookbook attempts to sidestep resource cloning issues by forcing the resource name to be something other than a path to a file to edit. This allows you to perform multiple edits to the same file by giving the resources unique names and providing the same path attribute value.\n\n- Including an XPath expression that is a match against the node's value that you want to replace (e.g. matching against `[text=()=\\'false\\']` if you want to replace false with true) means that the underlying file resource will no longer be defined, vs. having a file resource that was defined but idempotently 'up to date'. Both styles are possible using this cookbook, depending on the XPath expressions you provide.\n\n## Supported actions\n\n|name|description|\n|----|:-----------:|\n|replace|replaces a target node (and all children) with a new fragment|\n|append|appends a new XML fragment to a parent target node|\n|append_if_missing|if target is found, replace with fragment, otherwise append fragment|\n|remove|remove gets rid of a target node|\n\n## Supported attributes\n\nThese have no default values, and will cause a no-op if they are not specified or don't match a valid file or target.\n\n|name|description|\n|----|:-----------:|\n|path|path to the XML file to edit|\n|target|an xpath expression for the target node (see action replace and append_if_missing above)|\n|parent|an xpath expression for the parent of the target node (see actions append and append_if_missing above)|\n|fragment|a string that will be parsed into an XML fragment, for actions that add or update|\n\nCheckout nokogiri's documentation on [XPath and search](http://www.nokogiri.org/tutorials/searching_a_xml_html_document.html) to understand the syntax behind `target` and `parent` attributes.\n\n## Examples\n\nReplace `false` with `true` in a file at `/etc/application.xml` containing `<config><foo>false</foo></config>`.\n\n```\nxml_edit 'set foo to true' do\n  path '/etc/application.xml'\n  target '/config/foo[text()=\\'false\\']'\n  fragment '<foo>true</foo>'\n  action :replace\nend\n```\n\n## TODO\n\n - Add an attribute for forcing an error when an xpath expr doesn't match\n\n# License\n\n```\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n```\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/poise",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/xml",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}