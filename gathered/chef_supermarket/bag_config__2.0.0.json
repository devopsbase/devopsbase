{
  "name": "bag_config Chef cookbook",
  "chef_cookbook_name": "bag_config",
  "revision": "2.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/bag_config",
    "https://supermarket.chef.io/cookbooks/bag_config/download",
    "https://supermarket.chef.io/cookbooks/bag_config/versions/2.0.0",
    "https://supermarket.chef.io/cookbooks/bag_config/versions/2.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/2.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/2.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/bag_config",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/2.0.0/download",
  "deprecated": false,
  "created": "2012-03-16T23:54:26.000Z",
  "updated": "2012-04-25T15:53:20.000Z",
  "description": "Provides helpers for optional data bag configuration",
  "maintainer": {
    "name": "chrisroberts",
    "email": "chrisroberts.code@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 8,
  "downloads_count": 4867806,
  "downloads_count_revision": 1216907,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "BagConfig\n=========\n\nMaking data bag entries the \"last mile\" of attribute overrides.\n\nWhat's it do?\n-------------\n\nThis cookbook allows attributes to be provided via data bag entries. It slips\nfunctionality into recipes seamlessly to provide consistent functionality across\nall recipes, not just those explicitly built for it.\n\nRepository\n----------\n\nhttps://github.com/heavywater/chef-bag_config\n\nBasic Usage\n===========\n\nAccess attributes the same way as always:\n\n* `node[:my_cookbook][:my_attribute]`\n\n\nNaming scheme\n=============\n\nData bags\n---------\n\nThe name of the data bag used will correspond to the name of the base attribute\nkey used within a cookbook. For example, the base attribute key for the munin\ncookbook is `munin` thus the data bag name used will be `munin`. However, the \nchef-client cookbook uses the base attribute key of `chef_client` so the data\nbag name it uses will be `chef_client`.\n\nThe naming of the data bag entries are based on the node name with a `config_`\nprefix. Given a node named `lucid`, the data bag entry id would be `config_lucid`.\nPeriods are replaced with underscores within the node name for generating the\ndata bag entry name. Thus, a node named `lucid.example.com` would have a data\nbag entry id of `config_lucid_example_com`.\n\n\nQuick Ref:\n\n```\ncookbook: chef-client\nbase key: chef_client\nnode name: test1.box\ndata bag name: chef_client\ndata bag entry id: config_test1_box\n```\n\nAdvanced Usage\n==============\n\nCustom Data Bag\n---------------\n\nExample: Use the `myconfig` data bag to supply configuration entries for the\n`nagios` attribute:\n\n* `node[:bag_config][:nagios] = {:bag => :myconfig}`\n\nCustom Data Bag Entry\n---------------------\n\nExample: Use `custom_config` data bag entry id under the `nagios`\nbase attribute key:\n\n* `node[:bag_config][:nagios] = {:item => 'custom_config'}`\n\n\nEncrypted Data Bag Entry\n------------------------\n\nEncrypted data bags are supported when the encrypted attribute is set:\n\n* `node[:bag_config][:nagios] = {:encrypted => true}\n\nThis will require the secret being provided either inline:\n\n* `node[:bag_config][:nagios] = {:secret => 'my_secret'}`\n\nor as a path to the secret file on the node:\n\n* `node[:bag_config][:nagios] = {:secret => '/etc/config_secret.file'}`\n\nCompatibility Note\n==================\n\nThis version is incompatible with the 1.x versions. It removes all custom methods from Recipe\ninstances and instead proxies the attribute requests via the node, so no modifications are\nrequired for full support.\n"
}