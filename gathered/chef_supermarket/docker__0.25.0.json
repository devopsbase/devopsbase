{
  "name": "docker Chef cookbook",
  "chef_cookbook_name": "docker",
  "revision": "0.25.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/docker",
    "https://supermarket.chef.io/cookbooks/docker/download",
    "https://supermarket.chef.io/cookbooks/docker/versions/0.25.0",
    "https://supermarket.chef.io/cookbooks/docker/versions/0.25.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.25.0",
    "https://supermarket.chef.io/api/v1/cookbooks/docker",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.25.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Deployment/Docker"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/docker",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/0.25.0/download",
  "deprecated": false,
  "created": "2013-05-11T04:44:23.000Z",
  "updated": "2016-10-14T14:55:11.291Z",
  "description": "Provides docker_service, docker_image, and docker_container resources",
  "maintainer": {
    "name": "chef",
    "email": "bflad417@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 178,
  "downloads_count": 70082664,
  "downloads_count_revision": 1209082,
  "repository_url": "https://github.com/chef-cookbooks/chef-docker",
  "issues_url": "https://github.com/chef-cookbooks/chef-docker/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/chef-docker",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# chef-docker [![Build Status](https://secure.travis-ci.org/bflad/chef-docker.png?branch=master)](http://travis-ci.org/bflad/chef-docker)\n\n## Description\n\nInstalls/Configures [Docker](http://docker.io). Please see [COMPATIBILITY.md](COMPATIBILITY.md) for more information about Docker versions that are tested and supported by cookbook versions along with LWRP features.\n\nThis cookbook was inspired by @thoward's docker-cookbook: https://github.com/thoward/docker-cookbook\n\n## Requirements\n\n### Chef\n\n* Chef 11+\n\n### Platforms\n\n* CentOS 6\n* Debian 7 (experimental)\n* Fedora 19\n* Fedora 20\n* Oracle 6 (experimental)\n* RHEL 6\n* Ubuntu 12.04\n* Ubuntu 12.10\n* Ubuntu 13.04\n* Ubuntu 13.10 (experimental)\n\n### Cookbooks\n\n[Opscode Cookbooks](https://github.com/opscode-cookbooks/)\n\n* [apt](https://github.com/opscode-cookbooks/apt)\n* [git](https://github.com/opscode-cookbooks/git)\n* [yum-epel](https://github.com/opscode-cookbooks/yum-epel)\n\nThird-Party Cookbooks\n\n* [golang](https://github.com/NOX73/chef-golang)\n* [lxc](https://github.com/hw-cookbooks/lxc)\n* [modules](https://github.com/Youscribe/modules-cookbook)\n* [sysctl](https://github.com/onehealth-cookbooks/sysctl)\n\n## Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\narch | Architecture for docker binary (note: Docker only currently supports x86_64) | String | auto-detected (see attributes/default.rb)\nbind_socket | Socket path that docker should bind | String | unix:///var/run/docker.sock\nbind_uri | TCP URI docker should bind | String | nil\ncontainer_cmd_timeout | container LWRP default cmd_timeout seconds | Fixnum | 60\ncontainer_init_type | Init type for docker containers (nil, \"systemd\", or \"upstart\") | NilClass or String | `node['docker']['init_type']`\nhttp_proxy | HTTP_PROXY environment variable | String | nil\nimage_cmd_timeout | image LWRP default cmd_timeout seconds | Fixnum | 300\ninit_type | Init type for docker (\"systemd\", \"sysv\", or \"upstart\") | String | auto-detected (see attributes/default.rb)\ninstall_dir | Installation directory for docker binary | String | auto-detected (see attributes/default.rb)\ninstall_type | Installation type for docker (\"binary\", \"package\" or \"source\") | String | \"package\"\noptions | Additional options to pass to docker. These could be flags like \"-api-enable-cors\". | String | nil\nregistry_cmd_timeout | registry LWRP default cmd_timeout seconds | Fixnum | 60\nversion | Version of docker | String | nil\n\n### Binary Attributes\n\nThese attributes are under the `node['docker']['binary']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nversion | Version of docker binary | String | `node['docker']['version'] || latest`\nurl | URL for downloading docker binary | String | auto-detected (see attributes/default.rb)\n\n### Package Attributes\n\nThese attributes are under the `node['docker']['package']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndistribution | Distribution for docker packages | String | auto-detected (see attributes/default.rb)\nrepo_url | Repository URL for docker packages | String | auto-detected (see attributes/default.rb)\n\n### Source Attributes\n\nThese attributes are under the `node['docker']['source']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nref | Repository reference for docker source | String | \"master\"\nurl | Repository URL for docker source | String | \"https://github.com/dotcloud/docker.git\"\n\n## Recipes\n\n* `recipe[docker]` Installs/Configures Docker\n* `recipe[docker::aufs]` Installs/Loads AUFS Linux module\n* `recipe[docker::binary]` Installs Docker binary\n* `recipe[docker::cgroups]` Installs/configures default platform Control Groups support\n* `recipe[docker::lxc]` Installs/configures default platform LXC support\n* `recipe[docker::package]` Installs Docker via package\n* `recipe[docker::source]` Installs Docker via source\n* `recipe[docker::systemd]` Installs/Starts Docker via systemd\n* `recipe[docker::sysv]` Installs/Starts Docker via SysV\n* `recipe[docker::upstart]` Installs/Starts Docker via Upstart\n\n## LWRPs\n\n* docker_container: container operations\n* docker_image: image/repository operations\n* docker_registry: registry operations\n\n### Getting Started\n\nHere's a quick example of pulling the latest image and running a container with exposed ports (creates service automatically):\n\n```ruby\n# Pull latest image\ndocker_image 'samalba/docker-registry'\n\n# Run container exposing ports\ndocker_container 'samalba/docker-registry' do\n  detach true\n  port '5000:5000'\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\nMaybe you want to automatically update your private registry with changes from your container?\n\n```ruby\n# Login to private registry\ndocker_registry 'https://docker-registry.example.com/' do\n  username 'shipper'\n  password 'iloveshipping'\nend\n\n# Pull tagged image\ndocker_image 'apps/crowsnest' do\n  tag 'not-latest'\nend\n\n# Run container\ndocker_container 'crowsnest'\n\n# Save current timestamp\ntimestamp = Time.new.strftime('%Y%m%d%H%M')\n\n# Commit container changes\ndocker_container 'crowsnest' do\n  repository 'apps'\n  tag timestamp\n  action :commit\nend\n\n# Push image\ndocker_image 'crowsnest' do\n  repository 'apps'\n  tag timestamp\n  action :push\nend\n```\n\nSee full documentation for each LWRP and action below for more information.\n\n### docker_container\n\nBelow are the available actions for the LWRP, default being `run`.\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Container::CommandTimeout`)| Integer | `node['docker']['container_cmd_timeout']`\ncommand | Command to run in or identify container | String | nil\ncontainer_name | Name for container/service | String | nil\n\n#### commit\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nauthor | Author for commit | String | nil\nmessage | Message for commit | String | nil\nrepository | Remote repository | String | nil\ntag | Specific tag for image | String | nil\n\nCommit a container with optional repository and tag:\n\n```\ndocker_container 'myApp' do\n  repository 'myRepo'\n  tag Time.new.strftime(\"%Y%m%d%H%M\")\n  action :commit\nend\n```\n\n#### cp\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to copy file | String | nil\nsource | Container path to get file | String | nil\n\nCopying a file from container to host:\n\n```ruby\ndocker_container 'myApp' do\n  source '/path/to/container/file'\n  destination '/path/to/save/on/host'\n  action :cp\nend\n```\n\n#### export\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to save tarball | String | nil\n\nExporting container to host:\n\n```ruby\ndocker_container 'myApp' do\n  destination '/path/to/save/on/host.tgz'\n  action :export\nend\n```\n\n#### kill\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nKill a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :kill\nend\n```\n\n#### remove\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nlink | Add link to another container | String, Array | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRemove a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :remove\nend\n```\n\n#### restart\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRestart a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :restart\nend\n```\n\n#### run\n\nBy default, this will handle creating a service for the container when action is run or start. `set['docker']['container_init_type'] = false` or add `init_type false` for LWRP to disable this behavior.\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nattach | Attach container's stdout/stderr and forward all signals to the process | TrueClass, FalseClass | nil\ncidfile | File to store container ID | String | nil\ncontainer_name | Name for container/service | String | nil\ncookbook | Cookbook to grab any templates | String | docker\ncpu_shares | CPU shares for container | Fixnum | nil\ndetach | Detach from container when starting | TrueClass, FalseClass | nil\ndns | DNS servers for container | String, Array | nil\nentrypoint | Overwrite the default entrypoint set by the image | String | nil\nenv | Environment variables to pass to container | String, Array | nil\nexpose | Expose a port from the container without publishing it to your host | Fixnum, String, Array | nil\nhostname | Container hostname | String | nil\nimage | Image for container | String | LWRP name\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nlink | Add link to another container | String, Array | nil\nlxc_conf | Custom LXC options | String, Array | nil\nmemory | Set memory limit for container | Fixnum | nil\nport | Map network port(s) to the container | Fixnum (*DEPRECATED*), String, Array | nil\nprivileged | Give extended privileges | TrueClass, FalseClass | nil\npublic_port (*DEPRECATED*) | Map host port to container | Fixnum | nil\npublish_exposed_ports | Publish all exposed ports to the host interfaces | TrueClass, FalseClass | false\nremove_automatically | Automatically remove the container when it exits (incompatible with detach) | TrueClass, FalseClass | false\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\ntty | Allocate a pseudo-tty | TrueClass, FalseClass | nil\nuser | User to run container | String | nil\nvolume | Create bind mount(s) with: [host-dir]:[container-dir]:[rw|ro]. If \"container-dir\" is missing, then docker creates a new volume. | String, Array | nil\nvolumes_from | Mount all volumes from the given container(s) | String | nil\nworking_directory | Working directory inside the container | String | nil\n\nRun a container:\n\n```ruby\ndocker_container 'myImage' do\n  detach true\nend\n```\n\nRun a container via command:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  detach true\nend\n```\n\nRun a container from image (docker-registry for example):\n\n```ruby\ndocker_container 'docker-registry' do\n  image 'samalba/docker-registry'\n  detach true\n  hostname 'xx.xx.xx.xx'\n  port 5000\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\n#### start\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nattach | Attach container's stdout/stderr and forward all signals to the cookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\n\nStart a stopped container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :start\nend\n```\n\n#### stop\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nStop a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :stop\nend\n```\n\n#### wait\n\nWait for a container to finish:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  action :wait\nend\n```\n\n### docker_image\n\nBelow are the available actions for the LWRP, default being `pull`.\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Image::CommandTimeout`) | Integer | `node['docker']['image_cmd_timeout']`\n\n#### build\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndockerfile (*DEPRECATED*) | Dockerfile to build image | String | nil\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\npath (*DEPRECATED*) | Local path to files | String | nil\nsource | Source dockerfile/directory/URL to build | String | nil\ntag | Optional tag for image | String | nil\n\nBuild image from Dockerfile:\n\n```ruby\ndocker_image 'myImage' do\n  tag 'myTag'\n  source 'myImageDockerfile'\n  action :build\nend\n```\n\nBuild image from remote repository:\n\n```ruby\ndocker_image 'myImage' do\n  source 'example.com/foo/myImage'\n  tag 'myTag'\n  action :build\nend\n```\n\n#### import\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\nrepository | Optional repository | String | nil\nsource | Source file/directory/URL | String | nil\ntag | Optional tag for image | String | nil\n\nImport image from local directory:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test'\n  action :import\nend\n```\n\nImport image from local file:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :import\nend\n```\n\nImport image from remote URL:\n\n```ruby\ndocker_image 'test' do\n  source 'https://example.com/testimage.tgz'\n  action :import\nend\n```\n\n#### insert\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Destination path/URL | String | nil\nsource | Source path/URL | String | nil\n\nInsert file from remote URL:\n\n```ruby\ndocker_image 'test' do\n  source 'http://example.com/some/file.txt'\n  destination '/container/path/for/some/file.txt'\n  action :insert\nend\n```\n\n#### load\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nsource | Source path/URL | String | nil\n\nLoad repository from path:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :load\nend\n```\n\n#### pull\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nregistry | Optional registry server | String | nil\ntag | Optional tag for image | String | nil\n\nPull latest image:\n\n```ruby\ndocker_image 'busybox'\n```\n\nPull tagged image:\n\n```ruby\ndocker_image 'bflad/test' do\n  tag 'not-latest'\nend\n```\n\n#### push\n\nPush image (after logging in with `docker_registry`):\n\n```ruby\ndocker_image 'bflad/test' do\n  action :push\nend\n```\n\n#### remove\n\nRemove image:\n\n```ruby\ndocker_image 'busybox' do\n  action :remove\nend\n```\n\n#### save\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Destination path | String | nil\n\nSave repository to path:\n\n```ruby\ndocker_image 'test' do\n  destination '/path/to/test.tgz'\n  action :save\nend\n```\n\n#### tag\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nforce | Force operation | Boolean | false\nrepository | Remote repository | String | nil\ntag | Specific tag for image | String | nil\n\nTag image:\n\n```ruby\ndocker_image 'test' do\n  repository 'bflad'\n  tag '1.0.0'\n  action :tag\nend\n```\n\n### docker_registry\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Registry::CommandTimeout`) | Integer | `node['docker']['registry_cmd_timeout']`\n\n#### login\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nemail | Registry email | String | nil\npassword | Registry password | String | nil\nusername | Registry username | String | nil\n\nLog into public registry:\n\n    docker_registry 'https://index.docker.io/v1/' do\n      username 'publicme'\n      password 'hope_this_is_in_encrypted_databag'\n    end\n\nLog into private registry with optional port:\n\n    docker_registry 'https://docker-registry.example.com:8443/' do\n      username 'privateme'\n      password 'still_hope_this_is_in_encrypted_databag'\n    end\n\nRegister with registry:\n\n    docker_registry 'https://index.docker.io/v1/' do\n      email 'publicme@example.com'\n      username 'publicme'\n      password 'hope_this_is_in_encrypted_databag'\n    end\n\n## Usage\n\n### Default Installation\n\n* Add `recipe[docker]` to your node's run list\n\n## Testing and Development\n\n* Quickly testing with Vagrant: [VAGRANT.md](VAGRANT.md)\n* Full development and testing workflow with Test Kitchen and friends: [TESTING.md](TESTING.md)\n\n## Contributing\n\nPlease see contributing information in: [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Maintainers\n\n* Brian Flad (<bflad417@gmail.com>)\n\n## License\n\nPlease see licensing information in: [LICENSE](LICENSE)\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 7.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 19.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 12.04",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/git",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/golang",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/lxc",
      "revision": ">= 1.1.6",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/modules",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/sysctl",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum-epel",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "docker": "Installs/Configures Docker",
    "docker::aufs": "Installs/Loads AUFS Linux module",
    "docker::binary": "Installs Docker binary",
    "docker::cgroups": "Installs/configures default platform Control Groups support",
    "docker::lxc": "Installs/configures default platform LXC support",
    "docker::package": "Installs Docker via package",
    "docker::source": "Installs Docker via source",
    "docker::systemd": "Installs/Starts Docker via systemd",
    "docker::sysv": "Installs/Starts Docker via SysV",
    "docker::upstart": "Installs/Starts Docker via Upstart"
  }
}