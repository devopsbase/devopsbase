{
  "name": "jenkins Chef cookbook",
  "chef_cookbook_name": "jenkins",
  "revision": "1.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/jenkins",
    "https://supermarket.chef.io/cookbooks/jenkins/download",
    "https://supermarket.chef.io/cookbooks/jenkins/versions/1.1.0",
    "https://supermarket.chef.io/cookbooks/jenkins/versions/1.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/jenkins/versions/1.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/jenkins",
    "https://supermarket.chef.io/api/v1/cookbooks/jenkins/versions/1.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Integration/Jenkins"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/jenkins",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/jenkins/versions/1.1.0/download",
  "deprecated": false,
  "created": "2011-11-14T21:12:18.000Z",
  "updated": "2016-10-07T20:11:52.450Z",
  "description": "Installs and configures Jenkins CI master & slaves",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 195,
  "downloads_count": 20139066,
  "downloads_count_revision": 1261148,
  "repository_url": "https://github.com/opscode-cookbooks/jenkins",
  "issues_url": "https://github.com/opscode-cookbooks/jenkins/issues",
  "chef_source_url": "https://github.com/opscode-cookbooks/jenkins",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "jenkins Cookbook\n================\n[![Build Status](https://secure.travis-ci.org/opscode-cookbooks/jenkins.png?branch=master)](http://travis-ci.org/opscode-cookbooks/jenkins)\n\nInstalls and configures Jenkins CI server & node slaves. Resource providers to support automation via jenkins-cli, including job create/update.\n\n\nRequirements\n------------\nChef 0.10.10+ and Ohai 6.10+ for platform_family use.\n\n### Platform:\n#### Server (Master) Recipe\n\n* Ubuntu\n* RHEL/CentOS\n\n### Node (Slave) Recipe\n\nAgent Flavor:\n\n* `ssh` - Any Unix platform that is running `sshd`.\n* `jnlp` - Most Unix platforms.\n* `windows` - Windows platforms only. Depends on .NET Framework.\n\n\nAttributes\n----------\n### Common Attributes\n\n* `node['jenkins']['mirror']` - Base URL for downloading all code (WAR file and plugins).\n* `node['jenkins']['java_home']` - Java install path, used for for cli commands.\n* `node['jenkins']['iptables_allow']` - If iptables is enabled, add a rule passing `node['jenkins']['server']['port']`.\n\n### Master/Server related Attributes\n\n* `node['jenkins']['server']['install_method']` - Whether Jenkins is installed from packages or run from a WAR file.\n* `node['jenkins']['server']['home']` - Location of `JENKINS_HOME` directory.\n* `node['jenkins']['server']['user']` - User the Jenkins server runs as.\n* `node['jenkins']['server']['group']` - Jenkins user primary group.\n* `node['jenkins']['server']['port']` - TCP port Jenkins server listens on.\n* `node['jenkins']['server']['url']` - Base URL of the Jenkins server.\n* `node['jenkins']['server']['plugins']` - Download the latest version of plugins in this Array, bypassing update center. The members of the Array can either be strings if the latest version desired OR a Hash of the form\n`{'name' => 'git', 'version' => '1.4.0'}` if a specific version is required.\n* `node['jenkins']['server']['jvm_options']` - Additional tuning parameters to pass the underlying JVM process.\n* `node['jenkins']['http_proxy']['variant']` - use `nginx` or `apache2` to proxy traffic to jenkins backend (`nginx` by default)\n* `node['jenkins']['http_proxy']['www_redirect']` - add a redirect rule for 'www.*' URL requests (\"disable\" by default)\n* `node['jenkins']['http_proxy']['listen_ports']` - list of HTTP ports for the HTTP proxy to listen on ([80] by default).\n* `node['jenkins']['http_proxy']['host_name']` - primary vhost name for the HTTP proxy to respond to (`node['fqdn']` by default).\n* `node['jenkins']['http_proxy']['host_aliases']` - optional list of other host aliases to respond to (empty by default).\n* `node['jenkins']['http_proxy']['client_max_body_size']` - max client upload size (\"1024m\" by default, nginx only).\n* `node['jenkins']['http_proxy']['server_auth_method']` - Authentication with the server can be done with cas (using `apache2::mod_auth_cas`), or basic (using `htpasswd`). The default is no authentication.\n* `node['jenkins']['http_proxy']['basic_auth_username']` - Username to use for HTTP Basic Authentication.\n* `node['jenkins']['http_proxy']['basic_auth_password']` - Password to use with HTTP Basic Authentication.\n* `node['jenkins']['http_proxy']['cas_login_url']` - Login url for cas if using cas authentication.\n* `node['jenkins']['http_proxy']['cas_validate_url']` - Validation url for cas if using cas authentication.\n* `node['jenkins']['http_proxy']['cas_validate_server']` - Whether to validate the server cert. Defaults to off.\n* `node['jenkins']['http_proxy']['cas_root_proxy_url']` - If set, sets the url that the cas server redirects to after auth.\n* `node['jenkins']['http_proxy']['ssl']['enabled']` - Configures jenkins to use SSL. This cookbook expects you to provide your own certificates. You can tell Jenkins where your certificates with the below attributes.\n* `node['jenkins']['http_proxy']['ssl']['cert_path']` - The path to your SSL certificate.\n* `node['jenkins']['http_proxy']['ssl']['key_path']` - The path to your SSL key.\n* `node['jenkins']['http_proxy']['ssl']['ca_cert_path']` - If set, configures apache to use an intermediate certificate authority. Nginx does not use this attribute and expects any intermediate certificates to be appended in the same file as your SSL certificate.\n\n### Node/Slave related Attributes\n\n* `node['jenkins']['node']['agent_type']` - Type of agent to communicate with this slave/node. Valid values include `jnlp`, `ssh` and `windows`. (default is `jnlp`)\n* `node['jenkins']['node']['name']` - Name of the node within Jenkins.\n* `node['jenkins']['node']['description']` - Jenkins node description.\n* `node['jenkins']['node']['executors']` - Number of node executors.\n* `node['jenkins']['node']['home]` - Home directory (\"Remote FS root\") of the node.\n* `node['jenkins']['node']['labels']` - Node labels.\n* `node['jenkins']['node']['mode']` - Node usage mode, `normal` or `exclusive` (tied jobs only).\n* `node['jenkins']['node']['availability']` - `always` keeps node on-line, `demand` off-lines when idle.\n* `node['jenkins']['node']['in_demand_delay']` - number of minutes for which jobs must be waiting in the queue before attempting to launch this slave.\n* `node['jenkins']['node']['idle_delay']` - number of minutes that this slave must remain idle before taking it off-line.\n* `node['jenkins']['node']['env']` - \"Node Properties\" -> \"Environment Variables\".\n* `node['jenkins']['node']['user']` - user the slave runs as.\n* `node['jenkins']['node']['ssh_host']` - Hostname or IP Jenkins Master should connect to when launching an SSH slave.\n* `node['jenkins']['node']['ssh_port']` - SSH port Jenkins Master should connect to when launching a slave.\n* `node['jenkins']['node']['ssh_user']` - SSH slave user name (only required if Jenkins server and slave user is different).\n* `node['jenkins']['node']['ssh_pass']` - SSH slave password (not required when server is installed via `jenkins::server` recipe).\n* `node['jenkins']['node']['ssh_private_key']` - Jenkins Master defaults to: `JENKINS_HOME/.ssh/id_rsa` (created by the `jenkins::server` recipe).\n* `node['jenkins']['node']['jvm_options']` - Additional tuning parameters to pass the underlying JVM process.\n\n\nRecipes\n-------\n### server\nCreates all required directories, installs Jenkins and generates an ssh private key and stores the ssh public key in the `node['jenkins']['server']['pubkey']` attribute for use by the node recipes. The installation method is controlled by the `node['jenkins']['server']['install_method']` attribute. The following install methods are supported:\n\n* __package__ - Installs Jenkins from the official jenkins-ci.org packages.\n* __war__ - Downloads the latest version of the Jenkins WAR file from http://jenkins-ci. The server process is configured to run as a runit service.\n\n### node\nThe type of agent that is used to communicate with the slave is determined by the attribute `node['jenkins']['node']['agent_type']`. The following agent types are supported:\n\n* __ssh__ - Creates the user and group for the Jenkins slave to run as and sets `.ssh/authorized_keys` to the `node['jenkins']['server']['pubkey']` attribute. The [jenkins-cli.jar](http://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI) is downloaded from the Jenkins server and used to manage the nodes via the [groovy](http://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console) cli command. Jenkins is configured to launch a slave agent on the node using it's [SSH slave plugin](http://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin).\n* __jnlp__ - Creates the user and group for the Jenkins slave to run as and `/jnlpJars/slave.jar` is downloaded from the Jenkins server. The slave process is configured to run as a runit service.\n* __windows__ - Creates the home directory for the node slave and sets `JENKINS_HOME` and `JENKINS_URL` system environment variables. The [winsw](http://weblogs.java.net/blog/2008/09/29/winsw-windows-service-wrapper-less-restrictive-license) Windows service wrapper will be downloaded and installed, along with generating `jenkins-slave.xml` from a template. Jenkins is configured with the node as a [jnlp](http://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds) slave and `/jnlpJars/slave.jar` is downloaded from the Jenkins server. The `jenkinsslave` service will be started the first time the recipe is run or if the service is not running. The 'jenkinsslave' service will be restarted if `/jnlpJars/slave.jar` has changed. The end results is functionally the same\nhad you chosen the option to [Let Jenkins control this slave as a Windows service](http://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service).\n\n### proxy\nInstalls a proxy and creates a vhost to route traffic to the installed Jenkins server. The type of HTTP proxy that is installed and configured is determined by the `node['jenkins']['http_proxy']['variant']` attribute. The following HTTP proxy variants are supported:\n\n* __apache2__\n* __nginx__\n\n\nResource/Provider\n-----------------\n### jenkins_cli\n\nThis resource can be used to execute the Jenkins cli from your recipes. For example, install plugins via update center and restart Jenkins:\n\n```ruby\n%w(git URLSCM build-publisher).each do |plugin|\n  jenkins_cli \"install-plugin #{plugin}\"\n  jenkins_cli \"safe-restart\"\nend\n```\n\n### jenkins_node\nThis resource can be used to configure nodes as the `node_ssh` and `node_windows` recipes do or \"Launch slave via execution of command on the Master\":\n\n```ruby\njenkins_node node['fqdn'] do\n  description  'My node for things, stuff and whatnot'\n  executors    5\n  remote_fs    '/var/jenkins'\n  launcher     'command'\n  command      \"ssh -i my_key #{node[:fqdn]} java -jar #{remote_fs}/slave.jar\"\n  env          'ANT_HOME' => '/usr/local/ant', 'M2_REPO' => '/dev/null'\nend\n```\n\n### jenkins_job\nThis resource manages jenkins jobs, supporting the following actions:\n\n    :create, :update, :delete, :build, :disable, :enable\n\nThe `:create` and `:update` actions require a jenkins job `config.xml`. Example:\n\n```ruby\ngit_branch = 'master'\njob_name = \"sigar-#{branch}-#{node[:os]}-#{node[:kernel][:machine]}\"\n\njob_config = File.join(node[:jenkins][:node][:home], \"#{job_name}-config.xml\")\n\njenkins_job job_name do\n  action :nothing\n  config job_config\nend\n\ntemplate job_config do\n  source    'sigar-jenkins-config.xml'\n  variables :job_name => job_name, :branch => git_branch, :node => node[:fqdn]\n  notifies  :update, resources(:jenkins_job => job_name), :immediately\n  notifies  :build, resources(:jenkins_job => job_name), :immediately\nend\n```\n\n### jenkins_plugin\nThis resource can be used to install and remove Jenkins plugins directly (e.g. bypassing the update center).  It supports the following actions:\n\n    :install, :remove\n\nExample:\n\n```ruby\njenkins_plugin 'greenballs'\n\njenkins_plugin 'ant' do\n  action :install\n  version '1.2'\nend\n\njenkins_plugin 'custom_plugin' do\n  version '0.3'\n  url 'http://myrepo/jenkins/plugins/0.3/custom_plugin.hpi'\nend\n\njenkins_plugin 'envinject' do\n  action :remove\nend\n```\n\n\nJenkins Node Authentication\n---------------------------\nIf your Jenkins instance requires authentication, you'll either need to embed user:pass in `node['jenkins']['server']['url']` or issue a jenkins-cli.jar login command prior to using the `jenkins::node_*` recipes. For example, define a role like so:\n\n```ruby\nname 'jenkins_ssh_node'\ndescription 'cli login & register ssh slave with Jenkins'\nrun_list([\n  'mycompany-jenkins::jenkins_login',\n  'jenkins::node_ssh'\n```\n\nWhere the jenkins_login recipe is simply:\n\n```ruby\njenkins_cli \"login --username #{node['jenkins']['username']} --password #{node['jenkins']['password']}\"\n```\n\n\nDevelopment\n-----------\nThis section details \"quick development\" steps. For a detailed explanation, see [[Contributing.md]].\n\n1. Clone this repository from GitHub:\n\n        $ git clone git@github.com:opscode-cookbooks/jenkins.git\n\n2. Create a git branch\n\n        $ git checkout -b my_bug_fix\n\n3. Install dependencies:\n\n        $ bundle install\n\n4. Make your changes/patches/fixes, committing appropiately\n5. **Write tests**\n6. Run the tests:\n    - `bundle exec foodcritic -f any .`\n    - `bundle exec rspec`\n    - `bundle exec rubocop`\n    - `bundle exec kitchen test`\n\n  In detail:\n    - Foodcritic will catch any Chef-specific style errors\n    - RSpec will run the unit tests\n    - Rubocop will check for Ruby-specific style errors\n    - Test Kitchen will run and converge the recipes\n\n\nLicense & Authors\n-----------------\n- Author:: Doug MacEachern (<dougm@vmware.com>)\n- Contributor:: AJ Christensen <aj@junglist.gen.nz>\n- Contributor:: Fletcher Nichol <fnichol@nichol.ca>\n- Contributor:: Roman Kamyk <rkj@go2.pl>\n- Contributor:: Darko Fabijan <darko@renderedtext.com>\n- Contributor:: Seth Chisamore <schisamo@opscode.com>\n\n```text\nCopyright (c) 2010 VMware, Inc.\nCopyright (c) 2011 Fletcher Nichol\nCopyright (c) 2013 Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": ">= 1.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/iptables",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "default": "Does nothing",
    "iptables": "Configures iptables to allow incoming connections to the jenkins instance",
    "node": "Installs a Jenkins node",
    "proxy": "Installs a web server proxy for communication with the jenkins instance",
    "server": "Installs Jenkins server"
  }
}