{
  "name": "gozer Chef cookbook",
  "chef_cookbook_name": "gozer",
  "revision": "0.0.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/gozer",
    "https://supermarket.chef.io/cookbooks/gozer/download",
    "https://supermarket.chef.io/cookbooks/gozer/versions/0.0.3",
    "https://supermarket.chef.io/cookbooks/gozer/versions/0.0.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/gozer/versions/0.0.3",
    "https://supermarket.chef.io/api/v1/cookbooks/gozer",
    "https://supermarket.chef.io/api/v1/cookbooks/gozer/versions/0.0.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Build"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/gozer",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/gozer/versions/0.0.3/download",
  "deprecated": false,
  "created": "2012-08-23T17:48:50.000Z",
  "updated": "2012-11-12T16:27:21.000Z",
  "description": "Build my workstation",
  "maintainer": {
    "name": "chrisroberts",
    "email": "chrisroberts.code@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 5051637,
  "downloads_count_revision": 1262887,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Gozer\n\nThis cookbook builds a workstation. It is customized to build a workstation for\nme. That means if you are just like me, then this is just the cookbook for you.\n\n## What's it built on?\n\nThis cookbook was intended to used against a fresh install of xubuntu. But since\nit's structured around ubuntu, really any flavor should work. Xubuntu just provides\na nice set of default apps that integrate well with everything else.\n\n## What's it provide?\n\nIt provides all the things I need or want on my workstations. Most configuration\nis data bag driven. Generally configuration files are built and the contents then\nstuffed into a data bag. Things get moved into templates as I find custom configs\nare required/wanted between different machines. Stuff you get:\n\n### i3\n\nThe i3 window manager. This is installed from a standalone cookbook.\n\n### Cone\n\nCone is a console email client. It's made by those courier folks. Configuration\nof the .cone/conerc file is via data bag structured like:\n\n```\n# data_bags/gozer/conerc.json\n{\n  \"id\": \"conerc\",\n  \"content\": \"conerc_file_contents\"\n}\n```\n\n### Finch\n\nFinch is a console version of pidgin. I use it for all my IM needs. This recipe\nbasically takes care of IM related bits, so it will install finch plus Skype\nand a campfire plugin for finch. It uses a couple data bags for configuration.\nThe skype item for skype and the purple item for finch:\n\n```\n# data_bags/gozer/skype.json\n{\n  \"id\": \"skype\",\n  \"username\": \"skype.username\",\n  \"content\": \"~/.Skype/skype.username/config.xml\"\n}\n\n# data_bags/gozer/purple.json\"\n{\n  \"id\": \"purple\",\n  \"files\": {\n    \"accounts.xml\": \"contents_of_dot_purple_accounts.xml\",\n    \"prefs.xml\": \"contents_of_dot_purple_prefs.xml\"\n  }\n}\n```\n\n### Firefox\n\nInstalls firefox and adds the default extensions that I use. Extensions\nare enabled globally for the firefox install. Related attributes:\n\n* `node[:gozer][:firefox][:extension_dir] = '/usr/lib/firefox-addons/extensions'`\n* `node[:gozer][:firefox][:addons] = {:ghostery => 'https://addon_url.xpi'}`\n\nBy default the following addons are installed:\n\n* ghostery\n* adblock\n* flashblock\n* noscript\n\n### Git\n\nInstalls git and git-flow. Configures git user.name and email. Attributes for\ngit config:\n\n* `node[:gozer][:git][:name] = 'your name'`\n* `node[:gozer][:git][:email] = 'your.email@example.com'`\n\n### Github\n\nAutomatically pull repos from accounts and organizations as directed. Throws\nthem in a Projects directory within the user's home. Related attributes:\n\n* `node[:gozer][:github][:accounts] = %w(chrisroberts spox)`\n* `node[:gozer][:github][:exclude][:chrisroberts] = %w(red_unicorn)`\n* `node[:gozer][:github][:allow_forks][:chrisroberts] = true`\n\nNOTE: Important note that github interactions are currently unauthenticated. That means\nthat only public repositories will be cloned.\n\n### Google\n\nAdds a helper script for gcalcli to easily display calendar and agenda in the console.\nA data bag is used for configuration. It looks like this:\n\n```\n# data_bags/gozer/google.json\n{\n  \"id\": \"google\",\n  \"info\": {\n    \"user\": \"username@gmail.com\",\n    \"password\": \"acct_pass\"\n  }\n}\n```\n\nA helper script that uses this info will be available in /usr/local/bin named\n`my_gcal` and can be used:\n\n* `my_gcal calendar` -> Displays calendar and refreshes every hour\n* `my_gcal agenda` -> Displays agenda and refreshes every hour\n\n### Go\n\nInstalls the weekly package builds of go.\n\n### Home\n\nSets up all the junk required in the home directory like ssh keys and the like. Oh,\nalso creates the user.\n\n### irssi\n\nInstalls and loads configuration for irssi. Uses data bag for configuration:\n\n```\n# data_bags/gozer/irssi.json\n{\n  \"id\": \"irssi\",\n  \"content\": \"content_of_dot_irssi_config\"\n}\n```\n\n### Packages\n\nEasy addition and removal of packages:\n\n* `node[:gozer][:packages] = %w(tmux moc) # packages to install`\n* `node[:gozer][:kill_pacakges] = %w(thunderbird) # packages to remove`\n\n### RVM\n\nInstalls a global instance of RVM. Installs any requested gems into any available\nRVM versions on the system.\n\n* `node[:rvm][:gems] = %w(chef knife-ec2) # gems to install to rubies`\n\n### Sudoers\n\nSets up the sudoers so no password is required\n\n### System\n\nDoes system related stuff. Sets hostname. Does apt-get upgrades if updates found.\n\n### Home\n\nCreates the user account defined. Provides some custom scripts in the user's bin\ndirectory. Adds some files from data bags for .ssh and .chef:\n\n```\n# data_bags/gozer/chef.json\n{\n  \"id\": \"chef\",\n  \"files\": {\n    \"my.pem\": \"contents\",\n    \"other_file\": \"contents\"\n  }\n}\n\n# data_bags/gozer/ssh_keys\n{\n  \"id\": \"ssh_keys\",\n  \"keys\": {\n    \"id_rsa\": \"contents\",\n    \"id_rsa.pub\": \"contents\"\n  }\n}\n```\n\n### VIM\n\nInstalls and configures vim. Adds some plugins.\n\n* `node[:gozer][:vim][:bundles] = %w(git://github.com/altercation/vim-colors-solarized.git)`\n\n### Virtualbox\n\nInstalls virtualbox and related packages\n\n### VPNs\n\nInstalls VPN software plus configuration files\n\n### Backup\n\nA backup script is provided for rsyncing the user home directory to an external\ndevice. The disk UUID is used for identification while mounting:\n\n## Other attributes\n\n* `node[:gozer][:data_bag_name] = 'gozer'`\n\nThis is the name used when finding data bag item configurations\n\n* `node[:gozer][:encrypted_bags] = %w(ssh_keys chef irssi)\n\nThis is the list of data bag items that are encrypted. By default all data bag items\nused by the recipes are here.\n\n* `node[:gozer][:github][:known_hosts] = []`\n\nThe known hosts for dealing with github\n\n### Backup\n\nProvides backup script for syncing home directory to disk. Uses disk UUID for\nidentification when mounting\n\n* `node[:gozer][:backup][:uuid] = 'disk-uuid'`\n\n## Repo\n\n* https://github.com/chrisroberts/cookbook-gozer\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/i3",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ohai",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}