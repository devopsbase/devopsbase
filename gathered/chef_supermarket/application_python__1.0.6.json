{
  "name": "application_python Chef cookbook",
  "chef_cookbook_name": "application_python",
  "revision": "1.0.6",
  "uris": [
    "https://supermarket.chef.io/cookbooks/application_python",
    "https://supermarket.chef.io/cookbooks/application_python/download",
    "https://supermarket.chef.io/cookbooks/application_python/versions/1.0.6",
    "https://supermarket.chef.io/cookbooks/application_python/versions/1.0.6/download",
    "https://supermarket.chef.io/api/v1/cookbooks/application_python/versions/1.0.6",
    "https://supermarket.chef.io/api/v1/cookbooks/application_python",
    "https://supermarket.chef.io/api/v1/cookbooks/application_python/versions/1.0.6/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Type/Middleware/Runtime/Python",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/application_python",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/application_python/versions/1.0.6/download",
  "deprecated": false,
  "created": "2012-05-24T21:58:13.000Z",
  "updated": "2015-10-05T19:31:44.346Z",
  "description": "A Chef cookbook for deploying Python application code.",
  "maintainer": {
    "name": "coderanger",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 47,
  "downloads_count": 16666117,
  "downloads_count_revision": 1276343,
  "repository_url": "https://github.com/poise/application_python",
  "issues_url": "https://github.com/poise/application_python",
  "chef_source_url": "https://github.com/poise/application_python",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nThis cookbook is designed to be able to describe and deploy Python web applications. Currently supported:\n\n* plain python web applications\n* Django\n* Green Unicorn\n* Celery\n\nNote that this cookbook provides the Python-specific bindings for the `application` cookbook; you will find general documentation in that cookbook.\n\nOther application stacks may be supported at a later date.\n\nRequirements\n============\n\nChef 0.10.0 or higher required (for Chef environment use).\n\nThe following Opscode cookbooks are dependencies:\n\n* application\n* python\n* gunicorn\n* supervisor\n\nResources/Providers\n==========\n\nThe LWRPs provided by this cookbook are not meant to be used by themselves; make sure you are familiar with the `application` cookbook before proceeding.\n\ndjango\n------\n\nThe `django` sub-resource LWRP deals with deploying Django webapps from an SCM repository. It uses the `deploy_revision` LWRP to perform the bulk of its tasks, and many concepts and parameters map directly to it. Check the documentation for `deploy_revision` for more information.\n\nA new virtualenv will be created for the application in \"#{path}/shared/env\"; pip package will be installed in that virtualenv.\n\n# Attribute Parameters\n\n- packages: an Array of pip packages to install\n- requirements: the relative path to a requirements file. If not specified the provider will look for one in the project root, named either \"requirements/#{chef_environment}.txt\" or \"requirements.txt\"\n- database\\_master\\_role: if a role name is provided, a Chef search will be run to find a node with than role in the same environment as the current role. If a node is found, its IP address will be used when rendering the context file, but see the \"Database block parameters\" section below\n- local\\_settings\\_file: the name of the local settings file to be generated by template. Defaults to \"local_settings.py\"\n- settings\\_template: the name of template that will be rendered to create the local settings file; if specified it will be looked up in the application cookbook. Defaults to \"settings.py.erb\" from this cookbook\n- settings: a Hash of additional settings that will be made available to the template\n- database: a block containing additional parameters for configuring the database connection\n- legacy\\_database\\_settings: if true, the default settings template will generate legacy database config variables. Defaults to false\n- debug: used by the default settings template to control debugging. Defaults to false\n- collectstatic: controls the behavior of the `staticfiles` app. If true, if will invoke manage.py with `collectstatic --noinput`; you can also pass a String with an explicit command (see Usage below). Defaults to false\n\n# Database block parameters\n\nThe database block can accept any method, which will result in an entry being created in the `@database` Hash which is passed to the context template. See Usage below for more information.\n\ngunicorn\n--------\n\nThe `gunicorn` sub-resource LWRP configures Green Unicorn to run the application.\n\nIf used with a Django application, it will install gunicorn into the same virtualenv and run it with `manage.py run_gunicorn`. For other applications, gunicorn will be run with `gunicorn #{app_module}`.\n\n# Attribute Parameters\n\n- app_module: mandatory. If set to :django, gunicorn will be configured to run a Django application; if set to another String or Symbol, it will be used to build the gunicorn base command.\n- settings\\_template: the template to render to create the `gunicorn_config.py` file; if specified it will be looked up in the application cookbook. Defaults to \"se.py.erb\" from the `gunicorn` cookbook\n- host: passed to the `gunicorn_config` LWRP\n- port: passed to the `gunicorn_config` LWRP\n- backlog: passed to the `gunicorn_config` LWRP\n- workers: passed to the `gunicorn_config` LWRP\n- worker_class: passed to the `gunicorn_config` LWRP\n- worker_connections: passed to the `gunicorn_config` LWRP\n- max_requests: passed to the `gunicorn_config` LWRP\n- timeout: passed to the `gunicorn_config` LWRP\n- keepalive: passed to the `gunicorn_config` LWRP\n- debug: passed to the `gunicorn_config` LWRP\n- trace: passed to the `gunicorn_config` LWRP\n- preload_app: passed to the `gunicorn_config` LWRP\n- daemon: passed to the `gunicorn_config` LWRP\n- pidfile: passed to the `gunicorn_config` LWRP\n- umask: passed to the `gunicorn_config` LWRP\n- logfile: passed to the `gunicorn_config` LWRP\n- loglevel: passed to the `gunicorn_config` LWRP\n- proc_name: passed to the `gunicorn_config` LWRP\n\nUsage\n=====\n\nA sample application that needs a database connection:\n\n    application \"packaginator\" do\n      path \"/srv/packaginator\"\n      owner \"nobody\"\n      group \"nogroup\"\n      repository \"https://github.com/coderanger/packaginator.git\"\n      revision \"master\"\n      migrate true\n      packages [\"libpq-dev\", \"git-core\", \"mercurial\"]\n\n      django do \n        packages [\"redis\"]\n        requirements \"requirements/mkii.txt\"\n        settings_template \"settings.py.erb\"\n        debug true\n        collectstatic \"build_static --noinput\"\n        database do\n          database \"packaginator\"\n          engine \"postgresql_psycopg2\"\n          username \"packaginator\"\n          password \"awesome_password\"\n        end\n        database_master_role \"packaginator_database_master\"\n      end\n    end\n\nYou can invoke any method on the database block:\n\n    application \"my-app\" do\n      path \"/srv/packaginator\"\n      repository \"...\"\n      revision \"...\"\n\n      django do\n        database_master_role \"packaginator_database_master\"\n        database do\n          database 'name'\n          quorum 2\n          replicas %w[Huey Dewey Louie]\n        end\n      end\n    end\n\nThe corresponding entries will be passed to the context template:\n\n    <%= @database['quorum']\n    <%= @database['replicas'].join(',') %>\n\nLicense and Author\n==================\n\nAuthor:: Adam Jacob (<adam@opscode.com>)\nAuthor:: Andrea Campi (<andrea.campi@zephirworks.com.com>)\nAuthor:: Joshua Timberman (<joshua@opscode.com>)\nAuthor:: Noah Kantrowitz (<noah@coderanger.net>)\nAuthor:: Seth Chisamore (<schisamo@opscode.com>)\n\nCopyright 2009-2012, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/application",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/gunicorn",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/supervisor",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}