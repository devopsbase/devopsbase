{
  "name": "realmd-sssd Chef cookbook",
  "chef_cookbook_name": "realmd-sssd",
  "revision": "0.2.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/realmd-sssd",
    "https://supermarket.chef.io/cookbooks/realmd-sssd/download",
    "https://supermarket.chef.io/cookbooks/realmd-sssd/versions/0.2.4",
    "https://supermarket.chef.io/cookbooks/realmd-sssd/versions/0.2.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/realmd-sssd/versions/0.2.4",
    "https://supermarket.chef.io/api/v1/cookbooks/realmd-sssd",
    "https://supermarket.chef.io/api/v1/cookbooks/realmd-sssd/versions/0.2.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/realmd-sssd",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/realmd-sssd/versions/0.2.4/download",
  "deprecated": false,
  "created": "2016-01-17T23:49:42.845Z",
  "updated": "2016-02-09T19:22:18.081Z",
  "description": "Joins a realm via realmd and configures SSSD",
  "maintainer": {
    "name": "jbartko",
    "email": "jbartko@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 510,
  "downloads_count_revision": 285,
  "repository_url": "https://github.com/jbartko/chef-realmd-sssd",
  "issues_url": "https://github.com/jbartko/chef-realmd-sssd/issues",
  "chef_source_url": "https://github.com/jbartko/chef-realmd-sssd",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# realmd-sssd\n\n[realmd](http://www.freedesktop.org/software/realmd/) is a DBus service that configures network authentication and domain membership in a standard way. It provides automatic realm or domain discovery and configures SSSD or winbind to do the actual network authentication and user account lookups.\n\n[SSSD (System Security Services Daemon)](https://fedorahosted.org/sssd/) allows a local service to check with a local access/authentication cache in SSSD, but that cache may be taken from any variety of remote identity providers -- an LDAP directory, an Identity Management domain, Active Directory, possibly even a Kerberos realm.\n\nAn integrated realm furnished with the appropriate schema and attribute values provides a single management point from which to control authentication and authorization policies for an organization. See the [Integration](#integration) section below for examples.\n\n## Supported Platforms\n\n- Debian 8\n- CentOS 7\n- Fedora 23\n- Ubuntu 14\n\n## Attributes\n\n| Attribute | Type | Default | Description |\n| ---       | ---  | ---         | ---     |\n| `['realmd-sssd']['join']` | Boolean |  false | Whether or not to join the domain. |\n| `['realmd-sssd']['debian-mkhomedir-umask']` | String |  '0022' | Octal representation of the home directory creation mask (Debian platform family specific). |\n| `['realmd-sssd']['packages']` | Array | *varies by platform* | List of packages required for `realmd` to join the realm. |\n| `['realmd-sssd']['host-spn']` | String | `node['fqdn']` given proper DNS, or `node['machinename']` | Alternate computer name to use when joining the domain (i.e.: ec2 instance ID) |\n| `['realmd-sssd']['password-auth']` | Boolean | false | Enable OpenSSH server password authentication system-wide. Note that a value of `false` __does not__ explicitly disable password authentication -- for that, refer to  `['realmd-sssd']['ldap-key-auth']` attributes. A value of `true` will override `['openssh']['server']['password_authentication']` with 'yes' |\n| `['realmd-sssd']['ldap-key-auth']['enable']` | Boolean | false | Enable OpenSSH server to retrieve public key information from LDAP only for listed networks. Enables password authentication on these networks as a fallback. Disables password authentication system-wide via a `Match *` directive. |\n| `['realmd-sssd']['ldap-key-auth']['cidr']` | Array | empty Array | List of IPv4 or IPv6 CIDR blocks from which to allow SSH connections. |\n| `['realmd-sssd']['config']` | Hash | *default SSSD configuration Hash* | Default SSSD configuration hash. You likely won't need to change this. |\n| `['realmd-sssd']['extra-config']` | Hash | emtpy Hash | Extra configuration which will be merged and override the default SSSD configuration Hash. See Usage for an example. |\n| `['realmd-sssd']['vault-name']` | String | 'realmd-sssd' | Name of the chef-vault with the vault item holding realm information required to join. |\n| `['realmd-sssd']['vault-item']` | String | 'realm' | Name of the chef-vault item containing values for `realm`, `username`, `password`, and optionally `computer-ou`. |\n\n## Usage\n\nThis cookbook relies on Chef Vault. Nodes will require at least one successful chef-client run before the Vault can be refreshed thus granting nodes access. This creates a chicken-or-egg scenario.\n\nThe widely-implemented organization base role/cookbook pattern helps with this situation. For details on how to implement this cookbook in a organization base role/cookbook, see the [Supplying Attributes](#supplying attributes) section.\n\nFirst, create a Chef Vault item with a search query for your organization's base cookbook or role:\n\n```bash\nknife vault create realmd-sssd realm -S 'recipe:organization-base OR role:organization-base'\n```\n\nExample Vault item content with optional per-environment data:\n\n```json\n{\n  \"id\": \"realm\",\n  \"realm\": \"example.org\",\n  \"username\": \"ad-join\",\n  \"password\": \"change42me\",\n  \"computer-ou\": \"OU=Linux-Hosts,DC=example,DC=org\",\n  \"prod-na\": {\n    \"realm\": \"na.example.org\",\n    \"username\": \"ad-join-na\",\n    \"password\": \"change4na2me\",\n    \"computer-ou\": \"OU=Linux-Hosts,DC=NA,DC=example,DC=com\"\n  },\n  \"prod-eu\": {\n    \"realm\": \"eu.example.org\",\n    \"username\": \"ad-join-eu\",\n    \"password\": \"change4eu2me\",\n    \"computer-ou\": \"OU=Linux-Hosts,DC=EU,DC=example,DC=com\"\n  }\n}\n```\n\n*Note: any node not belonging to a specified environment will fall back to the global values.*\n\nThen, after nodes are created and bootstrapped with your organization's base cookbook/role, refresh the Vault:\n\n```bash\nknife vault refresh realmd-sssd realm\n```\n\nFinally, add `realmd-sssd` to your node's `run_list`:\n\n```json\n# with Chef role\n{\n  \"run_list\": [\n    \"role[organization-base]\"\n    \"recipe[realmd-sssd]\"\n  ]\n}\n# with wrapper cookbook\n{\n  \"run_list\": [\n    \"recipe[organization-base]\"\n    \"recipe[realmd-sssd]\"\n  ]\n}\n```\n\n### Supplying Attributes\n\nThe example Chef role default attributes below demonstrate how to add and override `sssd.conf` values via the `node['realmd-sssd']['extra-config']` attribute.\n\n```json\n{\n  \"default_attributes\": {\n    \"realmd-sssd\": {\n      \"join\": \"true\",\n      \"extra-config\": {\n        \"[domain/example.org]\": {\n          \"realmd_tags\": \"managed by chef\",\n          \"ad_access_filter\": \"(&(memberOf=CN=linux-users,OU=Groups,DC=example,DC=org)(objectCategory=user)(sAMAccountName=*))\"\n        }\n      },\n      \"debian-mkhomedir-umask\": \"0077\",\n      \"ldap-key-auth\": {\n        \"enable\": \"true\",\n        \"cidr\": [\n          \"192.0.2.0/24\"\n        ]\n      }\n    }\n  }\n}\n\n```\n\nIf wrapper cookbooks are preferred to Chef roles, below is an example `organization-base::default` recipe snippet:\n\n```ruby\nnode.default['realmd-sssd']['extra-config'] = {\n  '[domain/example.org]' =>  {\n    'access_provider' =>  'simple',\n    'ldap_sasl_mech' =>  'GSSAPI',\n    'ldap_user_extra_attrs' =>  'altSecurityIdentities:altSecurityIdentities',\n    'ldap_user_ssh_public_key' =>  'altSecurityIdentities',\n    'simple_allow_groups' =>  [\n      'Linux-Admins@example.org',\n      'Linux-Users@na.example.org'\n    ],\n    'realmd_tags' =>  'managed by Chef'\n  }\n}\nnode.default['realmd-sssd']['join'] = true\nnode.default['realmd-sssd']['ldap-key-auth'] = {\n  'enable' => true,\n  'cidr' => [ '::1/128', '192.0.2.0/24' ]\n}\n\n# do *not* include_recipe 'realmd-sssd' !\n```\n\nIt's important to *not* include the `realmd-sssd::default` recipe in your organization's base role/cookbook due to the nature of Chef Vault. See the [Usage](#usage) section for details.\n\n### Merge Behavior\n\nNote that values supplied in the the `extra-config` Hash will merge if data types allow, and overwrite if not. For example, when given a String: `\"realmd_tags\": \"managed by chef\"` the default realmd_tags will be replaced, but given an Array `\"realmd_tags\": [ \"managed by chef\" ]` the default realmd_tags are appended.\n\n## Testing\n\nSee [.kitchen.yml](.kitchen.yml) and .kitchen.`driver`.yml ([openstack](.kitchen.openstack.yml), [vagrant](.kitchen.vagrant.yml)) for examples.\n\nFirst, create a `kitchen.local.yml`:\n\n```bash\ncp .kitchen.vagrant.yml .kitchen.local.yml\n```\n\nThen create the local data bag required by the Test Kitchen join-realm suite:\n\n```bash\n# Assuming ChefDK\nchef exec bundle install --with development\nknife solo data bag create realmd-sssd realm -c .chef/solo.rb\n```\n\nExample Vault item with optional integration environment data for serverspec testing:\n\n```json\n{\n  \"id\": \"realm\",\n  \"realm\": \"example.org\",\n  \"username\": \"testuser\",\n  \"password\": \"change42me\",\n  \"computer-ou\": \"OU=Linux-Hosts,DC=example,DC=org\",\n  \"integration\": {\n    \"realm\": \"dev.example.org\",\n    \"username\": \"testdevuser\",\n    \"password\": \"change4dev2me\",\n    \"computer-ou\": \"OU=dev,OU=Linux-Hosts,DC=example,DC=com\"\n  }\n}\n```\n\nFinally, run the serverspec tests:\n\n```bash\nkitchen test --destroy never\n```\n\nIntegration testing SUTs will not automagically leave the domain and clean up after themselves when destroyed.\n\nFor the purposes of integration testing, Chef Vault will fall back to reading plaintext data bag contents. In a production deployment, please consider setting `['chef-vault']['databag_fallback']` to false.\n\n## Integration\n\n### LDAP SSH public keys\n\nPublic SSH keys must be present via [`sshPublicKey`](https://github.com/jirutka/ssh-ldap-pubkey/blob/master/etc/openssh-lpk.schema) or another attribute in LDAP. The key must begin with the key-type prefix or a custom SSH `AuthorizedKeysCommand` must be specified (i.e. if querying the attribute returns \"SSHKey: ssh-rsa AAAA...\" instead of \"ssh-rsa AAAA...\").\n\nThe [integration key](extras/integration-key.pub) must be present in the test user's LDAP public key attribute for the integration tests to succeed. For example:\n\n```\ntestuser@example.org@sssd-ubuntu14:~$ ldapsearch -LLL -H ldap://dc1.example.org -Y GSSAPI -b 'DC=example,DC=org' 'CN=Test User' altSecurityIdentities\nSASL/GSSAPI authentication started\nSASL username: testuser@EXAMPLE.ORG\nSASL SSF: 56\nSASL data security layer installed.\ndn: CN=Test User,CN=Users,DC=example,DC=org\naltSecurityIdentities: ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAA\n IbmlzdHA1MjEAAACFBAHJ3sWSWZfjEw3mGCqIksxa8mRl5X3LEvLuLuMtIv/U9Efaku/lsLNNsmUi\n Q2x/8+k4TummCCR37vTnmsdB+BljdQFOOrq7FXJjaAQrHqIXDc/B2X5HIWveG6KbOnPluSLdenrrz\n m1CpZn5WHS2HePyS1+2OEalX+JZsStCVwZKlVTHJw== Test Kitchen realmd-sssd integrat\n ion key\n```\n\n### LDAP sudoers\n\nThe [sudo source code](https://www.sudo.ws/download.html#source) has relevant LDAP schemas under `doc/`. LDAP `sudoRole` objects can define sudoers policy for users and groups.\n\n```\ntestuser@example.org@sssd-ubuntu14:~$ ldapsearch -LLL -H ldap://dc1.example.org -Y GSSAPI -b 'DC=example,DC=org' 'CN=linux-admins' member name object{Category,Class} sudo{Command,Host,Option,User}\nSASL/GSSAPI authentication started\nSASL username: testuser@EXAMPLE.ORG\nSASL SSF: 56\nSASL data security layer installed.\ndn: CN=Linux-Admins,OU=SSSD-Integration,DC=example,DC=org\nobjectClass: top\nobjectClass: group\nmember: CN=Test User,CN=Users,DC=example,DC=org\nname: Linux-Admins\nobjectCategory: CN=Group,CN=Schema,CN=Configuration,DC=example,DC=org\n\ndn: CN=Linux-Admins,OU=Sudoers,OU=SSSD-Integration,DC=example,DC=org\nobjectClass: top\nobjectClass: sudoRole\nname: Linux-Admins\nobjectCategory: CN=sudoRole,CN=Schema,CN=Configuration,DC=example,DC=org\nsudoHost: ALL\nsudoUser: %Linux-Admins\nsudoOption: !authenticate\nsudoCommand: ALL\n```\n\n## License and Authors\n\nAuthor:: John Bartko (jbartko@gmail.com)\n\n```text\nCopyright:: 2016 John Bartko\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 7.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 8.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 14.04",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef-vault",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/openssh",
      "revision": "~> 1.6.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/selinux",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/selinux_policy",
      "revision": "~> 0.9.3",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": "~> 3.9.0",
      "self_resolve": true
    }
  ]
}