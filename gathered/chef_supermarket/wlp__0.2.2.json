{
  "name": "wlp Chef cookbook",
  "chef_cookbook_name": "wlp",
  "revision": "0.2.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/wlp",
    "https://supermarket.chef.io/cookbooks/wlp/download",
    "https://supermarket.chef.io/cookbooks/wlp/versions/0.2.2",
    "https://supermarket.chef.io/cookbooks/wlp/versions/0.2.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/wlp/versions/0.2.2",
    "https://supermarket.chef.io/api/v1/cookbooks/wlp",
    "https://supermarket.chef.io/api/v1/cookbooks/wlp/versions/0.2.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Web Servers",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application",
    "Type/Middleware/Application Server"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/wlp",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/wlp/versions/0.2.2/download",
  "deprecated": false,
  "created": "2013-10-02T18:04:29.000Z",
  "updated": "2015-02-18T15:30:30.747Z",
  "description": "Installs WebSphere Application Server Liberty Profile",
  "maintainer": {
    "name": "ibm-was"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 14,
  "downloads_count": 5343593,
  "downloads_count_revision": 1258193,
  "repository_url": "https://github.com/WASdev/ci.chef.wlp",
  "issues_url": "https://github.com/WASdev/ci.chef.wlp",
  "chef_source_url": "https://github.com/WASdev/ci.chef.wlp",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Description\n\nThe __wlp__ cookbook installs and configures the WebSphere Application Server Liberty Profile.\nIt provides recipes, resources, and libraries for creating, managing, and configuring Liberty profile server instances.\n\n## Basic configuration\n\nThe __wlp__ cookbook can install Liberty profile from jar archive files or a zip file. The installation method is configured via the `node[:wlp][:install_method]` attribute.\n\n### jar installation\n\nWhen the jar archive files installation method (jar installation) is used, the `node[:wlp][:archive][:base_url]` attribute must be set to specify the base location from which the Liberty jar archive files can be downloaded. Use the `node[:wlp][:archive][:runtime][...]`, `node[:wlp][:archive][:extended][...]`, and `node[:wlp][:archive][:extras][...]` attributes to adjust jar archive file names, checksums, and other installation options. For more information on these options, see the attributes section later in this readme. You must also set the `node[:wlp][:archive][:accept_license]` attribute to `true` if you agree and accept the license terms of the Liberty profile software. The jar installation fails if `node[:wlp][:archive][:accept_license]` is not set to `true`.\n\n\nBy default the cookbook is configured to use the jar installation method. The archive options are already configured with values based on developer licensed Liberty profile.\n\nThe no-fee developer licensed Liberty profile jar archive files can be downloaded from [Liberty download page](https://www.ibmdw.net/wasdev/downloads/websphere-application-server-liberty-profile/) on [WASdev](https://www.ibmdw.net/wasdev) site. The production licensed Liberty profile jar archive files can be obtained from [IBM Passport Advantage](http://www-01.ibm.com/software/lotus/passportadvantage/).\n\n### zip installation\n\nWhen the zip installation method is used, only the `node[:wlp][:zip][:url]` attribute must be set to specify the location of the zip file. The zip file is assumed to be generated by running the `./bin/server package` Liberty command with the  `--include=all` or `--include=minify` option.\n\n\n\n# Requirements\n\n## Platform:\n\n* Debian\n* Ubuntu\n* Centos\n* Redhat\n\n## Cookbooks:\n\n* java (>= 1.16.4)\n\n# Attributes\n\n* `node[:wlp][:user]` - User name under which the server is installed and runs. Defaults to `\"wlp\"`.\n* `node[:wlp][:group]` - Group name under which the server is installed and runs. Defaults to `\"wlp-admin\"`.\n* `node[:wlp][:install_java]` - Use the `java` cookbook to install Java. If Java is installed using a different method\nset it to `false`. The Java executables must be available on the __PATH__. Defaults to `\"true\"`.\n* `node[:wlp][:base_dir]` - Base installation directory. Defaults to `\"/opt/was/liberty\"`.\n* `node[:wlp][:user_dir]` - Set user configuration directory (wlp.user.dir). Set to 'nil' to use default location. Defaults to `\"nil\"`.\n* `node[:wlp][:install_method]` - Installation method. Set it to 'archive' or 'zip'. Defaults to `\"archive\"`.\n* `node[:wlp][:archive][:base_url]` - Base URL location for downloading the runtime, extended, and extras Liberty profile archives.\nMust be set when `node[:wlp][:install_method]` is set to `archive`. Defaults to `\"nil\"`.\n* `node[:wlp][:archive][:runtime][:url]` - URL location of the runtime archive. Defaults to `\"\\#{node[:wlp][:archive][:base_url]}/wlp-developers-runtime-8.5.5.2.jar\"`.\n* `node[:wlp][:archive][:runtime][:checksum]` - Checksum value for the runtime archive. Defaults to `\"d3e78cb43ab6392175807b54495bc8996ec9bc7b33cd1fc9699de3e74a9696bc\"`.\n* `node[:wlp][:archive][:extended][:url]` - URL location of the extended archive. Defaults to `\"\\#{node[:wlp][:archive][:base_url]}/wlp-developers-extended-8.5.5.2.jar\"`.\n* `node[:wlp][:archive][:extended][:checksum]` - Checksum value for the extended archive. Defaults to `\"b4cd9ae8716073ef4c6a2181f7201a31d2c24cfd55337694f09bed7715548ca3\"`.\n* `node[:wlp][:archive][:extended][:install]` - Controls whether the extended archive is downloaded and installed. Defaults to `\"true\"`.\n* `node[:wlp][:archive][:extras][:url]` - URL location of the extras archive. Defaults to `\"\\#{node[:wlp][:archive][:base_url]}/wlp-developers-extras-8.5.5.2.jar\"`.\n* `node[:wlp][:archive][:extras][:checksum]` - Checksum value for the extras archive. Defaults to `\"b99a6b4e501c7c6214db49342d198d9949b60b6017f9f75692fd562295ebc11a\"`.\n* `node[:wlp][:archive][:extras][:install]` - Controls whether the extras archive is downloaded and installed. Defaults to `\"false\"`.\n* `node[:wlp][:archive][:extras][:base_dir]` - Base installation directory of the extras archive. Defaults to `\"\\#{node[:wlp][:base_dir]}/extras\"`.\n* `node[:wlp][:archive][:accept_license]` - Accept license terms when doing archive-based installation.\nMust be set to `true` or the installation fails. Defaults to `\"false\"`.\n* `node[:wlp][:zip][:url]` - URL location for a zip file containing Liberty profile installation files. Must be set\nif `node[:wlp][:install_method]` is set to `zip`. Defaults to `\"nil\"`.\n* `node[:wlp][:config][:basic]` - Defines a basic server configuration when creating server instances using the `wlp_server` resource. Defaults to `\"{ ... }\"`.\n* `node[:wlp][:servers][:defaultServer]` - Defines a `defaultServer` server instance. Used by the `serverconfig` recipe. Defaults to `\"{ ... }\"`.\n\n# Recipes\n\n* [wlp::default](#wlpdefault) - Installs WebSphere Application Server Liberty Profile.\n* [wlp::serverconfig](#wlpserverconfig) - Creates a Liberty profile server instance for each `node[:wlp][:servers][<server_name>]` definition.\n\n## wlp::default\n\nInstalls WebSphere Application Server Liberty Profile. Liberty profile can be\ninstalled using jar archive files, or from a zip file based on the `node[:wlp][:install_method]` setting.\n\n## wlp::serverconfig\n\nCreates a Liberty profile server instance for each `node[:wlp][:servers][<server_name>]` definition.\nThe following definition creates a simple `airport` server instance:\n```ruby\nnode[:wlp][:servers][:airport] = {\n  \"enabled\" => true,\n  \"description\" => \"Airport Demo App\",\n  \"featureManager\" => {\n    \"feature\" => [ \"jsp-2.2\" ]\n  },\n  \"httpEndpoint\" => {\n    \"id\" => \"defaultHttpEndpoint\",\n    \"host\" => \"*\",\n    \"httpPort\" => \"9080\",\n    \"httpsPort\" => \"9443\"\n  }\n}\n```\n\n# Resources\n\n* [wlp_bootstrap_properties](#wlp_bootstrap_properties) - Adds, removes, and sets bootstrap properties for a particular server instance.\n* [wlp_config](#wlp_config) - Generates a server.xml file from a hash expression.\n* [wlp_install_feature](#wlp_install_feature) - Installs a feature from an enterprise subsystem archive (ESA) file.\n* [wlp_jvm_options](#wlp_jvm_options) - Adds, removes, and sets JVM options in an installation-wide or instance-specific jvm.options file.\n* [wlp_server](#wlp_server) - Provides operations for creating, starting, stopping, and destroying Liberty profile server instances.\n* [wlp_server_env](#wlp_server_env) - Adds, removes, and sets environment properties in installation-wide or instance-specific server.env file.\n\n## wlp_bootstrap_properties\n\nAdds, removes, and sets bootstrap properties for a particular server instance.\n\n### Actions\n\n- set: Set properties in the bootstrap.properties file. Other existing properties in the file are not preserved. Default action.\n- add: Adds properties to the bootstrap.properties file. Other existing properties in the file are preserved.\n- remove: Removes properties from the bootstrap.properties file. Other existing properties in the file are preserved.\n\n### Attribute Parameters\n\n- server_name: Name of the server instance. Defaults to <code>nil</code>.\n- properties: The properties to add, remove, or set. Must be specified as a hash when adding or setting and as an array when removing. Defaults to <code>nil</code>.\n\n### Examples\n```ruby\nwlp_bootstrap_properties \"add to bootstrap.properties\" do\n  server_name \"myInstance\"\n  properties \"com.ibm.ws.logging.trace.file.name\" => \"trace.log\"\n  action :add\nend\n\nwlp_bootstrap_properties \"remove from bootstrap.properties\" do\n  server_name \"myInstance\"\n  properties [ \"com.ibm.ws.logging.trace.file.name\" ]\n  action :remove\nend\n\nwlp_bootstrap_properties \"set bootstrap.properties\" do\n  properties \"default.http.port\" => \"9081\", \"default.https.port\" => \"9444\"\n  action :set\nend\n```\n\n## wlp_config\n\nGenerates a server.xml file from a hash expression.\n\n### Actions\n\n- create: Creates or updates the server.xml file. Default action.\n- create_if_missing: Creates a server.xml file only if the file does not already exist.\n\n### Attribute Parameters\n\n- file: The server.xml file to create or update. Defaults to <code>nil</code>.\n- config: The contents of the server.xml file expressed as a hash. Defaults to <code>nil</code>.\n\n### Examples\n```ruby\nwlp_config \"/var/servers/airport/server.xml\" do\n  config ({\n            \"description\" => \"Airport Demo App\",\n            \"featureManager\" => {\n              \"feature\" => [ \"jsp-2.2\" ]\n            },\n            \"httpEndpoint\" => {\n              \"id\" => \"defaultHttpEndpoint\",\n              \"host\" => \"*\",\n              \"httpPort\" => \"9080\",\n              \"httpsPort\" => \"9443\"\n            }\n  })\nend\n```\n\n## wlp_install_feature\n\nInstalls a feature from an enterprise subsystem archive (ESA) file.\n\n### Actions\n\n- install: Installs a feature using a .esa file. Default action.\n\n### Attribute Parameters\n\n- location: Specifies the location of the ESA file to be installed. Can be a file name or a URL. Defaults to <code>nil</code>.\n- to: Specifies where to install the feature. The feature can be installed to any configured product extension location, or as a user feature. Defaults to <code>\"usr\"</code>.\n- accept_license: Specifies whether to accept the license terms and conditions of the feature. Defaults to <code>false</code>.\n\n### Examples\n```ruby\nwlp_install_feature \"mongodb\" do\n  location \"http://example.com/websphere/liberty/profile/com.ibm.websphere.appserver.mongodb-2.0.esa\"\n  accept_license true\nend\n```\n\n## wlp_jvm_options\n\nAdds, removes, and sets JVM options in an installation-wide or instance-specific jvm.options file.\n\n### Actions\n\n- add: Adds JVM options to a jvm.options file. Other existing options in the file are preserved. Default action.\n- remove: Removes JVM options from a jvm.options file. Other existing options in the file are preserved.\n- set: Sets JVM options in a jvm.options file. Other existing options are not preserved.\n\n### Attribute Parameters\n\n- server_name: If specified, the jvm.options file in the specified server instance is updated. Otherwise, the installation-wide jvm.options file is updated. Defaults to <code>nil</code>.\n- options: The JVM options to add, set, or remove. Defaults to <code>nil</code>.\n\n### Examples\n```ruby\nwlp_jvm_options \"add to instance-specific jvm.options\" do\n  server_name \"myInstance\"\n  options [ \"-Djava.net.ipv4=true\" ]\n  action :add\nend\n\nwlp_jvm_options \"remove from instance-specific jvm.options\" do\n  server_name \"myInstance\"\n  options [ \"-Djava.net.ipv4=true\" ]\n  action :remove\nend\n\nwlp_jvm_options \"add to installation-wide jvm.options\" do\n  options [ \"-Xmx1024m\" ]\n  action :add\nend\n\nwlp_jvm_options \"remove from installation-wide jvm.options\" do\n  options [ \"-Xmx1024m\" ]\n  action :remove\nend\n```\n\n## wlp_server\n\nProvides operations for creating, starting, stopping, and destroying Liberty profile server instances.\n\n### Actions\n\n- start: Creates and starts the server instance (as an OS service). Default action.\n- create: Creates or updates the server instance.\n- create_if_missing: Creates a server instance only if the instance does not already exist.\n- destroy: Destroys the server instance.\n- stop: Stops the server instance (via an OS service).\n\n### Attribute Parameters\n\n- server_name: Name of the server instance.\n- config: Configuration for the server instance. If not specified, `node[:wlp][:config][:basic]` is used as the initial configuration. Defaults to <code>nil</code>.\n- jvmOptions: Instance-specific JVM options. Defaults to <code>[]</code>.\n- serverEnv: Instance-specific server environment properties. Defaults to <code>{}</code>.\n- bootstrapProperties: Instance-specific bootstrap properties. Defaults to <code>{}</code>.\n- clean: Clean all cached information when starting the server instance. Defaults to <code>false</code>.\n\n### Examples\n```ruby\nwlp_server \"myInstance\" do\n  config ({\n            \"featureManager\" => {\n              \"feature\" => [ \"jsp-2.2\", \"jaxws-2.1\" ]\n            },\n            \"httpEndpoint\" => {\n              \"id\" => \"defaultHttpEndpoint\",\n              \"host\" => \"*\",\n              \"httpPort\" => \"9080\",\n              \"httpsPort\" => \"9443\"\n            },\n            \"application\" => {\n              \"id\" => \"example\",\n              \"name\" => \"example\",\n              \"type\" => \"war\",\n              \"location\" => \"/apps/example.war\"\n            }\n          })\n  jvmOptions [ \"-Djava.net.ipv4=true\" ]\n  serverEnv \"JAVA_HOME\" => \"/usr/lib/j2sdk1.7-ibm/\"\n  bootstrapProperties \"default.http.port\" => \"9080\", \"default.https.port\" => \"9443\"\n  action :create\nend\n\nwlp_server \"myInstance\" do\n  clean true\n  action :start\nend\n\nwlp_server \"myInstance\" do\n  action :stop\nend\n\nwlp_server \"myInstance\" do\n  action :destroy\nend\n```\n\n## wlp_server_env\n\nAdds, removes, and sets environment properties in installation-wide or instance-specific server.env file.\n\n### Actions\n\n- set: Set environment properties in a server.env file. Other existing properties in the file are not preserved. Default action.\n- add: Adds environment properties to a server.env file. Other existing properties in the file are preserved.\n- remove: Removes environment properties from a server.env file. Other existing properties in the file are preserved.\n\n### Attribute Parameters\n\n- server_name: If specified, the server.env file in the specified server instance is updated. Otherwise, the installation-wide server.env file is updated. Defaults to <code>nil</code>.\n- properties: The properties to add, set, or remove. Must be specified as a hash when adding or setting, and as an array when removing. Defaults to <code>nil</code>.\n\n### Examples\n```ruby\nwlp_server_env \"add to instance-specific server.env\" do\n  server_name \"myInstance\"\n  properties \"JAVA_HOME\" => \"/usr/lib/j2sdk1.7-ibm/\"\n  action :add\nend\n\nwlp_server_env \"remove from instance-specific server.env\" do\n  server_name \"myInstance\"\n  properties [ \"JAVA_HOME\" ]\n  action :remove\nend\n\nwlp_server_env \"set installation-wide server.env\" do\n  properties \"WLP_USER_DIR\" => \"/var/wlp\"\n  action :set\nend\n\nwlp_server_env \"remove from installation-wide server.env\" do\n  properties [ \"WLP_USER_DIR\" ]\n  action :remove\nend\n```\n\n# Contributing\n\nPlease see our [contributing guide](https://github.com/WASdev/ci.chef.wlp/blob/master/CONTRIBUTING.md).\n\n\n# Support\n\nUse the [issue tracker][] for reporting any bugs or enhancements. For any questions please use the [WASdev forum](https://developer.ibm.com/answers/?community=wasdev).\n\n[issue tracker]: https://github.com/WASdev/ci.chef.wlp/issues\n\nThe cookbook is maintained by IBM.\n\n# Notice\n\n© Copyright IBM Corporation 2013, 2014.\n\n# License\n\n```text\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 1.16.4",
      "self_resolve": true
    }
  ]
}