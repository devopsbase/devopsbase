{
  "name": "nginx-proxy Chef cookbook",
  "chef_cookbook_name": "nginx-proxy",
  "revision": "0.2.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/nginx-proxy",
    "https://supermarket.chef.io/cookbooks/nginx-proxy/download",
    "https://supermarket.chef.io/cookbooks/nginx-proxy/versions/0.2.1",
    "https://supermarket.chef.io/cookbooks/nginx-proxy/versions/0.2.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/nginx-proxy/versions/0.2.1",
    "https://supermarket.chef.io/api/v1/cookbooks/nginx-proxy",
    "https://supermarket.chef.io/api/v1/cookbooks/nginx-proxy/versions/0.2.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Middleware/Web Server/Nginx",
    "Type/Middleware/Proxy"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/nginx-proxy",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/nginx-proxy/versions/0.2.1/download",
  "deprecated": false,
  "created": "2014-03-27T13:39:02.000Z",
  "updated": "2014-04-07T13:15:07.000Z",
  "description": "Nginx Proxy",
  "maintainer": {
    "name": "mpasternacki",
    "email": "maciej@3ofcoins.net"
  },
  "license": "MIT",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 10,
  "downloads_count": 3793584,
  "downloads_count_revision": 1278583,
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "nginx-proxy cookbook\n====================\n\nAutomatically set up Nginx as a proxy to backend application servers\nor Apache. Provides a definition to use in recipes, and automatically\nconfigures proxies based on attributes.\n\nThis cookbook's home is at https://github.com/3ofcoins/chef-cookbook-nginx-proxy/\n\nRequirements\n------------\n\n * nginx\n * apache2 (included only if apache backend is used)\n\nUsage\n-----\n\nThis cookbook provides an `nginx_proxy` definition that can be used\ndirectly in recipes, and uses it to automatically configure proxies\nbased on attributes.\n\nTo use the definition, include the cookbook in your cookbook's\n`depends`, optionally add `recipe[nginx-proxy::setup]` to the run\nlist, and use `nginx_proxy` in your recipes.\n\n### `nginx_proxy` definition\n\n#### Parameters:\n\n * `name` - name of the file in `sites-available/`; default value for\n   `server_name`\n * `server_name` - server name for nginx\n * `ssl_key` - basename of SSL key\n * `ssl_key_path` - full path to SSL private key, defaults to\n   `\"#{ssl_key}.key\"` in `node['nginx_proxy']['ssl_key_dir']`\n * `ssl_certificate_path` - full path to SSL certificate (full PEM\n   file including intermediate certificates). Defaults to\n   `\"#{ssl_key}.pem\"` in `node['nginx_proxy']['ssl_certificate_dir]`\n * `port` - port on localhost for the backend\n * `apache` (value optional) - if provided and true, configure Apache\n   to listen on `node['nginx_proxy']['apache_port']` and use it as a\n   backend\n * `url` - full URL to backend, can be used instead of `port` or\n   `apache`\n * `redirect` - if true, redirect to the `url` rather than proxy its\n   content\n * `aka` - can be set to one or more aliases that will redirect to the\n   proxy. Last parameter may be a hash specifying parameters for\n   `nginx_proxy` calls for the aliases (e.g. SSL keys)\n * `custom_config` - string, or a list of strings (lines), to include\n   verbatim in the configuration.\n\n#### Examples\n\n```ruby\nnginx_proxy 'icinga.example.com' do\n  apache\n  ssl_key 'star.example.com'\nend\n```\n\n```ruby\nnginx_proxy 'nagios.example.com' do\n  url 'https://icinga.example.com'\n  redirect true\nend\n```\n\n```ruby\nnginx_proxy 'new.example.com' do\n  apache\n  ssl_key 'star.example.com'\n  aka 'old.example.com', 'yet-older.example.com',\n      ssl_key: 'star.example.com'\nend\n```\n\n```ruby\nnginx_proxy 'example.info' do\n  url 'http://example.com/'\nend\n```\n\n```ruby\nnginx_proxy 'site.example.com' do\n  port 4000\nend\n```\n\n### Data-driven recipe\n\nIf you include `nginx-proxy` in your run list, it will process the\n`node['nginx_proxy']['proxies']` attribute hash to call the `nginx_proxy`\ndefinition: each key will be passed as a name, and values are\ninterpreted in the following way:\n\n * if value is `'apache'` or `:apache`, then `apache` parameter is set\n * if value is a number or a string that is a number, then `port`\n   parameter is set to the provided value\n * if value is a string that's not a number, then `url` parameter is\n   set to the value\n * if value is a dictionary, it's applied as parameters\n\n#### Example\n\n```ruby\nnode['nginx_proxy']['proxies']['nagios.example.com'] = :apache\nnode['nginx_proxy']['proxies']['site.example.com'] = 4000\nnode['nginx_proxy']['proxies']['example.info'] = 'http://example.com'\nnode['nginx_proxy']['proxies']['new.example.com']['apache'] = true\nnode['nginx_proxy']['proxies']['new.example.com']['ssl_key'] = 'star.example.com\nnode['nginx_proxy']['proxies']['new.example.com']['aka'] = [\n  'old.example.com', 'yet-older.example.com',\n  ssl_key: 'star.example.com' ]\n```\n\nAttributes\n----------\n\n * `node['nginx_proxy']['proxies']['â€¦']` -- proxies for data-driven\n   recipe (see above)\n * `node['nginx_proxy']['apache_port']` (default: 81) -- port to have\n   Apache listen on when used as a backend\n * `node['nginx_proxy']['ssl_key_dir']` (default: `/etc/ssl/private`)\n   -- directory holding private SSL keys\n * `node['nginx_proxy']['ssl_certificate_dir']` (default:\n   `/etc/ssl/certificates`) -- directory holding public SSL certificates\n\nAuthor\n------\n\nAuthor:: Maciej Pasternacki <maciej@3ofcoins.net>\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}