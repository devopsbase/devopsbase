{
  "name": "iptables-ng Chef cookbook",
  "chef_cookbook_name": "iptables-ng",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/iptables-ng",
    "https://supermarket.chef.io/cookbooks/iptables-ng/download",
    "https://supermarket.chef.io/cookbooks/iptables-ng/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/iptables-ng/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/iptables-ng/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/iptables-ng",
    "https://supermarket.chef.io/api/v1/cookbooks/iptables-ng/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/iptables-ng",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/iptables-ng/versions/1.0.0/download",
  "deprecated": false,
  "created": "2013-09-13T16:32:21.000Z",
  "updated": "2016-10-11T11:20:46.516Z",
  "description": "Installs/Configures iptables-ng",
  "maintainer": {
    "name": "chr4",
    "email": "me@chr4.org"
  },
  "license": "GNU Public License 3.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 15,
  "downloads_count": 13985626,
  "downloads_count_revision": 1261696,
  "repository_url": "https://github.com/chr4-cookbooks/iptables-ng",
  "issues_url": "https://github.com/chr4-cookbooks/iptables-ng/issues",
  "chef_source_url": "https://github.com/chr4-cookbooks/iptables-ng",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# iptables-ng Cookbook\n\nThis cookbook maintans and installs iptables and ip6tables rules, trying to keep as close to the way the used distribution maintains their rules.\n\nContrary to other iptables cookbooks, this cookbook installs iptables and maintains rules using the distributions default configuration files and services (for Debian and Ubuntu, iptables-persistent is used). If the distribution has no service for iptables, it falls back to iptables-restore.\n\nIt provides LWRPs as well as recipes which can handle iptables rules set in the nodes attributes.\n\nIt uses the directory ```/etc/iptables.d``` to store and maintain its rules. I'm trying to be as compatible as much as possible to all distributions out there.\n\n## Requirements\n\nThe following distribution are best supported, but as this recipe falls back to a generic iptables restore script in case the system is unknown, it should work with every linux distribution supporting iptables.\n\n* Ubuntu 12.04, 12.10, 13.04\n* Debian 7 (6 should work, too)\n* RHEL 5.9, 6.x\n* Gentoo\n* Archlinux\n\nNo external dependencies. Just add this line to your ```metadata.rb``` and you're good to go!\n\n```ruby\ndepends 'iptables-ng'\n```\n\n\n## Attributes\n\n### General configuration (services, paths)\n\nWhile iptables-ng tries to automatically determine the correct settings and defaults for your distribution, it might be necessary to adapt them in certian cases. You can configure the behaviour of iptables-ng using the following attributes:\n\n```ruby\n# An array of packages to install.\n# This should install iptables and ip6tables,\n# as well as a system service that takes care of reloading the rules\n# On Debian and Ubuntu, iptables-persistent is used by default.\nnode['iptables-ng']['packages'] = [ 'iptables'Â ]\n\n# The name of the service that will be used to restart iptables\n# If this is left empty, iptables-ng will fall back to iptables-restore\nnode['iptables-ng']['service_ipv4'] = 'iptables-persistent'\nnode['iptables-ng']['service_ipv6'] = 'iptables-persistent'\n\n# The location were the iptables-restore script will be written to\nnode['iptables-ng']['script_ipv4'] = '/etc/iptables/rules.v4'\nnode['iptables-ng']['script_ipv6'] = '/etc/iptables/rules.v6'\n```\n\n### Rule configuration\n\nThe use of the LWRPs is recommended, but iptables-ng can be configured using attributes only.\n\nYou can set the default policies of a chain like this\n\n```ruby\nnode['iptables-ng']['rules']['filter']['INPUT']['default'] = 'DROP [0:0]'\n```\n\nAnd also add rules for a chain (this example allows SSH)\n\n```ruby\nnode['iptables-ng']['rules']['filter']['INPUT']['ssh'] = '--protocol tcp --dport 22 --match state --state NEW --jump ACCEPT'\n```\n\nYou can prioritize your rules, too. This example will make sure that the 'ssh' rule is created before the 'http' rule\n\n```ruby\nnode['iptables-ng']['rules']['filter']['INPUT']['10-ssh']\nnode['iptables-ng']['rules']['filter']['INPUT']['90-http']\n```\n\n\n# Recipes\n\n## default\n\nThe default recipe calls the install recipe, and then configures all rules and policies given in the nodes attribute.\n\nExample:\n\nTo allow only SSH for incoming connections, add this to your node configuration\n\n```json\n{\n  \"name\": \"example.com\",\n  \"chef_environment\": \"_default\",\n  \"normal\": {\n    \"iptables-ng\": {\n      \"rules\": {\n        \"filter\": {\n          \"INPUT\": {\n            \"default\": \"DROP [0:0]\",\n            \"ssh\": \"--protocol tcp --dport 22 --match state --state NEW --jump ACCEPT\"\n          }\n        }\n      }\n    }\n  },\n  \"run_list\": [\n    \"recipe[iptables-ng]\"\n  ]\n}\n```\n\n## install\n\nThe installs recipe installs iptables packages, makes sure that ```/etc/iptables.d``` is created and sets all default policies to \"ACCEPT\", unless they are already configured.\n\nOn Debian and Ubuntu systems, it also removes the \"ufw\" package, as it might interferre with this cookbook.\n\n\n# Providers\n\nIt's recommended to configure iptables-ng using LWRPs in your (wrapper) cookbook.\n\nAll providers take care that iptables is installed (they include the install recipe before running), so you can just use them without worrying whether everything is installed correctly.\n\n\n## iptables_ng_policy\n\nThis provider sets the default policy of a chain.\n\nExample: Set the default policy of the filter INPUT chain to ACCEPT:\n\n```ruby\niptables_ng_policy 'INPUT' do\n  policy 'ACCEPT [0:0]'\nend\n```\n\nThe following additional attributes are supported:\n\n```ruby\niptables_ng_policy 'name' do\n  chain  'INPUT'       # The chain to set the policy for (name_attribute)\n  table  'filter'      # The table to use (defaults to 'filter')\n  policy 'DROP [0:0]'  # The policy to use (required)\n\n  action :create       # Supported actions: :create, :create_if_missing, :delete\n                       # Default action: :create\nend\n```\n\n## iptables_ng_rule\n\nThis provider adds iptables rules\n\nExample: Allow SSH on the INPUT filter chain\n\n```ruby\niptables_ng_rule 'ssh' do\n  rule '--protocol tcp --dport 22 --match state --state NEW --jump ACCEPT'\nend\n```\n\nThe following additional attributes are supported:\n\n```ruby\niptables_ng_rule 'custom' do\n  name       'my-rule'    # Name of the rule. Use \"xx-\" to prioritize rules.\n  chain      'INPUT'      # Chain to use. Defaults to 'INPUT'\n  table      'filter'     # Table to use. Defaults to 'filter'\n  ip_version 4            # Integer or Array of IP versions to create the rules for.\n                          # Defaults to [4, 6]\n  rule       '-j ACCEPT'  # String or Array containing the rule(s). (Required)\n\n  action :create          # Supported actions: :create, :create_if_missing, :delete\n                          # Default action: :create\nend\n```\n\nExample: Allow HTTP and HTTPS for a specific IP range only\n\n```ruby\niptables_ng_rule 'ssh' do\n  rule [ '--source 192.168.1.0/24 --protocol tcp --dport 80 --match state --state NEW --jump ACCEPT',\n         '--source 192.168.1.0/24 --protocol tcp --dport 443 --match state --state NEW --jump ACCEPT' ]\n\n  # As the source specified above is IPv4\n  # This rule cannot be applied to ip6tables.\n  # Therefore, setting ip_version to 4\n  ip_version 4\nend\n```\n\n# Contributing\n\nYou fixed a bug, or added a new feature? Yippie!\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write you change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nContributions of any sort are very welcome!\n\n# License and Authors\n\nAuthors: Chris Aumann\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "suse",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "gentoo",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "arch",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}