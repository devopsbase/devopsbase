{
  "name": "expect Chef cookbook",
  "chef_cookbook_name": "expect",
  "revision": "2.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/expect",
    "https://supermarket.chef.io/cookbooks/expect/download",
    "https://supermarket.chef.io/cookbooks/expect/versions/2.0.0",
    "https://supermarket.chef.io/cookbooks/expect/versions/2.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/expect/versions/2.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/expect",
    "https://supermarket.chef.io/api/v1/cookbooks/expect/versions/2.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Programming Languages",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/expect",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/expect/versions/2.0.0/download",
  "deprecated": false,
  "created": "2016-07-08T05:32:33.657Z",
  "updated": "2016-07-23T13:32:01.980Z",
  "description": "Installs/Configures expect package",
  "maintainer": {
    "name": "rjaros87",
    "email": "jaros_radek@op.pl"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 98,
  "downloads_count_revision": 67,
  "repository_url": "https://github.com/rjaros87/chef-expect",
  "issues_url": "https://github.com/rjaros87/chef-expect/issues",
  "chef_source_url": "https://github.com/rjaros87/chef-expect",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Expect Cookbook\n[![Chef cookbook](https://img.shields.io/cookbook/v/expect.svg)](https://supermarket.chef.io/cookbooks/expect)\n[![Build Status](https://travis-ci.org/rjaros87/chef-expect.svg?branch=master)](https://travis-ci.org/rjaros87/chef-expect)\n\n# Description\n\nThis cookbook will install [Expect package](http://expect.sourceforge.net/).\n> Expect is a tool for automating interactive applications such as telnet, ftp, passwd, fsck, rlogin, tip, etc. Expect really makes this stuff trivial. Expect is also useful for testing these same applications. And by adding Tk, you can also wrap interactive applications in X11 GUIs.\n> Expect can make easy all sorts of tasks that are prohibitively difficult with anything else. You will find that Expect is an absolutely invaluable tool - using it, you will be able to automate tasks that you've never even thought of before - and you'll be able to do this automation quickly and easily.\n\nExpect requires Tcl (tool command language). This cookbook will provide Tcl package if necessary (currently only Windows platform requires it).\n\n### Platforms\n\n- Ubuntu\n- CentOS\n- RedHat\n- Fedora\n- Mac OS X\n- Windows\n\n### Chef\n\n- Chef 12 or later\n\n## Attributes\n\n### expect::default\n\n| Key                                             | Type    | Description                                             | Platform | Default                            |\n| ------------------------------------------------| ------- | --------------------------------------------------------| -------- | -----------------------------------|\n| `default['expect']['include_homebrew']`         | Boolean | Include homebrew recipe for installing brew on Mac OS   | Mac OS   | `true`                             |\n| `default['expect']['cygwin']['from_system']`    | Boolean | Use the Cygwin from system                              | Windows  | `false`                            |\n| `default['expect']['cygwin']['home']`           | String  | Installation path for the Cygwin                        | Windows  | `'C:\\\\cygwin'`                     |\n| `default['expect']['cygwin']['site']`           | String  | Server where the Cygwin should search for the packages  | Windows  | `'http://cygwin.mirrors.pair.com'` |\n\n## Recipes\n\n### expect::default\n\nInstalls Expect package on node and if the node platform is Windows then the recipe also installs [Cygwin](https://www.cygwin.com/) component.\n\n### Usage - expect::default\n\nJust include `expect` in your node's `run_list`:\n\n```json\n{\n  \"name\":\"my_node\",\n  \"run_list\": [\n    \"recipe[expect]\"\n  ]\n}\n```\n\n## Resources\n\nThis cookbook provides a script provider called `expect_script` which will execute `expect` script using Tcl according to current OS. \n\n| Property      | Type              | Description                                                                  | Default                            | Required |\n| --------------| ----------------- | ---------------------------------------------------------------------------- | -----------------------------------| -------- |\n| `cwd`         | String            | The current working directory                                                | `true`                             | false    |\n| `code`        | String            | A quoted string of code to be executed                                       | `false`                            | true     |\n| `environment` | Hash              | A Hash of environment variables in the form of ({\"ENV_VARIABLE\" => \"VALUE\"}) | `'C:\\\\cygwin'`                     | false    |\n| `user`        | [String, Integer] | The user name or user ID that should be changed before running a command     | `nil`                              | false    |\n| `group`       | [String, Integer] | The group name or group ID that must be changed before running a command     | `nil`                              | false    |\n\n### Usage expect_script\n\n```ruby\nexpect_script 'Example expect script with system command' do\n  code <<-EOH\n    spawn ftp\n    set timeout 30\n    expect {\n      -regexp \"ftp.*\" {\n        exp_send \"bye\\r\"\n        exp_continue\n      }\n      eof\n    }\n  EOH\nend\n```\n\n```ruby\nexpect_script 'Example expect script with bash script' do\n  cwd '/'\n  environment 'PATH' => \"#{ENV['PATH']}:/tmp/test\"\n  code <<-EOH\n    spawn test.sh\n    set timeout 30\n    expect {\n      -regexp \"Would you like to delete your all files (yes/no)?.*\" {\n        exp_send \"no\\r\"\n        exp_continue\n      }\n      eof\n    }\n  EOH\n  user 'root'\n  group 'root'\nend\n```\n\n## Contributing\n\n* [Contribution Guidelines](https://github.com/rjaros87/chef-expect/blob/master/CONTRIBUTING.md)\n\n## License and Authors\n\nAuthors: Radoslaw Jaros\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "mac_os_x",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/windows",
      "revision": ">= 1.44.1",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/homebrew",
      "revision": ">= 2.1.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/cygwin",
      "revision": "~> 0.7.0",
      "self_resolve": true
    }
  ]
}