{
  "name": "haproxy2 Chef cookbook",
  "chef_cookbook_name": "haproxy2",
  "revision": "0.5.7",
  "uris": [
    "https://supermarket.chef.io/cookbooks/haproxy2",
    "https://supermarket.chef.io/cookbooks/haproxy2/download",
    "https://supermarket.chef.io/cookbooks/haproxy2/versions/0.5.7",
    "https://supermarket.chef.io/cookbooks/haproxy2/versions/0.5.7/download",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy2/versions/0.5.7",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy2",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy2/versions/0.5.7/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/haproxy2",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/haproxy2/versions/0.5.7/download",
  "deprecated": false,
  "created": "2012-09-20T23:19:48.000Z",
  "updated": "2012-09-20T23:19:49.000Z",
  "description": "Installs and configures haproxy",
  "maintainer": {
    "name": "demonccc",
    "email": "demonccc@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 1256758,
  "downloads_count_revision": 1256758,
  "repository_url": "https://github.com/demonccc/chef-repo/tree/master/cookbooks/haproxy2",
  "issues_url": "https://github.com/demonccc/chef-repo/tree/master/cookbooks/haproxy2",
  "chef_source_url": "https://github.com/demonccc/chef-repo/tree/master/cookbooks/haproxy2",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Description\n\nInstalls and configures HAproxy\n\n# Requirements\n\n## Chef\n\nTested on 0.10.8 but newer and older version should work just fine.\n\n## Platform\n\nThe following platforms have been tested with this cookbook, meaning that the\nrecipes run on these platforms without error:\n\n* ubuntu\n* debian\n\n## Cookbooks\n\nThere are **no** external cookbook dependencies. \n\n# Installation\n\nJust place the haproxy2 directory in your chef cookbook directory and\nupload it to your Chef server.\n\n# Usage\n\nSimply include `recipe[haproxy2]` in your run_list.\n\nThis cookbook does not have a template to create the haproxy.cfg file, \nthis file is generated dinamically depending of the pairs of keys and values \nof the attributes.\n\nThe global and the defaults sections, the listens, the frontends and the \nbackends follow the same rules regarding how the cookbook will generate \nthe configuration file. The idea is generate the config file setting attributes\nin the node, or trhough roles avoiding the templates.\n\nThe global and defaults sections are hashes with which their pair of keys and \nvalues are the settings that will applied on them.\n\nThe listens, frontends and the backends are an array of hashes, where each \npair of keys and values of each hash are the settings that will be applied \nfor them. They have three special attributes (name, role_app and\nmember_options) that will not be considered settings of the listen, \nfrontend or the backend but they are used for:\n\n* **name**: defines the name of the listen, frontend or backend\n* **role_app**: defines the role with which the nodes will be searched in order\n  to use their info to set the servers options. \n* **member_options**: It is a  hash that could contain the keys `port` (it is the \n  port that will be used in the server option) and `extra` (you can set the extra \n  options for the server option). \n\nRegarding the values of the attributes, if you need to set a parameter \nwithout values, you need to set this value to `true`, but if you need to set\na value you need to set a string. If it is `false`, the parameter will be not\nset. If it is an array, the parameter will be set with the elements of the \narray individually.\n\nThere is three special keywords (IPADDRESS, HOSTNAME, FQDN) that will be\nreplaced by the corresponding attribute of the node.\n\nFor example, the following settings:\n\n    \"haproxy\" => {\n      \"global\" => {\n        \"log\" => \"/dev/log local0 notice\",\n        \"maxconn\" => 4096,\n        \"debug\" => false,\n        \"quiet\" => true,\n        \"user\" => \"haproxy\",\n        \"group\" => \"haproxy\"\n      },\n      \"defaults\" => {\n        \"log\" => \"global\",\n        \"mode\" => \"http\",\n        \"option\" => [ \"httplog\", \"dontlognull\", \"redispatch\" ],\n        \"retries\" =>  3,\n        \"maxconn\" => 2000,\n        \"contimeout\" => 5000,\n        \"clitimeout\" => 50000,\n        \"srvtimeout\" => 50000\n      },\n      \"listen\" => [\n        {\n          \"name\" => \"load_balancer\",\n          \"role_app\" => lb_nodes\",\n          \"member_options\" => {\n            \"port\" => \"1060\",\n            \"extra\" => \"check\"\n          },\n          \"bind\" => \"IPADDRESS:80\",\n          \"maxconn\" => \"500000\",\n          \"balance\" => \"url_param jid\",\n          \"option\" => [\"httpclose\", \"redispatch\", \"forwardfor\"]\n        },\n        {\n          \"name\" => \"health_check\",\n          \"bind\" => \"127.0.0.1:60000\",\n          \"mode\" => \"health\"\n        },\n        {\n          \"name\" => \"stats\",\n          \"bind\" => \"10.10.10.10:80\",\n          \"maxconn\" => \"10\",\n          \"mode\" => \"http\",\n          \"stats\" => [\n            \"enable\",\n            \"hide-version\",\n            \"realm Haproxy\",\n            \"uri /proxy?stats\",\n            \"auth status:pass123\"\n          ]\n        },\n        {\n          \"name\" => \"admin\",\n          \"bind\" => \"0.0.0.0:22002\",\n          \"mode\" => \"http\",\n          \"stats\" => \"uri /\"\n        }\n      ]\n    }\n\nWill generate the following configuration file (the ip address of the node will be 40.51.127.1):\n\n    global\n           group haproxy\n           log /dev/log local0 notice\n           maxconn 4096\n           user haproxy\n           quiet\n    \n    defaults\n           clitimeout 50000\n           contimeout 5000\n           log global\n           maxconn 2000\n           mode http\n           option httplog\n           option dontlognull\n           option redispatch\n           retries 3\n           srvtimeout 50000\n\n    listen load_balancer\n           balance url_param jid\n           bind 40.51.127.1:80\n           maxconn 500000\n           option httpclose\n           option redispatch\n           option forwardfor\n           server node00 10.0.0.100:1060 check\n           server node01 10.0.0.101:1060 check\n           server node02 10.0.0.102:1060 check\n           server node03 10.0.0.103:1060 check\n\n    listen health_check\n           bind 127.0.0.1:60000\n           mode health\n\n    listen stats\n           bind 10.10.10.10:80\n           maxconn 10\n           mode http\n           stats enable\n           stats hide-version\n           stats realm Haproxy\n           stats uri /proxy?stats\n           stats auth status:pass123\n\n    listen admin\n           bind 0.0.0.0:22002\n           mode http\n           stats uri /\n\n\n(The servers option of the load_balancer listen were added automatically. The cookbook search\nthe nodes that have the role lb_nodes in their runlist and added them to the listen settings)\n\n# Recipes\n\n## default\n\nThis recipe installs, configures and starts the haproxy service.\n\n# Attributes\n\n## `node['haproxy']['daemon']['enable']`\n\nIf it true, set ENABLE=1 in the /etc/default/haproxy file.\n\n## `node['haproxy']['daemon']['extra_options']`\n\nIt set the extra options which will be started the haproxy daemon.\n\n## `node['haproxy']['global']`\n\nHash that contains the options and the values of the global section.\n\n## `node['haproxy']['defaults']`\n\nHash that contains the options and the values of the defaults section.\n\n## `node['haproxy']['frontend']`\n\nArray of the hashes. Each hash contain the options and the values of a\nfrontend definition.\n\n## `node['haproxy']['backend']`\n\nArray of the hashes. Each hash contain the options and the values of a\nbackend definition.\n\n## `node['haproxy']['listen']`\n\nArray of the hashes. Each hash contain the options and the values of a\nlisten definition.\n\n# Resources and Providers\n\nThere are **none** defined.\n\n# Libraries\n\nThere are **none** defined.\n\n# Development\n\n* Source hosted at [GitHub][repo]\n* Report issues/Questions/Feature requests on [GitHub Issues][issues]\n\nPull requests are very welcome! Make sure your patches are well tested.\nIdeally create a topic branch for every separate change you make.\n\n# License and Author\n\nAuthor:: Claudio Cesar Sanchez Tejeda <demonccc@gmail.com>\n\nCopyright:: 2012, Claudio Cesar Sanchez Tejeda\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[repo]:         https://github.com/demonccc/chef-repo\n[issues]:       https://github.com/demonccc/chef-repo/issues\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "haproxy2": "Installs and configures haproxy by searching for nodes of a particular role"
  }
}