{
  "name": "ramdisk Chef cookbook",
  "chef_cookbook_name": "ramdisk",
  "revision": "0.2.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/ramdisk",
    "https://supermarket.chef.io/cookbooks/ramdisk/download",
    "https://supermarket.chef.io/cookbooks/ramdisk/versions/0.2.0",
    "https://supermarket.chef.io/cookbooks/ramdisk/versions/0.2.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/ramdisk/versions/0.2.0",
    "https://supermarket.chef.io/api/v1/cookbooks/ramdisk",
    "https://supermarket.chef.io/api/v1/cookbooks/ramdisk/versions/0.2.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/ramdisk",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/ramdisk/versions/0.2.0/download",
  "deprecated": false,
  "created": "2014-11-24T01:26:11.865Z",
  "updated": "2015-08-26T19:34:10.911Z",
  "description": "Manage tmpfs RAM disks with Chef",
  "maintainer": {
    "name": "zuazo",
    "email": "xabier@zuazo.org"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 2327566,
  "downloads_count_revision": 245,
  "repository_url": "https://github.com/zuazo/ramdisk-cookbook",
  "issues_url": "https://github.com/zuazo/ramdisk-cookbook/issues",
  "chef_source_url": "https://github.com/zuazo/ramdisk-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Ramdisk Cookbook\n================\n[![Cookbook Version](https://img.shields.io/cookbook/v/ramdisk.svg?style=flat)](https://supermarket.chef.io/cookbooks/ramdisk)\n[![Dependency Status](http://img.shields.io/gemnasium/zuazo/ramdisk-cookbook.svg?style=flat)](https://gemnasium.com/zuazo/ramdisk-cookbook)\n[![Code Climate](http://img.shields.io/codeclimate/github/zuazo/ramdisk-cookbook.svg?style=flat)](https://codeclimate.com/github/zuazo/ramdisk-cookbook)\n[![Build Status](http://img.shields.io/travis/zuazo/ramdisk-cookbook/0.2.0.svg?style=flat)](https://travis-ci.org/zuazo/ramdisk-cookbook)\n[![Coverage Status](http://img.shields.io/coveralls/zuazo/ramdisk-cookbook/0.2.0.svg?style=flat)](https://coveralls.io/r/zuazo/ramdisk-cookbook?/Coverage Status](http://img.shields.io/coveralls/zuazo/ramdisk-cookbook/0.2.0.svg?style=flat)](https://coveralls.io/r/zuazo/ramdisk-cookbook?branch=0.2.0)\n\nThis cookbook manages tmpfs RAM disks with [Chef](https://www.chef.io/).\n\nRequirements\n============\n\n## Supported Platforms\n\nThis cookbook has been tested on the following platforms:\n\n* CentOS\n* Debian\n* Fedora\n* FreeBSD\n* RedHat\n* Ubuntu\n\nFreeBSD support is somewhat limited due to its current implementation: the *remount* is not supported on this platform and some mount options are ignored.\n\nPlease, [let us know](https://github.com/zuazo/ramdisk-cookbook/issues/new?title=I%20have%20used%20it%20successfully%20on%20...) if you use it successfully on any other platform.\n\n## Required Applications\n\n* Ruby `1.9.3` or higher.\n\nResources\n=========\n\n## ramdisk[path]\n\nCreates or deletes a RAM disk.\n\nIf you change the RAM disk size, the `ramdisk` resource will try to remount the disk without umounting.\n\n### ramdisk Actions\n\n* `create`: Creates a RAM disk (*default*).\n* `delete`: Deletes a RAM disk.\n\n### ramdisk Parameters\n\n| Parameter  | Default          | Description                       |\n|:-----------|:-----------------|:----------------------------------|\n| path       | *name parameter* | tmpfs RAM disk mount path.\n| size       | `nil`            | Size of the filesystem (**required**). The size is given in bytes. Also accepts a suffix *k*, *m* or *g*.\n| persist    | `true`           | Whether to persist the RAM disk. **Note:** The data will not persist between reboots. This only creates the RAM disk on each boot.\n| nosuid     | `false`          | Do not allow set-user-identifier or set-group-identifier bits to take effect.\n| nodev      | `false`          | Do not interpret character or block special devices on the filesystem.\n| noexec     | `false`          | Do not allow direct execution of any binaries on the mounted filesystem.\n| noatime    | `false`          | Do not update inode access times on this filesystem.\n| nodiratime | `false`          | Do not update directory inode access times on this filesystem.\n| inodes     | `nil`            | The maximum number of inodes for this instance.\n| mode       | `nil`            | Set initial permissions of the root directory.\n| uid        | `nil`            | The user id.\n| gid        | `nil`            | The group id.\n| user       | `nil`            | The same as *uid*, but using user names.\n| group      | `nil`            | The same as *gid*, but using group names.\n| mpol       | `nil`            | Set the NUMA memory allocation policy for all files in that instance.\n\nAttributes\n==========\n\nThese attributes are primarily intended to support the different platforms. Do not touch them unless you know what you are doing.\n\n| Attribute                                 | Default      | Description                       |\n|:------------------------------------------|:-------------|:----------------------------------|\n| `node['ramdisk']['options']['default']`   | `['rw']`     | Minimal default mount options to set.\n| `node['ramdisk']['options']['flags']`     | *calculated* | Supported mount flag options: `nosuid`, `noexec`, ...\n| `node['ramdisk']['options']['variables']` | *calculated* | Supported mount variable options: `size`=, `mode`=, `uid`=, ...\n| `node['ramdisk']['supports']['remount']`  | *calculated* | Whether mount remount operation is supported.\n\nUsage\n=====\n\n## Including in the metadata\n\nBefore using this cookbook, remember to put it as a dependency in your metadata:\n\n```ruby\n# metadata.rb\ndepends 'ramdisk'\n```\n\n## Basic Example\n\nCreate a 10MB tmpfs RAM disk:\n\n```ruby\nramdisk '/mnt/ramdisk1' do\n  size '10m'\nend\n\n```\n\n## A Complex Example\n\nCreate a tmpfs RAM disk setting some options and the owner user:\n\n```ruby\nramdisk '/tmp/secure_bob_ramdisk' do\n  size '1g'\n  user 'bob'\n  group 'bob'\n  persist false\n  nosuid true\n  nodev true\n  noexec true\n  noatime true\n  inodes '999k'\n  mode '750'\nend\n```\n\nTesting\n=======\n\nSee [TESTING.md](https://github.com/zuazo/ramdisk-cookbook/blob/master/TESTING.md).\n\n## ChefSpec Matchers\n\n### ramdisk(path)\n\nHelper method for locating a `ramdisk` resource in the collection.\n\n```ruby\nresource = chef_run.ramdisk('/mnt/ramdisk1')\nexpect(resource).to notify('service[java-app]').to(:restart)\n```\n\n### create_ramdisk(path)\n\nAssert that the Chef run creates a ramdisk.\n\n```ruby\nexpect(chef_run).to create_ramdisk('/mnt/ramdisk1')\n```\n\n### delete_ramdisk(name)\n\nAssert that the Chef run deletes a ramdisk.\n\n```ruby\nexpect(chef_run).to delete_ramdisk('/mnt/ramdisk1')\n```\n\nContributing\n============\n\nPlease do not hesitate to [open an issue](https://github.com/zuazo/ramdisk-cookbook/issues/new) with any questions or problems.\n\nSee [CONTRIBUTING.md](https://github.com/zuazo/ramdisk-cookbook/blob/master/CONTRIBUTING.md).\n\nTODO\n====\n\nSee [TODO.md](https://github.com/zuazo/ramdisk-cookbook/blob/master/TODO.md).\n\nLicense and Author\n==================\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@zuazo.org>)\n| **Contributor:**     | [Hendrik Bergunde](https://github.com/hendrikb)\n| **Copyright:**       | Copyright (c) 2015, Xabier de Zuazo\n| **Copyright:**       | Copyright (c) 2014, Onddo Labs, SL.\n| **License:**         | Apache License, Version 2.0\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    \n        http://www.apache.org/licenses/LICENSE-2.0\n    \n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "freebsd",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "parameters": {
    "ramdisk/options/default": {
      "display_name": "ramdisk options default",
      "description": "Minimal default mount options to set.",
      "type": "array",
      "required": "optional",
      "default": [
        "rw"
      ],
      "choice": [],
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "ramdisk/options/flags": {
      "display_name": "ramdisk options flags",
      "description": "Supported mount flag options: nosuid, noexec, ...",
      "type": "array",
      "required": "optional",
      "calculated": true,
      "choice": [],
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "ramdisk/options/variables": {
      "display_name": "ramdisk options variables",
      "description": "Supported mount variable options: size=, mode=, uid=, ...",
      "type": "array",
      "required": "optional",
      "calculated": true,
      "choice": [],
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "ramdisk/supports/remount": {
      "display_name": "ramdisk supports remount",
      "description": "Whether mount remount operation is supported",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "required": "optional",
      "calculated": true,
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}