{
  "name": "bind Chef cookbook",
  "chef_cookbook_name": "bind",
  "revision": "0.0.6",
  "uris": [
    "https://supermarket.chef.io/cookbooks/bind",
    "https://supermarket.chef.io/cookbooks/bind/download",
    "https://supermarket.chef.io/cookbooks/bind/versions/0.0.6",
    "https://supermarket.chef.io/cookbooks/bind/versions/0.0.6/download",
    "https://supermarket.chef.io/api/v1/cookbooks/bind/versions/0.0.6",
    "https://supermarket.chef.io/api/v1/cookbooks/bind",
    "https://supermarket.chef.io/api/v1/cookbooks/bind/versions/0.0.6/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/bind",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/bind/versions/0.0.6/download",
  "deprecated": false,
  "created": "2012-06-06T21:45:55.000Z",
  "updated": "2016-08-22T19:26:23.564Z",
  "description": "Installs/Configures ISC BIND",
  "maintainer": {
    "name": "atomic-penguin",
    "email": "wolfe21@marshall.edu"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": true,
  "rating": null,
  "followers_count": 12,
  "downloads_count": 18374433,
  "downloads_count_revision": 1216541,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Bind [![Build Status](https://secure.travis-ci.org/atomic-penguin/cookbook-bind.png?branch=master)](http://travis-ci.org/atomic-penguin/cookbook-bind)\n\n## Description\n\nA cookbook to manage bind DNS servers, and zones.\n\n## Requirements\n\nIncluded ldap2zone recipe depends on Chef 0.10.10 features,\nsuch as `chef_gem`.\n\nThe net-ldap v0.2.2 Ruby gem is required for the ldap2zone recipe.\n\n## Attributes\n\n### Attributes which probably require tuning\n\n* `bind['masters']`\n  - Array of authoritative servers which you transfer zones from.\n  - Default empty\n\n* `bind['ipv6_listen']`\n  - Boolean, whether BIND should listen on ipv6\n  - Default is false\n\n* `bind['acl-role']`\n  - Search key for pulling split-domain ACLs out of `data_bags`\n  - Defaults to internal-acl, and has no effect if you do not need ACLs.\n\n* `bind['acl']`\n  - An array node attribute which `data_bag` ACLs are pushed on to,\n    and then passed to named.options template.\n  - Default is an empty array.\n\n* `bind['zones']`\n  - An array node attribute which zone names are pushed on to,\n    from an external source such as `data_bags` or even LDAP\n  - Defaults to an empty array.  See ldap2zone, or databag2zone\n    recipes, for examples on populating your named.conf template\n    from an external data source.\n\n* `bind['zonetype']`\n  - The zone type, master, or slave for configuring\n    the  named.conf template.\n  - Defaults to slave\n\n* `bind['zonesource']`\n  - The external zone data source, included examples are databag\n    or ldap\n  - Defaults to databag.  Should have no effect if no zone names\n    exist in the bind `data_bag`.\n\n* `bind['options']`\n  - Free form options for named.conf template\n  - Defaults to an empty array.\n\n### Attributes which should not require tuning\n\n* `bind['packages']`\n  - packages to install\n  - Platform specific defaults\n\n* `bind['sysconfdir']`\n  - etc directory for named\n  - Platform specific defaults\n\n* `bind['vardir']`\n  - var directory for named to write state data, such as zone files.\n  - Platform specific defaults\n\n* `bind['etc_cookbook_files']`\n  - static cookbook files to drop off in sysconf directory\n  - Defaults to named.rfc1912.zones\n\n* `bind['etc_template_files']`\n  - template files to render from `data_bag` and/or roles\n  - Defaults to named.options\n\n* `bind['var_cookbook_files']`\n  - static cookbook files to drop off in var directory\n  - defaults to named.empty, named.ca, named.loopback, and named.localhost\n\n* `bind['rndc_keygen']`\n  - command to generate rndc key\n  - default depends on hardware/hypervisor platform\n\n### ldap2zone recipe specific attributes\n\nWe store our zone names on Active Directory, and use Ruby to pull\nthese into Chef and configure our Linux BIND servers.  If you already\nhave Active Directory, chances are you have an authoritative data\nsource for zone names in LDAP and can use this recipe to query\nthis data, just by setting a few attributes in a role.\n\n* `bind['ldap']['binddn']`\n   - The binddn username for connecting to LDAP\n   - Default nil\n\n* `bind['ldap']['bindpw']`\n  - The binddn password for connecting to LDAP\n  - Default nil\n\n* `bind['ldap']['filter']`\n  - The LDAP object filter for zone names\n  - Defaults to dnsZone class, excluding Root DNS Servers\n\n* `bind['ldap'][server']`\n  - The authoritative directory server for your domain\n  - Defaults to nil\n\n* `bind['ldap']['domainzones']`\n  - The LDAP tree where your domain zones are located\n  - Defaults to the Active Directory zone tree for example.com.\n\n## Usage\n\n### Notes on the zonesource recipes\n\nThe databag2zone and ldap2zone is optional code to fetch DNS zones\nfrom a data bag, or Active Directory integrated domain controllers.\nIf you have a proper IP address management (IPAM) solution, you\ncould drop in your own code to query an API on your IPAM server.\n\nAny query should use the `<<` operator to push results on to the\n`bind['zones']` array.  Drop your query code in a recipe\nnamed `query2zone.rb`, for example.  Then include the API query\nby overriding the attribute `bind['zonesource']` set to the\nstring `query`.\n\nAlternatively, you can just use an `override['bind']['zones']` in\na role or environment instead.  Or even a mix of both override\nattributes, and an API query to populate zones.\n\n### Example role for internal recursing DNS\n\nAn example role for an internal split-horizon BIND server for\nexample.com, might look like so: \n\n```ruby\nname \"internal_dns\"\ndescription \"Configure and install Bind to function as an internal DNS server.\"\noverride_attributes \"bind\" => {\n  \"acl-role\" => \"internal-acl\",\n  \"masters\" => [ \"192.0.2.10\", \"192.0.2.11\", \"192.0.2.12\" ],\n  \"ipv6_listen\" => true,\n  \"zonetype\" => \"slave\",\n  \"zonesource\" => \"ldap\",\n  \"zones\" => [\n    \"example.com\",\n    \"example.org\"\n  ],\n  \"ldap\" => {\n    \"server\" => \"example.com\",\n    \"binddn\" => \"cn=chef-ldap,ou=Service Accounts,dc=example,dc=com\",\n    \"bindpw\" => \"ServiceAccountPassword\",\n    \"domainzones\" => \"cn=MicrosoftDNS,dc=DomainDnsZones,dc=example,dc=com\"\n  },\n  \"options\" => [\n    \"check-names slave ignore;\",\n    \"multi-master yes;\",\n    \"provide-ixfr yes;\",\n    \"recursive-clients 10000;\",\n    \"request-ixfr yes;\",\n    \"allow-notify { acl-dns-masters; acl-dns-slaves; };\",\n    \"allow-query { example-lan; localhost; };\",\n    \"allow-query-cache { example-lan; localhost; };\",\n    \"allow-recursion { example-lan; localhost; };\",\n    \"allow-transfer { acl-dns-masters; acl-dns-slaves; };\",\n    \"allow-update-forwarding { any; };\",\n  ]\n}\nrun_list \"recipe[bind]\"\n```\n\n### Example role for authoritative only external DNS\n\nAn example role for an external split-horizon authoritative only\nBIND server for example.com, might look like so:\n\n```ruby\nname \"external_dns\"\ndescription \"Configure and install Bind to function as an external DNS server.\"\noverride_attributes \"bind\" => {\n  \"acl-role\" => \"external-acl\",\n  \"masters\" => [ \"192.0.2.5\", \"192.0.2.6\" ],\n  \"ipv6_listen\" => true,\n  \"zonetype\" => \"master\",\n  \"zones\" => [\n    \"example.com\",\n    \"example.org\"\n  ],\n  \"options\" => [\n    \"recursion no;\",\n    \"allow-query { any; };\",\n    \"allow-transfer { external-private-interfaces; external-dns; };\",\n    \"allow-notify { external-private-interfaces; external-dns; localhost; };\",\n    \"listen-on-v6 { any; };\"\n  ]\n}\nrun_list \"recipe[bind]\"\n```\n\n### Example BIND Access Controls from data bag\n\nIn order to include an external ACL for the private interfaces\nof your external nameservers, you can create a data bag like so.\n\n  * data_bag name: bind\n    - id: ACL entry name\n    - role: search key for bind data_bag\n    - hosts: array of CIDR addresses, or IP addresses\n\n```json\n{\n  \"id\": \"external-private-interfaces\",\n  \"role\": \"external-acl\",\n  \"hosts\": [ \"192.0.2.15\", \"192.0.2.16\", \"192.0.2.17\" ]\n}\n```\n\nIn order to include an internal ACL for the query addresses of\nyour LAN, you might create a data bag like so.\n\n  * data_bag name: bind\n    - id: ACL entry name\n    - role: search key for bind data_bag\n    - hosts: array of CIDR addresses, or IP addresses\n\n```json\n{\n  \"id\": \"example-lan\",\n  \"role\": \"internal-acl\",\n  \"hosts\": [ \"192.0.2.18\", \"192.0.2.19\", \"192.0.2.20\" ]\n}\n```\n\n### Example to load zone names from data bag\n\nIf you have a few number of zones, you can split these\nup into individual data bag objects if you prefer.\n\n  * data_bag name: bind\n    - zone: string representation of individual zone name.\n\n```json\n{\n  \"id\": \"example\",\n  \"zone\": \"example.com\"\n}\n```\n\nIf you wish to group a number of zones together, you can\nuse the following format to include a number of zones at once.\n\n  * data_bag name: bind\n    - zones: array representation of several zone names.\n\n```json\n{\n  \"id\": \"example\",\n  \"zones\": [ \"example.com\", \"example.org\" ]\n}\n```\n\n## License and Author\n\nCopyright: 2011 Eric G. Wolfe\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
}