{
  "name": "cloudfoundry-rabbitmq-service Chef cookbook",
  "chef_cookbook_name": "cloudfoundry-rabbitmq-service",
  "revision": "1.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/cloudfoundry-rabbitmq-service",
    "https://supermarket.chef.io/cookbooks/cloudfoundry-rabbitmq-service/download",
    "https://supermarket.chef.io/cookbooks/cloudfoundry-rabbitmq-service/versions/1.1.0",
    "https://supermarket.chef.io/cookbooks/cloudfoundry-rabbitmq-service/versions/1.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudfoundry-rabbitmq-service/versions/1.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudfoundry-rabbitmq-service",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudfoundry-rabbitmq-service/versions/1.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Operating Systems & Virtualization",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Cloud Platform/Cloud Foundry",
    "Type/Middleware/Messaging/RabbitMQ"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/cloudfoundry-rabbitmq-service",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/cloudfoundry-rabbitmq-service/versions/1.1.0/download",
  "deprecated": false,
  "created": "2012-12-28T20:21:40.000Z",
  "updated": "2013-01-13T07:31:21.000Z",
  "description": "Installs/Configures cloudfoundry-rabbitmq-service",
  "maintainer": {
    "name": "andreacampi",
    "email": "andrea.campi@zephirworks.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 7603355,
  "downloads_count_revision": 1267214,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstall a Cloud Foundry RabbitMQ gateway or node, optional components of a\n[Cloud Foundry](http://www.cloudfoundry.org) installation.\n\nRequirements\n============\n\nCookbooks\n---------\n\n* cloudfoundry\n* cloudfoundry\\_service\n* rbenv\n\nPlatform\n--------\n\n* Ubuntu\n\nTested on:\n\n* Ubuntu 10.04\n* Ubuntu 12.04\n\nAttributes\n==========\n\ngateway\n-------\n\n`node['cloudfoundry_rabbitmq_service']['gateway']['log_level']` - Log level for\nthe service gateway daemon. Defaults to `info`.\n`node['cloudfoundry_rabbitmq_service']['gateway']['node_timeout']` - Time out\nfor talking to a service node. Defaults to `30`.\n`node['cloudfoundry_rabbitmq_service']['gateway']['timeout']` - Time out for\ncompleting (de)provisioning requests. Defaults to `15`.\n* `node['cloudfoundry_rabbitmq_service']['gateway']['ip_route']` - The IP address\nof a host that will be used to determine the correct IP address to use to\ntalk to other components; or `nil` to use the default. Defaults to `nil`.\n* `node['cloudfoundry_rabbitmq_service']['node']['check_orphan_interval']` -\nInterval in seconds between checks for orphan service instances; set to -1 to\nonly check on request. Defaults to `-1`.\n* `node['cloudfoundry_rabbitmq_service']['node']['double_check_orphan_interval']` -\nAfter a succesful first check for orphans, a second check will be run; this\nattribute determines the delay before this second check. Defaults to `300`.\n* `node['cloudfoundry_rabbitmq_service']['gateway']['max_nats_payload']` - Maximum\nsize in bytes of a single announcement; bigger ones will be split into\nmultiple messages. Defaults to `1048576`.\n\nnode\n----\n\n`node['cloudfoundry_rabbitmq_service']['node']['log_level']` - Log level for\nthe service node daemon. Defaults to `info`.\n`node['cloudfoundry_rabbitmq_service']['node']['index']` - Unique instance\ninfo; should be configured to be different between nodes. Defaults to `0`.\n`node['cloudfoundry_rabbitmq_service']['node']['capacity']` - Maximum number\nof service instances for this node. Defaults to `200`.\n`node['cloudfoundry_rabbitmq_service']['node']['port_range']['first']` -\nThe lower end of a range of ports that can be used for services nodes.\nDefaults to `10001`.\n`node['cloudfoundry_rabbitmq_service']['node']['port_range']['last']` -\nThe higher end of a range of ports that can be used for services nodes.\nDefaults to `20000`.\n`node['cloudfoundry_rabbitmq_service']['node']['admin_port_range']['first']` -\nThe lower end of a range of ports that can be used for the admin interface\nof services nodes. Defaults to `20001`.\n`node['cloudfoundry_rabbitmq_service']['node']['admin_port_range']['last']` -\nThe higher end of a range of ports that can be used for the admin interface\nof services nodes. Defaults to `30000`.\n`node['cloudfoundry_rabbitmq_service']['node']['migration_nfs']` - Path to\na directory that will be used when dumping and reimporting a node. Defaults\nto `/mnt/migration`.\n`node['cloudfoundry_rabbitmq_service']['node']['max_clients']` - Maximum\nnumber of clients that can connect to the service.. Defaults to `1000`.\n* `node['cloudfoundry_rabbitmq_service']['node']['max_memory_factor']` -\nMaximum percentage of memory to use. Defaults to `0.5`.\n* `node['cloudfoundry_rabbitmq_service']['node']['ip_route']` - The IP address\nof a host that will be used to determine the correct IP address to use to\ntalk to other components; or `nil` to use the default. Defaults to `nil`.\n* `node['cloudfoundry_rabbitmq_service']['node']['z_interval']` - Frequency\nin seconds between updating and announcing \"varz\" (i.e. service status\ninformation). Defaults to `30`.\n* `node['cloudfoundry_rabbitmq_service']['node']['max_nats_payload']` - Maximum\nsize in bytes of a single announcement; bigger ones will be split into\nmultiple messages. Defaults to `1048576`.\n* `node['cloudfoundry_rabbitmq_service']['node']['fqdn_hosts']` - If true,\nservice bindings credentials will be issued using the hostname. If false,\nthe IP address will be used instead.. Defaults to `false`.\n* `node['cloudfoundry_rabbitmq_service']['node']['op_time_limit']` - Maximum\ntime to wait during provisioning. Defaults to `6`.\n\nUsage\n=====\n\nYou need exactly one RabbitMQ service gateway, ideally deployed to the same\nnode as the `cloud_controller`:\n\n    run_list: \"recipe[cloudfoundry-rabbitmq-service::gateway]\"\n\nYou can run as many RabbitMQ service nodes as needed to support your expected\nwork load:\n\n    run_list: \"recipe[cloudfoundry-rabbitmq-service::node]\"\n\nYou also need to install the RabbitMQ package itself. You may want to provide\nyour own binaries, or you can use the simplified recipe in this cookbook:\n\n    run_list: \"recipe[cloudfoundry-rabbitmq-service::install22]\",\n              \"recipe[cloudfoundry-rabbitmq-service::node]\"\n\nLicense and Author\n==================\n\nAuthor:: Andrea Campi (<andrea.campi@zephirworks.om.com>)\n\nCopyright:: 2012 ZephirWorks\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/cloudfoundry",
      "revision": "~> 1.1.1",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/cloudfoundry_service",
      "revision": "~> 1.2.1",
      "self_resolve": true
    }
  ]
}