{
  "name": "service_factory Chef cookbook",
  "chef_cookbook_name": "service_factory",
  "revision": "0.1.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/service_factory",
    "https://supermarket.chef.io/cookbooks/service_factory/download",
    "https://supermarket.chef.io/cookbooks/service_factory/versions/0.1.4",
    "https://supermarket.chef.io/cookbooks/service_factory/versions/0.1.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/service_factory/versions/0.1.4",
    "https://supermarket.chef.io/api/v1/cookbooks/service_factory",
    "https://supermarket.chef.io/api/v1/cookbooks/service_factory/versions/0.1.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/service_factory",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/service_factory/versions/0.1.4/download",
  "deprecated": false,
  "created": "2013-06-28T04:29:09.000Z",
  "updated": "2013-09-10T08:34:00.000Z",
  "description": "LWRPs to generate services using native system features and service managers. (SysV, Upstart, ...)",
  "maintainer": {
    "name": "binarybabel",
    "email": "projects@binarybabel.org"
  },
  "license": "Apache License, Version 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 3,
  "downloads_count": 5043759,
  "downloads_count_revision": 1263755,
  "repository_url": "https://github.com/org-binbab/cookbook-service_factory",
  "issues_url": "https://github.com/org-binbab/cookbook-service_factory",
  "chef_source_url": "https://github.com/org-binbab/cookbook-service_factory",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# service_factory cookbook\n\nCookbook for Opscode Chef.\n\nhttp://community.opscode.com/cookbooks/service_factory\n\n**Fully functional â€¦ documentation WIP, and example usages coming soon !!**\n\n\n# Description\n\nGenerate services using native system features with the **service_factory** LWRPs.\n\nYour recipe provides the configuration details, and the necessary files are generated to create a **SysV** or **Upstart** service, depending on what each OS prefers. (**SystemD** coming soon!!)\n\n**Supported Service Managers**\n\n- SysV (init.d, chkconfig, etc.)\n- Upstart (Ubuntu, Debian, etc.)\n\n**Supported Operating Systems**\nThe following are supported and verified through test-kitchen automated integration testing.\n\n- Centos\n- Ubuntu\n\n**Default Service Managers**\n\nUnless otherwise specified in the **service_factory** global config, the default service manager is **SysV**, and\nothers are selected conditionally based on the distribution and version.\n\nYou can customize these defaults by adjusting the 'platform_map' node attribute, described below.\n\n\n# Requirements\n\nCookbooks:: [unix_bin](http://community.opscode.com/cookbooks/service_factory) , [resource_masher](http://community.opscode.com/cookbooks/resource_masher) , [run_action_now](http://community.opscode.com/cookbooks/run_action_now)\n\nResource attributes:: `service_desc` , `exec` , `run_user` , `run_group`\n\n\n# Simple Examples (More coming soon..)\n\n*There is a full attribute listing towards end of README.*\n\n** Basic service (required elements) **\n\n    service_factory \"my_service\" do\n      service_desc \"My Service\"\n      exec \"/opt/myapp/bin/run.sh\"\n      run_user \"nobody\"\n      run_group \"nobody\"\n      action :create                  # can also :enable and :start here, use array\n    end\n    \n** Service with arguments or environment variables **\n\n    service_factory \"my_service\" do\n      service_desc \"My Service\"\n      exec \"/opt/myapp/bin/run.sh\"\n      exec_args \"--port 1234\"         # can also be an array of strings\n      env_variables({                 # variables must be in a hash\n        :SERVICE_VARIABLE => \"value\"\n      })\n      run_user \"nobody\"\n      run_group \"nobody\"\n      action :create\n    end\n    \n** Forked service **\n\nIt's really import to set the proper flag if the service forks.\n(Meaning that the script you're calling returns immediately and the service runs in the background.)\n\n    service_factory \"my_service\" do\n      service_desc \"My Service\"\n      exec \"/opt/myapp/bin/run.sh\"\n      exec_forks true\n      pid_file \"/opt/myapp/var/run/myapp.pid\"\n      run_user \"nobody\"\n      run_group \"nobody\"\n      action :create\n    end\n    \n** Notifications **\n\nThe service_factory resource can receive all standard service signals. It also creates a stock service resource you can notify as well.\n\n    some_resource \"abc\" do\n      notifies :start, \"service_factory[my_service]\"\n    end\n    \n    some_resource \"abc\" do\n      notifies :start, \"service[my_service]\"\n    end\n\n\n# Resource Documentation\n\n**RESOURCE ACTIONS**\n\n    :create , :delete , :start , :stop , :restart , :enable , :disable\n\n**Note:** You can also use a standard Chef service resource to manage the service once created.\n\n**RESOURCE ATTRIBUTES**\n\n    --------------------------------------------------------------------------------------\n    :attribute       = default\n        description (type)\n    --------------------------------------------------------------------------------------\n\n    :service_name\n        Simple name of service. Defaults to resource name. (/^[a-z0-9_]+$/i)\n\n    :service_desc\n        Short description of service. (Required)\n\n    :run_user\n        Name or id of user to run service under. (Required)\n\n    :run_group\n        Name or id of group to run service under. (Required)\n\n    :exec\n        Full path to executable binary. (Required)\n\n    :exec_args      = \"\"\n        Command line args to executable. (String or Array)\n\n    :exec_umask     = \"0027\"\n        umask set before execution\n\n    :exec_forks     = false\n        Does executable fork at startup? (Important)\n\n    :process_name   = basename %{exec}\n        Used to detect status and stop service.\n\n    :kill_timeout   = 5\n        Number of seconds to wait before killing at stop/shutdown.\n\n    :before_start   = \"\"\n        Shell commands to run before starting service.\n\n    :after_start    = \"\"\n        Shell commands to run after starting service.\n\n    :before_stop    = \"\"\n        Shell commands to run before stopping service.\n\n    :after_stop     = \"\"\n        Shell commands to run after stopping service.\n\n    :base_path      = \"\"\n        Prefix to FHS paths.\n        Ex. \"/srv/myapp\" => \"/srv/myapp/etc/\"\n\n    :var_subpath    = ( %{run_user} == 'root'  ?  %{run_group}  :  %{service_name} )\n        Suffix added to var directories.\n        Ex. \"myapp\" => \"/var/run/myapp/appname.pid\"\n\n    :lock_file      = %{base_path}/var/lock/subsys/%{service_name}\n        Full path to lock file.\n\n    :log_file       = %{base_path}/var/log/%{var_subpath}/%{service_name}.log\n        Full path to log file.\n\n    :log_what       = :none\n        What service output should be logged. (:std_out  :std_err  :std_all  :none)\n\n    :pid_file {base_path}/var/run/{var_subpath}/{service_name}.pid\n        Full path to pid file.\n\n    :create_pid     = %{exec_forks}  ?  false  :  true\n        If true the factory creates a pid file, otherwise the daemon should create it.\n\n    :env_variables  = Hash.new\n        Shell environment variables to be exported into service\n\n    :path_variables = Hash.new\n        Additional variables injectable into path strings.\n\n\n# Recipes\n\nThis cookbook only provides LWRPs, no recipes are included.\n\n\n# Attributes\n\nThe following default node attributes govern the platform selection.\nYou may customize the operation by appending/overwriting these in your node configuration.\n\n- `default[\"service_factory\"][\"platform_map\"][\"default\"] = \"init\"`\n- `default[\"service_factory\"][\"platform_map\"][\"ubuntu\"][\"default\"] = \"upstart\"`\n\n\n# Test-Kitchen\n\nThis package is **test-kitchen** enabled and automatically tested against:\n\n- CentOS 5 and 6\n- Ubuntu 10 and 12\n\nA successful test appears as follows:\n\n    -----> Running bats test suite\n           1..6\n           ok 1 non-forked service\n           ok 2 forked service\n           ok 3 sighup restart (non-forked)\n           ok 4 sighup restart (forked)\n           ok 5 nobody service\n           ok 6 deleted service\n           Finished verifying <default-ubuntu-1004> (1m18.10s).\n\nTested system service provided by [Unix Mock Service Daemon](https://github.com/org-binbab/unix_service_mock_daemon)\n\n\n# Development and Maintenance\n\n* Found a bug?\n* Need some help?\n* Have a suggestion?\n* Want to contribute?\n\nPlease visit: [code.binbab.org](http://code.binbab.org)\n\n\n# Authors and License\n\n  * Author:: BinaryBabel OSS (<projects@binarybabel.org>)\n  * Copyright:: 2013 `sha1(OWNER) = df334a7237f10846a0ca302bd323e35ee1463931`\n  * License:: Apache License, Version 2.0\n\n----\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 5.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 10.04",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/unix_bin",
      "revision": ">= 0.2.7",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/resource_masher",
      "revision": ">= 0.10.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/run_action_now",
      "revision": ">= 0.1.0",
      "self_resolve": true
    }
  ]
}