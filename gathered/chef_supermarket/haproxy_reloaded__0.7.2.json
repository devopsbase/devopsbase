{
  "name": "haproxy_reloaded Chef cookbook",
  "chef_cookbook_name": "haproxy_reloaded",
  "revision": "0.7.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/haproxy_reloaded",
    "https://supermarket.chef.io/cookbooks/haproxy_reloaded/download",
    "https://supermarket.chef.io/cookbooks/haproxy_reloaded/versions/0.7.2",
    "https://supermarket.chef.io/cookbooks/haproxy_reloaded/versions/0.7.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy_reloaded/versions/0.7.2",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy_reloaded",
    "https://supermarket.chef.io/api/v1/cookbooks/haproxy_reloaded/versions/0.7.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Middleware/Proxy/HAProxy"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/haproxy_reloaded",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/haproxy_reloaded/versions/0.7.2/download",
  "deprecated": false,
  "created": "2015-02-12T21:01:58.482Z",
  "updated": "2015-02-12T21:06:27.087Z",
  "description": "Installs and configures haproxy",
  "maintainer": {
    "name": "demonccc",
    "email": "demonccc@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 778508,
  "downloads_count_revision": 389180,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "haproxy_reloaded Cookbook\n===========================\n\nDescription\n-----------\n\nThis cookbook installs, configures and manages Haproxy.\n\nRequirements\n------------\n\n#### Chef\nTested on 11.12.8 but newer and older version should work just fine.\n\n#### Platform\nThe following platforms have been tested with this cookbook, meaning that the recipes run on these platforms without error:\n- `Ubuntu`\n- `Debian`\n\n#### Cookbooks\n\nThere are **no** external cookbook dependencies.\n\nCapabilities\n------------\n\nAttributes\n----------\n\n#### haproxy_reloaded::default\n<table>\n  <tr>\n    <th>Key</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['daemon']['enable']</tt></td>\n    <td>Boolean</td>\n    <td>Enable or disable Haproxy</td>\n    <td><tt>true</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['daemon']['extra_options']</tt></td>\n    <td>String</td>\n    <td>Daemon extra options. If you don't need extra options, set it to boolean false</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['global']</tt></td>\n    <td>Hash</td>\n    <td>Haproxy global parameters</td>\n    <td><tt>{ 'log' => { /dev/log' => [ 'local0' ] }, 'maxconn' => 4096, 'daemon' => true, 'debug' => false, 'quiet' => false, 'user' => 'haproxy', 'group' => 'haproxy' }</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['defaults']</tt></td>\n    <td>Hash</td>\n    <td>Haproxy defaults parameters</td>\n    <td><tt>{ 'log' => 'global', 'mode' => 'http', 'option' => [ 'httplog', 'dontlognull', 'redispatch' ], 'retries' =>  3, 'maxconn' => 2000, 'timeout' => { 'connect' => 50000, 'client' => 50000, 'server' => 50000 } }</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['frontend']</tt></td>\n    <td>Hash</td>\n    <td>Haproxy frontends</td>\n    <td><tt>{}</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['backend']</tt></td>\n    <td>Hash</td>\n    <td>Haproxy backends</td>\n    <td><tt>{}</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['haproxy']['listen']</tt></td>\n    <td>Hash</td>\n    <td>Haproxy listens</td>\n    <td><tt>{}</tt></td>\n  </tr>\n</table>\n\nFor more details, see the `attributes/default.rb` file.\n\nRecipes\n-------\n\n### haproxy_reloaded::default\nThis recipe installs and configures Haproxy in the node.\n\nResources and Providers\n-----------------------\n\nThere are **none** defined.\n\nLibraries\n---------\n\n### haproxy_reloaded::generate_content\nThis library contains the functions that parse the node attributes and generate the haproxy configuration file.\n\nUsage\n-----\n\nJust include `haproxy_reloaded` in your node's `run_list`:\n\n```json\n{\n  \"name\":\"my_node\",\n  \"run_list\": [\n    \"recipe[haproxy_reloaded]\"\n  ]\n}\n```\n\nThis cookbook does not have a template file to create the haproxy.cfg file, this file is generated dinamically by parsing the ```['haproxy']``` attribute.\n\nThe global, defaults, listens, frontends and backends sections follow the same rules in order to generate the Haproxy configuration file. The idea is generate the config file by setting the attributes in the nodes, roles or environments by avoiding the use of templates.\n\nThe attributes ```['haproxy']['listen']```, ```['haproxy']['frontend']``` and ```['haproxy']['backend']``` are hashes of hashes, each key is the name of every section (listen, frontend, backend), and the hash value contains all the settings of this section.\n\nYou can disable listen, frontend or backend sections configured in other roles by setting them to false, for example: ```['haproxy']['backend']['riak'] = false```\n\nThe special attribute ```[member_options]``` is an hash that set rules to search the servers and the configurations to be applied them by setting the following attributes:\n\n- ```[member_options]['search']```: You need to define the Chef search string in order to obtain the nodes IP that will be used in the Haproxy server parameters\n- ```[member_options]['port']```:  You should set the port where is running the nodes service that will be managed by Haproxy\n- ```[member_options]['options']```: This attribute should contain all the options that you need to set to the servers\n\nThese are the rules to generate the config file regarding to the values of each attribute if the type of them are:\n- Boolean: The parser adds only the name of the attribute (the hash key). For example, if\n\n```ruby\n['haproxy']['global']['quiet'] = true\n```\nthe parser generates:\n```\nglobal\n\tquiet\n```\n\n- String/Numeric: The parser adds the name of the attribute (the hash key) and the value. For example, if\n\n```ruby\n['haproxy']['global']['maxconn'] = 4096\n```\nthe parser generates:\n```\nglobal\n        maxconn 4096\n```\n\n- Array: The parser adds the name of the attribute (the hash key) before of each parsed item of the array. For example, if\n\n```ruby\n['haproxy']['defaults']['option'] = [ 'dontlognull', 'http-server-close', 'contstats', 'httplog' ]\n```\nthe parser generates:\n```\ndefaults\n\toption dontlognull\n\toption http-server-close\n\toption contstats\n\toption httplog\n```\n\n- Hash: The parser adds the name of the attribute (the hash key) before of each parsed pair of keys and values of the hash. For example, if \n\n```ruby\n['haproxy']['defaults']['timeout'] = { \n  'connect' => '5s', \n  'client' => '30s', \n  'client-fin' => '30s', \n  'server' => '30s', \n  'tunnel' => '1h', \n  'http-keep-alive' => '1s', \n  'http-request' => '15s', \n  'queue' => '30s', \n  'tarpit' => '60s' \n}\n``` \nthe parser generates:\n```\ndefaults\n        timeout connect 5s\n        timeout client 30s\n        timeout client-fin 30s\n        timeout server 30s\n        timeout tunnel 1h\n        timeout http-keep-alive 1s\n        timeout http-request 15s\n\ttimeout queue 30s\n\ttimeout tarpit 60s\n```\n\n**NOTE**: Each value is parsed recursively so you can combine arrays, hashes, strings, booleans, etc. For example, if\n\n```ruby\n['haproxy']['frontend']['http-www']['http-request'] = { \n  'set-header' => { \n    'X-LXLX' => [ 'lala if acl-lala', 'lolo if acl-lolo', 'lele if acl-lele' ],\n    'X-PERSISTENT' => 'Joya',\n    'X-Haproxy-Current-Date %T' => true\n  },\n  'add-header' => [ 'X-ADDED dePrepo' ],\n  'redirect' => 'code 301 location https://example.com.ar%[capture.req.uri] unless valid_domain',\n  'allow' => {\n    'if' => {\n      'nagios' => false,\n      'sensu' => true\n    }\n  }\n}\n```\nthe parser generates:\n```\nfrontend http-www\n\thttp-request set-header X-LXLX lala if acl-lala\n\thttp-request set-header X-LXLX lolo if acl-lolo\n\thttp-request set-header X-LXLX lele if acl-lele\n        http-request set-header X-PERSISTENT Joya\n        http-request set-header X-Haproxy-Current-Date %T\n        http-request add-header X-ADDED dePrepo\n        http-request redirect code 301 location https://example.com.ar%[capture.req.uri] unless valid_domain\n        http-request allow if sensu\n```\n\nAlso, the parser can read the values of the node attributes set in a role and the values of the attributes of the nodes obtained by using the Chef search query set in the ```[member_options]['search']``` attribute: \n\n- For example, if an value of an attribute is set in a role and a subattribute of the ```['haproxy']``` attribute is a string that contains `#{node['some']['node']['attribute']}` the parser will replace it with the value of this node attribute:\n\n```json\n\"apache\": {\n  \"listen_ports\": 80\n},\n\"haproxy\": {\n  \"frontend\": {\n    \"http-www\": {\n      \"bind\": \"#{node['ipaddress']}:#{node['apache']['listen_ports']}\"\n    }\n  }\n}\n```\nthe parser will generate:\n```\nfrontend http-www\n\tbind 1.1.1.1:80\n```\n\n- If you need to set some server option by uisng some attribute of the nodes obtained in the Chef search query, you can use the following string `#{server['some']['node']['attribute']}`: \n\n```json\n\"haproxy\": {\n  \"backend\": {\n    \"webstomp\": {\n      \"servers\": {\n        \"search\": \"role:webstomp\",\n        \"port\": \"15674\",\n        \"options\": \"inter 3s rise 2 fall 3 weight 10 cookie #{server['fqdn']} check\"\n      }\n    }\n  }\n}\n```\nthe parser will generate:\n```\nbackend webstomp\n\tserver  webstomp00 1.1.1.2:15674 inter 3s rise 2 fall 3 weight 10 cookie webstomp00.example.com check\n        server  webstomp01 1.1.1.3:15674 inter 3s rise 2 fall 3 weight 10 cookie webstomp01.example.com check\n``` \n\nPutting all toghether, the following settings:\n\n```json\n\"haproxy\": {\n  \"daemon\": {\n    \"enable\": true,\n    \"extra_options\": false\n  },\n  \"global\": {\n    \"log\": {\n      \"/dev/log\": [ \"local0\", \"local1 notice\" ]\n    },\n    \"maxconn\": 4096,\n    \"debug\": false,\n    \"quiet\": false,\n    \"user\": \"haproxy\",\n    \"group\": \"haproxy\",\n    \"stats\": {\n      \"socket\": \"/var/run/haproxy/admin.sock mode 660 level admin\",\n      \"timeout\": \"30s\"\n    },\n    \"daemon\": true,\n    \"ca-base\": \"/etc/ssl/certs\",\n    \"crt-base\": \"/etc/ssl/private\",\n    \"ssl-default-bind-ciphers\": \"kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL\"\n  },\n  \"defaults\": {\n    \"log\": \"global\",\n    \"mode\": \"http\",\n    \"option\": [ \"httplog\", \"dontlognull\", \"redispatch\", \"dontlog-normal\", \"http-server-close\", \"contstats\" ],\n    \"retries\": 3,\n    \"maxconn\": \"32768\",\n    \"timeout\": {\n      \"connect\": \"5s\",\n      \"client\": \"60s\",\n      \"client-fin\": \"60s\",\n      \"server\": \"60s\",\n      \"tunnel\": \"1h\",\n      \"http-keep-alive\": \"1s\",\n      \"http-request\": \"30s\",\n      \"queue\": \"30s\",\n      \"tarpit\": \"60s\"\n    },\n    \"backlog\": \"10000\",\n    \"errorfile\": {\n      \"400\": \"/etc/haproxy/errors/landing-page/index.http\",\n      \"403\": \"/etc/haproxy/errors/landing-page/index.http\",\n      \"408\": \"/dev/null\",\n      \"500\": \"/etc/haproxy/errors/landing-page/index.http\",\n      \"502\": \"/etc/haproxy/errors/landing-page/index.http\",\n      \"503\": \"/etc/haproxy/errors/landing-page/index.http\",\n      \"504\": \"/etc/haproxy/errors/landing-page/index.http\"\n    }\n  },\n  \"frontend\": {\n    \"riak_frontend\": {\n      \"bind\": \"1.1.1.1:8087\",\n      \"mode\": \"tcp\",\n      \"option\": [ \"tcplog\", \"tcpka\" ],\n      \"default_backend\": \"riak_backend\"\n    },\n    \"rabbitmq\": {\n      \"bind\": \"1.1.1.2:5672\",\n      \"mode\": \"tcp\",\n      \"option\": [ \"tcplog\", \"clitcpka\" ],\n      \"default_backend\": \"rabbitmq_backend\"\n    },\n    \"http-www\": {\n      \"bind\": \"2.2.2.2:80\",\n      \"redirect\": \"scheme https code 301 if !{ ssl_fc }\"\n    },\n    \"https-www\": {\n      \"bind\": \"2.2.2.2:443 ssl crt /etc/haproxy/ssl/snakeoil.pem no-sslv3\",\n      \"acl\": [ \"ajax req.hdr(X-Requested-With) -i XMLHttpRequest\", \"webstomp base_sub -i /webstomp/\" ],\n      \"reqadd\": \"X-Forwarded-Proto:\\\\ https\",\n      \"default_backend\": \"www_backend\",\n      \"option\": [ \"forwardfor\" ],\n      \"use_backend\": [ \"webstomp_backend if webstomp\" ]\n        \n    }\n  },\n  \"backend\": {\n    \"www_backend\": {\n      \"balance\": \"roundrobin\",\n      \"option\": [ \"httpclose\" ],\n      \"servers\": {\n        \"search\": \"role:www\",\n        \"port\": \"#{server['apache']['listen_ports']}\",\n        \"options\": \"check port #{server['apache']['listen_ports']}\"\n      }\n    },\n    \"webstomp_backend\": {\n      \"balance\": \"roundrobin\",\n      \"servers\": {\n        \"search\": \"role:webstomp\",\n        \"port\": \"15674\",\n        \"options\": \"inter 3s rise 2 fall 3 weight 10 cookie #{server['hostname']} check\"\n      }\n    },\n    \"riak_backend\": {\n      \"balance\": \"leastconn\",\n      \"mode\": \"tcp\",\n      \"option\": [ \"tcplog\", \"tcpka\", \"srvtcpka\" ],\n      \"servers\": {\n        \"search\": \"role:riak\",\n        \"port\": \"8087\",\n        \"options\": \"weight 1 maxconn 1024 check\"\n      }\n    },\n    \"rabbitmq_backend\": {\n      \"balance\": \"roundrobin\",\n      \"mode\": \"tcp\",\n      \"option\": [ \"srvtcpka\", \"tcplog\" ],\n      \"timeout\": [ \"server 3h\" ],\n      \"servers\": {\n        \"search\": \"role:rabbitmq\",\n        \"port\": \"5672\",\n        \"options\": \"check inter 5s rise 2 fall 3\"\n      }\n    }\n  },\n  \"listen\": {\n    \"some_listen_set_in_other_role\": false,\n    \"stats\": {\n      \"bind\": \"#{node['ipaddress']}:9090\",\n      \"stats\": {\n        \"uri\": \"/stats\",\n        \"realm\": \"HAProxy\\\\ Statistics\",\n        \"auth\": \"admin:admin\",\n        \"admin\": \"if TRUE\"\n      }\n    },\n    \"health\": {\n      \"bind\": \"127.0.0.1:6000\",\n      \"mode\": \"health\",\n      \"option\": [ \"tcplog\" ]\n    }\n  }\n}\n```\nwill generate the following configuration file:\n```\nglobal\n        ca-base /etc/ssl/certs\n        crt-base /etc/ssl/private\n        daemon\n        user haproxy\n        group haproxy\n        log /dev/log local0\n        log /dev/log local1 notice\n        maxconn 4096\n        ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL\n        stats socket /var/run/haproxy/admin.sock mode 660 level admin\n        stats timeout 30s\n\ndefaults\n        backlog 10000\n        errorfile 400 /etc/haproxy/errors/landing-page/index.http\n        errorfile 403 /etc/haproxy/errors/landing-page/index.http\n        errorfile 408 /dev/null\n        errorfile 500 /etc/haproxy/errors/landing-page/index.http\n        errorfile 502 /etc/haproxy/errors/landing-page/index.http\n        errorfile 503 /etc/haproxy/errors/landing-page/index.http\n        errorfile 504 /etc/haproxy/errors/landing-page/index.http\n        log global\n        maxconn 32768\n        mode http\n        option httplog\n        option dontlognull\n        option redispatch\n        option dontlog-normal\n        option http-server-close\n        option contstats\n        retries 3\n        timeout client 60s\n        timeout client-fin 60s\n        timeout connect 5s\n        timeout http-keep-alive 1s\n        timeout http-request 30s\n        timeout queue 30s\n        timeout server 60s\n        timeout tarpit 60s\n        timeout tunnel 1h\n\nfrontend riak\n        bind 1.1.1.1:8087\n        default_backend riak_backend\n        mode tcp\n        option tcplog\n        option tcpka\n\nfrontend rabbitmq\n        bind 1.1.1.2:5672\n        default_backend rabbitmq_backend\n        mode tcp\n        option tcplog\n        option clitcpka\n\nfrontend www\n        bind 2.2.2.2:80\n        redirect scheme https code 301 if !{ ssl_fc }\n\nfrontend https_www\n        acl ajax req.hdr(X-Requested-With) -i XMLHttpRequest\n        acl stomp base_sub -i /stomp/\n        bind 2.2.2.2:443 ssl crt /etc/haproxy/ssl/snakeoil.pem no-sslv3\n        default_backend www_backend\n        option forwardfor\n        reqadd X-Forwarded-Proto:\\ https\n        use_backend webstomp_backend if webstomp\n\nbackend www_backend\n        balance roundrobin\n        option httpclose\n        server  www00 1.1.1.10:80 check port 80\n        server  www01 1.1.1.11:80 check port 80\n\nbackend webstomp_backend\n        balance roundrobin\n        reqadd X-Forwarded-Proto:\\ https\n        server  webstomp00 1.1.1.20:15674 inter 3s rise 2 fall 3 weight 10 cookie webstomp00 check\n        server  webstomp01 1.1.1.21:15674 inter 3s rise 2 fall 3 weight 10 cookie webstomp01 check\n\nbackend riak_backend\n        balance leastconn\n        mode tcp\n        option tcplog\n        option tcpka\n        option srvtcpka\n        server  riak00 1.1.1.70:8087 weight 1 maxconn 1024 check\n        server  riak01 1.1.1.71:8087 weight 1 maxconn 1024 check\n        server  riak02 1.1.1.72:8087 weight 1 maxconn 1024 check\n        server  riak03 1.1.1.73:8087 weight 1 maxconn 1024 check\n        server  riak04 1.1.1.74:8087 weight 1 maxconn 1024 check\n\nbackend rabbitmq_backend\n        balance roundrobin\n        mode tcp\n        option srvtcpka\n        option tcplog\n        timeout server 3h\n        server  rabbitmq00 1.1.1.50:5672 check inter 5s rise 2 fall 3\n        server  rabbitmq01 1.1.1.51:5672 check inter 5s rise 2 fall 3\n\nlisten stats\n        balance\n        bind 1.1.1.10:9090\n        stats admin if TRUE\n        stats auth admin:admin\n        stats realm HAProxy\\ Statistics\n        stats uri /stats\n\nlisten health\n        bind 127.0.0.1:6000\n        mode health\n        option tcplog\n```\n\nDevelopment\n-----------\n\n- Source hosted at [GitHub][repo]\n- Report issues/Questions/Feature requests on [GitHub Issues][issues]\n\nContributing\n------------\n\n1. Fork the repository on [Github][repo]\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\n\nAuthor:: Claudio Cesar Sanchez Tejeda <demonccc@gmail.com>\n\nCopyright:: 2014, Claudio Cesar Sanchez Tejeda\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[repo]: https://github.com/demonccc/chef-haproxy_reloaded\n[issues]: https://github.com/demonccc/chef-haproxy_reloaded/issues\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "haproxy_reloaded": "Installs and configures haproxy by searching for nodes of a particular role"
  }
}