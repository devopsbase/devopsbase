{
  "name": "docker Chef cookbook",
  "chef_cookbook_name": "docker",
  "revision": "2.0.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/docker",
    "https://supermarket.chef.io/cookbooks/docker/download",
    "https://supermarket.chef.io/cookbooks/docker/versions/2.0.1",
    "https://supermarket.chef.io/cookbooks/docker/versions/2.0.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/2.0.1",
    "https://supermarket.chef.io/api/v1/cookbooks/docker",
    "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/2.0.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Image/Container Image/Docker Image",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Deployment/Docker"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/docker",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/docker/versions/2.0.1/download",
  "deprecated": false,
  "created": "2013-05-11T04:44:23.000Z",
  "updated": "2016-10-14T14:55:11.291Z",
  "description": "Provides docker_service, docker_image, and docker_container resources",
  "maintainer": {
    "name": "chef",
    "email": "bflad417@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 178,
  "downloads_count": 70082664,
  "downloads_count_revision": 297,
  "repository_url": "https://github.com/chef-cookbooks/chef-docker",
  "issues_url": "https://github.com/chef-cookbooks/chef-docker/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/chef-docker",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Docker Cookbook\n===============\n[![Build Status](https://secure.travis-ci.org/bflad/chef-docker.png?branch=master)](http://travis-ci.org/bflad/chef-docker)\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/bflad/chef-docker?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThe Docker Cookbook is a library cookbook that provides resources\n(LWRPs) for use in recipes.\n\nScope\n-----\nThis cookbook is concerned with the [Docker](http://docker.io)\ncontainer engine as distributed by Docker, Inc. It does not address\nDocker ecosystem tooling or prerequisite technology such as cgroups or\naufs.\n\nRequirements\n------------\n- Chef 12.0.0 or higher. Chef 11 is NOT SUPPORTED, please do not open issues about it.\n- Ruby 2.1 or higher (preferably, the Chef full-stack installer)\n- Network accessible web server hosting the docker binary.\n- SELinux permissive/disabled if CentOS [Docker Issue #15498](https://github.com/docker/docker/issues/15498)\n\n\nPlatform Support\n----------------\nThe following platforms have been tested with Test Kitchen: You may be\nable to get it working on other platforms, with appropriate\nconfiguration of cgroups and storage back ends.\n\n```\n|--------------+-------+-------+-------|\n|              | 1.6.2 | 1.7.1 | 1.8.2 |\n|--------------+-------+-------+-------|\n| debian-8     | X     | X     | X     |\n|--------------+-------+-------+-------|\n| centos-7     | X     | X     | X     |\n|--------------+-------+-------+-------|\n| fedora-21    | X     | X     | X     |\n|--------------+-------+-------+-------|\n| ubuntu-12.04 | X     | X     | X     |\n|--------------+-------+-------+-------|\n| ubuntu-14.04 | X     | X     | X     |\n|--------------+-------+-------+-------|\n| ubuntu-15.04 | X     | X     | X     |\n|--------------+-------+-------+-------|\n```\n\nCookbook Dependencies\n---------------------\n- [compat_resource](https://supermarket.chef.io/cookbooks/compat_resource)\n\nUsage\n-----\n- Add ```depends 'docker', '~> 1.0'``` to your cookbook's metadata.rb\n- Use resources shipped in cookbook in a recipe, the same way you'd\n  use core Chef resources (file, template, directory, package, etc).\n\n```ruby\ndocker_service 'default' do\n  action [:create, :start]\nend\n\ndocker_image 'busybox' do\n  action :pull\nend\n\ndocker_container 'an echo server' do\n  repo 'busybox'\n  port '1234:1234'\n  command \"nc -ll -p 1234 -e /bin/cat\"\nend\n```\n\nTest Cookbooks as Examples\n--------------------------\nThe cookbooks ran under test-kitchen make excellent usage examples.\n\nThe test recipes are found at:\n```ruby\ntest/cookbooks/docker_test/\ntest/cookbooks/docker_service_test/\n```\n\nCgroups, Execution and Storage drivers\n--------------------------------------\nBeginning in chef-docker 1.0, support for LXC execution driver has\nbeen removed in favor of native. Cgroups and storage drivers are now\nloosely coupled dependencies and should be configured using other\ncookbooks if needed.\n\nStorage drivers can be selected with the `storage_driver` property on\nthe `docker_service` resource like this:\n\n```ruby\ndocker_service 'default' do\n   storage_driver 'overlay'\nend\n```\n\nConfiguration of the backing storage driver, including kernel module\nloading, is out of scope for this cookbook.\n\nResources Overview\n------------------\n* `docker_service`: docker daemon installation and configuration\n* `docker_image`: image/repository operations\n* `docker_tag`: image tagging operations\n* `docker_container`: container operations\n* `docker_registry`: registry operations\n\n## Getting Started\nHere's a quick example of pulling the latest image and running a\ncontainer with exposed ports.\n\n```ruby\n# Pull latest image\ndocker_image 'nginx' do\n  tag 'latest'\n  action :pull\nend\n\n# Run container exposing ports\ndocker_container 'my_nginx' do\n  repo 'nginx'\n  tag 'latest'\n  port '80:80'\n  host_name 'www'\n  domain_name 'computers.biz'\n  env 'FOO=bar'\n  binds [ '/some/local/files/:/etc/nginx/conf.d' ]\n  subscribes :redeploy, 'docker_image[nginx]'\nend\n```\n\nYou might run a private registry\n\n```ruby\n# Login to private registry\ndocker_registry 'https://registry.computers.biz/' do\n  username 'shipper'\n  password 'iloveshipping'\n  email 'shipper@computers.biz'\nend\n\n# Pull tagged image\ndocker_image 'registry.computers.biz:443/my_project/my_container' do\n  tag 'latest'\n  action :pull\nend\n\n# Run container\ndocker_container 'crowsnest' do\n  repo 'registry.computers.biz:443/my_project/my_container'\n  tag 'latest'\n  action :run\nend\n```\n\nSee full documentation for each resource and action below for more\ninformation.\n\nResources Details\n------------------\nThe ```docker_service```, ```docker_image```, ```docker_container```,\nand ```docker_registry``` resources are documented in full below.\n\n## docker_service\nThe `docker_service` manages a Docker daemon.\n\nThe `:create` action manages software installation.\nThe `:start` action manages the running docker service on the machine.\n\nThe service management strategy for the host platform is dynamically\nchosen based on platform, but can be overridden. See the \"providers\"\nsection below for more information.\n\n#### Example\n```ruby\ndocker_service_systemd 'tls_test:2376' do\n  host [\"tcp://#{node['ipaddress']}:2376\", 'unix:///var/run/docker.sock']\n  tls_verify true\n  tls_ca_cert '/path/to/ca.pem'\n  tls_server_cert '/path/to/server.pem'\n  tls_server_key '/path/to/server-key.pem'\n  tls_client_cert '/path/to/client.pem'\n  tls_client_key '/path/to/client-key.pem'\n  action [:create, :start]\nend\n```\n\nWARNING - As of the 1.0 version of this cookbook, `docker_service`\nis a singleton resource. This means that if you create multiple\n`docker_service` resources on the same machine, you will only\ncreate one actual service and things may not work as expected.\n\n#### Properties\nThe `docker_service` resource property list mostly corresponds to\nthe options found in the\n[Docker Command Line Reference](https://docs.docker.com/reference/commandline/cli/)\n\n- `source` - URL to the pre-compiled Docker binary used for\n  installation. Defaults to a calculated URL based on kernel version,\n  Docker version, and platform arch. By default, this will try to get\n  to \"http://get.docker.io/builds/\".\n- `version` - Docker version to install\n- `checksum` - sha256 checksum of Docker binary\n- `instance` - Identity for ```docker_service``` resource. Defaults to\n  name. Mostly unimportant for the 1.0 version because of its\n  singleton status. | String | nil\n- `api_cors_header` - Set CORS headers in the remote API\n- `bridge` - Attach containers to a network bridge\n- `bip` - Specify network bridge IP\n- `debug` - Enable debug mode\n- `daemon` - Enable daemon mode\n- `dns` - DNS server(s) to use\n- `dns_search` - DNS search domains to use\n- `exec_driver` - Exec driver to use\n- `fixed_cidr` - IPv4 subnet for fixed IPs\n- `fixed_cidr_v6` - IPv6 subnet for fixed IPs\n- `group` - Posix group for the unix socket\n- `graph` - Root of the Docker runtime - Effectively, the \"data directory\"\n- `host` - Daemon socket(s) to connect to - `tcp://host:port`,\n  `unix:///path/to/socket`, `fd://*` or `fd://socketfd`\n- `icc` - Enable inter-container communication\n- `ip` - Default IP when binding container ports\n- `ip_forward` - Enable ip forwarding\n- `ipv4_forward` - Enable net.ipv4.ip_forward\n- `ipv6_forward` - Enable net.ipv6.ip_forward\n- `ip_masq` - Enable IP masquerading\n- `iptables` - Enable addition of iptables rules\n- `ipv6` - Enable IPv6 networking\n- `log_level` - Set the logging level\n- `label` - Set key=value labels to the daemon\n- `log_driver` - Container's logging driver (json-file/syslog/journald/gelf/fluentd/none)\n- `log_opts` - Container's logging driver options (driver-specific)\n- `mtu` - Set the containers network MTU\n- `pidfile` - Path to use for daemon PID file\n- `registry_mirror` - Preferred Docker registry mirror\n- `storage_driver` - Storage driver to use\n- `selinux_enabled` - Enable selinux support\n- `storage_opts` - Set storage driver options\n- `tls` - Use TLS; implied by --tlsverify\n- `tls_verify` - Use TLS and verify the remote\n- `tls_ca_cert` - Trust certs signed only by this CA\n- `tls_server_cert` - Path to TLS certificate file for docker service\n- `tls_server_key` - Path to TLS key file for docker service\n- `tls_client_cert` - Path to TLS certificate file for docker cli\n- `tls_client_key` - Path to TLS key file for docker cli\n- `default_ulimit` - Set default ulimit settings for containers\n- `http_proxy` - ENV variable set before for Docker daemon starts\n- `https_proxy` - ENV variable set before for Docker daemon starts\n- `no_proxy` - ENV variable set before for Docker daemon starts\n- `tmpdir` - ENV variable set before for Docker daemon starts\n- `logfile` - Location of Docker daemon log file\n- `userland_proxy`- Enables or disables docker-proxy\n\n#### Actions\n- `:create` - Lays the Docker bits out on disk\n- `:delete` - Removes the Docker bits from the disk\n- `:start` - Makes sure the service provider is set up properly and start it\n- `:stop` - Stops the service\n- `:restart` - Restarts the service\n\n#### `docker_service` implementations\n- `docker_service_execute` - The simplest docker_service. Just starts a process.\n  Fire and forget.\n\n- `docker_service_sysvinit` - Uses a SystemV init script to manage the service state.\n\n- `docker_service_upstart` - Uses an Upstart script to manage the service state.\n\n- `docker_service_systemd` - Uses an Systemd unit file to manage the service\n  state. NOTE: This does NOT enable systemd socket activation.\n\n## docker_image\nThe `docker_image` is responsible for managing Docker image pulls,\nbuilds, and deletions. It speaks directly to the\n[Docker remote API](https://docs.docker.com/reference/api/docker_remote_api_v1.20/).\n\n#### Examples\n\ndefault action, default properties\n```ruby\ndocker_image 'hello-world'\n```\n\nnon-default name attribute\n```ruby\ndocker_image \"Tom's container\" do\n  repo 'tduffield/testcontainerd'\n  action :pull\nend\n```\n\npull every time\n```ruby\ndocker_image 'busybox' do\n  action :pull\nend\n```\n\nspecify a tag\n```ruby\ndocker_image 'alpine' do\n  tag '3.1'\nend\n```\n\nspecify read/write timeouts\n```ruby\ndocker_image 'alpine' do\n  read_timeout 60\n  write_timeout 60\nend\n```\n\n```ruby\ndocker_image 'vbatts/slackware' do\n  action :remove\nend\n```\n\nsave\n```ruby\ndocker_image 'save hello-world' do\n  repo 'hello-world'\n  destination '/tmp/hello-world.tar'\n  not_if { ::File.exist? '/tmp/hello-world.tar' }\n  action :save\nend\n```\n\nbuild from a Dockerfile on every chef-client run\n```ruby\ndocker_image 'image_1' do\n  tag 'v0.1.0'\n  source '/src/myproject/container1/Dockerfile'\n  action :build\nend\n```\n\nbuild from a directory, only if image is missing\n```ruby\ndocker_image 'image_2' do\n  tag 'v0.1.0'\n  source '/src/myproject/container2'\n  action :build_if_missing\nend\n```\n\nbuild from a tarball\nNOTE: this is not an \"export\" tarball generated from an an image save.\nThe contents should be a Dockerfile, and anything it references to\nCOPY or ADD\n\n```ruby\ndocker_image 'image_3' do\n  tag 'v0.1.0'\n  source '/tmp/image_3.tar'\n  action :build\nend\n```\n\n```ruby\ndocker_image 'hello-again' do\n  tag 'v0.1.0'\n  source '/tmp/hello-world.tar'\n  action :import\nend\n```\n\npush\n```ruby\ndocker_image 'my.computers.biz:5043/someara/hello-again' do\n  action :push\nend\n```\n\nConnect to an external docker daemon and pull an image\n\n```ruby\ndocker_image 'alpine' do\n  host 'tcp://127.0.0.1:2376'\n  tag '2.7'\nend\n```\n\n#### Properties\nThe `docker_image` resource properties mostly corresponds to the\n[Docker Remote API](https://docs.docker.com/reference/api/docker_remote_api_v1.20/#2-2-images)\nas driven by the\n[Swipley docker-api Ruby gem](https://github.com/swipely/docker-api)\n\nA `docker_image`'s full identifier is a string in the form\n\"\\<repo\\>:\\<tag\\>\". There is some nuance around the naming when the public\nregistry vs a private one.\n\n- `repo` - aka `image_name` - The first half of a Docker image's\n  identity. This is a string in the form:\n  `registry:port/owner/image_name`. If the `registry:port` portion is\n  left off, Docker will implicitly use the Docker public registry.\n  \"Official Images\" omit the owner part. This means a repo id can look\n  as short as `busybox`, `alpine`, or `centos`, to refer to official\n  images on the public registry, and as long as\n  `my.computers.biz:5043:/what/ever` to refer to custom images on an\n  private registry. Often you'll see something like `someara/chef` to\n  refer to private images on the public registry. - Defaults to\n  resource name.\n- `tag` - The second half of a Docker image's identity. - Defaults to `latest`\n- `source` - Path to input for the `:import`, `:build` and `:build_if_missing`\n  actions. For building, this can be a Dockerfile, a tarball\n  containing a Dockerfile in its root, or a directory containing a\n  Dockerfile. For import, this should be a tarball containing Docker\n  formatted image, as generated with `:save`.\n- `destination` - Path for output from the `:save` action.\n- `force` - A force boolean used in various actions - Defaults to false\n- `nocache` - Used in `:build` operations. - Defaults to false\n- `noprune` - Used in `:remove` operations - Defaults to false\n- `rm` - Remove intermediate containers after a successful build\n  (default behavior) - Defaults to `true`\n- `read_timeout` - May need to increase for long image builds/pulls\n- `write_timeout` - May need to increase for long image builds/pulls\n- `host` - A string containing the host the API should communicate with.\n  Defaults to local `docker_service`.\n\n#### Actions\nThe following actions are available for a `docker_image` resource.\nDefaults to `pull_if_missing`\n\n- `:pull` - Pulls an image from the registry\n- `:pull_if_missing` - Pulls an image from the registry, only if it missing\n- `:build` - Builds an image from a Dockerfile, directory, or tarball\n- `:build_if_missing` - Same build, but only if it is missing\n- `:save` - Exports an image to a tarball at `destination`\n- `:import` - Imports an image from a tarball at `destination`\n- `:remove` - Removes (untags) an image\n- `:push` - Pushes an image to the registry\n\n## docker_tag\nDocker tags work very much like hard links in a Unix filesystem. They\nare just references to an existing image. Therefore, the docker_tag\nresource has taken inspiration from the Chef `link` resource.\n\n#### Examples\n```ruby\ndocker_tag 'private repo tag for hello-again:1.0.1' do\n  target_repo 'hello-again'\n  target_tag 'v0.1.0'\n  to_repo 'localhost:5043/someara/hello-again'\n  to_tag 'latest'\n  action :tag\nend\n```\n\n#### Properties\n- `target_repo` - The repo half of the source image identifier.\n- `target_tag` - The tag half of the source image identifier.\n- `to_repo` - The repo half of the new image identifier\n- `to_tag`- The tag half of the new image identifier\n\n#### Actions\n- `:tag` - Tags the image\n\n## docker_container\nThe `docker_container` is responsible for managing Docker container\nactions. It speaks directly to the [Docker remote API](https://docs.docker.com/reference/api/docker_remote_api_v1.20/).\n\nContainers are process oriented, and move through an event cycle.\nThanks to [Glider Labs](http://gliderlabs.com/) for this excellent diagram.\n![alt tag](http://gliderlabs.com/images/docker_events.png)\n\n#### Examples\n\nCreate a container without starting it.\n\n```ruby\ndocker_container 'hello-world' do\n  command '/hello'\n  action :create\nend\n```\n\nThis command will exit succesfully. This will happen on every\nchef-client run.\n\n```ruby\ndocker_container 'busybox_ls' do\n  repo 'busybox'\n  command 'ls -la /'\n  action :run\nend\n```\n\nThe :run_if_missing action will only run once. It is the default action.\n\n```ruby\ndocker_container 'alpine_ls' do\n  repo 'alpine'\n  tag '3.1'\n  command 'ls -la /'\n  action :run_if_missing\nend\n```\n\nSet environment variables in a container\n\n```ruby\ndocker_container 'env' do\n  repo 'debian'\n  env ['PATH=/usr/bin', 'FOO=bar']\n  command 'env'\n  action :run_if_missing\nend\n```\n\nThis process remains running between chef-client runs, :run will do nothing on subsequent converges.\n\n```ruby\ndocker_container 'an_echo_server' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ll -p 7 -e /bin/cat'\n  port '7:7'\n  action :run\nend\n```\n\nLet docker pick the host port\n\n```ruby\ndocker_container 'another_echo_server' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ll -p 7 -e /bin/cat'\n  port '7'\n  action :run\nend\n```\n\nSpecify the udp protocol\n\n```ruby\ndocker_container 'an_udp_echo_server' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ul -p 7 -e /bin/cat'\n  port '5007:7/udp'\n  action :run\nend\n```\n\nKill a container\n\n```ruby\ndocker_container 'bill' do\n  action :kill\nend\n```\n\nStop a container\n\n```ruby\ndocker_container 'hammer_time' do\n  action :stop\nend\n```\n\nPause a container\n\n```ruby\ndocker_container 'red_light' do\n  action :pause\nend\n```\n\nUnpause a container\n\n```ruby\ndocker_container 'green_light' do\n  action :unpause\nend\n```\n\nRestart a container\n\n```ruby\ndocker_container 'restarter' do\n  action :restart\nend\n```\n\nDelete a container\n\n```ruby\ndocker_container 'deleteme' do\n  remove_volumes true\n  action :delete\nend\n```\n\nRedeploy a container\n\n```ruby\ndocker_container 'redeployer' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ll -p 7777 -e /bin/cat'\n  port '7'\n  action :run\nend\n\nexecute 'redeploy redeployer' do\n  notifies :redeploy, 'docker_container[redeployer]', :immediately\n  action :run\nend\n```\n\nBind mount local directories\n\n```ruby\ndocker_container 'bind_mounter' do\n  repo 'busybox'\n  command 'ls -la /bits /more-bits'\n  binds ['/hostbits:/bits', '/more-hostbits:/more-bits']\n  action :run_if_missing\nend\n```\n\nMount volumes from another container\n\n```ruby\ndocker_container 'chef_container' do\n  command 'true'\n  volumes '/opt/chef'\n  action :create\nend\n\ndocker_container 'ohai_debian' do\n  command '/opt/chef/embedded/bin/ohai platform'\n  repo 'debian'\n  volumes_from 'chef_container'\nend\n```\n\nSet a container's entrypoint\n\n```ruby\ndocker_container 'ohai_again_debian' do\n  repo 'debian'\n  volumes_from 'chef_container'\n  entrypoint '/opt/chef/embedded/bin/ohai'\n  command 'platform'\n  action :run_if_missing\nend\n```\n\nAutomatically remove a container after it exits\n\n```ruby\ndocker_container 'sean_was_here' do\n  command \"touch /opt/chef/sean_was_here-#{Time.new.strftime('%Y%m%d%H%M')}\"\n  repo 'debian'\n  volumes_from 'chef_container'\n  autoremove true\n  action :run\nend\n```\n\nGrant NET_ADMIN rights to a container\n\n```ruby\ndocker_container 'cap_add_net_admin' do\n  repo 'debian'\n  command 'bash -c \"ip addr add 10.9.8.7/24 brd + dev eth0 label eth0:0 ; ip addr list\"'\n  cap_add 'NET_ADMIN'\n  action :run_if_missing\nend\n```\n\nRevoke MKNOD rights to a container\n```ruby\ndocker_container 'cap_drop_mknod' do\n  repo 'debian'\n  command 'bash -c \"mknod -m 444 /dev/urandom2 c 1 9 ; ls -la /dev/urandom2\"'\n  cap_drop 'MKNOD'\n  action :run_if_missing\nend\n```\n\nSet a container's hostname and domainname\n\n```ruby\ndocker_container 'fqdn' do\n  repo 'debian'\n  command 'hostname -f'\n  host_name 'computers'\n  domain_name 'biz'\n  action :run_if_missing\nend\n```\n\nSet a container's DNS resolution\n\n```ruby\ndocker_container 'dns' do\n  repo 'debian'\n  command 'cat /etc/resolv.conf'\n  host_name 'computers'\n  dns ['4.3.2.1', '1.2.3.4']\n  dns_search ['computers.biz', 'chef.io']\n  action :run_if_missing\nend\n```\n\nAdd extra hosts to a container's `/etc/hosts`\n\n```ruby\ndocker_container 'extra_hosts' do\n  repo 'debian'\n  command 'cat /etc/hosts'\n  extra_hosts ['east:4.3.2.1', 'west:1.2.3.4']\n  action :run_if_missing\nend\n```\n\nManage container's restart_policy\n\n```ruby\ndocker_container 'try_try_again' do\n  repo 'alpine'\n  tag '3.1'\n  command 'grep asdasdasd /etc/passwd'\n  restart_policy 'on-failure'\n  restart_maximum_retry_count 2\n  action :run_if_missing\nend\n\ndocker_container 'reboot_survivor' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ll -p 123 -e /bin/cat'\n  port '123'\n  restart_policy 'always'\n  action :run_if_missing\nend\n```\n\nManage container links\n\n```ruby\ndocker_container 'link_source' do\n  repo 'alpine'\n  tag '3.1'\n  env ['FOO=bar', 'BIZ=baz']\n  command 'nc -ll -p 321 -e /bin/cat'\n  port '321'\n  action :run_if_missing\nend\n\ndocker_container 'link_target_1' do\n  repo 'alpine'\n  tag '3.1'\n  env ['ASD=asd']\n  command 'ping -c 1 hello'\n  links ['link_source:hello']\n  action :run_if_missing\nend\n\ndocker_container 'link_target_2' do\n  repo 'alpine'\n  tag '3.1'\n  command 'env'\n  links ['link_source:hello']\n  action :run_if_missing\nend\n\nexecute 'redeploy_link_source' do\n  command 'touch /marker_container_redeploy_link_source'\n  creates '/marker_container_redeploy_link_source'\n  notifies :redeploy, 'docker_container[link_source]', :immediately\n  notifies :redeploy, 'docker_container[link_target_1]', :immediately\n  notifies :redeploy, 'docker_container[link_target_2]', :immediately\n  action :run\nend\n```\n\nMutate a container between chef-client runs\n\n```ruby\ndocker_tag 'mutator_from_busybox' do\n  target_repo 'busybox'\n  target_tag 'latest'\n  to_repo 'someara/mutator'\n  target_tag 'latest'\nend\n\ndocker_container 'mutator' do\n  repo 'someara/mutator'\n  tag 'latest'\n  command \"sh -c 'touch /mutator-`date +\\\"%Y-%m-%d_%H-%M-%S\\\"`'\"\n  outfile '/mutator.tar'\n  force true\n  action :run_if_missing\nend\n\nexecute 'commit mutator' do\n  command 'true'\n  notifies :commit, 'docker_container[mutator]', :immediately\n  notifies :export, 'docker_container[mutator]', :immediately\n  notifies :redeploy, 'docker_container[mutator]', :immediately\n  action :run\nend\n```\n\nSpecify read/write timeouts\n\n```ruby\ndocker_container 'api_timeouts' do\n  repo 'alpine'\n  read_timeout 60\n  write_timeout 60\nend\n```\n\nSpecify a custom logging driver and its options\n\n```ruby\ndocker_container 'syslogger' do\n  repo 'alpine'\n  tag '3.1'\n  command 'nc -ll -p 780 -e /bin/cat'\n  log_driver 'syslog'\n  log_opts 'syslog-tag=container-syslogger'\nend\n```\n\nConnect to an external docker daemon and create a container\n\n```ruby\ndocker_container 'external_daemon' do\n  repo 'alpine'\n  host 'tcp://1.2.3.4:2376'\n  action :create\nend\n```\n\n#### Properties\n\nMost `docker_container` properties are the `snake_case` version of the\n`CamelCase` keys found in the\n[Docker Remote Api](https://docs.docker.com/reference/api/docker_remote_api_v1.20/)\n\n- `container_name` - The name of the container. Defaults to the name\n  of the `docker_container` resource.\n- `repo` - aka `image_name`. The first half of a the complete\n  identifier for a Docker Image.\n- `tag` - The second half of a Docker image's identity. - Defaults to\n  `latest`.\n- `command` - The command to run when starting the container.\n- `autoremove` - Boolean - Automatically delete a container when it's\n  command exits. Defaults to `false`.\n- `binds` - An array of `:` separated paths to bind mount from the\n  host into the container in the form\n  `['/host-bits:/container-bits', '/more-host-bits:/more-container-bits']`.\n  Defaults to `nil`.\n- `cap_add` - An array Linux Capabilities (`man 7 capabilities`) to\n  add to grant the container beyond what it normally gets.\n- `cap_drop` - An array Linux Capabilities (`man 7 capabilities`) to\n  revoke that the container normally has.\n- `cpu_shares` - An integer value containing the CPU Shares for the\n  container.\n- `devices` - A Hash of devices to add to the container.\n- `dns` - An array of DNS servers the container will use for name\n  resolution.\n- `dns_search` - An array of domains the container will search for\n  name resolution.\n- `domain_name` - Set's the container's dnsdomainname as returned by\n  the `dnsdomainname` command.\n- `entry_point` - Set the entry point for the container as a string or\n  an array of strings.\n- `env` - Set environment variables in the container in the form\n  `['FOO=bar', 'BIZ=baz']`\n- `extra_hosts` - An array of hosts to add to the container's\n  `/etc/hosts` in the form `['host_a:10.9.8.7', 'host_b:10.9.8.6']`\n- `force` - A boolean to use in container operations that support a\n  `force` option. Defaults to `false`\n- `host` - A string containing the host the API should communicate with.\n  Defaults to local `docker_service`.\n- `host_name` - The hostname for the container.\n- `links` - An array of source container/alias pairs to link the\n  container to in the form `[container_a:www', container_b:db']`\n- `log_driver` - Sets a custom logging driver for the container\n  (json-file/syslog/journald/gelf/fluentd/none).\n- `log_opts` - Configures the above logging driver options (driver-specific).\n- `mac_address` - The mac address for the container to use.\n- `memory` - Memory limit in bytes.\n- `memory_swap` - Total memory limit (memory + swap); set `-1` to\n  disable swap. You must use this with memory and make the swap value\n  larger than memory.\n- `network_disabled` - Boolean to disable networking. Defaults to `false`.\n- `network_mode` - Sets the networking mode for the container.\n- `open_stdin` - Boolean value, opens stdin. Defaults to `false`.\n- `outfile` - The path to write the file when using `:export` action.\n- `port` - The port configuration to use in the container. Matches the\n  syntax used by the `docker` CLI tool.\n- `privileged` - Boolean to start the container in privileged more.\n  Defaults to `false`\n- `publish_all_ports` - Allocates a random host port for all of a\n  container’s exposed ports.\n- `remove_volumes` - A boolean to clean up \"dangling\" volumes when\n  removing the last container with a reference to it. Default to\n  `false` to match the Docker CLI behavior.\n- `restart_policy` - One of `no`, `on-failure`, or `always`. Use\n  `always` if you want a service container to survive a Dockerhost\n  reboot. Defaults to `no`.\n- `restart_maximum_retry_count` - Maximum number of restarts to try\n  when `restart_policy` is `on-failure`. Defaults to an ever\n  increasing delay (double the previous delay, starting at 100mS), to\n  prevent flooding the server.\n- `security_opts` - A list of string values to customize labels for\n  MLS systems, such as SELinux.\n- `signal` - The signal to send when using the `:kill` action.\n  Defaults to `SIGKILL`.\n- `tty` - Boolean value to allocate a pseudo-TTY. Defaults to `false`.\n- `user` - A string value specifying the user inside the container.\n- `volumes` - An Array of paths inside the container to expose. Does\n  the same thing as the `VOLUME` directive in a Dockerfile, but works\n  on container creation.\n- `volumes_from` - A list of volumes to inherit from another\n  container. Specified in the form `<container name>[:<ro|rw>]`\n- `working_dir` - A string specifying the working directory for\n  commands to run in.\n- `read_timeout` - May need to increase for commits or exports that are slow\n- `write_timeout` - May need to increase for commits or exports that are slow\n\n#### Actions\n\n- `:create` - Creates the container but does not start it. Useful for\n  Volume containers.\n- `:start` - Starts the container. Useful for containers that run\n  jobs.. command that exit.\n- `:run` - Both `:create` and `:start` the container in one action.\n- `:run_if_missing` - The default action. Runs a container only once.\n- `:stop` - Stops the container.\n- `:restart` - Stops the starts the container.\n- `:kill` - Send a signal to the container process. Defaults to `SIGKILL`.\n- `:pause` - Pauses the container.\n- `:unpause` - Unpauses the container.\n- `:delete` - Deletes the container.\n- `:redeploy` - Deletes and runs the container.\n\n## docker_registry\n\nThe `docker_registry` resource is responsible for managing the\nconnection auth information to a Docker registry.\n\n#### docker_registry action :login\n\nLog into or register with public registry:\n\n```ruby\ndocker_registry 'https://index.docker.io/v1/' do\n  username 'publicme'\n  password 'hope_this_is_in_encrypted_databag'\n  email 'publicme@computers.biz'\nend\n```\n\nLog into private registry with optional port:\n\n```ruby\ndocker_registry 'my local registry' do\n   serveraddress 'https://registry.computers.biz:8443/'\n   username 'privateme'\n   password 'still_hope_this_is_in_encrypted_databag'\n   email privateme@computers.biz'\nend\n```\n\n## Testing and Development\n\n* Full development and testing workflow with Test Kitchen and friends: [TESTING.md](TESTING.md)\n\n## Contributing\n\nPlease see contributing information in: [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Maintainers\n\n* Tom Duffield (http://tomduffield.com)\n* Brian Flad (<bflad417@gmail.com>)\n* Fletcher Nichol (<fnichol@nichol.ca>)\n* Sean OMeara (<sean@chef.io>)\n\n## License\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/compat_resource",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}