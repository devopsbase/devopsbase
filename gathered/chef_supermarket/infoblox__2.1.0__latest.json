{
  "name": "infoblox Chef cookbook",
  "chef_cookbook_name": "infoblox",
  "revision": "2.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/infoblox",
    "https://supermarket.chef.io/cookbooks/infoblox/download",
    "https://supermarket.chef.io/cookbooks/infoblox/versions/2.1.0",
    "https://supermarket.chef.io/cookbooks/infoblox/versions/2.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/infoblox/versions/2.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/infoblox",
    "https://supermarket.chef.io/api/v1/cookbooks/infoblox/versions/2.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Executable/Script/Chef Cookbook",
    "Type/Middleware/Runtime/Ruby",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Network/DNS"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/infoblox",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/infoblox/versions/2.1.0/download",
  "deprecated": false,
  "created": "2015-08-10T14:30:14.168Z",
  "updated": "2016-04-05T18:15:46.512Z",
  "description": "Provision and deprovisiong VMware vCenter VMs, and maintain DNS, via Infoblox.",
  "maintainer": {
    "name": "partnereng",
    "email": "partnereng@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 6736,
  "downloads_count_revision": 1349,
  "repository_url": "https://github.com/chef-partners/infoblox-cookbook",
  "issues_url": "https://github.com/chef-partners/infoblox-cookbook/issues",
  "chef_source_url": "https://github.com/chef-partners/infoblox-cookbook",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Infoblox Cookbook\n=========\n\nThe Infoblox cookbook wraps the public APIs available in the \"infoblox\" gem and is capable of performing functions related to provisioning and de-provisioning vCenter server VMs. It also allows DHCP and DNS configuration to be provided from a centrally managed Infoblox appliance. The motive behind the cookbook was the integration of the DDI (DNS, DHCP and IPAM) with the virtual/Cloud provisioning. Currently it is integrated with vSphere. In future it will be available for EC2, openstack and more.\n\nPrerequisites\n-------------\nConfigure your Chef workstation setup. The cookbook is tested against Chef version 12.1.1 and above. The OS can be Windows or any Linux machine as the workstation. The focookbook can be run against any of the 3 types of chef-servers.\n\n1. Hosted chef\n2. Private chef-server\n3. Chef-zero, without having an actual chef server configured.\n\nIn all of the above cases, it will run the workflows and create records and VMs.\n\nAs an environment presetup, You need to have the following configured before using this cookbook.\n\n1. A single vCenter server host.\n2. A single vNIOS VM acting as a grid master.\n3. A chef workstation setup in a VM in the network.\n4. DNS and DHCP configured/objects created in the grid master.\n\nNote: While running the chef-client, Please make sure that you have set the environment variable \"WAPI_VERSION\".\n\nEX: export WAPI_VERSION=1.4.2\n\nConfiguration\n-------------\nIn order to communicate with the vCenter API you will have to provide your credentials in the infoblox cokkbooks attributes files.\n\nEx: In infoblox/attributes/default.rb\n\n\t\tdefault['vcenter']['vcenter_host'] = ''\n\t\tdefault['vcenter']['username'] = ''\n\t\tdefault['vcenter']['password'] = ''\n\nIn order to communicate with the grid master you will have to provide your vNIOS credentials.\n\n\t\tdefault['infoblox']['nios_appliance'] = '' # ip address of the vNIOS appliance\n\t\tdefault['infoblox']['username'] = ''       # username of the vNIOS appliance\n\t\tdefault['infoblox']['password'] = ''       # password of the vNIOS appliance\n\nVM Specific Configurations\n--------------------------\nProvide the below details related to the VM that will be provisioned.\n\nEx: In infoblox/attributes/vm.rb\n\n\t\tdefault['vcenter']['template_name'] = 'redhat'  #Name of the template/image using which the VM will be cloned\n\t\tdefault['vcenter']['datacenter'] = 'IB'\t        #Name of the datacenter\n\t\tdefault['vcenter']['datastore'] = 'datastore1'  #Name of the datastore\n\t\tdefault['vcenter']['domain'] = 'demo.com'\t    #Name of the domain for the VM\n\t\tdefault['vcenter']['network_name'] = [\"VM Network\"]      #Provide in array as shown\n\t\tdefault['vcenter']['gateway'] = ['172.26.1.1']\t         #Provide in array as shown\n\t\tdefault['vcenter']['subnet_mask'] = '255.255.255.0'\n\t\tdefault['vcenter']['dns_server_list'] = ['172.26.1.2']   #Provide in array as shown\n\t\tdefault['vcenter']['network_adapter'] = 'Network adapter 1'\n\t\tdefault['vcenter']['resource_pool'] = '172.26.1.4'\n\n\t\t# provisioned VM details\n\t\tdefault['vcenter']['vm']['username'] = 'root'     #Login username for the VM\n\t\tdefault['vcenter']['vm']['password'] = 'xyz'\t  #Login password for the VM\n\t\tdefault['vcenter']['vm']['num_cpus'] = 2\n\t\tdefault['vcenter']['vm']['memory_mb'] = 1024\n\n\t\t# override this attributes for next available ip in range and network.\n\t\tdefault['vcenter']['vm']['ipaddress'] = nil\n\n\nRecipe: reserve_static_ip\n==============================\nThe following attributes are required while running reserve_static_ip recipe. So provide the values in the file infoblox/attributes/reserve_static_ip.rb\n\n\t\tdefault['reserve_static_ip']['vm_name'] = 'staticVM-3'  # required for reserve and remove workflows\n\t\tdefault['reserve_static_ip']['ipv4addr'] = '172.26.1.52'\n\t\tdefault['reserve_static_ip']['record_type'] = ['host']  # or %w(A PTR host fixedaddress)\n\n\tOptional Attributes:\n\t    default['reserve_static_ip']['mac'] = ''\n\t    default['reserve_static_ip']['view'] = 'default'\n\t\tdefault['reserve_static_ip']['ptrdname'] = 'clogeny01.test.local''\n\t    default['reserve_static_ip']['canonical'] = 'clogeny1.qa.com'\n\t\tdefault['reserve_static_ip']['extattrs'] = { 'Site' => { 'value' => 'Test Value' } }\n\t\tdefault['reserve_static_ip']['comment'] = \"Test Record for Reserve Static IP workflow\"\n\t\tdefault['reserve_static_ip']['aliases'] = ['aliases1', 'aliases2']\n\t\tdefault['reserve_static_ip']['disable'] = false\n\nRecipe: reserve_ip_in_network\n=========================================\nThe following attributes are required while running reserve_ip_in_network recipe. So provide the values in the file infoblox/attributes/reserve_ip_in_network.rb\n\n\t\tdefault['reserve_ip_in_network']['vm_name'] = 'networkVM-3'\n\t\tdefault['reserve_ip_in_network']['network'] = '10.10.70.0/24'\n\t\tdefault['reserve_ip_in_network']['record_type'] = ['A', 'PTR', 'host', 'fixedaddress']\n\n\tOptional Attributes:\n\t\tdefault['reserve_ip_in_network']['exclude'] = ['10.10.70.1', '10.10.70.2', '10.10.70.3'] # ips to exclude\n\t\tdefault['reserve_ip_in_network']['ptrdname'] = 'clogeny01.test.local'\n\t\tdefault['reserve_ip_in_network']['aliases'] = ['aliases1', 'aliases2']\n\t\tdefault['reserve_ip_in_network']['canonical'] = 'clogeny01.test.local'\n\t\tdefault['reserve_ip_in_network']['comment'] = \"Test Record for Reserve Static IP workflow\"\n\t\tdefault['reserve_ip_in_network']['extattrs'] = { 'Site' => { 'value' => 'Test Value' } }\n\t\tdefault['reserve_ip_in_network']['mac'] = ''\n\t\tdefault['reserve_ip_in_range']['view'] = 'default'\n\t\tdefault['reserve_ip_in_range']['disable'] = false\n\n\nRecipe: reserve_ip_in_range\n=========================================\nThe following attributes are required while running reserve_ip_in_range recipe. So provide the values in the file infoblox/attributes/reserve_ip_in_range.rb\n\n\t\tdefault['reserve_ip_in_range']['vm_name'] = 'rangeVM-3'\n\t\tdefault['reserve_ip_in_range']['start_addr'] = '10.10.70.100'\n\t\tdefault['reserve_ip_in_range']['end_addr'] = '10.10.70.220'\n\t\tdefault['reserve_ip_in_range']['record_type'] = ['A', 'PTR', 'host', 'fixedaddress']\n\n\n\tOptional Attributes:\n\t\tdefault['reserve_ip_in_range']['exclude'] = ['10.10.70.100', '10.10.70.101']\n\t\tdefault['reserve_ip_in_range']['ptrdname'] = 'clogeny01.test.local'\n\t\tdefault['reserve_ip_in_range']['aliases'] = ['aliases1', 'aliases2']\n\t\tdefault['reserve_ip_in_range']['canonical'] = 'clogeny01.test.local'\n\t\tdefault['reserve_ip_in_range']['comment'] = \"Test Record for Reserve Static IP workflow\"\n\t\tdefault['reserve_ip_in_range']['extattrs'] = { 'Site' => { 'value' => 'Test Value' } }\n\t\tdefault['reserve_ip_in_range']['mac'] = ''\n\t\tdefault['reserve_ip_in_range']['view'] = 'default'\n\t\tdefault['reserve_ip_in_range']['disable'] = false\n\n\nRecipe: remove_reserved_ip\n=========================================\n--The following attributes are required while running remove_reserved_ip recipe. So provide the values in the file infoblox/attributes/remove_reserved_ip.rb\n\n\t\tdefault['remove_reserved_ip']['vm_name'] = 'clogeny01'\n\t\tdefault['remove_reserved_ip']['ipv4addr'] = '172.26.1.62'\n\t\tdefault['remove_reserved_ip']['record_type'] = ['host'] # %w(A PTR host fixedaddress)\n\n\tOptional Attributes:\n\t\tdefault['remove_reserved_ip']['ptrdname'] = 'clogeny01.test.local'\n\t\tdefault['remove_reserved_ip']['canonical'] = 'clogeny1.test.local'\n\n\nCreating A specific Record without provisioning VM\n--------------------------------------------------\n\nHere we show only for PTR record. Other records can be created just by setting their attribute values and running their recipes.\n\nThe following attributes are required while Creating a PTR record. So provide the values in the file infoblox/attributes/ptr_record.rb\n\n\t- If the IP Address belongs to a reverse-mapped authoratative zone\n\t\tdefault['ptr_record']['ipv4addr'] = '' # IPv4 address eg. 10.10.70.100\n\t\tdefault['ptr_record']['ptrdname'] = '' # domain name of DNS PTR record in FQDN format. eg. clogeny.test.local\n\n\t- If the IP doesn't belong to a reverse-mapped authoratative zone\n\t\tdefault['ptr_record']['name'] = '' # name of record in FQDN format eg. infoblox01.test.local\n\t\tdefault['ptr_record']['ptrdname'] = '' # domain name of DNS PTR record in FQDN format. eg. clogeny.test.local\n\n\tOptional Attributes:\n\t  default['ptr_record']['view'] = 'default' # name of DNS view in which record resides.\n    default['ptr_record']['extattrs'] = {}\n\nSupport\n=======\n\nThis cookbook is a joint effort between Chef and Infoblox.\n\nChef customers experiencing a technical issue with this cookbook should open a support ticket for assistance.  All other users should feel free to log a GitHub issue in this repository.\n\nFor non-technical inquiries regarding this cookbook, please log a GitHub issue, or send an email to one of the following addresses:\n\n * Chef: partnereng@chef.io\n * Infoblox: chef-support@infoblox.com\n\n\nLicense\n=======\n\nCopyright:: Copyright (c) 2015 Chef Software, Inc.\n\nLicense:: Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the License at\n\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\nUnless required by applicable law or agreed to in writing, software distributed under the\nLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\neither express or implied. See the License for the specific language governing permissions\nand limitations under the License.\n\n\nContributing\n============\n\n1. Fork it ( https://github.com/chef-partners/infoblox-cookbook/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n"
}