{
  "name": "lxc Chef cookbook",
  "chef_cookbook_name": "lxc",
  "revision": "0.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/lxc",
    "https://supermarket.chef.io/cookbooks/lxc/download",
    "https://supermarket.chef.io/cookbooks/lxc/versions/0.1.0",
    "https://supermarket.chef.io/cookbooks/lxc/versions/0.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/lxc/versions/0.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/lxc",
    "https://supermarket.chef.io/api/v1/cookbooks/lxc/versions/0.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System/Linux"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/lxc",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/lxc/versions/0.1.0/download",
  "deprecated": false,
  "created": "2012-09-04T19:58:58.000Z",
  "updated": "2014-10-03T23:08:22.615Z",
  "description": "Chef driven Linux Containers",
  "maintainer": {
    "name": "chrisroberts",
    "email": "chrisroberts.code@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 20,
  "downloads_count": 15461372,
  "downloads_count_revision": 1258865,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "## LXC\n\nManage linux containers with Chef.\n\n### Recipes\n\n#### default\n\nInstalls the packages and configuration files needed for lxc on the server. If\nthe node uses apt-cacher-ng as a client, the server will be reused when building\ncontainers.\n\n#### install_dependencies\n\nInstalls the packages needed to support lxc's containers.\n\n#### containers\n\nThis recipe creates all of the containers defined in the `['lxc']['containers']`\nhash. Here is an example of an `example` container:\n\n```ruby\nnode['lxc']['containers']['example'] = { \n  'template' => 'ubuntu',\n  'trim' => , false,\n  'debug' => , true \n}\n```\n\nYou may set `trim` and `debug` to `true` if you need them (default is `false`).\n\nBacking store file system and template options are not yet supported.\n\n#### knife\n\nInstall and manage containers via the knife-remotelxc plugin.\n\n### Example\n\n```ruby\ninclude_recipe 'lxc'\n\nlxc_container 'my_container' do\n  action :create\n  validation_client 'my-validator'\n  server_uri 'https://api.opscode.com/organizations/myorg'\n  validator_pem content_from_encrypted_dbag\n  run_list ['role[base]']\n  chef_enabled true\nend\n\nlxc_container 'my_container_clone' do\n  action :clone\n  base_container 'my_container'\n  chef_enabled true\nend\n\nlxc_service 'my_container_clone' do\n  action :start\nend\n```\n\nContainers do not have to be Chef enabled but it does make them\nextremely easy to configure. If you want the Omnibus installer\ncached, you can set the attribute\n\n```ruby\nnode['omnibus_updater']['cache_omnibus_installer'] = true\n```\n\nin a role or environment (default is false). The `lxc_container`\nresource also provides `initialize_commands` which an array of\ncommands can be provided that will be run after the container is\ncreated.\n\n### Repository:\n\n* https://github.com/hw-cookbooks/lxc\n\n### Contributors\n\n* Sean Porter (https://github.com/portertech)\n* Matt Ray (https://github.com/mattray)\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": "12.04",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/omnibus_updater",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "recommends": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/bridger",
      "revision": ">= 0.0.0"
    }
  ]
}