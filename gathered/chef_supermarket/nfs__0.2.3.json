{
  "name": "nfs Chef cookbook",
  "chef_cookbook_name": "nfs",
  "revision": "0.2.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/nfs",
    "https://supermarket.chef.io/cookbooks/nfs/download",
    "https://supermarket.chef.io/cookbooks/nfs/versions/0.2.3",
    "https://supermarket.chef.io/cookbooks/nfs/versions/0.2.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/nfs/versions/0.2.3",
    "https://supermarket.chef.io/api/v1/cookbooks/nfs",
    "https://supermarket.chef.io/api/v1/cookbooks/nfs/versions/0.2.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/nfs",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/nfs/versions/0.2.3/download",
  "deprecated": false,
  "created": "2011-07-09T00:40:18.000Z",
  "updated": "2016-10-07T14:40:10.628Z",
  "description": "Installs and configures NFS, and NFS exports",
  "maintainer": {
    "name": "atomic-penguin",
    "email": "wolfe21@marshall.edu"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 38,
  "downloads_count": 23637069,
  "downloads_count_revision": 1257830,
  "repository_url": "https://github.com/atomic-penguin/cookbook-nfs",
  "issues_url": "https://github.com/atomic-penguin/cookbook-nfs/issues",
  "chef_source_url": "https://github.com/atomic-penguin/cookbook-nfs",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# NFS [![Build Status](https://secure.travis-ci.org/atomic-penguin/cookbook-nfs.png?branch=master)](http://travis-ci.org/atomic-penguin/cookbook-nfs)\n\n## Description\n\nInstalls and configures NFS client, or server components \n\n## Requirements\n\nShould work on any Red Hat-family or Debian-family Linux distribution.\n\n## Attributes\n\n* nfs['packages']\n  - Makes a best effort to choose NFS client packages dependent on platform\n  - NFS server package needs to be hardcoded for Debian/Ubuntu in the server\n    recipe, or overridden in a role.\n\n* nfs['service']\n  - portmap - the portmap or rpcbind service depending on platform\n  - lock - the statd or nfslock service depending on platform\n  - server - the server component, nfs or nfs-kernel-server depending on platform\n\n* nfs['config']\n  - client\\_templates - templates to iterate through on client systems, chosen by platform\n  - server\\_template - server specific template, chosen by platform\n\n* nfs['port']\n  - ['statd'] = Listen port for statd, default 32765\n  - ['statd\\_out'] = Outgoing port for statd, default 32766\n  - ['mountd'] = Listen port for mountd, default 32767\n  - ['lockd'] = Listen port for lockd, default 32768\n\n* nfs['exports']\n  - An array of strings to populate in an export file. Can be manipulated in\n    recipes with the nfs_export LWRP.\n\n## Usage\n\nTo install the NFS components for a client system, simply add nfs to the run\\_list.\n\n    name \"base\"\n    description \"Role applied to all systems\"\n    run_list => [ \"nfs\" ]\n\nThen in an nfs\\_server.rb role that is applied to NFS servers:\n\n    name \"nfs_server\"\n    description \"Role applied to the system that should be an NFS server.\"\n    override_attributes(\n      \"nfs\" => {\n        \"packages\" => [ \"portmap\", \"nfs-common\", \"nfs-kernel-server\" ],\n        \"ports\" => {\n          \"statd\" => 32765,\n          \"statd_out\" => 32766,\n          \"mountd\" => 32767,\n          \"lockd\" => 32768\n        },\n        \"exports\" => [\n          \"/exports 10.0.0.0/8(ro,sync,no_root_squash)\"\n        ]\n      }\n    )\n    run_list => [ \"nfs::server\" ]\n\n### nfs\\_export LWRP Usage\n\nApplications or other cookbooks can use the nfs\\_export LWRP to add exports:\n\n    nfs_export \"/exports\" do\n      network '10.0.0.0/8'\n      writeable false \n      sync true\n      options ['no_root_squash']\n    end\n\nThe default parameters for the nfs\\_export LWRP are as follows\n\n* directory \n  - directory you wish to export\n  - defaults to resource name\n\n* network\n  - a CIDR, IP address, or wildcard (\\*)\n  - requires an option\n\n* writeable\n  - ro/rw export option\n  - defaults to false\n\n* sync\n  - synchronous/asynchronous export option\n  - defaults to true\n\n* options\n  - additional export options as an array, excluding the parameterized sync/async and ro/rw options\n  - defaults to root\\_squash\n\n## nfs::undo recipe\n\nDoes your freshly kickstarted/preseeded system come with NFS, when you didn't ask for NFS?  This recipe inspired by the annoyances cookbook, will run once to remove NFS from the system.  Use a knife command to remove NFS components from your system like so.\n\n    knife run_list add <node name> nfs::undo\n\n## License and Author\n\nAuthor: Eric G. Wolfe (<wolfe21@marshall.edu>)\nContributors: Riot Games\n\nCopyright 2011-2012, Eric G. Wolfe\nCopyright 2012, Riot Games\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "nfs": "Installs and configures nfs client components",
    "nfs::server": "Installs and configures nfs server components",
    "nfs::exports": "Templates the exports file from attribute or LWRP",
    "nfs::undo": "Undo both default and server recipes"
  }
}