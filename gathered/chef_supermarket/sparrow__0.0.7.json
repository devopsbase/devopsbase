{
  "name": "sparrow Chef cookbook",
  "chef_cookbook_name": "sparrow",
  "revision": "0.0.7",
  "uris": [
    "https://supermarket.chef.io/cookbooks/sparrow",
    "https://supermarket.chef.io/cookbooks/sparrow/download",
    "https://supermarket.chef.io/cookbooks/sparrow/versions/0.0.7",
    "https://supermarket.chef.io/cookbooks/sparrow/versions/0.0.7/download",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.0.7",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.0.7/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/sparrow",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.0.7/download",
  "deprecated": false,
  "created": "2016-01-14T12:32:42.321Z",
  "updated": "2016-06-07T13:50:49.224Z",
  "description": "Installs/Configures Sparrow tool chain and Sparrow plugins",
  "maintainer": {
    "name": "melezhik",
    "email": "melezhik@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 2330,
  "downloads_count_revision": 216,
  "repository_url": "https://github.com/melezhik/sparrow-cookbook",
  "issues_url": "https://github.com/melezhik/sparrow-cookbook/issues",
  "chef_source_url": "https://github.com/melezhik/sparrow-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# NAME\n\nSparrow\n\n[![Build Status](https://travis-ci.org/melezhik/sparrow.svg)](https://travis-ci.org/melezhik/sparrow)\n \n# SYNOPSIS\n\nSparrow - outthentic tests manager.  Manages outthentic family test suites.\n\n# CAVEAT\n\nThe project is still in very alpha stage. Things might change. But you can start play with it :-)\n\n# Outthentic family frameworks\n\nOutthentic tests are those using [Outthentic DSL](https://github.com/melezhik/outthentic-dsl).\n\nCurrently there are two members of outthentic family test frameworks:\n\n* [swat](https://github.com/melezhik/swat) - web application testing framework\n\nSo, _swat test suites_ are those running under swat framework\n\n* [outthentic](https://github.com/melezhik/outthentic) - generic purposes testing framework\n\nSo, _generic test suites_ are those running under outthentic framework\n\nIn the documentation below term \\`outthentic tests' relates both to swat and generic tests.\n\n# Sparrow summary\n\n* console client to setup and run outthentic test suites\n\n* installs and runs sparrow plugins - shareable outthentic test suites\n\n* ability to run tests remotely over rest API (TODO)\n\n# DEPENDENCIES\n\ngit, curl, bash\n\n# INSTALL\n\n    sudo yum install git\n    sudo yum install curl\n\n    cpanm Sparrow\n\n# USAGE\n\nThese are actions provided by sparrow console client:\n\n## create a project\n\n*sparrow project create $project\\_name*\n\nCreate a sparrow project.\n\nSparrow project is a container for outthentic test suites and tested web services or applications.\n\nSparrow project is entry point where one run outthentic tests against different web services or applications.\n\nExample command:\n\n    sparrow project create foo\n\nTo get project info say this:\n\n*sparrow project show $project\\_name*\n\nFor example:\n\n    sparrow project show foo\n\nTo see projects list say this:\n\n*sparrow project list*\n\nTo remove project data say this:\n\n*sparrow project remove $project\\_name*\n\nFor example:\n\n    sparrow project foo remove\n\n## search sparrow plugins\n\nSparrow plugin is a shareable outthentic test suite.\n\nOne could install sparrow plugin and then run related outthentic tests, see [check](#run-tests) action for details.\n\nTo search available plugins say this:\n\n*sparrow plg search $pattern*\n\nFor example:\n\n    sparrow plg search apache\n    sparrow plg search nginx\n    sparrow plg search ssh\n    sparrow plg search mysql\n\nPattern should be perl regexp pattern. Examples:\n\n* `.*`     # find any   plugin\n* `nginx`  # find nginx plugins\n* `mysql-` # find mysql plugins\n\n## build / reload sparrow index\n\nSparrow index is cached data used by sparrow to search plugins.\n\nIndex consists of two parts:\n\n* private plugins index , see [SPL file](#spl-file) section for details\n* public  plugins index, [PUBLIC PLUGINS](#public-plugins) section for details\n\nThere are two basic command to work with index:\n\n* *sparrow index summary*\n\nThis command will show timestamps and file locations for public and private index files\n\n*sparrow index update*\n\nThis command will fetch fresh index from SparrowHub and update local cached index.\n\nThis is very similar to what `cpan index reload` command does.\n\nYou need this to get know about any updates, changes on SparrowHub public plugins repository.\n\nSee [PUBLIC PLUGINS](#public-plugins) section for details.\n\n## download and install sparrow plugins\n\n*sparrow plg install $plugin\\_name*\n\nFor example:\n\n    sparrow plg search  nginx        # to get know available nginx* plugins\n    sparrow plg install swat-nginx   # to download and install a chosen plugin\n    sparrow plg install swat-mongodb-http --version 0.3.7 # install specific version\n\nCheck [sparrow-plugins](#sparrow-plugins) section to know more about sparrow plugins.\n\nTo see installed plugin list say this:\n\n*sparrow plg list*\n\nTo get installed plugin info say this:\n\n*sparrow plg show $plugin\\_name*\n\nTo remove installed plugin:\n\n*sparrow plg remove $plugin\\_name*\n\nFor example:\n\n    sparrow plg remove swat-kelp\n\n## create checkpoints\n\n*sparrow check add $project\\_name $checkpoint\\_name*\n\n* Checkpoints tie together tested web service or application and sparrow plugin\n\n* Checkpoints belong to projects, so to create a checkpoint you need to point a project\n\n\nCommand examples:\n\n    sparrow check foo nginx-check\n    sparrow check foo tomcat-app-check\n    sparrow check foo ssh-check\n\n## setup checkpoints\n\n*sparrow check set $project\\_name $checkpoint\\_name $plugin_name [$host]*\n\nOnce checkpoint is created you need to setup it. \n\nBy setting checkpoint you bind it to a certain plugin:\n\n* plugin\\_name\n\nIs a name of plugin to run tests.\n\n* host\n\nThis optional parameter sets base url or hostname of a web service or application being tested.\n\nCommand examples:\n\n    sparrow check set foo ssh-check swat-ssh  \n    sparrow check set foo ssh-check swat-ssh 127.0.0.1\n    sparrow check set foo mysql-check swat-mysql 127.0.0.1:3306\n\n    sparrow check set foo kelp-check swat-kelp 127.0.0.1:3000\n    sparrow check set foo nginx-check swat-nginx http://my.nginx.host\n    sparrow check set foo mongo-app-check swat-mongodb-http http://localhost:28017\n    sparrow check set foo my-app-check swat-my-app http://my.nginx.host:5555/foo/bar/baz\n\nTo get checkpoint info say this:\n\n*sparrow check show $project\\_name $checkpoint\\_name*\n\nFor example:\n\n    sparrow check show foo nginx-check\n\n## run tests\n\n*sparrow check run $project\\_name $checkpoint\\_name*\n\nOnce sparrow project is configured and has some checkpoints you may run tests:\n\nExamples:\n\n    sparrow check run foo nginx-check\n\n    sparrow check run foo tomcat-app-check\n\n    sparrow check run foo ssh-check\n\nUse option --cron to run tests in \\`cron' mode - if tests succeeds not output will be given,\nif tests fails a normal output will be yielded as if you run without this option. \n\nExample:\n\n    sparrow check run foo nginx-app-check --cron\n\n## initialize checkpoint\n\n*sparrow check ini $project\\_name $checkpoint\\_name*\n\nThis command setups ini file for test suite provided by checkpoint's plugin.\n\n    # ini file for foo-app test suite:\n    export EDITOR=nano\n    sparrow check ini foo foo-app\n\n        [main]\n        foo = 1\n        bar = 2\n \nMore information on ini files syntax could be found here:\n\n* [swat tests ini files](https://github.com/melezhik/swat#swat-ini-files)\n* [generic tests ini files](https://github.com/melezhik/outthentic#test-suite-ini-file)\n\nAlternatively you may load plguin ini file from file path\n\n*sparrow check load_ini $project\\_name $checkpoint\\_name path/to/file*\n\nFor example:\n\n    sparrow check load_ini foo foo-app /path/to/ini/file\n\n## run tests remotely\n\nNOT IMPLEMENTED YET.\n\n*GET /$project\\_name/check\\_run/$project\\_name/$checkpoint\\_name*\n\nSparrow rest API allow to run test suites remotely over http. This function is not implemented yet.\n\n    # runs sparrow rest API daemon\n    sparrowd\n\n    # runs swat tests via http call\n    curl http://127.0.0.1:5090/check_run/foo/nginx-app\n\n## remove checkpoints\n\n*sparrow check remove $project\\_name $checkpoint\\_name*\n\nExamples:\n\n    # remove checkpoint nginx-check in project foo\n    sparrow check remove foo nginx-check\n\n# SPARROW PLUGINS\n\nSparrow plugins are shareable outthentic test suites installed from remote sources.\n\nThere are two type of sparrow plugins:\n\n* public plugins are provided by [SparrowHub](https://sparrowhub.org/) community plugin repository and considered as public access\n\n* private plugins are provided by internal or external git repositories and _not necessary_ considered as public access\n\nBoth public and private plugins are installed with help of sparrow client:\n\n    sparrow plg install plugin_name\n\n## PUBLIC PLUGINS\n\nThe public plugins features:\n\n* they are kept in a central place called [SparrowHub](https://sparrowhub.org/) - community plugins repository\n\n* they are versioned so you may install various version of a one plugin\n\n \n## PRIVATE PLUGINS\n\nPrivate plugins are ones created by you and not supposed to be accessed publicly.\n\nThe private plugins features:\n\n* they are kept in arbitrary remote git repositories ( public or private ones )\n\n* they are not versioned, a simple \\`git clone/pull' command is executed to install/update a plugin\n\n* private plugins should be listed at sparrow plugin list file (SPL file)\n\n### SPL FILE\n\nSparrow plugin list is represented by text file placed at `\\~/sparrow.list'\n\nSPL file should contains lines in the following format:\n\n*$plugin\\_name $git\\_repo\\_url*\n\nWhere:\n\n* git\\_repo\\_url\n\nIs a remote git repository URL\n\n* plugin\\_name\n\nA name of your sparrow plugin, could be arbitrary name but see restriction notice concerning public plugin names.\n\nExample entries:\n\n    swat-yars   https://github.com/melezhik/swat-yars.git\n    metacpan    https://github.com/CPAN-API/metacpan-monitoring.git\n\nOnce you add a proper entries into SPL file you may list and install a private plugins:\n\n    sparrow plg show    swat-yars\n    sparrow plg install swat-yars\n\n# CREATING SPARROW PLUGINS\n\nHere is a brief description of the process:\n\n## swat test suite\n\nTo get know to create swat tests please follow swat project documentation -\n[https://github.com/melezhik/swat](https://github.com/melezhik/swat).\n\nA simplest swat test to check that web service returns \\`200 OK' when receive \\`GET /' request will be:\n\n    echo 200 OK > get.txt\n\n### create a cpanfile\n\nAs sparrow relies on [carton](https://metacpan.org/pod/Carton) to handle perl dependencies you need to create a valid\n[cpanfile](https://metacpan.org/pod/cpanfile) in the plugin root directory.\n\nThe minimal dependency you have to declare is swat perl module:\n\n    $ cat cpanfile\n\n    require 'swat';\n\n\nOf course you may also add other dependencies your plugin might need:\n\n    $ cat cpanfile\n\n    require 'HTML::Entities'\n\n### create sparrow.json file\n\nSparrow.json file describes plugin's meta information required for plugin gets uploaded to SparrowHub.\n\nIn case of private plugin you may skip this step.\n\nCreate sparrow.json file and place it in plugin root directory:\n\n    {\n        \"version\": \"0.1.1\",\n        \"name\": \"my-cool-plugin\",\n        \"engine\": \"swat\", \n        \"description\" : \"this is a great plugin!\",\n        \"url\" : \"http://....\"\n    }\n\nThis is the list of obligatory parameters you have to set:\n\n* version - perl version string.\n\nA detailed information concerning version syntax could be find here -\n[https://metacpan.org/pod/distribution/version/lib/version.pm](https://metacpan.org/pod/distribution/version/lib/version.pm)\n\n* name - plugin name.\n\nOnly symbols \\`a-zA-Z1-9_-.' are allowable in plugin name\n\nThis the list of optional parameters you may set as well:\n\n* engine \n\nDefines test framework for test suite. Default value is \\`swat'. Other possible value is 'generic', see\n[generic test suite section](#generic-test-suite)\n\n* url - an http URL for the site where one could find a detailed plugin information ( docs, source code, issues ... )\n\n* description - a short description of your plugin\n\n### generic test suite\n\nCreation of generic tests is very similar to a swat tests, but you'd better read [outthentic framework documentation](https://github.com/melezhik/outthentic) to \nunderstand the difference.\n\nOnce your test suite is ready prepare the same additional stuff as with swat test suite:\n\n* cpanfile\n* sparrow.json\n\nCpanfile should declare at least a dependency on Outthentic perl module:\n\n    $ cat cpanfile\n\n    require 'Outthentic';\n\nSparrow.json file does not differ from the one described at [swat test suite](#swat-test-suite) section, except for\n\\`engine' field value:\n\n    {\n        \"engine\": \"generic\"\n    }\n\n# PUBLISHING SPARROW PLUGINS\n\n## Private plugin\n\nAll you need is to keep a plugin source code in the remote git repository.\n\nPlugin root directory should be repository root directory.\n\nOnce a plugin is placed at git remote repository you need to add a proper entry into SPL file, see [SPL FILE](#) section how to do this.\n\n## Public plugin\n\nTo publish you plugin into SparrowHub you need:\n\n* Get registered at SparrowHub\n\nGo to [https://sparrowhub.org](https://sparrowhub.org)\n\n* Get rest api token\n\nLogin into your account. Go on \"Profile\" page, then on \"My Token\" page and then hit \"Regenerate Token\" link.\n\nOnce your get you token, setup a sparrowhub credentials on the machine where your are going upload plugin from:\n\n    cat ~/sparrowhub.json\n\n    {\n        \"user\"  : \"melezhik\",\n        \"token\" : \"ADB4F4DC-9F3B-11E5-B394-D4E152C9AB83\"\n    }\n\n\n* Upload plugin\n\n    * Check if you have sparrowhub credentials setup correctly ( previous step ) on your machine\n    * Install sparrow client on your machine\n    * Then go to directory where your plugin source code at and say \\`sparrow plg upload'. That's it\n\nFor example:\n\n    $ cd plugin_root_directory\n    $ sparrow plg upload\n\nAnother way to supply sparrow with valid SparrowHub credentials - use `sph_user` and `sph_token` environment variables.\nProbably useful in automation scripts:\n\n    $ sph_user=melezhik sph_token=ADB4F4DC-9F3B-11E5-B394-D4E152C9AB83 sparrow plg upload\n    \n\n# AUTHOR\n\n[Aleksei Melezhik](mailto:melezhik@gmail.com)\n\n# Home page\n\nhttps://github.com/melezhik/sparrow\n\n# COPYRIGHT\n\nCopyright 2015 Alexey Melezhik.\n\nThis program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.\n\n\n# THANKS\n\n* to God as - *For the LORD giveth wisdom: out of his mouth cometh knowledge and understanding. (Proverbs 2:6)*\n\n\n\n\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/perl",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}