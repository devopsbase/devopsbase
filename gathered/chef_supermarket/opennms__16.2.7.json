{
  "name": "opennms Chef cookbook",
  "chef_cookbook_name": "opennms",
  "revision": "16.2.7",
  "uris": [
    "https://supermarket.chef.io/cookbooks/opennms",
    "https://supermarket.chef.io/cookbooks/opennms/download",
    "https://supermarket.chef.io/cookbooks/opennms/versions/16.2.7",
    "https://supermarket.chef.io/cookbooks/opennms/versions/16.2.7/download",
    "https://supermarket.chef.io/api/v1/cookbooks/opennms/versions/16.2.7",
    "https://supermarket.chef.io/api/v1/cookbooks/opennms",
    "https://supermarket.chef.io/api/v1/cookbooks/opennms/versions/16.2.7/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/opennms",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/opennms/versions/16.2.7/download",
  "deprecated": false,
  "created": "2014-04-18T17:28:13.000Z",
  "updated": "2016-08-03T21:30:39.854Z",
  "description": "Installs and Configures opennms and provides many useful LWRPs.",
  "maintainer": {
    "name": "dschlenk",
    "email": "david.schlenk@spanlink.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 8744749,
  "downloads_count_revision": 226,
  "repository_url": "https://github.com/dschlenk/opennms-cookbook",
  "issues_url": "https://github.com/dschlenk/opennms-cookbook/issues",
  "chef_source_url": "https://github.com/dschlenk/opennms-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nA Chef cookbook to manage the installation and configuration of OpenNMS.\nCurrent version of templates are based on OpenNMS release 16.0.4\n\nVersions\n========\n\nStarting with OpenNMS 16, the MSB of the version of the cookbook matches the MSB of the version of OpenNMS it is meant to support. \n\n\nRequirements\n============\n\n* Chef 11.x+\n* CentOS 6.x. Debian/Ubuntu support shouldn't be too hard to do - if anyone wants to head that up let me know. \n* Either use Berkshelf to satisfy dependencies or manually acquire the following cookbooks: \n  * yum\n  * hostsfile\n  * build-essential\n* In OpenNMS 17+ you will need a newer PostgreSQL than CentOS 6.x provides. Also, using Chef to install PostgreSQL makes tuning a lot easier. While there's no explicit dependency, you most likely will want some combination of recipes from the `postgresql` cookbook.  See Usage for details.\n\nUsage\n=====\n\nRunning the default recipe will install OpenNMS 16.0.4 (or a custom version using the attribute `node[:opennms][:version]`) on CentOS 6.x from the official repo with the default configuration. It will also execute `'$ONMS_HOME/bin/runjava -s` if `$ONMS_HOME/etc/java.conf` is not present and `$ONMS_HOME/bin/install -dis` if `$ONMS_HOME/etc/configured` is not present.\n\nThere are two primary ways to use this cookbook: as an application cookbook or library cookbook. If you simply want to tweak a few settings to the default OpenNMS configuration, you can use the `default` recipe of this cookbook directly and modify node attributes to suit your needs. There are also a plethora of LWRPs that you can use to do more in depth customizations. If you go that route I recommend starting with the `notemplates` recipe and then using those LWRPs (and maybe a few of the templates in this cookbook) to define your run list. If your node's run list contains both the template and a resource that manages the same file you'll end up with a lot of churn during the chef client run, which is a waste of time and will probably cause unnecessary restarts of OpenNMS. \n\nTemplate resources for daemons that support configuration changes without a restart will automatically send the proper event to activate changes. Add `notifies` to your resource for similar funcationality when using the LWRPs from this cookbook. See the example recipe for each LWRP for details.\n\n### Java (Optional)\n\nYou might also want to check out the community java (https://github.com/socrata-cookbooks/java) and almost definitely postgresql (https://github.com/hw-cookbooks/postgresql) cookbooks. Here's an example of each:\n\nAt this time the OpenNMS yum repo includes a modern Oracle JDK. Since Oracle likes to change license terms on a whim (and their RPM doesn't necessarily set up things (like alternatives priorities) to your liking), you might want to get ahead of the curve and manage installing the JDK yourself. Here's an example using the community java cookbook. \n\nFirst, you need to download the appropriate RPM(s) from Oracle and make a yum repo available to your nodes. For example, on a CentOS server with Apache httpd installed you could do:\n\n```\n# mkdir /var/www/html/oracle-java\n# mv jdk*.rpm /var/www/html/oracle-java/\n# createrepo /var/www/html/oracle-java\n# chown -R apache:apache /var/www/html/oracle-java\n```\n\nNext, acquire the java cookbook in the link above by either cloning the repo and uploading to your Chef server or using Berkshelf or another cookbook management tool that can talk to git repos. \n\nSet the following attributes (in a role, environement, or in a wrapper cookbook - up to you):\n\n```\nnode['java']['oracle']['accept_oracle_download_terms'] = true\nnode['java']['install_flavor'] = 'oracle_rpm'\nnode['java']['oracle_rpm']['type'] = 'jdk'\nnode['java']['oracle_rpm']['package_name'] = 'jdk1.8.0_40' # match the current JDK version you've downloaded and set up a yum repo for\nnode['java']['alternatives_priority'] = 180040\nnode['java']['jdk_version'] = 8\nnode['java']['set_etc_environment'] = true\nnode['java']['oracle']['jce']['enabled'] = true\n```\n\nAdd a `yum_repository` resource to your node or role's run list, like so:\n\n```\nyum_repository 'oracle-java' do\n  description 'mirror of oracle java RPM packages'\n  baseurl 'URL_TO_YOUR_YUM_REPO'\n  gpgcheck false\n  action :create\nend\n```\n\nThen add the 'java::default' recipe to your run list. \n\n### Postgresql\n\nInclude the client, server, contrib, config_initdb, config_pgtune recipes \n(in that order) in your run list. Then use these attributes for a fairly well\ntuned config:\n\n```\nnode[:postgresql][:enable_pgdg_yum] = true,\nnode[:postgresql][:version] = '9.3',\nnode[:postgresql][:dir] = '/var/lib/pgsql/9.3/data',\nnode[:postgresql][:pg_hba] = { :addr => '' :user => 'all', :type => 'local', :method => 'trust', :db => 'all' }\nnode[:postgresql][:pg_hba] = { :addr => '127.0.0.1/32', :user => 'all', :type => 'host', :method => 'trust', :db => 'all'}\nnode[:postgresql][:pg_hba] = { :addr => '::1/128', :user => 'all', :type => 'host', :method => 'trust', :db => 'all' }\nnode[:postgresql][:config][:checkpoint_timeout] = '15min'\nnode[:postgresql][:config][:data_directory] = '/var/lib/pgsql/9.3/data'\nnode[:postgresql][:config][:autovacuum] = 'on'\nnode[:postgresql][:config][:track_activities] = 'on'\nnode[:postgresql][:config][:track_counts]  = 'on'\nnode[:postgresql][:config][:shared_preload_libraries] = 'pg_stat_statements'\nnode[:postgresql][:config][:vacuum_cost_delay] = 50\nnode[:postgresql][:config_pgtune][:max_connections] = 160\nnode[:postgresql][:contrib][:extensions] = ['pageinspect', 'pg_buffercache', 'pg_freespacemap', 'pgrowlocks', 'pg_stat_statements', 'pgstattuple']\nnode[:postgresql][:client][:packages] = [\"postgresql93\", \"postgresql93-contrib\", \"postgresql93-devel\"]\nnode[:postgresql][:server][:packages] = [\"postgresql93-server\"]\nnode[:postgresql][:server][:service_name] = \"postgresql-93\n```\n\n### Recommended Tweaks\nThere are also a couple OpenNMS attributes you'll probably want to override at a minimum: \n\n### opennms.conf\n\n```\nnode[:opennms][:conf][:start_timeout] = 20\nnode[:opennms][:conf][:heap_size] = 1024\nnode[:opennms][:conf][:addl_mgr_opts] = '-XX:+UseConcMarkSweepGC -XX:MaxMetaspaceSize=512m'\n```\n\n### Upgrades\n\nStarting with version 2.0.0 there is now experimental support for handling \nupgrades automatically. Use at your own risk. It is disabled by default. \nTo enable, set `node['opennms']['upgrade']` to true. If this sounds like \nsomething you want to do, review the `upgrade` recipe. It roughly translates to:\n\n* New RPM is installed. \n* Are there any files named `*.rpmnew` in `$ONMS_HOME/etc` or `$ONMS_HOME/jetty-webapp`? If so, overwrite the existing files with them. \n* Are there any files named `*.rpmsave` in `$ONMS_HOME/etc` or `$ONMS_HOME/jetty-webapp`? If so, remove them.\n\n`rpmsave` files happen when there's a config file that you have changed that \nwas replaced with the new version because not replacing it would prevent \nOpenNMS from working properly. But since we're using Chef, we don't care about\nthe old version as any changes we made to it previously will be redone with the\nappropriate LWRP(s) or templates later in the converge. Since OpenNMS won't \nstart with these files in place we just remove them. \n\nSimilarly, `rpmnew` files are created when a newer version of a file exists, but \nit doesn't contain breaking changes. Just like `rpmsave` files, OpenNMS won't \nstart with these files present, and the rest of the converge will make the changes\nwe want anyway, so we just overwrite the old file with the `rpmnew` version. \n \n### Recipes\n\n* `opennms::default` Installs and configures OpenNMS with the standard configuration modified with any node attribute values changed from their defaults.\n* `opennms::notemplates` Everything default does except minimal templates are used - etc/opennms.conf, etc/opennms.properties and etc/log4j2.xml. Use this recipe if you intend to use any of the LWRPs in this cookbook.\n\n#### Deprecated\nThe following recipes are deprecated. The preferred method to install these packages is by setting `node[:opennms][:plugin][:nsclient]` and/or `node[:opennms][:plugin][:xml]` to true. All these recipes do now is set those attributes at the default level. \n* `opennms::nsclient` installs the optional nsclient data collection plugin and uses the template for etc/nsclient-datacollection-config.xml. \n* `opennms::xml` installs the optional xml data collection plugin and uses the template for etc/xml-datacollection-config.xml. \n\n### LWRPs\n\nAs a general rule these LWRPs support a single action: `create` and many of them behave more like `create_if_missing` does in other cookbooks. In other words, updating is generally not supported. Exceptions are noted, and this behavior may change in future releases. \n\nAlso, there are example recipes in the cookbook for most every LWRP named `opennms::example_<LWRP_NAME>`. Eventually these will become tests. \n\nThe list of implemented LWRPs is as follows: \n\n#### Users, Groups and Roles\n\n* `opennms_user`: add a user. Uses the REST API. \n* `opennms_group`: add a group and populate it with users. You can even set the default SVG map and duty schedules.\n* `opennms_role`: add a role.\n* `opennms_role_schedule`: Add schedules to a role. See an example for this and the role LWRP in recipe `opennms::example_role`.\n\n#### Discovery\n\n* `opennms_disco_specific`: add a specific IP to be discovered. \n* `opennms_disco_range`: add a include or exclude range  discovery. \n* `opennms_disco_url`: add a include-url to discovery and if it's a file deploy it where specified. \n\n#### Provisioning Requisitions\n\nThese LWRPs use a cookbook library named Provision that I wrote to perform the work using the OpenNMS REST interface. As such, OpenNMS has to be running for the resources to converge. Also you'll notice that I used the term 'import' rather than the correct term 'requisition'. I can type 'import' a lot faster than 'requisition'. ;)\n\n* `opennms_foreign_source`: create a new foreign source optionally defining a scan interval (defaults to '1d'). \n* `opennms_service_detector`: add a service detector to a foreign source.\n* `opennms_policy`: add a policy to a foreign source. \n* `opennms_import`: Defines a requisition for a foreign source. This and all import* LWRPs include an option to synchronize the requisition - sync_import. \n* `opennms_import_node`: Add a node to a requisition including categories (array of strings) and assets (key/value hash pairs). \n* `opennms_import_node_interface`: Add an interface to a node in a requisition. \n* `opennms_import_node_interface_service`: Add a service to an interface on a node in a requisition. \n\n#### Events\n\n* `opennms_eventconf`: adds an event-file element to events in etc/eventconf.xml.  Supports updating.\n* `opennms_event`: adds an event element to events in target eventconf file `file`. Not all elements from the eventconf schema are implemented, but the ones that seem to actually exist in the wild are. See resource for details and recipes `example_event` and `example_threshold` for example usage.\n* `opennms_send_event`: creates an actual instance of an event using the `send-event.pl` script in `$ONMS_HOME/bin`. Used by the `send_events` recipe, which is included by `default` and `notemplates` recipes to cause config file reloads to take place when template resources make changes or an LWRP sends a notification.\n\n#### Notifications\n\n* `opennms_notification_command`: Create a new command in notificationCommands.xml. \n* `opennms_destination_path`: creates a destination path element in destinationPaths.xml. Requires at a minimum a single target which can be defined with the following LWRP. \n* `opennms_target`: Add a target or escalate target to a destination path (defined either in the default config or with the above LWRP). \n* `opennms_notification`: Create notification elements in notifications.xml.  Supports updating.\n\n#### Node Service Credential Configuration\n\nThese LWRPs allow you to define the credentials necessary to connect to services on monitored nodes. These are some of the few that currently implement updating and deleting. Action `:create` will update if changes are detected but `:create_if_missing` will do nothing. To determine if a resource needs to be updated or deleted, existance is determined by all definition element attributes being equal (so all resource attributes except `ranges`, `specifics`, `ip_matches` and `position`). \n\nIf an update occurs, the values contained in the new resource will be used. Note that all `range`, `specific` and `ip-match` elements that exist currently in the definition will be removed before the new elements are added. \n\nCurrently implemented are: \n\n* `opennms_snmp_config_definition`: add a definition element to snmp-config.xml. \n* `opennms_wmi_config_definition`: add a definition element to wmi-config.xml.\n\n#### Polling\n\n* `opennms_poller_package`: add a package to etc/poller-configuration.xml. Note that an instance of this resource without use of an accompanying `opennms_poller_service` resource will result in a failure to start opennms. \n* `opennms_poller_service`: add a service to poller package named `poller_name`.  See `opennms::example_poller` for example usage of this and the `opennms_poller_package` resource. \n\n#### Data Collection\n\n* `opennms_resource_type`: adds a resourceType definition to a file in etc/datacollection and an include-collection element to the default snmp-collection. This LWRP supports a very limited form of updating - if the resource type already exists but isn't included in the default snmp-collection, an include-collection element will be added. The definition of the resource type won't be updated, however.  \n* `opennms_system_def`: add or remove pre-existing groups (`/datacollection-group/group[@name]`) to or from pre-existing systemDefs (`/datacollection-group/systemDef/collect/includeGroup[text()]`) in $ONMS_HOME/etc/datacollection/*.xml.\n* `opennms_snmp_collection`: adds an snmp-collection element to etc/datacollection-config.xml. \n* `opennms_xml_collection`: adds an xml-collection element to etc/xml-datacollection-config.xml. \n* `opennms_wmi_collection`: adds a wmi-collection element to etc/wmi-datacollection-config.xml. \n* `opennms_jdbc_collection`: adds a jdbc-collection element to etc/jdbc-datacollection-config.xml. \n* `opennms_collection_package`: adds a package element to etc/collectd-configuration.xml. \n* `opennms_snmp_collection_service`: adds a service element to a package in etc/collectd-configuration.xml. \n* `opennms_xml_collection_service`: adds a service element to a package in etc/collectd-configuration.xml. \n* `opennms_wmi_collection_service`: adds a service element to a package in etc/collectd-configuration.xml.\n* `opennms_jdbc_collection_service`: adds a service element to a package in etc/collectd-configuration.xml.\n* `opennms_snmp_collection_group`: adds an include-collection element to an snmp-collection in etc/datacollection-config.xml and drops off the specified cookbook file into etc/datacollection. \n* `opennms_jdbc_query`: adds a query element to a jdbc-collection in etc/jdbc-datacollection-config.xml. \n* `opennms_xml_source`: adds a xml-source element to a xml-collection in etc/xml-datacollection-config.xml. \n* `opennms_xml_group`: adds a xml-source element to a xml-source in etc/xml-datacollection-config.xml. \n\n#### Statistics Reports\n\nSee `opennms::example_statsd` for example usage of these LWRPs. \n\n* `opennms_statsd_package`: create a new package optionally with a filter in statsd-configuration.xml.\n* `opennms_statsd_report`: add a report to a package in statsd-configuration.xml. \n\n#### Graphs\n\n* `opennms_collection_graph_file`: Add a cookbook file containing graph definitions (perhaps generated by the mib compiler) to $ONMS_HOME/etc/snmp-graph.properties.d/. \n* `opennms_collection_graph`: Add a new graph definition to the main (bad idea), new or an existing graph file.\n* `opennms_response_graph`: Add a response graph to $ONMS_HOME/etc/response-graph.properties. Since there's a pretty well defined pattern to these, you can define these with just the name of the data source and it'll create a graph with min, max and average response times. \n\n#### Thresholds\n\nSee examples for all of these LWRPs are in a single recipe, `example_threshold`. \n\n* `opennms_threshd_package`: Create a new package in threshd-configuration.xml. \n* `opennms_threshold_group`: Create a new threshold group in thresholds.xml. \n* `opennms_threshold`: Create a new threshold in the specified group in thresholds.xml. \n* `opennms_expression`: Create a new expression threshold in the specified group in thresholds.xml. \n\n#### Web UI\n\nThere are a couple LWRPs for managing the Web UI. All of these support updating.\n\n* `opennms_avail_category`: Define categories for use in the Availability box on the main page (and the Summary dashlet in Ops Board).\n* `opennms_avail_view`: Define the list of categories in each view sections displayed in the Availability box on the main page (and the Summary dashlet in Ops Board).\n* `opennms_wallboard`: Create a wallboard. \n* `opennms_dashlet`: Add a dashlet to a wallboard.\n* `opennms_surveillance_view`: Manage surveillance views used in the legacy dashboard, Ops Board, and optionally on the front page. Note: does not verify that the categories you reference exist, because there's no ReST interface (yet). \n\n### Template Overview\n\nMost configuration files are templated and can be overridden with environment, role, or node attributes.  See the default attributes file for a list of configuration items that can be changed in this manner, or keep reading for a brief overview of each template available. Default attribute values set to `nil` mean that the file's default value is commented out in the original file and will remain so unless set to a non-nil value.\n\nEach template can also be overridden in a wrapper cookbook by manipulating the appropriate node attribute. For example, if you've got a pretty heavily customized collectd-configuration.xml file and you don't want to move to the LWRP/library cookbook workflow, turn your custom version into a template (append `.erb` to the filename and optionally add some templating logic to it) and add it to `templates/default` in your wrapper cookbook. Then set `default[:opennms][:collectd][:cookbook]` to the name of your wrapper cookbook. You could also copy all of the templates from this cookbook to your wrapper, edit them all as desired and set `default[:opennms][:default_template_cookbook]` to your wrapper cookbook's name.  \n\n#### etc/availability-reports.xml\n\nIf you want to change the logo or default interval, count, hour or minute you can do so for either the calandar or classic report like so:\n```\n   {\n     \"opennms\": {\n       \"db_reports\": {\n         \"avail\": {\n           \"cal\": {\n             \"logo\": \"/path/to/an/other_logo.png\"\n           },\n           \"classic\": {\n             \"count\": 7\n           }\n         }\n       }\n     }\n   }\n```\n\n#### etc/categories.xml\n\nDefault categories can be modified by doing things like\n\n```\n   {\n     \"opennms\": {\n       \"categories\": {\n         \"web\": {\n           \"services\": [\n             \"HTTP\",\n             \"HTTPS\",\n             \"HTTP-8080\",\n             \"HTTP-8000\",\n             \"HTTP-8980\"\n           ]\n         }\n       }\n     }\n   }\n```\nThat'll leave the defaults for everything except overwrite the list of services in the `web` category.\nThe names of the categories are: 'overall', 'interfaces', 'email', 'web', 'jmx', 'dns', 'db', 'other', 'inet'.\nThe defaults are nil, which leaves the defaults as is. Override with false to disable.\n\n#### etc/chart-configuration.xml\n\nDisable one of the three default charts by setting `severity_enabled`, `outages_enable` or `inventory_enable` to false in `node['opennms']['chart']`.\n\n#### etc/collectd-configuration.xml\n\nUse the `node['opennms']['collectd']['threads']` attribute to change the number of threads (duh). There are also attributes for each default package. As of 1.12.5 those are: vmware3, vmware4, vmware5, example1. To modify one of those, for example, to change the IPv4 include range in the example1 package, you would do:\n```\n   {\n     \"opennms\": {\n       \"collectd\": {\n           \"example1\": {\n             \"ipv4_range\": {\n                 \"begin\": \"10.0.1.0\",\n                 \"end\": \"10.0.1.255\"\n             }\n           }\n       }\n     }\n   }\n```\nThat leaves most of the example1 package as default. Set a package's `enabled` attribute to false if you want to completely remove that package. You can also do that for specific services in that package. See the template for more options.\n\n#### etc/datacollection-config.xml\n\nYou can override some settings like:\n```\n   {\n     \"opennms\": {\n       \"datacollection\": {\n         \"default\": {\n           \"snmpStorageFlag\": \"all\"\n         }\n       }\n   }\n```\nOr maybe you don't have any Dell gear:\n```\n   {\n     \"opennms\": {\n       \"datacollection\": {\n         \"default\": {\n           \"dell\": false\n         }\n       }\n     }\n   }\n```\n\nYou can also remove one of the default snmp-collections, or change the step and RRA definitions.\n\n#### etc/discovery-configuration.xml\n\nAttributes are available in `node['opennms']['discovery']` to change global settings:\n* threads (`threads`)\n* packets-per-second (`pps`)\n* initial-sleep-time (`init_sleep_ms`)\n* restart-sleep-time (`restart_sleep_ms`)\n* retries (`retries`)\n* timeout (`timeout`)\n\n#### etc/eventd-configuration.xml\n\nAttributes are available in `node['opennms']['eventd']` to change global settings:\n* TCPAddress (`tcp_address`)\n* TCPPort (`tcp_port`)\n* UDPAddress (`udp_address`)\n* UDPPort (`udp_port`)\n* receivers (`receivers`)\n* socketSoTimeoutRequired (`sock_so_timeout_req` to true or false)\n* socketSoTimeoutPeriod (`socket_so_timeout_period`)\n\n#### etc/events-archiver-configuration.xml\n\nAttributes are available in `node['opennms']['events_archiver']` to change global settings:\n* archiveAge (`age`)\n* separator (`separator`)\n\n#### etc/javamail-configuration.properties\n\nThis file controls how OpenNMS sends email. This is not where you configure the mail monitor.\nAttributes available in `node['opennms']['javamail_props']`. They follow the config file but with ruby style because the kids hate camel case I guess.\n* org.opennms.core.utils.fromAddress (`from_address`) \n* org.opennms.core.utils.mailHost (`mail_host`)\n* ...and so on.\n\n#### etc/javamail-configuration.xml\n\nThis is where you configure the mail monitor.\nAttributes available in `node['opennms']['javamail_config'`. Unlike most of the templates, you can change every attribute and element in the default sendmail and receivemail elements since the defaults are useful to no one. Here's a list of the defaults which you definitely need to override if you want a mail monitor to work: \n\n```\ndefault['opennms']['javamail_config']['default_read_config_name'] = \"localhost\"\ndefault['opennms']['javamail_config']['default_send_config_name'] = \"localhost\"\ndefault['opennms']['javamail_config']['default_read']['attempt_interval'] = 1000\ndefault['opennms']['javamail_config']['default_read']['delete_all_mail']  = false\ndefault['opennms']['javamail_config']['default_read']['mail_folder']      = \"INBOX\"\ndefault['opennms']['javamail_config']['default_read']['debug']            = true\ndefault['opennms']['javamail_config']['default_read']['properties']       = {'mail.pop3.apop.enable' => false, 'mail.pop3.rsetbeforequit' => false}\ndefault['opennms']['javamail_config']['default_read']['host']             = \"127.0.0.1\"\ndefault['opennms']['javamail_config']['default_read']['port']             = 110\ndefault['opennms']['javamail_config']['default_read']['ssl_enable']       = false\ndefault['opennms']['javamail_config']['default_read']['start_tls']        = false\ndefault['opennms']['javamail_config']['default_read']['transport']        = \"pop3\"\ndefault['opennms']['javamail_config']['default_read']['user']             = \"opennms\"\ndefault['opennms']['javamail_config']['default_read']['password']         = \"opennms\"\ndefault['opennms']['javamail_config']['default_send']['attempt_interval']   = 3000\ndefault['opennms']['javamail_config']['default_send']['use_authentication'] = false\ndefault['opennms']['javamail_config']['default_send']['use_jmta']           = true\ndefault['opennms']['javamail_config']['default_send']['debug']              = true\ndefault['opennms']['javamail_config']['default_send']['host']               = \"127.0.0.1\"\ndefault['opennms']['javamail_config']['default_send']['port']               = 25\ndefault['opennms']['javamail_config']['default_send']['char_set']           = \"us-ascii\"\ndefault['opennms']['javamail_config']['default_send']['mailer']             = \"smtpsend\"\ndefault['opennms']['javamail_config']['default_send']['content_type']       = \"text/plain\"\ndefault['opennms']['javamail_config']['default_send']['encoding']           = \"7-bit\"\ndefault['opennms']['javamail_config']['default_send']['quit_wait']          = true\ndefault['opennms']['javamail_config']['default_send']['ssl_enable']         = false\ndefault['opennms']['javamail_config']['default_send']['start_tls']          = false\ndefault['opennms']['javamail_config']['default_send']['transport']          = \"smtp\"\ndefault['opennms']['javamail_config']['default_send']['to']                 = \"root@localhost\"\ndefault['opennms']['javamail_config']['default_send']['from']               = \"root@[localhost]\"\ndefault['opennms']['javamail_config']['default_send']['subject']            = \"OpenNMS Test Message\"\ndefault['opennms']['javamail_config']['default_send']['body']               = \"This is an OpenNMS test message.\"\ndefault['opennms']['javamail_config']['default_send']['user']               = \"opennms\"\ndefault['opennms']['javamail_config']['default_send']['password']           = \"opennms\"\n```\n\n#### jcifs.properties\n\nThis is useful for something I'm sure, but I don't know what. See the template or default attributes file for hints.\n\n#### etc/jdbc-datacollection-config.xml \n\nSimilar to other datacollection-config.xml files, you can change the RRD repository, step, RRA definitions and disable default collections and their queries.\n\n#### etc/jmx-datacollection-config.xml \n\nSimilar to other datacollection-config.xml files, you can change the RRD repository, step, RRA definitions and disable default collections and their mbeans. In the JBoss collection you can specify a JMS queue and/or topic to collect stats on. See the template and default attributes for details. \n\n#### etc/linkd-configuration.xml & etc/enlinkd-configuration.xml\n\nAttributes available in `node['opennms']['linkd']` that allow you change global settings like:\n* threads\n* initial_sleep_time\n* snmp_poll_interval\n* discovery_link_interval\n\nYou can also turn off various kinds of detection, like for `iproutes`, set any of these to false to remove them from the file:\n* netscreen\n* cisco\n* darwin\n\nFinally there's the package element at the end of the file that you can configure with these attributes:\n```\ndefault['opennms']['linkd']['package']                      = \"example1\"\ndefault['opennms']['linkd']['filter']                       = \"IPADDR != '0.0.0.0'\"\ndefault['opennms']['linkd']['range_begin']                  = \"1.1.1.1\"\ndefault['opennms']['linkd']['range_end']                    = \"254.254.254.254\"\n```\n\n#### etc/log4j2.xml\n\nThis one is a little different. If you want to turn up logging for collectd, for instance, you'd set these override attributes:\n```\ndefault['opennms']['log4j2']['collectd'] = 'DEBUG'\n```\n\n#### magic-users.properties\n\nThe rtc username and password are populated from the values set in `node['opennms']['properties']['rtc']['username']` and `node['opennms']['properties']['rtc']['password']`. TODO: Generate passwords during install! Other attributes available for configuration are:\n```\ndefault['opennms']['magic_users']['admin_users']     = \"admin\"\ndefault['opennms']['magic_users']['ro_users']        = \"\"\ndefault['opennms']['magic_users']['dashboard_users'] = \"\"\ndefault['opennms']['magic_users']['provision_users'] = \"\"\ndefault['opennms']['magic_users']['remoting_users']  = \"\"\ndefault['opennms']['magic_users']['rest_users']      = \"iphone\"\n```\n\n#### etc/map.properties\n\nDo you love the old SVG maps but are a contrarian when it comes to color schemes? Have we got the template for you! I guess also useful for translating labels?  Check out the default attributes for details on what you can change.\n\n#### etc/notifd-configuration.xml\n\nIs ignorance about your broken network in fact bliss?  Shut off notifd by setting `node['notifd']['status']` to \"off\" and find out. Don't know what `match-all` even means? Find out by setting `node['opennms']['notifd']['match_all']` to false. (It controls whether only the first matching notification is used or not). You can also disable any of the default auto-acknowledge elements with `node['notifd']['auto_ack']['service_unresponsive|service_lost|interface_down|widespread_outage']`.\n\n#### etc/notificationCommands.xml\n\nTurn off one of the default notification commands by setting one of the attributes in `node['opennms']['notification_commands']` to false:\n* java_pager_email\n* java_email\n* xmpp_message\n* xmpp_group_message\n* irc_cat\n* call_work_phone\n* call_mobile_phone\n* call_home_phone\n* microblog_update\n* microblog_reply\n* microblog_dm\n\n#### etc/notifications.xml\n\nThese attributes:\n* enabled\n* status\n* rule\n* destination_path\n* description\n* text_message\n* subject\n* numeric_message\n\ncan be overridden to alter any of these default notifications:\n\n* interface_down\n* node_down\n* node_lost_service\n* node_added\n* interface_deleted\n* high_threshold\n* low_threshold\n\nin `node['opennms']['notifications']`. Stay tuned for a notification LWRP.\n\n#### etc/response-graph.properties\nChange the image format from the default `png` to `gif` or `jpg` (if using jrobin or you like broken images) with `node['response_graph']['image_format']`. Font sizes can also be changed with `node['response_graph']['default_font_size']` and `node['response_graph']['title_font_size']` (defaults are 7 and 10 respectively). Setting these attributes to false removes them from the file:\n\n* icmp\n* avail\n* dhcp\n* dns\n* http\n* http_8080\n* http_8000\n* mail\n* pop3\n* radius\n* smtp\n* ssh\n* jboss\n* snmp\n* ldap\n* strafeping\n* memcached_bytes\n* memcached_bytesrw\n* memcached_uptime\n* memcached_rusage\n* memcached_items\n* memcached_conns\n* memcached_tconns (off by default)\n* memcached_cmds\n* memcached_gets\n* memcached_evictions\n* memcached_threads\n* memcached_struct\n* ciscoping_time\n\nIf you changed the count of pings in the strafer polling package to a value higher than 20, you'll also need to define additional colors for the strafeping graph, like `default['opennms']['response_graph']['strafeping_colors'][21] = [\"#f5f5f5\"]`. If you want to add a STACK to the graph for another ping number (defaults to 1-4,10,19) add a second color to that attribute's value array, like `default['opennms']['response_graph']['strafeping_colors'][21] = [\"#f5f5f5\",\"#050505\"]`. \n\n#### etc/rrd-configuration.properties\n\nTobi enthusiasts will want to set some attributes in `node['opennms']['rrd']` to switch from jrobin to rrdtool:\n```\n{\n  \"opennms\":\n  {\n    \"rrd\":\n    {\n      \"strategy_class\": \"org.opennms.netmgt.rrd.rrdtool.JniRrdStrategy\",\n      \"interface_jar\":  \"/usr/share/java/jrrd.jar\",\n      \"jrrd\":           \"/usr/lib/libjrrd.so\"\n    }\n  }\n}\n```\nTODO: automatically install the appropriate JNI stuff for the target architecture/platform.\n\nYou can also change a multitude of queue settings or change the jrobin backend factory, but unless you know what you're doing that's probably a mistake. Look at the template for details if you're curious.\n\nFinally, to turn on the Google protobuf export thing described at http://www.opennms.org/wiki/Performance_Data_TCP_Export, set these attributes accordingly:\n\n```\ndefault['opennms']['rrd']['usetcp']      = true\ndefault['opennms']['rrd']['tcp']['host'] = 10.0.0.1\ndefault['opennms']['rrd']['tcp']['port'] = 9100     # Hope that's a JetDirect compatible network interface!\n```\n\n#### etc/site-status-views.xml\n\nDo you actually populate the building column in assets or site field in provisioning reqs? Change the default site status view name and/or it's definition with these attributes: `node['opennms']['site_status_views']['default_view']['name']` and `node['opennms']['site_status_views']['default_view']['rows']` where `rows` is an array of single element hashes (to maintain order) like:\n```\n[\n  {\n    \"Routers\": \"Routers\"\n  },\n  {\n    \"Switches\": \"Switches\"\n  },\n  {\n    \"Servers\": \"Servers\"\n  }\n]\n```\n\n#### etc/snmp-adhoc-graph.properties\n\nSimilar to other *-graph.properties files, you can change the image format used in adhoc graphs by setting the attribute `node['opennms']['snmp_adhoc_graph']['image_format']` to `gif` or `jpg` rather than the default `png`. Note that the intersection of formats supported by both jrobin and rrdtool is `png`, though.\n\n#### etc/snmp-graph.properties & snmp-graph.properties.d/*\n\nSimilar to other *-graph.properties files, you can change the image format used in predefined graphs by setting the attribute `node['opennms']['snmp_adhoc_graph']['image_format']` t\no `gif` or `jpg` rather than the default `png`. Note that the intersection of formats supported by both jrobin and rrdtool is `png`, though.\nYou can also set the default and title font sizes like you can in the response graphs. Since these graphs are now split up by manufacturer, you can disable graphs for a manufacturer like you can in snmp-datacollection-config.xml. This example disables Dell graphs:\n\n```\n{\n  \"opennms\":\n  {\n    \"snmp_graph\":\n    {\n      \"dell_openmanage\": false,\n      \"dell_rac\": false\n    }\n  }\n}\n```\n\nNote that this doesn't delete that file, it merely comments out the `reports=...` line(s) in the file.\n\nYou can also change the default KSC graph by setting `node['snmp_graph']['default_ksc_graph']` to the name of a valid graph.\n\n#### etc/statsd-configuration.xml\n\nYou can remove either of the default packages or an individual report by setting attributes in `node['opennms']['statsd']['PACKAGE_NAME']['REPORT_NAME']` to false. Packages and their reports are:\n\n* example1\n  * top_n\n* response_time_reports\n  * top_10_weekly\n  * top_10_this_month\n  * top_10_last_month\n  * top_10_this_year\n\n#### etc/threshd-configuration.xml\n\nLike everything else that has packages, filters, ranges and services, you can override attributes to tune the defaults. See the template and default attributes for details. You can also configure the number of threads with `node['opennms']['threshd']['threads']` (default is 5).\n\n#### etc/thresholds.xml\n\nChange the RRD repository location or disable threshold groups with the `enabled` and `rrd_repository` attributes in `node['opennms']['thresholds']['GROUP']` where group can be:\n\n* mib2\n* cisco\n* hrstorage\n* netsnmp\n* netsnmp_memory_linux\n* netsnmp_memory_nonlinux\n* coffee\n\n#### etc/translator-configuration.xml\n\nRemove one of the default event translations (http://www.opennms.org/wiki/Event_Translator) by setting an attribute in `node['opennms']['translator']` to false. They are:\n\n* snmp_link_down\n* snmp_link_up\n* hyperic\n* cisco_config_man\n* juniper_cfg_change\n\n#### etc/trapd-configuration.xml\n\nTwo attributes available: `port` and `new_suspect` in `node['opennms']['trapd']` that allow you to configure the port to listen for traps on (default 162) and whether or not to create newSuspect events when a trap is received from an unmanaged host (default false).\n\n#### etc/users.xml\n\nChange your admin password by setting `node['opennms']['users']['admin']['password']` to whatever hashed value of your password OpenNMS uses. Uppercase MD5? In the future we'll generate one during install. You can also change the name and user_comments attributes, I guess.\n\n#### etc/viewsdisplay.xml\n\nAnother web UI XML file, this one controls which categories are displayed in the availability box on the main landing page. Once a LWRP exists you'll be able to add sections, but until then you can disable any of the existing categories by setting one of these attributes in `node['opennms']['web_console_view']` to false:\n\n* network_interfaces\n* web_servers\n* email_servers\n* dns_dhcp_servers\n* db_servers\n* jmx_servers\n* other_servers\n\n#### etc/xmpp-configuration.xml\n\nConfigure notifications to be sent via XMPP (aka Jabber, GTalk) with these attributes in `node['opennms']['xmpp']`:\n\n* server\n* service_name\n* port\n* tls\n* sasl\n* self_signed_certs\n* truststore_password\n* debug\n* user\n* pass\n\n#### Others\nSee the template and default attributes source for more details on using these templates:\n\n* etc/microblog-configuration.xml\n* etc/model-importer.properties\n* etc/modemConfig.properties\n* etc/nsclient-datacollection-config.xml\n* etc/poller-configuration.xml\n* etc/provisiond-configuration.xml\n* etc/remedy.properties\n* etc/reportd-configuration.xml\n* etc/rtc-configuration.xml\n* etc/smsPhonebook.properties\n* etc/snmp-interface-poller-configuration.xml\n* etc/support.properties\n* etc/surveillance-views.xml\n* etc/syslog-northbounder-configuration.xml\n* etc/syslogd-configuration.xml\n* etc/vacuumd-configuration.xml\n* etc/vmware-cim-datacollection-config.xml\n* etc/vmware-datacollection-config.xml\n* etc/wmi-datacollection-config.xml\n* etc/xml-datacollection-config.xml\n* etc/xmlrpcd-configuration.xml\n\nLicense\n=======\nApache 2.0\n\nAuthor\n======\nDavid Schlenk (<dschlenk@converge-one.com>)\n\nDevelopment\n===========\n\nPlease feel free to fork and send me pull requests!  The focus of my work will initially be on templates for configuration files that modify the default configuration and LWRPs to add new elements to configuration files. \n\nThere's some kitchen suites available that exercise the main recipes and LWRPs. More testing will be a thing someday!\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "rhel",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/hostsfile",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}