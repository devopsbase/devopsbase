{
  "name": "bag_config Chef cookbook",
  "chef_cookbook_name": "bag_config",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/bag_config",
    "https://supermarket.chef.io/cookbooks/bag_config/download",
    "https://supermarket.chef.io/cookbooks/bag_config/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/bag_config/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config",
    "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/bag_config",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/bag_config/versions/1.0.0/download",
  "deprecated": false,
  "created": "2012-03-16T23:54:26.000Z",
  "updated": "2012-04-25T15:53:20.000Z",
  "description": "Provides helpers for optional data bag configuration",
  "maintainer": {
    "name": "chrisroberts",
    "email": "chrisroberts.code@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 8,
  "downloads_count": 4867806,
  "downloads_count_revision": 1216899,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "BagConfig\n=========\n\nThis cookbook provides helper methods to Recipe instances allowing them to easily\nprovide configurations from data bag entries, and elegantly fall back to node\nattributes if the data bag entry does not exist or the attribute requested does\nnot exist within the data bag entry.\n\nBy default, no attribute modification will be required when providing configuration\nto a recipe via data bag entries. The Basic Usage section will cover this simple\nusage. The Advanced Usage section will cover available configuration attributes\nto handle non-standard naming and extra data bag functionality.\n\nBasic Usage\n===========\n\nRecipes\n-------\n\nRecipes must make use of the #bag_or_node method(s) for data bag configuration to\nbe applied. For example, below is a generic recipe:\n\n```ruby\n# recipes/default.rb\n\ntemplate node[:test][:my_file] do\n  ...\nend\n```\n\nTo provide support for data bag configuration, the recipe can be modifed like so:\n\n```ruby\n# recipes/default.rb\n\ntemplate bag_or_node(:my_file) do\n  ...\nend\n```\n\nThis allows the value to come from the configuration data bag if it exists and\nthe value has been set there, other wise it will fall back to the value defined\nby `node[:test][:my_file]`.\n\nNaming scheme\n=============\n\nData bags\n---------\n\nThe name of the data bag used will correspond to the name of the cookbook the\nrecipe resides within. For example, if the cookbook is named `test`, configuration\nentries will be searched for within the `test` data bag. Configuration entries\nfor a node are based on the node name. If the name of the node is `test1.box`,\nthen the `test` data bag will be searched for an entry with the id of `config_test1_box`.\n\nQuick Ref:\n\n```\ncookbook: test\nnode name: test1.box\ndata bag entry: test/config_test1_box\n```\n\nAdvanced Usage\n==============\n\nCustom Data Bag\n---------------\n\nIf the configuration entries are not within a data bag that corresponds to the\ncookbook name (or #node_key if it has been overriden) it can be explicitly defined\nvia attribute:\n\n* `node[cookbook][:config_data_bag_override] = 'my_custom_bag'`\n\nThis will force config entries to be searched for within the `my_custom_bag` data bag.\n\nCustom Data Bag Entry\n---------------------\n\nBy default, the configuration entries are based on the current node name, prefixed\nwith `config_`. If a custom entry name is required:\n\n* `node[cookbook][:config_bag] = 'myconfigentry'`\n\nThis will force the data bag entry searched for to have the id `myconfigentry`.\n\nEncrypted Data Bag Entry\n------------------------\n\nEncrypted data bags are supported when the encrypted attribute is set:\n\n* `node[cookbook][:config_bag][:encrypted] = true`\n\nThis will require the secret being provided either inline:\n\n* `node[cookbook][:config_bag][:secret] = 'my_secret'`\n\nor as a path to the secret file on the node:\n\n* `node[cookbook][:config_bag][:secret] = '/etc/config_secret.file'`\n\nNote: If a custom data bag entry name is required, it can be supplied via the\n:name key:\n\n* `node[cookbook][:config_bag][:name] = 'myconfigentry'`\n\nAdvanced Recipe Usage\n=====================\n\nThis section is for helpers and configurations available to recipes providing\ndata bag based configuration.\n\nAccessing configuration attributes\n----------------------------------\n\nTo access a single attribute:\n\n```ruby\nfile_name = bag_or_node(:file_name)\n```\n\nTo access a number of attributes:\n\n```ruby\nconfig_hash = bag_or_node_args(:file_name, :file_mode, :etc...)\n...\nconfig_hash[:file_name]\n```\n\nThe latter provides an easy way to fetch all configuration attributes at the\nstart of the recipe and use the provided hash to access the values throughout\nthe recipe. \n\nNote: The resulting hash keys will be symbolized regardless of how they are\ninitially provided to the method.\n\nNon-standard attributes key\n---------------------------\n\nIf the key used to access attributes on the node is not the same as the cookbook\nname of the recipe, it can be overriden in the recipe by calling #override_node_key.\n\n```ruby\noverride_node_key('my-test')\n```\nNon-standard data bag\n---------------------\n\nA custom data bag can be defined by recipe. Please note that if this approach is\ntaken (rather than overriding via attributes) it must be done in all applicable\nrecipes:\n\n```ruby\noverride_data_bag('my_bag')\n```\n\n"
}