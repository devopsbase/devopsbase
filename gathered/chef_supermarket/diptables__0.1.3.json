{
  "name": "diptables Chef cookbook",
  "chef_cookbook_name": "diptables",
  "revision": "0.1.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/diptables",
    "https://supermarket.chef.io/cookbooks/diptables/download",
    "https://supermarket.chef.io/cookbooks/diptables/versions/0.1.3",
    "https://supermarket.chef.io/cookbooks/diptables/versions/0.1.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/diptables/versions/0.1.3",
    "https://supermarket.chef.io/api/v1/cookbooks/diptables",
    "https://supermarket.chef.io/api/v1/cookbooks/diptables/versions/0.1.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/diptables",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/diptables/versions/0.1.3/download",
  "deprecated": false,
  "created": "2013-09-15T19:39:56.000Z",
  "updated": "2016-09-14T19:30:34.424Z",
  "description": "A smart iptables cookbook for Chef!",
  "maintainer": {
    "name": "wk",
    "email": "jer329@cornell.edu"
  },
  "license": "unlicense",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 4,
  "downloads_count": 9393109,
  "downloads_count_revision": 1265966,
  "repository_url": "https://github.com/wk8/cookbook-diptables",
  "issues_url": "https://github.com/wk8/cookbook-diptables/issues",
  "chef_source_url": "https://github.com/wk8/cookbook-diptables",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nChef! cookbook with LWRPs for managing iptables rules and policies.\n\nLargely inspired by Dan Crosta's `simple-iptables` cookbook (https://github.com/dcrosta/cookbook-simple-iptables), but with a slightly different approach: we rebuild the whole iptables config file from scratch every time this cookbook is run. That allows to automatically remove obsolete rules (rather than manually with Dan's cookbook).\n\nAlso, it makes it possible to make rules that apply to the result of a Chef! search query, which allows for rules such as \"allow all my servers tagged Apache to access the current server on that port and that protocol\".\n\n\nRequirements\n============\n\nNone, other than a system that supports iptables.\n\n\nPlatforms\n=========\n\nThe following platforms are supported and known to work:\n\n* Debian (6.0 and later)\n* RedHat (5.8 and later)\n* CentOS (5.8 and later)\n\nOther platforms that support `iptables` and the `iptables-restore` script\nare likely to work as well; if you use one, please let me know so that I can\nupdate the supported platforms list.\n\n\nAttributes\n==========\n\nThis cookbook uses two attributes, both of which are optional:\n\n* `['diptables']['rules_path']` defines the path to which we should save the current iptables rules set. It defaults to sensible locations depending on your distribution.\n* `['diptables']['dry_run']` set that attribute to `true` to generate the new iptables rules set, but without actually loading it. This allows you to easily test your rules, and check what iptables configuration they would result in, without actually applying them yet. (Obviously defaults to `false`).\n\nUsage\n=====\n\nThis cookbook defines three LWRPS: `diptables_rule`, `diptables_tcp_udp_rule` and `diptables_policy`, that you can use in your recipes, after telling Chef! that your cookbook depends on this one (just put `depends 'diptables'` in your `metadata.rb` file).\n\nPlease note that you need to include the `recipe[diptables]` in your run list *AFTER* the recipe(s) using these resources to actually commit your changes (will crash anyway otherwise).\n\n`diptables_rule` Resource\n-------------------------\n\nIn its simpler form, that resource defines a single iptables rule, composed of a rule string (passed as-is to iptables), a table name, a chain name, and a jump target. All the attributes are optional, and respectively to '' (empty string), 'filter', 'INPUT', and 'ACCEPT'. For instance:\n\n    # Allow SSH\n    diptables_rule 'ssh' do\n      rule '--proto tcp --dport 22'\n    end\n\nFor convenience, you may also specify an array of rule strings in a single LWRP invocation:\n\n    # Allow HTTP, HTTPS\n    diptables_rule 'http' do\n      rule [ '--proto tcp --dport 80',\n             '--proto tcp --dport 443' ]\n    end\n\nThe same resource allows you to apply a given rule to every server matching a given Chef! search query. For instance, that rule would allow all your servers with the `backend-server` role to access the current server on the port 3306 (typical for a MySQL server):\n\n    # Allow backend servers to connect to MySQL\n    diptables_rule 'mysql' do\n      rule '-s %<remote_ip>s --proto tcp --dport 3306'\n      query 'roles:backend-server'\n      placeholders({:remote_ip => 'ipaddress'})\n    end\n\nThis example will run the `roles:backend-server` query in the Chef! search, then create one rule per matching node on the current server, replacing the `%<remote_ip>s` placeholder by whatever is returned by the `ipaddress` method on the matching nodes. So if you have two servers with the `backend-server` role in your system, with IP addresses 1.2.3.4 and 1.2.3.5, the resource above will result in two rules in your iptables config file:\n\n    -A INPUT -s 1.2.3.4 --proto tcp --dport --jump ACCEPT\n    -A INPUT -s 1.2.3.5 --proto tcp --dport --jump ACCEPT\n\nAnd the best thing is, if you add a third server with the same role, it will automatically add the relevant line to your iptables config.\n\nTogether with the `query` attribute, you can set the `same_environment` to `true` to retrieve only the nodes with the same Chef! environment as the current server.\n\nPlease note that the syntax for the placeholders is the same as for Ruby's `sprintf` function (see http://www.ruby-doc.org/core-2.0.0/Kernel.html#method-i-format).\n\nFinally, a word on the `comment` attribute. Its default value, `true`, will simply use the name of the rule to comment it in the resulting rules file. Set it to `false` to not output any comment for the current rule, or simply set it to whatever `String` you want to be displayed as comment.\n\n`diptables_tcp_udp_rule` Resource\n---------------------------------\n\nThat resource is essentially an alias for `diptables_rule` resources to create rules for TCP or UDP connections. It defines the following self-explanatory attributes:\n\n\n* table (default: 'filter')\n* chain (default: 'INPUT')\n* proto (default: 'tcp')\n* jump (default: 'ACCEPT')\n* comment (default: true)\n* interface\n* dport (which can be either a Fixnum - e.g. 80 - a String - e.g '9300:9400' - or an Array of Strings and Fixnums - e.g. [80, 443, '9200:9400' - in which case it uses the `multiport` iptables module])\n* source (which can be either a string or an array of strings)\n\nFor instance, the following is equivalent to the 'ssh' example above:\n\n    # Allow SSH\n    diptables_tcp_udp_rule 'ssh' do\n      dport 22\n    end\n\nIt also supports the same querying system as the `diptables_rule` resources: just give a query in the `source_query` attribute. Optionally, you can specify what method to call on the resulting nodes to get their IP address (by default `ipaddress`) in the `source_method` attribute. Finally, the `same_environment` attribute works the same as for `diptables_rule` resources.\nThe example below shows a fairly complex rule:\n\n    # Enable Elasticsearch servers to speak to each other\n    diptables_tcp_udp_rule 'es_internal' do\n        interface 'eth1'\n        source_query 'roles:es-server'\n        source_method 'internal_ipaddress'\n        same_environment true\n        dport [9200, '9300:9400']\n    end\n\n`diptables_policy` Resource\n---------------------------\n\nThat resource is very much the same as the `simple_iptables_policy` one from Dan Crosta's `simple-iptables` cookbook.\n\nIt defines a default action for a given iptables chain. This is usually used to switch from a default-accept policy to a default-reject policy. For instance:\n\n    # Reject packets other than those explicitly allowed\n    diptables_policy 'drop_by_default' do\n      policy 'DROP'\n    end\n\nSame as the `diptables_rules` resource, it defaults to the 'filter' table and the 'INPUT' chain, but you can redefine the `table` and `chain` attributes to whatever you want.\n\n\nChanges\n=======\n\n* 0.1.3 (Oct 8, 2013)\n    * Forcing the flush of the test chain, fixing a possible bug when a previous Chef-client run has been killed half-way through\n\n* 0.1.2 (Sep 23, 2013)\n    * Forcing the iptables reload action when disabling the `dry_run` mode\n    * Fixing possible name collision\n\n* 0.1.1 (Sep 23, 2013)\n    * Added the `comment` attribute\n\n* 0.1.0 (Sep 11, 2013)\n    * Initial release\n"
}