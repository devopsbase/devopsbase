{
  "name": "cloudformation Chef cookbook",
  "chef_cookbook_name": "cloudformation",
  "revision": "0.0.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/cloudformation",
    "https://supermarket.chef.io/cookbooks/cloudformation/download",
    "https://supermarket.chef.io/cookbooks/cloudformation/versions/0.0.1",
    "https://supermarket.chef.io/cookbooks/cloudformation/versions/0.0.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudformation/versions/0.0.1",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudformation",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudformation/versions/0.0.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Binding/Provider/Amazon/CloudFormation",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/cloudformation",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/cloudformation/versions/0.0.1/download",
  "deprecated": false,
  "created": "2013-01-10T20:52:47.000Z",
  "updated": "2013-01-10T20:52:49.000Z",
  "description": "Tools for integrating Chef with CloudFormation",
  "maintainer": {
    "name": "avishai",
    "email": "avishai@fewbytes.com"
  },
  "license": "Apache V2",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 1211835,
  "downloads_count_revision": 1211835,
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Description\n\nTools for integrating Chef with CloudFormation.\n\nThis cookbook contains Ohai plugin that reads cloudformation metadata, LWRP and handler for coordinating with\nCloudFormation WaitCondition.\n\n# Usage\n\nTo install the handler and Ohai plugin use the cloudformation::default recipe.\n\n## WaitCondition\nThe easiest way to signal wait condition on chef run completion is the cloudformation::signal recipe.\nThis recipe will activate the handler at the end of the Chef run. You will need to pass the Handler URL using CloudFormation resource metadata:\n\n    \"SomeAutoscalingGroup\": {\n      \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n      \"Properties\": {\n        ...\n      },\n      \"Metadata\": {\n        \"waitHandlers\": {\n          \"chef_run_finished\": {\"Ref\": \"SomeNodeInstalledWaitHandle\"}\n        }\n      }\n    },\n \nThe signal recipe reads the `node['cloudformation']['metadata']['waitHandlers']['chef_run_finished']` attribute and uses it to configure the signal handler.\n\nIf you want to singal a wait condition in the middle of the chef run, e.g. after some app was deployed, you can use the `cloudformation_signal` LWRP:\n\n    cloudformation_signal \"app deployed\" do\n        url node['cloudformation']['metadata']['waitHandlers']['app_deployed']\n        data \"app deployed succefully\"\n    end\n\nFor other attributes of the LWRP have a look at the LWRP resource file.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef_handler",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ohai",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/xml",
      "revision": "~> 1.1.0",
      "self_resolve": true
    }
  ]
}