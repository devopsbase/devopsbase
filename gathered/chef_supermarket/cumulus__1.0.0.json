{
  "name": "cumulus Chef cookbook",
  "chef_cookbook_name": "cumulus",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/cumulus",
    "https://supermarket.chef.io/cookbooks/cumulus/download",
    "https://supermarket.chef.io/cookbooks/cumulus/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/cumulus/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/cumulus/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/cumulus",
    "https://supermarket.chef.io/api/v1/cookbooks/cumulus/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Hardware/Network"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/cumulus",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/cumulus/versions/1.0.0/download",
  "deprecated": false,
  "created": "2015-03-31T09:47:54.385Z",
  "updated": "2015-10-30T06:06:41.621Z",
  "description": "Manage Cumulus Networks specific configuration",
  "maintainer": {
    "name": "cumulus",
    "email": "ce-ceng@cumulusnetworks.com"
  },
  "license": "Apache v2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 652987,
  "downloads_count_revision": 255383,
  "repository_url": "https://github.com/CumulusNetworks/cumulus-linux-chef-modules",
  "issues_url": "https://github.com/CumulusNetworks/cumulus-linux-chef-modules",
  "chef_source_url": "https://github.com/CumulusNetworks/cumulus-linux-chef-modules",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Cumulus Cookbook\n=============\nThis cookbook contains LWRP's and libraries for configring and managing components of Cumulus Linux in a modular manner.\n\n\nAttributes\n----------\n#### cumulus::default\n<table>\n  <tr>\n    <th>Key</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>['cumulus']['interfaces']['dir']</tt></td>\n    <td>String</td>\n    <td>Path to the network interfaces configuration fragments</td>\n    <td><tt>/etc/network/interfaces.d/</tt></td>\n  </tr>\n</table>\n\nUsage\n-----\n### Recipes\n-----\n#### cumulus::switchd\n\nProvides a Chef service resource for the Cumulus Networks switchd daemon.\n\nOn its own this recipe does nothing, but can be used with the Cumulus resource providers to restart switchd when the systemc configuration changes.\n\n#### cumulus::interfaces\n\nProvides a Chef service resource for the networking service, and configures the system for network interfaces configuration fragments.\n\nBy default the recipe creates the fragments directory specifed in `node['cumulus']['interfaces']['dir']` attribute, then uses `ifquery` to extract the current configuration for the `eth0` and `lo` interfaces. The current `/etc/network/interfaces` file is then over-written with one that uses configuration fragments.\n\nThis recipe is intended to be used with the `cumulus_interfaces_policy` and `cumulus_interface`, `cumulus_bridge` & `cumulus_bond` providers to manage your network interfaces. Used alone it will over-write any existing configuration in the `/etc/network/interfaces` file.\n\n#### cumulus::default\n\nIncludes both the `interfaces` & `switchd` recipes. \nJust include `cumulus` in your node's `run_list`:\n\n```json\n{\n  \"name\":\"my_node\",\n  \"run_list\": [\n    \"recipe[cumulus]\"\n  ]\n}\n```\n\n### Definitions\n----\n#### cumulus_ports\n\nConfigure the switch ports attributes.\n\n##### Parameters:\n\n* `name` - Name for the resource. This is not directly used by the provider.\n* `speed_10g` - Array of ports to be configured for 10GbE.\n* `speed_40g ` - Array of ports to be configured for 40GbE.\n* `speed_40_div_4` - Array of ports to be configured for 40GbE split to 4 x 10GbE.\n* `speed_4_by_10g` - Array of ports to be configured for 10GbE to be aggregated into 1 x 40GbE.\n\n##### Examples:\n\nConfigure `swp5` through `swp48` as 10GbE ports, `swp49` & `swp51` through `swp52` as 40GbE ports, `swp1` through `swp4` as 4 x 10GbE ports and `swp50` as 1 x 40GbE aggregate ports.\n\n```ruby\ncumulus_ports 'speeds' do\n  speed_10g ['swp5-48']\n  speed_40g ['swp49','swp51-52']\n  speed_40g_div_4 ['swp1-4']\n  speed_4_by_10g ['swp50']\n  notifies :restart, \"service[switchd]\"\nend\n```\n\n#### cumulus_license\n\nInstalls a Cumulus Linux license file on a Cumulus Linux switch.\n\nIf a license is already installed the provider will check that it has expired before replacing it. You can over-ride this behaviour with the `force` parameter.\n\nThe provider uses the `cl-license` command to validate and install the license file.\n\n##### Parameters:\n\n* `name` - Name for the resource. This is not directly used by the provider.\n* `source` - URL to the license file to be installed.\n* `force` - If `true`, skip the license expiration check and install the new license regardless of any current license. Default is `false`.\n\n##### Examples:\n\nInstall a license file if one is not already installed:\n\n```ruby\ncumulus_license 'example' do\n  source 'http://example.com/cumulus.lic'\n  notifies :restart, \"service[switchd]\"\nend\n```\n\nInstall a license file, over-writting any existing license:\n\n```ruby\ncumulus_license 'example' do\n  source 'http://example.com/cumulus.lic'\n  force true\n  notifies :restart, \"service[switchd]\"\nend\n```\n\n#### cumulus_interface_policy\n\nManage the interface configuration snippets. The provided list of interfaces is compared to the contents of the configuration directory. Any configuration files which exist on disk but are not in the list of interfaces are deleted. This allows you to ensure that no unmanaged interface configurations are installed.\n\nNote that this includes interfaces such as `eth0` and `lo`, so these interfaces must be included in the `allowed` list or strange things may happen.\n\n##### Parameters:\n\n* `name` - Name for the resource. This is not directly used by the provider.\n* `allowed` - Array of interface names that you are managing with Chef. Any configurations that are not listed will be deleted.\n* `location` - Location of the configuration snippets directory. Default is the directory set by the `node['cumulus']['interfaces']['dir']` attribute.\n\n##### Examples:\n\nManage `eth0`, `lo`, `swp1` though `swp32`, `bond0` through `bond25` and `br0`:\n\n````ruby\ncumulus_interface_policy 'policy' do\n  allowed ['eth0', 'lo', 'swp1-32', 'bond0-25', 'br0']\n  notifies :reload, \"service[networking]\"\nend\n````\n\n#### cumulus_interface\n\nManage a network interface using the ifupdown2 `ifquery` tool. The configuration for the interface will be written to a fragment under the interface configurations fragments directory.\n\nThe cumulus_interface provider can be used to manage front panel ports, L3 bridge sub-interfaces, L3 physical or bond sub-interfaces, L2/L3 trunks and access ports, the loopback and management ports. For bridge or bond interfaces, see cumulus_bridge or cumulus_bond, below.\n\n##### Parameters:\n\n* `name` - Identifier for the interface.\n* `ipv4` - Array of IPv4 addresses to be applied to the interface.\n* `ipv6` - Array of IPv6 addresses to be applied to the interface.\n* `alias_name` - Interface alias.\n* `addr_method` - Address assignment method, `dhcp` or `loopback`. Default is empty, I.e. no address method is set.\n* `speed` - The interface link speed.\n* `mtu` - The interface Maximum Transmission Unit (MTU)\n* `virtual_ip` - VRR virtual IP\n* `virtual_mac` - VRR virtual MAC\n* `vids` - Array of VLANs to be configured for a VLAN aware trunk interface.\n* `pvid` - Native VLAN for a VLAN aware trunk interface.\n* `location` - Location of the configuration snippets directory. Default is the directory set by the `node['cumulus']['interfaces']['dir']` attribute.\n* `mstpctl_portnetwork` - Enable bridge assurance on a VLAN aware trunk.\n* `mstpctl_bpduguard` - Enable BPDU guard on a VLAN aware trunk.\n\nThe following CLAG related attributes are also available. If CLAG is enabled, `clagd_enable`, `clagd_priority`, `clagd_peer_id` and `clagd_sys_mac` should all be provided:\n\n* `clagd_enable` - Enable the clagd daemon.\n* `clagd_priority` - Set the CLAG priority for this switch.\n* `clagd_peer_id` - Address of the CLAG peer switch.\n* `clagd_sys_mac` - CLAG system MAC. The MAC must be identical on both of the CLAG peers.\n* `clagd_args` - Any additional arguments to be passed to the clagd deamon.\n\n##### Examples:\n\nConfigure the loopback interface and the management interface `eth0` using DHCP:\n\n````ruby\ncumulus_interface 'lo' do\n  addr_method 'loopback'\nend\n\ncumulus_interface 'eth0' do\n  addr_method 'dhcp'\nend\n````\n\nConfigure `swp33` as a 1GbE port with a single IPv4 address:\n\n````ruby\ncumulus_interface 'swp33' do\n  ipv4 ['10.30.1.1/24']\n  link_speed 1000\nend\n````\n\nConfigure the interface `peerlink.4094` as the CLAG peer interface:\n\n````ruby\ncumulus_interface 'peerlink.4094' do\n  ipv4 ['10.100.1.0/31']\n  clagd_enable true\n  clagd_peer_ip '10.100.1.1/31'\n  clagd_sys_mac '11:11:22:22:33:33'\nend\n````\n\n#### cumulus_bond\n\nManage a network bond using the ifupdown2 `ifquery` tool. The configuration for the interface will be written to a fragment under the interface configurations fragments directory.\n\n##### Parameters:\n\n* `name` - Identifier for the bond interface.\n* `slaves` - Bond members.\n* `min_links` - Minimum number of slave links for the bond to be considered up. Default is `1`.\n* `mode` - Bond mode. Default is `802.3ad`\n* `miimon` - MII link monitoring interval. Default is `100`\n* `xmit_hash_policy` - TX hashing policy. Default is `layer3+4`\n* `lacp_rate` - LACP bond rate. Default is `1` I.e. fast LACP timeout.\n* `ipv4` - Array of IPv4 addresses to be applied to the interface.\n* `ipv6` - Array of IPv6 addresses to be applied to the interface.\n* `alias_name` - Interface alias.\n* `addr_method` - Address assignment method. May be `dhcp` or empty. Default is empty, I.e. no address method is set.\n* `mtu` - The interface Maximum Transmission Unit (MTU)\n* `virtual_ip` - VRR virtual IP\n* `virtual_mac` - VRR virtual MAC\n* `vids` - Array of VLANs to be configured for a VLAN aware trunk interface.\n* `pvid` - Native VLAN for a VLAN aware trunk interface.\n* `location` - Location of the configuration snippets directory. Default is the directory set by the `node['cumulus']['interfaces']['dir']` attribute.\n* `mstpctl_portnetwork` - Enable bridge assurance on a VLAN aware trunk.\n* `mstpctl_bpduguard` - Enable BPDU guard on a VLAN aware trunk.\n* `clag_id` - Define which bond is in the CLAG. The ID must be the same on both CLAG peers.\n\n##### Examples:\n\nCreate a bond called `peerlink` with the interfaces `swp1` and `swp2` as members:\n\n````ruby\ncumulus_bond 'peerlink' do\n  slaves ['swp1-2']\nend\n````\n\nCreate a bond called `bond0` with the interfaces `swp3` and `swp4` as members, using layer2+3 TX hashing and the CLAG ID set:\n\n````ruby\ncumulus_bond 'bond0' do\n  slaves ['swp3-4']\n  xmit_hash_policy 'layer2+3'\n  clag_id 1\nend\n````\n\n#### cumulus_bridge\n\nManage a bridge using the ifupdown2 `ifquery` tool. The configuration for the interface will be written to a fragment under the interface configurations fragments directory.\n\nThe provider supports both \"classic\" and \"VLAN aware\" bridge driver models.\n\n##### Parameters:\n\n* `name` - Identifier for the bridge interface.\n* `ipv4` - Array of IPv4 addresses to be applied to the interface.\n* `ipv6` - Array of IPv6 addresses to be applied to the interface.\n* `alias_name` - Interface alias.\n* `addr_method` - Address assignment method. May be `dhcp` or empty. Default is empty, I.e. no address method is set.\n* `mtu` - The interface Maximum Transmission Unit (MTU)\n* `stp` - Enable spanning tree. Default is `true`.\n* `mstpctl_treeprio` - Bridge tree root priority. Must be a multiple of 4096.\n* `vlan_aware` - Use the VLAN aware bridge driver. Default is `false`\n* `virtual_ip` - VRR virtual IP\n* `virtual_mac` - VRR virtual MAC\n* `vids` - Array of VLANs to be configured for a VLAN aware trunk interface.\n* `pvid` - Native VLAN for a VLAN aware trunk interface.\n* `location` - Location of the configuration snippets directory. Default is the directory set by the `node['cumulus']['interfaces']['dir']` attribute.\n\n##### Examples:\n\n\"Classic\" bridge driver:\n\n````ruby\ncumulus_bridge 'br10' do\n  ports ['swp11-12.1', 'swp32.1']\n  ipv4 ['10.1.1.1/24', '10.20.1.1/24']\n  ipv6 ['2001:db8:abcd::/48']\n  alias_name 'classic bridge'\n  mtu 9000\n  mstpctl_treeprio 4096\nend\n````\n\nVLAN aware bridge:\n\n````ruby\ncumulus_bridge 'bridge' do\n  vlan_aware true\n  ports ['peerlink', 'downlink', 'swp10']\n  vids ['1-4094']\n  pvid 1\n  stp true\n  mstpctl_treeprio 4096\nend\n````\n\n### Libraries\n----\n#### Util\n\nThe Cumulus::Util library is intended for use internally by the LWRPs. It is not intended for direct use by users, although the functions are fully documented. This library and the functions are subject to change at any time, with no notice.\n\nContributing\n------------\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\n* Author:: Cumulus Networks Inc.\n\n* Copyright:: 2015 Cumulus Networks Inc.\n\nRecipes are licensed under the Apache License, Version 2.0\n\nAll others are licensed under the GNU General Public License, Version 2.0\n\n---\n\n![Cumulus icon](http://cumulusnetworks.com/static/cumulus/img/logo_2014.png)\n\n### Cumulus Linux\n\nCumulus Linux is a software distribution that runs on top of industry standard\nnetworking hardware. It enables the latest Linux applications and automation\ntools on networking gear while delivering new levels of innovation and\nﬂexibility to the data center.\n\nFor further details please see: [cumulusnetworks.com](http://www.cumulusnetworks.com)"
}