{
  "name": "encrypted_attributes Chef cookbook",
  "chef_cookbook_name": "encrypted_attributes",
  "revision": "0.5.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/encrypted_attributes",
    "https://supermarket.chef.io/cookbooks/encrypted_attributes/download",
    "https://supermarket.chef.io/cookbooks/encrypted_attributes/versions/0.5.0",
    "https://supermarket.chef.io/cookbooks/encrypted_attributes/versions/0.5.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/encrypted_attributes/versions/0.5.0",
    "https://supermarket.chef.io/api/v1/cookbooks/encrypted_attributes",
    "https://supermarket.chef.io/api/v1/cookbooks/encrypted_attributes/versions/0.5.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Mode/CLI",
    "Type/Middleware/Runtime/JavaScript/Node.js"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/encrypted_attributes",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/encrypted_attributes/versions/0.5.0/download",
  "deprecated": false,
  "created": "2014-05-22T14:55:23.000Z",
  "updated": "2015-08-17T19:52:38.760Z",
  "description": "Installs and enables chef-encrypted-attributes gem: Chef plugin to add Node encrypted attributes support using client keys.",
  "maintainer": {
    "name": "zuazo",
    "email": "team@onddo.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 6624981,
  "downloads_count_revision": 595510,
  "repository_url": "https://github.com/onddo/encrypted_attributes-cookbook",
  "issues_url": "https://github.com/onddo/encrypted_attributes-cookbook/issues",
  "chef_source_url": "https://github.com/onddo/encrypted_attributes-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n[![Cookbook Version](https://img.shields.io/cookbook/v/encrypted_attributes.svg?style=flat)](https://supermarket.getchef.com/cookbooks/encrypted_attributes)\n[![Dependency Status](http://img.shields.io/gemnasium/onddo/encrypted_attributes-cookbook.svg?style=flat)](https://gemnasium.com/onddo/encrypted_attributes-cookbook)\n[![Code Climate](http://img.shields.io/codeclimate/github/onddo/encrypted_attributes-cookbook.svg?style=flat)](https://codeclimate.com/github/onddo/encrypted_attributes-cookbook)\n[![Build Status](http://img.shields.io/travis/onddo/encrypted_attributes-cookbook/0.5.0.svg?style=flat)](https://travis-ci.org/onddo/encrypted_attributes-cookbook)\n[![Coverage Status](http://img.shields.io/coveralls/onddo/encrypted_attributes-cookbook/0.5.0.svg?style=flat)](https://coveralls.io/r/onddo/encrypted_attributes-cookbook?branch=0.5.0)\n[![Inline docs](http://inch-ci.org/github/onddo/encrypted_attributes-cookbook.svg?branch=master&style=flat)](http://inch-ci.org/github/onddo/encrypted_attributes-cookbook)\n\nInstalls and enables [`chef-encrypted-attributes`](http://onddo.github.io/chef-encrypted-attributes/) gem: Chef plugin to add Node encrypted attributes support using client keys.\n\nRequirements\n============\n\n## Supported Platforms\n\nThis cookbook has been tested on the following platforms:\n\n* Amazon Linux\n* CentOS\n* Debian\n* Fedora\n* FreeBSD\n* RedHat\n* Ubuntu\n\nPlease, [let us know](https://github.com/onddo/encrypted_attributes-cookbook/issues/new?title=I%20have%20used%20it%20successfully%20on%20...) if you use it successfully on any other platform.\n\n## Required Cookbooks\n\n* [build-essential](https://supermarket.getchef.com/cookbooks/build-essential)\n\n## Required Applications\n\n* Ruby `1.9.3` or higher.\n\nSee also [the requirements of the `chef-encrypted-attributes` gem](http://onddo.github.io/chef-encrypted-attributes/#requirements).\n\nAttributes\n==========\n\n| Attribute                                          | Default        | Description                       |\n|----------------------------------------------------|:--------------:|-----------------------------------|\n| `node['encrypted_attributes']['version']`          | *calculated*   | chef-encrypted-attributes gem version to install. The latest stable version is installed by default. |\n| `node['encrypted_attributes']['mirror']`           | `nil`          | chef-encrypted-attributes mirror to download the gem from. For cases where you do not want to use RubyGems. |\n| `node['encrypted_attributes']['data_bag']['name']` | `'global'`     | chef-encrypted-attributes user keys, data bag name. |\n| `node['encrypted_attributes']['data_bag']['item']` | `'chef_users'` | chef-encrypted-attributes user keys, data bag item name. |\n| `node['dev_mode']`                                 | *calculated*   | If this is `true`, the `Chef::EncryptedAttributesHelpers` library will work with unencrypted attributes instead of encrypted attributes. For testing purposes. |\n\nRecipes\n=======\n\n## encrypted_attributes::default\n\nInstalls and loads the `chef-encrypted-attributes` gem.\n\n## encrypted_attributes::expose_key\n\nExposes the Client Public Key in attributes. This is a workaround for the Chef Clients Limitation problem. Should be included by all nodes that need to have read privileges on the attributes.\n\n## encrypted_attributes::users_data_bag\n\nConfigures `chef-encrypted-attributes` Chef User keys reading them from a data bag. This is a workaround for the [Chef Users Limitation problem](http://onddo.github.io/chef-encrypted-attributes/#chef-users-limitation).\n\nHelper Libraries\n================\n\nSee the [Chef::EncryptedAttributesHelpers documentation](http://www.rubydoc.info/github/onddo/encrypted_attributes-cookbook/0.5.0/Chef/EncryptedAttributesHelpers).\n\nUsage Examples\n==============\n\n## Including in a Cookbook Recipe\n\nYou can simply include it in a recipe:\n\n```ruby\ninclude_recipe 'encrypted_attributes'\n```\n\nDon't forget to include the `encrypted_attributes` cookbook as a dependency in the metadata.\n\n```ruby\n# metadata.rb\n[...]\n\ndepends 'encrypted_attributes'\n```\n\n## Including in the Run List\n\nAnother alternative is to include the default recipe in your *Run List*:\n\n```json\n{\n  \"name\": \"ftp.onddo.com\",\n  [...]\n  \"run_list\": [\n    [...]\n    \"recipe[encrypted_attributes]\"\n  ]\n}\n```\n\n## *encrypted_attributes::default* Recipe Usage Example\n\n```ruby\ninclude_recipe 'encrypted_attributes'\n\nself.class.send(:include, Opscode::OpenSSL::Password) # include the #secure_password method\n\nif Chef::EncryptedAttribute.exists?(node['myapp']['ftp_password'])\n  # update with the new keys\n  Chef::EncryptedAttribute.update(node.set['myapp']['ftp_password'])\n\n  # read the password\n  ftp_pass = Chef::EncryptedAttribute.load(node['myapp']['ftp_password'])\nelse\n  # create the password and save it\n  ftp_pass = secure_password\n  node.set['myapp']['ftp_password'] = Chef::EncryptedAttribute.create(ftp_pass)\nend\n\n# use `ftp_pass` for something here ...\n```\n\nYou can also use the `Chef::EncryptedAttributesHelpers` helpers to simplify its use:\n\n```ruby\ninclude_recipe 'encrypted_attributes'\nself.class.send(:include, Chef::EncryptedAttributesHelpers)\n\nftp_pass = encrypted_attribute_write(['myapp', 'ftp_password']) do\n  self.class.send(:include, Opscode::OpenSSL::Password)\n  secure_password\nend\n```\n\n**Note:** This example requires the [openssl](https://supermarket.getchef.com/cookbooks/openssl) cookbook.\n\nSee the [`chef-encrypted-attributes` gem Usage](http://onddo.github.io/chef-encrypted-attributes/#usage-in-recipes) section for more examples.\n\n## *encrypted_attributes::users_data_bag* Recipe Usage Example\n\nThis recipe should be called before using the encrypted attributes. It sets the `Chef::Config[:encrypted_attributes][:keys]` option reading the keys from a data bag.\n\nBefore using this recipe, you must create the required data bag:\n\n    $ knife data bag create global_data chef_users\n\nYou should create a data bag item with the following format:\n\n```json\n{\n  \"id\": \"chef_users\",\n  \"bob\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\",\n  \"alice\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\"\n}\n```\n\nThe keys can be set in *array of strings* format if you prefer:\n\n```json\n{\n  \"id\": \"chef_users\",\n  \"bob\": [\n    \"-----BEGIN PUBLIC KEY-----\",\n    \"MIIBIjANBgkqhkiG9w0BAQEFA...\",\n    ...\n  ],\n  \"alice\": [\n    \"-----BEGIN PUBLIC KEY-----\",\n    \"MIIBIjANBgkqhkiG9w0BAQEFA...\",\n    ...\n  ]\n}\n```\n\nYou can retrieve user public keys with `knife user show USER -a public_key -f json`.\n\nThen, you can use this data bag to configure the `Chef::Config[:encrypted_attributes][:keys]` `chef-encrypted-attributes` configuration only by calling the recipe:\n\n```ruby\nnode.default['encrypted_attributes']['data_bag']['name'] = 'global_data'\ninclude_recipe 'encrypted_attributes::users_data_bag'\n\n# if Chef::EncryptedAttribute.exist?(...)\n#   Chef::EncryptedAttribute.update(...)\n# else\n#   node.set[...][...] = Chef::EncryptedAttribute.create(...)\n# ...\n```\n\n**Note:** This data bag does not need to be encrypted, because it only stores public keys.\n\n### Using Chef::EncryptedAttributesHelpers to Encrypt MySQL Passwords\n\nIn the following example we use the official [mysql](https://supermarket.getchef.com/cookbooks/mysql) cookbook and its `mysql_service` resource to save the passwords encrypted in these attributes:\n\n* `node['myapp']['mysql']['server_root_password']`\n* `node['myapp']['mysql']['server_debian_password']`\n* `node['myapp']['mysql']['server_repl_password']`\n\n```ruby\n# Include the #secure_password method from the openssl cookbook\nself.class.send(:include, Opscode::OpenSSL::Password)\n\n# Install Encrypted Attributes gem\ninclude_recipe 'encrypted_attributes'\n\n# Include the Encrypted Attributes cookbook helpers\nself.class.send(:include, Chef::EncryptedAttributesHelpers)\n\n# We can use an attribute to enable or disable encryption (recommended for tests)\n# self.encrypted_attributes_enabled = node['myapp']['encrypt_attributes']\n\n# Encrypted Attributes will be generated randomly and saved in in the\n# node['myapp']['mysql'] attribute encrypted.\ndef generate_mysql_password(user)\n  key = \"server_#{user}_password\"\n  encrypted_attribute_write(['myapp', 'mysql', key]) { secure_password }\nend\n\n# Generate the encrypted passwords\nmysql_root_password = generate_mysql_password('root')\nmysql_debian_password = generate_mysql_password('debian')\nmysql_repl_password = generate_mysql_password('repl')\n\nmysql_service node['mysql']['service_name'] do\n  version node['mysql']['version']\n  port node['mysql']['port']\n  data_dir node['mysql']['data_dir']\n  server_root_password mysql_root_password\n  server_debian_password mysql_debian_password\n  server_repl_password mysql_repl_password\n  allow_remote_root node['mysql']['allow_remote_root']\n  remove_anonymous_users node['mysql']['remove_anonymous_users']\n  remove_test_database node['mysql']['remove_test_database']\n  root_network_acl node['mysql']['root_network_acl']\n  action :create\nend\n```\n\nTesting\n=======\n\nSee [TESTING.md](https://github.com/onddo/encrypted_attributes-cookbook/blob/master/TESTING.md).\n\nContributing\n============\n\nPlease do not hesitate to [open an issue](https://github.com/onddo/encrypted_attributes-cookbook/issues/new) with any questions or problems.\n\nSee [CONTRIBUTING.md](https://github.com/onddo/encrypted_attributes-cookbook/blob/master/CONTRIBUTING.md).\n\nTODO\n====\n\nSee [TODO.md](https://github.com/onddo/encrypted_attributes-cookbook/blob/master/TODO.md).\n\n\nLicense and Author\n=====================\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@onddo.com>)\n| **Copyright:**       | Copyright (c) 2014, Onddo Labs, SL. (www.onddo.com)\n| **License:**         | Apache License, Version 2.0\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    \n        http://www.apache.org/licenses/LICENSE-2.0\n    \n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "freebsd",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "encrypted_attributes::default": "Installs and loads the chef-encrypted-attributes gem.",
    "encrypted_attributes::expose_key": "Exposes the Client Public Key in attributes. This is a workaround for the Chef Clients Limitation problem. Should be included by all nodes that need to have read privileges on the attributes.",
    "encrypted_attributes::users_data_bag": "Configures chef-encrypted-attributes Chef User keys reading them from a data bag. This is a workaround for the Chef Users Limitation problem."
  },
  "parameters": {
    "encrypted_attributes/version": {
      "display_name": "chef-encrypted-attributes version",
      "description": "chef-encrypted-attributes gem version to install. The latest stable version is installed by default.",
      "type": "string",
      "required": "optional",
      "calculated": true,
      "choice": [],
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "encrypted_attributes/mirror": {
      "display_name": "chef-encrypted-attributes mirror",
      "description": "chef-encrypted-attributes mirror to download the gem from. For cases where you do not want to use rubygems.",
      "type": "string",
      "required": "optional",
      "default": "nil",
      "choice": [],
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "encrypted_attributes/data_bag/name": {
      "display_name": "chef-encrypted-attributes data bag name",
      "description": "chef-encrypted-attributes user keys data bag name.",
      "type": "string",
      "required": "optional",
      "default": "\"global\"",
      "choice": [],
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "encrypted_attributes/data_bag/item": {
      "display_name": "chef-encrypted-attributes data bag item name",
      "description": "chef-encrypted-attributes user keys data bag item name.",
      "type": "string",
      "required": "optional",
      "default": "\"chef_users\"",
      "choice": [],
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "dev_mode": {
      "display_name": "dev mode",
      "description": "If this is true, the Chef::EncryptedAttributesHelpers library will work with clear attributes instead of encrypted attributes.",
      "type": "string",
      "required": "optional",
      "calculated": true,
      "choice": [],
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}