{
  "name": "rackspacecloud Chef cookbook",
  "chef_cookbook_name": "rackspacecloud",
  "revision": "0.1.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/rackspacecloud",
    "https://supermarket.chef.io/cookbooks/rackspacecloud/download",
    "https://supermarket.chef.io/cookbooks/rackspacecloud/versions/0.1.4",
    "https://supermarket.chef.io/cookbooks/rackspacecloud/versions/0.1.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/rackspacecloud/versions/0.1.4",
    "https://supermarket.chef.io/api/v1/cookbooks/rackspacecloud",
    "https://supermarket.chef.io/api/v1/cookbooks/rackspacecloud/versions/0.1.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/rackspacecloud",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/rackspacecloud/versions/0.1.4/download",
  "deprecated": false,
  "created": "2014-12-04T16:46:25.796Z",
  "updated": "2016-02-15T14:33:21.453Z",
  "description": "Provides LWRP's for managing Rackspace Cloud resources.",
  "maintainer": {
    "name": "rackops",
    "email": "ryan.walker@rackspace.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 739779,
  "downloads_count_revision": 108387,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\nThis cookbook provides libraries, resources and providers to configure and manage Rackspace Cloud objects using the Rackspace Cloud API.\n\nCurrently supported resources:\n\n* Rackspace Cloud DNS ( rackspacecloud_record )\n* Rackspace Cloud Files ( rackspacecloud_file )\n* Rackspace Cloud Block storage ( rackspacecloud_cbs )\n* Rackspace Cloud Load Balancers ( rackspacecloud_lbaas)\n\nComing soon:\n\n* Rackspace Cloud Database\n* Rackspace Cloud Servers\n\nNot Included:\n\n* Rackspace Cloud Monitoring: See [cookbook-cloudmonitoring](https://github.com/rackspace-cookbooks/cookbook-cloudmonitoring)\n\nRequirements\n============\n\nRequires Chef 0.7.10 or higher for Lightweight Resource and Provider support. Chef 0.8+ is recommended. While this cookbook can be used in chef-solo mode, to gain the most flexibility, we recommend using chef-client with a Chef Server.\n\nA Rackspace Cloud account is required. The username and API key are used to authenticate with Rackspace Cloud.\n\nRackspace Credentials\n=====================\n\nIn order to manage Rackspace Cloud components, authentication credentials need to be available to the node. There are a number of ways to handle this, such as node attributes or roles. We recommend storing these in a databag item (Chef 0.8+), and loading them in the recipe where the resources are needed. To do so, make a data bag called ```rackspace``` with an item called ```cloud``` that has at least the following:\n\n```json\n{\n  \"id\":\"cloud\",\n  \"rackspace_username\": \"<RACKSPACE_USERNAME>\",\n  \"rackspace_api_key\": \"<RACKSPACE_APIKEY>\"\n}\n```\n\nYou may choose to provide your ```rackspace_auth_url``` and ```rackspace_auth_region``` in the data bag item as well, but they can generally be safely provided as attributes.\n\nThe values can be loaded in a recipe with:\n\n```ruby\nrackspace = data_bag_item(\"rackspace\", \"cloud\")\n```\n\nAnd to access the values:\n\n```ruby\nrackspace['rackspace_username']\nrackspace['rackspace_api_key']\n```\n\nThe data bag items can also be encrypted for extra security.\n\nRecipes\n=======\n\ndefault.rb\n----------\n\nThe default recipe installs the ```fog``` RubyGem, which this cookbook requires in order to work with the Rackspace API. Make sure that the default recipe is in the node or role ```run_list``` before any resources from this cookbook are used.\n\n\"run_list\": [\n  \"recipe[rackspacecloud]\"\n]\n\nThe ```gem_package``` is created as a Ruby Object and thus installed during the compile phase of the Chef run.\n\nLibraries\n=========\n\nThe cookbook has several library modules which can be included where necessary:\n\n```ruby\nOpscode::Rackspace\nOpscode::Rackspace::BlockStorage\nOpscode::Rackspace::DNS\nOpscode::Rackspace::Storage\n```\n\nResources and Providers\n=======================\n\nThis cookbook provides several resources and corresponding providers.\n\nrackspacecloud_record\n---------------------\n\nProvides add, modify, remove functionality for Rackspace Cloud DNS records. Example:\n\nAdd an A record:\n\n```ruby\nrackspacecloud_record \"chef.rackspace.com\" do\n  record \"n02.chef.rackspace.com\"\n  value \"10.1.2.3\"\n  type \"A\"\n  ttl 300\n  rackspace_username \"foo\"\n  rackspace_api_key \"nnnnnnnnnnn\"\n  action :add\nend\n```\nAdd a CNAME:\n\n```ruby\nrackspacecloud_record \"chef.rackspace.com\" do\n  record \"n02.chef.rackspace.com\"\n  value \"api.chef.rackspace.com\"\n  type \"CNAME\"\n  ttl 300\n  rackspace_username \"foo\"\n  rackspace_api_key \"nnnnnnnnnnn\"\n  action :add\nend\n```\nUpdate a record:\n\n```ruby\nrackspacecloud_record \"chef.rackspace.com\" do\n  record \"n02.chef.rackspace.com\"\n  value \"10.1.2.4\"\n  type \"A\"\n  ttl 300\n  rackspace_username \"foo\"\n  rackspace_api_key \"nnnnnnnnnnn\"\n  action :update\nend\n```\n\n### Attributes:\n* ```record```: The name of the record being created/deleted/modified.\n* ```value```: The value to set the record to.\n* ```type```: The type of record to create. Default is ```A```.\n* ```ttl```: The TTL for the record. Default is ```300```.\n* ```rackspace_username```: The Rackspace API username. Can be retrieved from data bag or node attributes.\n* ```rackspace_api_key```: The Rackspace API key. Can be retrieved from data bag or node attributes.\n* ```action```: ```:add```, ```:delete```, ```:update```. Default is ```:add```.\n\nrackspacecloud_file\n-------------------\n\nRetrieves/Stores files from/to Rackspace Cloud Files. Example:\n\n```ruby\nrackspacecloud_file \"/usr/share/tomcat5/webapps/demo.war\" do\n  directory \"wars\"\n  rackspace_username \"foo\"\n  rackspace_api_key \"nnnnnnnnnnn\"\n  rackspace_region \"ORD\"\n  binmode true\n  action :create\nend\n```\n\n```ruby\nrackspacecloud_file \"/usr/share/tomcat5/webapps/demo.war\" do\n  directory \"wars\"\n  rackspace_username \"foo\"\n  rackspace_api_key \"nnnnnnnnnnn\"\n  rackspace_region \"ORD\"\n  binmode true\n  action :upload\nend\n```\n\n### Attributes:\n* ```directory```: The directory on Rackspace Cloud Files where the file can be found or should be uploaded to.\n* ```rackspace_username```: The Rackspace API username. Can be retrieved from data bag or node attributes.\n* ```rackspace_api_key```: The Rackspace API key. Can be retrieved from data bag or node attributes.\n* ```rackspace_region```: The Rackspace Cloud Files region (ORD, DFW, HKG, IAD, etc.)\n* ```binmode```: ```true``` or ```false```. Default is ```false```. Setting this to ```true``` will download the file in binary mode.\n* ```action```: ```:create```, ```:create_if_missing```, ```:upload```. Default is ```:create```.\n\nrackspacecloud_lbaas\n-------------------\n\nAdds and removes nodes from specified load balancer. Example:\n\n```ruby\nrackspacecloud_lbaas \"loadBalancerIdGoesHere\" do\n  action :add_node\n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ORD\"\n  node_address node[:rackspace][:local_ipv4]\nend\n```\n\n### Attributes:\n* ```load_balancer_id```: Id of the load balancer to add/remove nodes on.\n* ```port```: Port the load balancer will route traffic to. (default is 80)\n* ```node_address```: The IP address of the node you are adding or removing\n* ```condition```: Either ENABLED or DISABLED (default is enabled)\n* ```rackspace_username```: The Rackspace API username. Can be retrieved from data bag or node attributes.\n* ```rackspace_api_key```: The Rackspace API key. Can be retrieved from data bag or node attributes.\n* ```rackspace_region```: Region for load balancer (ORD, DFW, HKG, IAD, etc.)\n* ```action```: ```:add_node``` or ```:remove_node```. Default is ```:add_node```.\n\n\nrackspacecloud_cbs\n---------------------\n\nProvides functionality to manage storage volumes and server attachments for Rackspace Cloud Block Storage including creating, attaching, detaching and deleting volumes.  All actions performed are idempotent.\n\n### Actions:\n\n```:create_volume``` - Creates a new storage volume with the given name.  If a volume with the given name exists no action will be taken.  This action does not accept volume_id as a parameter.\n\n```:attach_volume``` - Attaches an existing storage volume to the current node.  If the volume is already attached no action will be taken.  If the volme is attached to another server, an exception will be raised. The volumes may be attached by name or by volume_id.\n\n```:create_and_attach``` - The default action.  Combines create_volume and attach_volume into one action.  This action does not accept volume_id as a parameter.\n\n```:detach_volume``` - Detaches a volume from an existing server.  If the given volume is not attached no action is performed.  If the volume is attached to another server, an exception will be raised.  The volume may be detached by name or volume_id.\n\n```:delete_volume``` - Deletes an existing storage volume.  A volume must be detached in order to be deleted.  If the given volume does not exist no action will be taken.  The volume may be identified by name or volume_id.\n\n```:detach_and_delete``` - Combines detach_volume and delete_volume into a single action.  Volume may be identified by name or volume_id.\n\n### Examples:\n\nCreate and attach a 100GB SSD storage volume:\n\n```ruby\nrackspacecloud_cbs \"myvolume-01\" do\n  type \"SSD\"\n  size 100\n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ord\"\n  action :create_and_attach\nend\n```\n\nCreate a 200GB SATA volume:\n\n```ruby\nrackspacecloud_cbs \"myvolume-02\" do\n  type \"SATA\"\n  size 200\n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ord\"\n  action :create_volume\nend\n```\n\nAttach a volume by volume_id:\n\n```ruby\nrackspacecloud_cbs \"myvolume-02\" do\n  volume_id \"74fe8714-fd92-4d07-a6a2-ddd15ed09f79\"\n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ord\"\n  action :attach_volume\nend\n```\n\nDetach a volume by name:\n\n```ruby\nrackspacecloud_cbs \"myvolume-02\" do  \n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ord\"\n  action :detach_volume\nend\n```\n\nDetach and delete volume by id:\n\n```ruby\nrackspacecloud_cbs \"myvolume-01\" do\n  volume_id \"74fe8714-fd92-4d07-a6a2-ddd15ed09f79\"\n  rackspace_username \"userName\"\n  rackspace_api_key \"apiKey\"\n  rackspace_region \"ord\"\n  action :detach_and_delete\nend\n```\n\n### Node Attributes:\n\nDuring the provider run, a node attribute is updated with a list of hashes describing the attached volumes.  The list of attached volumes is pulled from the compute and storage api so it will include all attached volumes whether created with this recipe or not.  The data is in the following format:\n\n```ruby\nnode[:rackspacecloud][:cbs][:attached_volumes] = [\n  {\n    :device => '/dev/xvde',\n    :size => 100,\n    :volume_id => \"4300a4b7-1b66-4d44-b18d-de1b3236b001\",\n    :display_name => \"myvolume-01\",\n    :volume_type => \"SSD\"\n  },\n  {\n    :device => \"/dev/xvdb\",\n    :size => 200,\n    :volume_id => \"642a8a7b-cb31-479b-8e4c-0158a2be3519\",\n    :display_name => \"myvolume-02\",\n    :volume_type => \"SATA\"\n  }\n]\n```\n\n### Example Recipe with LVM:\n\nBelow is an example of a simple recipe that creates 2 100GB cloud block storage volumes and uses LVM to create a logical volume group, format the filesystem, and mount at /var/log.  This example uses the [Opscode LVM recipe](https://github.com/opscode-cookbooks/lvm).\n\n```ruby\ninclude_recipe 'rackspacecloud'\ninclude_recipe 'lvm'\n\nrackspace = data_bag_item(\"rackspace\", \"cloud\")\nrackspace_username = rackspace[\"rackspace_username\"]\nrackspace_api_key = rackspace[\"rackspace_api_key\"]\n\n(1..2).each do |vol_number|\n  rackspacecloud_cbs \"#{node[:hostname]}-#{vol_number}\" do\n    type \"SATA\"\n    size 100\n    rackspace_username rackspace_username\n    rackspace_api_key rackspace_api_key\n    rackspace_region \"#{node[:rackspace][:cloud][:region]}\"\n    action :create_and_attach\n  end\nend\n\n#use lazy attribute evaluation to get attachment data at execution time\nlvm_volume_group 'vg00' do\n  not_if {node[:rackspacecloud][:cbs][:attached_volumes].empty? }\n  physical_volumes lazy {node[:rackspacecloud][:cbs][:attached_volumes].collect{|attachment| attachment[\"device\"]}}\n  logical_volume 'blockstorage' do\n    size        '100%VG'\n    filesystem  'ext4'\n    mount_point '/var/log'\n  end\n end\n```\n\n### Attributes:\n* ```name```: Name of the volume to perform operations with.\n* ```volume_id```: The volume_id of the volume to attach, detach, or delete. This option is not valid for actions that create volumes.\n* ```type```: The type of storage device, either [SSD, SATA]. Default is SATA.\n* ```size```: The size in GB of strage device.  Default is 100.\n* ```rackspace_username```: The Rackspace API username. Can be retrieved from data bag or node attributes.\n* ```rackspace_api_key```: The Rackspace API key. Can be retrieved from data bag or node attributes.\n* ```action```: ```:create_volume```, ```:attach_volume```, ```:create_and_attach```, ```:detach_volume```, ```:delete_volume```, ```:detach_and_delete```. Default is ```:create_and_attach```.\n\n\nLicense and Author\n==================\n\nAuthor:: Ryan Walker (<ryan.walker@rackspace.com>)\nAuthor:: Julian Dunn (<jdunn@opscode.com>)\nAuthor:: Michael Goetz (<mpgoetz@opscode.com>)\nAuthor:: Zack Feldstein (<zack.feldstein@rackspace.com>)\nAuthor:: Steven Gonzales (<steven.gonzales@rackspace.com>)\n\n\nCopyright 2013, Rackspace Hosting\nCopyright 2013, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/xml",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}