{
  "name": "berkshelf-api Chef cookbook",
  "chef_cookbook_name": "berkshelf-api",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/berkshelf-api",
    "https://supermarket.chef.io/cookbooks/berkshelf-api/download",
    "https://supermarket.chef.io/cookbooks/berkshelf-api/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/berkshelf-api/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/berkshelf-api/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/berkshelf-api",
    "https://supermarket.chef.io/api/v1/cookbooks/berkshelf-api/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Mode/API"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/berkshelf-api",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/berkshelf-api/versions/1.0.0/download",
  "deprecated": false,
  "created": "2014-01-11T09:36:45.000Z",
  "updated": "2014-10-24T23:46:52.504Z",
  "description": "Installs a Berkshelf API server",
  "maintainer": {
    "name": "coderanger",
    "email": "noah@coderanger.net"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 3866022,
  "downloads_count_revision": 1205937,
  "repository_url": "https://github.com/poise/berkshelf-api",
  "issues_url": "https://github.com/poise/berkshelf-api",
  "chef_source_url": "https://github.com/poise/berkshelf-api",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "berkshelf-api\n=============\n\n[![Build Status](https://travis-ci.org/poise/berkshelf-api.png?branch=master)](https://travis-ci.org/poise/berkshelf-api)\n\nQuick Start\n-----------\n\nApply the following role to your server (making sure both cookbooks are available):\n\n```json\n{\n  \"name\": \"berkshelf-api\",\n  \"description\": \"\",\n  \"json_class\": \"Chef::Role\",\n  \"default_attributes\": {\n  },\n  \"override_attributes\": {\n  },\n  \"chef_type\": \"role\",\n  \"run_list\": [\n      \"recipe[nginx]\",\n      \"recipe[berkshelf-api]\",\n  ],\n  \"env_run_lists\": {\n  }\n}\n```\n\nAttributes\n----------\n\n* `node['berkshelf-api']['path']` – The directory to hold the configuration and cache. *(default: /etc/berkshelf)*\n* `node['berkshelf-api']['version']` – Version or git reference to install. *(default: master)*\n* `node['berkshelf-api']['port']` – Port to listen on. *(default: 26200)*\n* `node['berkshelf-api']['user']` – User to run as. *(default: berkshelf)*\n* `node['berkshelf-api']['group']` – Group to run as. *(default: berkshelf)*\n* `node['berkshelf-api']['install_path']` – The directory to clone into if installing from git. *(default: /opt/berkshelf)*\n* `node['berkshelf-api']['git_repository']` – URI to clone from if installing from git. *(default: https://github.com/berkshelf/berkshelf-api.git)*\n* `node['berkshelf-api']['config']` – A hash of configuration data to be added to config.json. *(default: {})*\n* `node['berkshelf-api']['opscode_url']` – URL to use for the default Community Site endpoint. *(default: https://community.opscode.com/api/v1)*\n* `node['berkshelf-api']['proxy']['enabled']` – Install an HTTP proxy. *(default: if the apache2 or nginx recipe is in the run list)*\n* `node['berkshelf-api']['proxy']['listen_ports']` – HTTP ports for the proxy. *(default: [80])*\n* `node['berkshelf-api']['proxy']['hostname']` – Server name for the proxy. *(default: node['fqdn'])*\n* `node['berkshelf-api']['proxy']['ssl_enabled']` – Configure HTTPS support. *(default: false)*\n* `node['berkshelf-api']['proxy']['ssl_redirect_http']` – Redirect from http: to https: if SSL is enabled. *(default: true)*\n* `node['berkshelf-api']['proxy']['ssl_listen_ports']` – HTTPS ports for the proxy. *(default: [443])*\n* `node['berkshelf-api']['proxy']['ssl_path']` – Base path for SSL-related files. *(default: /etc/berkshelf/ssl)*\n* `node['berkshelf-api']['proxy']['ssl_cert_path']` – Path to the SSL certificate. *(default: /etc/berkshelf/ssl/berkshelf-api.pem)*\n* `node['berkshelf-api']['proxy']['ssl_key_path']` – Path to the SSL private key. *(default: /etc/berkshelf/ssl/berkshelf-api.key)*\n* `node['berkshelf-api']['proxy']['provider']` – Proxy provider to use. One of: nginx, apache. *(default: auto-detect based on run list)*\n\nResources\n---------\n\n### berkshelf_api\n\nThe `berkshelf_api` resource defines a berkshelf-api server installation.\n\n```ruby\nberkshelf_api '/etc/berks' do\n  version '1.1.0'\n  config do\n    endpoints [{type: 'opscode'}]\n  end\nend\n```\n\nAll resource attributes have the same meaning as the node attributes above and\ndefault to the node attribute if not specified.\n\n* `path` – The directory to hold the configuration and cache. *(name_attribute)*\n* `version` – Version or git reference to install. *(default: node['berkshelf-api']['version'])*\n* `port` – Port to listen on. *(default: node['berkshelf-api']['port'])*\n* `user` – User to run as. *(default: node['berkshelf-api']['user'])*\n* `group` – Group to run as. *(default: node['berkshelf-api']['group'])*\n* `install_path` – The directory to clone into if installing from git. *(default: node['berkshelf-api']['install_path'])*\n* `git_repository` – URI to clone from if installing from git. *(default: node['berkshelf-api']['git_repository'] if version is a git reference)*\n* `config` – A hash or block of configuration data to be added to config.json.\n\n### berkshelf_api_opscode_endpoint\n\nThe `berkshelf_api_opscode_endpoint` defines a community site endpoint for a\n`berkshelf_api` resource.\n\n```ruby\nberkshelf_api_opscode_endpoint 'https://community.opscode.com/api/v1'\n```\n\nIt can also be used via the shorter, nested syntax:\n\n```ruby\nberkshelf_api '/etc/berks' do\n  opscode_endpoint # Defaults to node['berkshelf-api']['opscode_url'] if no URL is given\n  opscode_endpoint 'http://example.com/cookbooks'\nend\n```\n\n* `url` – URL for the community site. *(name_attribute)*\n\n### berkshelf_api_chef_server_endpoint\n\nThe `berkshelf_api_chef_server_endpoint` defines a chef server endpoint for a\n`berkshelf_api` resource.\n\n```ruby\nberkshelf_api_chef_server_endpoint 'https://api.opscode.com/organizations/example' do\n  client_name 'berks'\n  client_key <<EOH\n-----BEGIN RSA PRIVATE KEY-----\n[...]\n-----END RSA PRIVATE KEY-----\nEOH\nend\n```\n\nIt can also be used via the shorter, nested syntax:\n\n```ruby\nberkshelf_api '/etc/berks' do\n  chef_server_endpoint 'https://api.opscode.com/organizations/example', 'berks', '[...]'\n  chef_server_endpoint 'https://api.opscode.com/organizations/example' do\n    client_name 'berks'\n    client_key <<EOH\n-----BEGIN RSA PRIVATE KEY-----\n[...]\n-----END RSA PRIVATE KEY-----\nEOH\n  end\nend\n```\n\n* `url` – URL for the chef server. *(name_attribute)*\n* `client_name` – Chef API client username. *(required)*\n* `client_key` – Chef API client private key. *(required)*\n\n### berkshelf_api_auto_chef_server_endpoint\n\nThe `berkshelf_api_chef_server_endpoint` defines a chef server endpoint for a\n`berkshelf_api` resource that uses the same configuration as the active chef-client.\n\n```ruby\nberkshelf_api_auto_chef_server_endpoint ''\n```\n\nIt can also be used via the shorter, nested syntax:\n\n```ruby\nberkshelf_api '/etc/berks' do\n  auto_chef_server_endpoint\nend\n```\n\n### berkshelf_api_github_endpoint\n\nThe `berkshelf_api_github_endpoint` defines a Github endpoint for a\n`berkshelf_api` resource.\n\n```ruby\nberkshelf_api_github_endpoint 'myorg' do\n  api_token '[...]'\nend\n```\n\nIt can also be used via the shorter, nested syntax:\n\n```ruby\nberkshelf_api '/etc/berks' do\n  github_endpoint 'myorg', '[...]'\n  github_endpoint 'myorg' do\n    api_token '[...]'\n  end\nend\n```\n\n* `organization` – Github organization to scan. *(name_attribute)*\n* `api_token` – Github API token. *(required)*\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/git",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/poise",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/poise-ruby",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}