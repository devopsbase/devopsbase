{
  "name": "serf Chef cookbook",
  "chef_cookbook_name": "serf",
  "revision": "0.7.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/serf",
    "https://supermarket.chef.io/cookbooks/serf/download",
    "https://supermarket.chef.io/cookbooks/serf/versions/0.7.1",
    "https://supermarket.chef.io/cookbooks/serf/versions/0.7.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/serf/versions/0.7.1",
    "https://supermarket.chef.io/api/v1/cookbooks/serf",
    "https://supermarket.chef.io/api/v1/cookbooks/serf/versions/0.7.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/serf",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/serf/versions/0.7.1/download",
  "deprecated": false,
  "created": "2013-11-05T02:10:14.000Z",
  "updated": "2016-04-06T18:42:20.033Z",
  "description": "Installs/Configures serf",
  "maintainer": {
    "name": "bbaugher",
    "email": "Bryan.Baugher@Cerner.com"
  },
  "license": "The MIT License (MIT)",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 4,
  "downloads_count": 14553271,
  "downloads_count_revision": 1044774,
  "repository_url": "https://github.com/bbaugher/serf",
  "issues_url": "https://github.com/bbaugher/serf/issues",
  "chef_source_url": "https://github.com/bbaugher/serf",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Serf Cookbook\n=============\n\n[![Cookbook Version](https://img.shields.io/cookbook/v/serf.svg)](https://community.opscode.com/cookbooks/serf)\n\nInstalls and configures [Serf](http://www.serfdom.io/).\n\nView the [Change Log](https://github.com/bbaugher/serf/blob/master/CHANGELOG.md) to see what has changed.\n\nSupports\n--------\n\n * Serf >= 0.3 (uses config reloading via SIGHUP)\n * Linux OS'es\n\nUsage\n-----\n\nUsing the default attributes will setup a single Serf agent in its own cluster.\n\nIf you already have a Serf agent (or cluster) running specify the array of address(es) with the\n`node[\"serf\"][\"agent\"][\"start_join\"]` attribute so the agent will join the cluster(s).\n\nWhat does the installation look like\n------------------------------------\n\nBy default the installation will look like,\n\n    serf | /usr/bin/serf  - The serf binary command\n    /opt/serf/*           - All of serf's files (config, binaries, event handlers, logs...)\n    /etc/serf/*           - Link to all of serf's config files\n    /var/log/serf/*       - Link to all of serf's log files\n    /etc/init.d/serf      - An init.d script to start/stop the agent. You can use service\n                    serf [start|stop|restart|status] instead\n\nEvent Handlers\n--------------\n\nAn [event handler](http://www.serfdom.io/docs/agent/event-handlers.html) is a script that is run when the Serf agent\nrecieves an event (member-join, member-leave, member-failed, or user).\n\nYou can configure an event handler via the attribute `node[\"serf\"][\"event_handlers\"]`. The format of the `event_handlers`\nattribute is the following,\n\n    [\n      {\n        \"url\" : \"URL\", # REQUIRED\n        \"event_type\" : \"EVENT_TYPE\" #OPTIONAL\n      },\n      ...\n    ]\n\nChef will download the event handler and ensure it stays up to date. It will also add it to the serf agent's list of event handlers.\nEach event handler must have a unique name.\n\nThe `event_type` value filters the event handler for certain events. Use [this doc](http://www.serfdom.io/docs/agent/event-handlers.html)\nto figure out the `event_type` you need.\n\nIt is also possible to add event handlers via the attribute `node[\"serf\"][\"agent\"][\"event_handlers\"]`. The `node[\"serf\"][\"event_handlers\"]`\nhelps with the deployment of the event handler file itself and will add the event handler to the `node[\"serf\"][\"agent\"][\"event_handlers\"]`\nattribute.\n\nResources and Providers\n-----------------------\n### `serf_event`\nThe `serf_event` LWRP resource dispatches a custom user event into a Serf cluster by executing serf CLI.\n\n#### Actions\n- :create: Executes serf cli with parameters required to send an event.\n\n#### Attribute Parameters\n- event_name: name attribute. The name of the event to send\n- payload: Optional event's payload. Any string you want.\n- coalesce: Coalesce option. `true` by default\n- rpc_addr: Address of serf node to connect for event dispatching. Local node by default.\n- rpc_auth: RPC auth token. If not set, `node['serf']['agent']['rpc_auth']` will be used.\n\n#### Example\n\nSend custom user event\n\n```ruby\nserf_event 'deploy' do\n  payload '1234567890'\n  rpc_auth 'secret'\nend\n```\n\nIt would look like this in serf log:\n\n```\n2014/07/08 22:53:07 [INFO] agent: Received event: user-event: deploy\nEvent Info:\n    Coalesce: true\n    Event: \"user\"\n    LTime: 7\n    Name: \"deploy\"\n    Payload: []byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}\n```\n\nAttributes\n----------\n\n * `node[\"serf\"][\"user\"]` : The user that owns the serf installation (default=\"serf\")\n * `node[\"serf\"][\"group\"]` : The group that owns the serf installation (default=\"serf\")\n * `node[\"serf\"][\"agent\"][*]` : A hash of key/values that will be added to the agent's config file (default={}). Use [this doc](http://www.serfdom.io/docs/agent/options.html) to configure the agent.\n * `node[\"serf\"][\"event_handlers\"]` : An array of hashes that represent [event handlers](http://www.serfdom.io/docs/agent/event-handlers.html). See 'Event Handlers' above for more details (default=[])\n * `node[\"serf\"][\"base_binary_url\"]` : The base url used to download the binary zip (default=\"https://dl.bintray.com/mitchellh/serf/\")\n * `node[\"serf\"][\"version\"]` : The version of the Serf agent to install (default=\"0.3.0\")\n * `node[\"serf\"][\"arch\"]` : The architecture of the Serf agent to install (default=`kernel['machine'] =~ /x86_64/ ? \"amd64\" : \"386\"`)\n * `node[\"serf\"][\"binary_url\"]` : The full binary url of the Serf agent. If you override this value make sure to provide a valid and up to date value for `node[\"serf\"][\"version\"]` (default=`File.join node[\"serf\"][\"base_binary_url\"], \"#{node[\"serf\"][\"version\"]}_linux_#{node[\"serf\"][\"arch\"]}.zip\"`)\n * `node[\"serf\"][\"base_directory\"]` : The base directory Serf should be installed into (default=\"/opt/serf\")\n * `node[\"serf\"][\"log_directory\"]` : The directory of the Serf agent logs (default=\"/var/log/serf\")\n * `node[\"serf\"][\"conf_directory\"]` : The directory of the Serf agent config (default=\"/etc/serf\")\n * `node[\"serf\"][\"on_config_change\"]` : An action to be performed if config is changed (default=:reload)\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}