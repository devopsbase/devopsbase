{
  "name": "audit Chef cookbook",
  "chef_cookbook_name": "audit",
  "revision": "0.14.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/audit",
    "https://supermarket.chef.io/cookbooks/audit/download",
    "https://supermarket.chef.io/cookbooks/audit/versions/0.14.4",
    "https://supermarket.chef.io/cookbooks/audit/versions/0.14.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/audit/versions/0.14.4",
    "https://supermarket.chef.io/api/v1/cookbooks/audit",
    "https://supermarket.chef.io/api/v1/cookbooks/audit/versions/0.14.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Version Control/Git"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/audit",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/audit/versions/0.14.4/download",
  "deprecated": false,
  "created": "2016-04-01T11:46:39.466Z",
  "updated": "2016-10-12T13:12:21.278Z",
  "description": "Allows for fetching and executing compliance profiles, and reporting its results",
  "maintainer": {
    "name": "apop",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 7,
  "downloads_count": 2768,
  "downloads_count_revision": 184,
  "repository_url": "https://github.com/chef-cookbooks/audit",
  "issues_url": "https://github.com/chef-cookbooks/audit/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/audit",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# audit cookbook\n[![Cookbook Version](http://img.shields.io/cookbook/v/audit.svg)][cookbook] [![Build Status](http://img.shields.io/travis/chef-cookbooks/audit.svg)][travis]\n\n## Requirements\n\n### Chef\n- Chef Client >=12.5.1\n\nThe `audit` cookbook allows you to run Chef Compliance profiles as part of a Chef Client run. It downloads configured profiles from Chef Compliance and reports audit runs to Chef Compliance.\n\n### Chef Compliance and InSpec\n\nUsing the `inspec_version` attribute, please use the following `InSpec` version based on your Chef Compliance version:\n\n| Chef Compliance version    | InSpec version             | Audit Cookbook  version    |\n|----------------------------|----------------------------|----------------------------|\n| Less or equal to 1.1.23    | 0.20.1                     | 0.7.0                      |\n| Greater than 1.1.23        | Greater or equal to 0.22.1 | 0.8.0                      |\n\n\nYou can see all publicly available InSpec versions [here](https://rubygems.org/gems/inspec/versions)\n\n## Overview\n\nThe `audit` support three scenarios:\n\n### Chef Server Integration\n\nThe first scenario requires at least **Chef Compliance 1.0** and the **[Chef Server extensions for Compliance](https://docs.chef.io/integrate_compliance_chef_server.html)**. The architecture looks as following:\n\n```\n ┌──────────────────────┐    ┌──────────────────────┐    ┌─────────────────────┐\n │     Chef Client      │    │     Chef Server      │    │   Chef Compliance   │\n │                      │    │                      │    │                     │\n │ ┌──────────────────┐ │    │                      │    │                     │\n │ │                  │◀┼────┼──────────────────────┼────│  Profiles           │\n │ │  audit cookbook  │ │    │                      │    │                     │\n │ │                  │─┼────┼──────────────────────┼───▶│  Reports            │\n │ └──────────────────┘ │    │                      │    │                     │\n │                      │    │                      │    │                     │\n └──────────────────────┘    └──────────────────────┘    └─────────────────────┘\n```\n\n### Chef Compliance Integration\n\nThe second scenario supports a direct connection with Chef Compliance. It also supports chef-solo mode.\n\n```\n ┌──────────────────────┐                                ┌─────────────────────┐\n │     Chef Client      │                                │   Chef Compliance   │\n │                      │                                │                     │\n │ ┌──────────────────┐ │                                │                     │\n │ │                  │◀┼────────────────────────────────│  Profiles           │\n │ │  audit cookbook  │ │                                │                     │\n │ │                  │─┼───────────────────────────────▶│  Reports            │\n │ └──────────────────┘ │                                │                     │\n │                      │                                │                     │\n └──────────────────────┘                                └─────────────────────┘\n```\n\n### Chef Visibility Integration\n\nThe third scenario supports direct reporting to Chef Visibility. It also supports chef-solo mode.\n\n```\n ┌──────────────────────┐                                ┌─────────────────────┐\n │     Chef Client      │     ┌───────────────────────┐  │   Chef Visibility   │\n │                      │  ┌──│ Profiles(Supermarket, │  │                     │\n │ ┌──────────────────┐ │  │  │ Github, local, etc)   │  │                     │\n │ │                  │◀┼──┘  └───────────────────────┘  │                     │\n │ │  audit cookbook  │ │                                │                     │\n │ │                  │─┼───────────────────────────────▶│  Reports            │\n │ └──────────────────┘ │                                │                     │\n │                      │                                │                     │\n └──────────────────────┘                                └─────────────────────┘\n```\n\n\n## Usage\n\nThe audit cookbook needs to be configured for each node where the `chef-client` runs. The `audit` cookbook can be reused for all nodes, all node-specific configuration is done via Chef attributes.\n\n### Upload cookbook to Chef Server\n\nThe `audit` cookbook is available at [Chef Supermarket](https://supermarket.chef.io/cookbooks/audit). This allows you to reuse your existing workflow for managing cookbooks in your runlist.\n\nIf you want to upload the cookbook from git, use the following commands:\n\n```\nmkdir chef-cookbooks\ncd chef-cookbooks\ngit clone https://github.com/chef-cookbooks/audit\ncd ..\nknife cookbook upload audit -o ./chef-cookbooks\n```\n\nPlease ensure that `chef-cookbooks` is the parent directory of `audit` cookbook.\n\n### Configure node\n\nOnce the cookbook is available in Chef Server, you need to add the `audit::default` recipe to the run-list of each node. The profiles are selected via the `node['audit']['profiles']` attribute. For example you can define the attribute in a JSON-based role or environment file like this:\n\n```ruby\naudit = {\n  \"profiles\" => {\n    # org / profile name from Chef Compliance\n    'base/linux' => true,\n    # supermarket url\n    'brewinc/ssh-hardening' => {\n      # location where inspec will fetch the profile from\n      'source' => 'supermarket://hardening/ssh-hardening',\n      'key' => 'value',\n    },\n    # local Windows path\n    'brewinc/win2012_audit' => {\n      # filesystem path\n      'source' => 'E:/profiles/win2012_audit',\n    },\n    # github url\n    'brewinc/tmp_compliance_profile' => {\n      'source' => 'https://github.com/nathenharvey/tmp_compliance_profile',\n    },\n    # disable profile\n    'brewinc/tmp_compliance_profile-master' => {\n      'source' => '/tmp/tmp_compliance_profile-master',\n      'disabled' => true,\n    },\n  },\n}\n```\n\nYou can also configure in a policyfile like this:\n\n```ruby\ndefault['audit'] = {\n  profiles: {\n    'base/linux' => true,\n    'base/ssh' => true\n  }\n}\n```\n\n#### Direct reporting to Chef Compliance\n\nIf you want the audit cookbook to directly report to Chef Compliance, set the `collector`, `server` and the `token` attribute.\n\n * `collector` - 'chef-compliance' to report to Chef Compliance\n * `server` - url of Chef Compliance server with `/api`\n * `token` - access token for Chef Compliance API (https://github.com/chef/inspec/issues/690)\n\n```ruby\naudit: {\n  collector: 'chef-compliance',\n  server: 'https://compliance-fqdn/api',\n  token: 'eyJ........................YQ',\n  profiles: {\n    'base/windows'    => true,\n  },\n}\n```\n\nIt is also possible to use a `refresh_token` instead of an access token.\n * `insecure` - toggles use of https when retrieving access token. default value is `false`\n\n```ruby\naudit: {\n  collector: 'chef-compliance',\n  server: 'https://compliance-fqdn/api',\n  refresh_token: '5/4T...g==',\n  profiles: {\n    'base/windows'    => true,\n  },\n}\n```\n\n\n#### Direct reporting to Chef Visibility\n\nIf you want the audit cookbook to directly report to Chef Visibility, set the `collector` attribute to 'chef-visibility'.\nThis method is sending the report to `data_collector.server_url`, defined in `client.rb`. It require `inspec` version `0.27.1` or greater.\n\n```ruby\naudit: {\n  collector: 'chef-visibility',\n  profiles: {\n    'brewinc/tmp_compliance_profile' => {\n      'source' => 'https://github.com/nathenharvey/tmp_compliance_profile'\n    }\n  }\n}\n```\n\n## Relationship with Chef Audit Mode\n\nThe following tables compares the [Chef Client audit mode](https://docs.chef.io/ctl_chef_client.html#run-in-audit-mode) with this `audit` cookbook.\n\n|                                          | audit mode | audit cookbook |\n|------------------------------------------|------------|----------------|\n| Works with Chef Compliance               | No         | Yes            |\n| Execution Engine                         | [Serverspec](http://serverspec.org/) | [InSpec](https://github.com/chef/inspec) |\n| Execute InSpec Compliance Profiles       | No         | Yes            |\n| Execute tests embedded in Chef recipes   | Yes        | No             |\n\nEventually the `audit` cookbook will replace audit mode. The only drawback is that you will not be able to execute tests in Chef recipes, but since you will be running these tests in production, you will want to have a straightforward, consistent process by which you include these tests throughout your development lifecycle. Within Chef Compliance, this is a profile.\n\n### Migrating from audit mode to audit cookbook:\n\nWe will improve the migration and help to ease the process and to reuse existing audit mode test as much as possible. At this point of time, an existing audit-mode test like:\n\n```\ncontrol_group 'Check SSH Port' do\n  control 'SSH' do\n    it 'should be listening on port 22' do\n      expect(port(22)).to be_listening\n    end\n  end\nend\n```\n\ncan be re-written in InSpec as follows:\n\n```\n# rename `control_group` to `control` and use a unique identifier\ncontrol \"blog-1\" do\n  title 'Check SSH Port'  # add the title from `control_group`\n  # rename the old `control` to `describe`\n  describe 'SSH' do\n    it 'should be listening on port 22' do\n      expect(port(22)).to be_listening\n    end\n  end\nend\n```\n\nor even simplified to:\n\n```\ncontrol \"blog-1\" do\n  title 'SSH should be listening on port 22'\n  describe port(22) do\n    it { should be_listening }\n  end\nend\n```\n\n## Interval Settings\n\nIf you have long running audit profiles that you don't wish to execute on every chef-client run,\nyou can enable an interval:\n\n```\ndefault['audit']['interval']['enabled'] = true\ndefault['audit']['interval']['time'] = 1440 # once a day, the default value\n```\n\nThe time attribute is in minutes.\n\nYou can enable the interval and set the interval time, along with your desired profiles,\n in an environment or role like this:\n\n```json\n\n  \"audit\": {\n    \"profiles\": {\n      \"base/ssh\": true,\n      \"base/linux\": true\n    },\n    \"interval\": {\n      \"enabled\": true,\n      \"time\": 1440\n    }\n  }\n\n```\n\n## Troubleshooting\n\nPlease refer to TROUBLESHOOTING.md.\n\nPlease let us know if you have any [issues](https://github.com/chef-cookbooks/audit/issues), we are happy to help.\n\n## License\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | Stephan Renatus (<srenatus@chef.io>)\n| **Author:**          | Christoph Hartmann (<chartmann@chef.io>)\n| **Copyright:**       | Copyright (c) 2015 Chef Software Inc.\n| **License:**         | Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[cookbook]: https://supermarket.chef.io/cookbooks/audit\n[travis]: http://travis-ci.org/chef-cookbooks/audit\n"
}