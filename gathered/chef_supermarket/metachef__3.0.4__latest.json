{
  "name": "metachef Chef cookbook",
  "chef_cookbook_name": "metachef",
  "revision": "3.0.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/metachef",
    "https://supermarket.chef.io/cookbooks/metachef/download",
    "https://supermarket.chef.io/cookbooks/metachef/versions/3.0.4",
    "https://supermarket.chef.io/cookbooks/metachef/versions/3.0.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/metachef/versions/3.0.4",
    "https://supermarket.chef.io/api/v1/cookbooks/metachef",
    "https://supermarket.chef.io/api/v1/cookbooks/metachef/versions/3.0.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Integration",
    "Type/Devopsware/Orchestration/Cluster-based"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/metachef",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/metachef/versions/3.0.4/download",
  "deprecated": false,
  "created": "2012-01-31T06:48:38.000Z",
  "updated": "2012-01-31T06:48:38.000Z",
  "description": "Cluster orchestration -- coordinates discovery, integration and decoupling of cookbooks",
  "maintainer": {
    "name": "mrflip",
    "email": "coders@infochimps.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 11,
  "downloads_count": 2036713,
  "downloads_count_revision": 2036713,
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# metachef chef cookbook\n\nCluster orchestration -- coordinates discovery, integration and decoupling of cookbooks\n\n## Overview\n\nCookbooks repeatably express these and other aspects:\n* \"I launch these daemons: ...\"\n* \"I haz a bukkit, itz naem '/var/log/lol'\"\n* \"I have a dashboard at 'http://....:...'\"\n* ... and much more.\n\nWouldn't it be nice if announcing a log directory caused...\n  - my log rotation system to start rotating my logs?\n  - a 'disk free space' gauge to be added to the monitoring dashboard for that service?\n  - flume (or whatever) began picking up my logs and archiving them to a predictable location?\n  - in the case of standard apache logs, a listener to start counting the rate of requests, 200s, 404s and so forth?\nSimilarly, announcing ports should mean\n  - the firewall and security groups configure themselves correspondingly\n  - the monitor system starts regularly pinging the port for uptime and latency \n  - and pings the interfaces that it should *not* appear on to ensure the firewall is in place?\n\nCluster chef make those aspects standardized and predictable, and provides integration and discovery hooks. The key is to make integration *inevitable*: No more forgetting to rotate or monitor a service, or having a config change over here screw up a dependent system over there.\n\n__________________________________________________________________________\n\n(*below is a planning document and may not perfectly reflect reality*)\n\nFIXME: **update for version_3 release**\n\nAttributes are scoped by *cookbook* and then by *component*.\n* If I declare `i_haz_a_service_itz('redis)`, it will look in `node[:redis]`.\n* If I declare `i_haz_a_service_itz('hadoop-namenode')`, it will look in `node[:hadoop]` for cookbook-wide concerns and `node[:hadoop][:namenode]` for component-specific concerns.\n\n* The cookbook scope is always named for its cookbook. Its attributes live in`node[:cookbook_name]`.\n  - if everything in the cookbook shares a concern, it sits at cookbook level. So the hadoop log directory (shared by all its components) is at `(scratch_root)/hadoop/log`.\n* If there is only one component, it can be implicitly named for its cookbook. In this case, it is omitted: the component attributes live in `node[:cookbook_name]` (which is the same as the component name).\n* If there are multiple components, they will live in `node[:cookbook_name][:component_name]` (eg `[:hadoop][:namenode]` or `[:flume][:master]`. In file names, these become `(whatever)/cookbook_name/component_name/(whatever)`; in other cases they are joined as `cookbook_name-component_name`.\n\nAllow nodes to discover the location for a given service at runtime, adapting when new services register.\n\n### Discovery\n\nAllow nodes to discover the location for a given service at runtime, adapting\nwhen new services register.\n\n#### Operations:\n\n* register for a service. A timestamp records the last registry.\n* discover all chef nodes that have registered for the given service.\n* discover the most recent chef node for that service.\n* get the 'public_ip' for a service -- the address that nodes in the larger\n  world should use\n* get the 'public_ip' for a service -- the address that nodes on the local\n  subnet / private cloud should use\n\n#### Implementation\n\nNodes register a service by calling `announce`, which sets a hash containing\n'timestamp' (the time of registry) and other metadata passed in.\n\n## Recipes \n\n* `default`                  - Base configuration for metachef\n\n## Integration\n\nSupports platforms: debian and ubuntu\n\n\n\n## Attributes\n\n* `[:metachef][:conf_dir]`            -  (default: \"/etc/metachef\")\n* `[:metachef][:log_dir]`             -  (default: \"/var/log/metachef\")\n* `[:metachef][:home_dir]`            -  (default: \"/etc/metachef\")\n* `[:metachef][:user]`                -  (default: \"root\")\n* `[:users][:root][:primary_group]`   -  (default: \"root\")\n\n## License and Author\n\nAuthor::                Philip (flip) Kromer - Infochimps, Inc (<coders@infochimps.com>)\nCopyright::             2011, Philip (flip) Kromer - Infochimps, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n> readme generated by [cluster_chef](http://github.com/infochimps/cluster_chef)'s cookbook_munger\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "metachef::default": "Base configuration for metachef"
  },
  "parameters": {
    "metachef/conf_dir": {
      "display_name": "",
      "description": "",
      "default": "/etc/metachef",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "metachef/log_dir": {
      "display_name": "",
      "description": "",
      "default": "/var/log/metachef",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "metachef/home_dir": {
      "display_name": "",
      "description": "",
      "default": "/etc/metachef",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "metachef/user": {
      "display_name": "",
      "description": "",
      "default": "root",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "users/root/primary_group": {
      "display_name": "",
      "description": "",
      "default": "root",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}