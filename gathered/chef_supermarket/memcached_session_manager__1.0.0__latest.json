{
  "name": "memcached_session_manager Chef cookbook",
  "chef_cookbook_name": "memcached_session_manager",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/memcached_session_manager",
    "https://supermarket.chef.io/cookbooks/memcached_session_manager/download",
    "https://supermarket.chef.io/cookbooks/memcached_session_manager/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/memcached_session_manager/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/memcached_session_manager/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/memcached_session_manager",
    "https://supermarket.chef.io/api/v1/cookbooks/memcached_session_manager/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Orchestration/Cluster-based",
    "Type/Middleware/Application Server/Tomcat",
    "Type/Middleware/Cache/Memcached"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/memcached_session_manager",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/memcached_session_manager/versions/1.0.0/download",
  "deprecated": false,
  "created": "2015-07-20T18:39:49.343Z",
  "updated": "2015-07-29T23:57:44.626Z",
  "description": "Tomcat high-availability clusters with memcached using Martin Grotzke's memcached-session-manager",
  "maintainer": {
    "name": "dhoer",
    "email": "dennis.hoer@gmail.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 39651,
  "downloads_count_revision": 39651,
  "repository_url": "https://github.com/dhoer/chef-memcached_session_manager",
  "issues_url": "https://github.com/dhoer/chef-memcached_session_manager/issues",
  "chef_source_url": "https://github.com/dhoer/chef-memcached_session_manager",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Memcached Session Manager Cookbook\n\n[![Cookbook Version](http://img.shields.io/cookbook/v/memcached_session_manager.svg?style=flat-square)][cookbook]\n[![Build Status](http://img.shields.io/travis/dhoer/chef-memcached_session_manager.svg?style=flat-square)][travis]\n[![GitHub Issues](http://img.shields.io/github/issues/dhoer/chef-memcached_session_manager.svg?style=flat-square)][github]\n\n[cookbook]: https://supermarket.chef.io/cookbooks/memcached_session_manager\n[travis]: https://travis-ci.org/dhoer/chef-memcached_session_manager\n[github]: https://github.com/dhoer/chef-memcached_session_manager/issues\n\nInstalls/Configures Tomcat high-availability clusters with memcached using Martin Grotzke's \nhttps://code.google.com/p/memcached-session-manager.\n\n## Requirements\n\n- This cookbook expects `$CATALINA_HOME` to be defined in the environment. If `$CATALINA_HOME` is not defined, then \nplease override `node['memcached_session_manager']['tomcat']['lib']` attribute.\n- Java & Tomcat must be installed outside of this cookbook.\n- Chef 11.14 or higher.\n\n### Platforms\n\n- CentOS\n- RedHat\n- Ubuntu\n\n## Usage\n\nThe `default` recipe adds required memcached_session_manager jars to Tomcat.  Use the attributes below to configure\nmemcached_session_manager.  Note `memcached_session_manager_context` resource will automatically include the default \nrecipe. \n\n### Attributes\n- `node['memcached_session_manager']['version']` - The version of memcached_session_manager to install. \n- `node['memcached_session_manager']['flavor']` - Flavors `memcached` and `couchbase` are supported. \nDefaults to `memcached`.\n- `node['memcached_session_manager']['tomcat']['base_version']` - Defaults to `7`.\n- `node['memcached_session_manager']['tomcat']['lib']` -  Defaults to `$CATALINA_HOME/lib/`. \nBe sure to override this if $CATALINA_HOME is not defined in your environment.\n- `node['memcached_session_manager']['memcached']['spymemcached']` -  \nThe version of `spymemcached` to install for `memcached`.\n- `node['memcached_session_manager']['couchbase']['couchbase-client']` -\nThe version of `couchbase-client` to install for `couchbase`.\n- `node['memcached_session_manager']['couchbase']['jettison']` -\nThe version of `jettison` to install for `couchbase`.\n- `node['memcached_session_manager']['couchbase']['commons-codec']` -\nThe version of `commons-codec` to install for `couchbase`.\n- `node['memcached_session_manager']['couchbase']['httpcore']` -\nThe version of `httpcore` to install for `couchbase`.\n- `node['memcached_session_manager']['couchbase']['httpcore-nio']` -\nThe version of `httpcore-nio` to install for `couchbase`.\n- `node['memcached_session_manager']['couchbase']['netty'] ` -\nThe version of `netty` to install for `couchbase`.\n\n\n## LWRP\n\n### memcached_session_manager_context\nUpdates the <Context> element in `context.xml` so that it contains the Manager configuration for the \nmemcached-session-manager, like in the examples below. \n\nThe following examples show configurations for sticky sessions and non-sticky sessions with memcached servers and \nfor non-sticky sessions with membase. The examples with memcached servers assume that there are two memcacheds \nrunning, one on host1 and another one on host2. All sample configurations assume that you want to use kryo based \nserialization.\n\n##### Example for sticky sessions + kryo\nThe following example shows the configuration of the first tomcat, assuming that it runs on host1, together with\nmemcached \"n1\". The attribute failoverNodes=\"n1\" tells msm to store sessions preferably in memcached \"n2\" and only \nstore sessions in \"n1\" (running on the same host/machine) if no other memcached node (here only n2) is available \n(even if host1 goes down completely, the session is still available in memcached \"n2\" and could be served by the \ntomcat on host2). For the second tomcat (on host2) you just need to change the failover node to \"n2\", so that it \nprefers the memcached \"n1\". Everything else should be left unchanged.\n\n```ruby\nmemcached_session_manager_context '/path/to/context.xml' do\n  memcachedNodes 'n1:host1.yourdomain.com:11211,n2:host2.yourdomain.com:11211'\n  failoverNodes 'n1'\n  requestUriIgnorePattern '.*\\.(ico|png|gif|jpg|css|js)$'\nend\n```\n\n\n##### Example for non-sticky sessions + kryo\nThe following example shows a configuration for non-sticky sessions. In this case there's no need for failoverNodes, \nas sessions are served by all tomcats round-robin and they're not bound to a single tomcat. For non-sticky sessions \nthe configuration (for both/all tomcats) would look like this:\n\n```ruby\nmemcached_session_manager_context '/path/to/context.xml' do\n  memcachedNodes 'n1:host1.yourdomain.com:11211,n2:host2.yourdomain.com:11211'\n  sticky false\n  sessionBackupAsync false\n  lockingMode 'uriPattern:/path1|/path2'\n  requestUriIgnorePattern '.*\\.(ico|png|gif|jpg|css|js)$'\nend\n```\n\n\n##### Example for non-sticky sessions with couchbase + kryo\nTo connect to a membase bucket `bucket1` the configuration would look like this:\n\n```ruby\nmemcached_session_manager_context '/path/to/context.xml' do\n  memcachedNodes 'http://host1.yourdomain.com:8091/pools'\n  username 'bucket1'\n  password 'topsecret'\n  memcachedProtocol 'binary'\n  sticky false\n  sessionBackupAsync false\n  requestUriIgnorePattern '.*\\.(ico|png|gif|jpg|css|js)$'\nend\n```\n\n\n##### Example for multiple contexts sharing the same session id\nIf you are running multiple webapps/contexts sharing the same session id (e.g. by having set sessionCookiePath=\"/\") \nyou must tell memcached session manager to add a prefix to the session id when storing a session in memcached. \nFor this you can use the storageKeyPrefix attribute as shown by this example (see also the more detailed attribute \ndescription below):\n\n```ruby\nmemcached_session_manager_context '/path/to/context.xml' do\n  memcachedNodes 'n1:host1.yourdomain.com:11211,n2:host2.yourdomain.com:11211'\n  failoverNodes 'n1'\n  storageKeyPrefix 'context'\n  requestUriIgnorePattern '.*\\.(ico|png|gif|jpg|css|js)$'\nend\n```\n\n#### Actions\n\n- `install` - Adds or updates the <Context> element in `context.xml` so that it contains the Manager configuration for \nthe memcached-session-manager.\n- `remove` - Removes the <Context> element in `context.xml` so that it contains the Manager configuration for \nthe memcached-session-manager.\n\n#### Attributes\nDocumentation below has been trimmed down from the original.  Please read the complete documentation \n[here](https://code.google.com/p/memcached-session-manager/wiki/SetupAndConfiguration#Overview_over_memcached-session-manager_configuration_attributes).\n\n- `path` (required) - Defaults to name of the resource block. Specifies direct path to context.xml file.\n- `className` - Defaults to `de.javakaffee.web.msm.MemcachedBackupSessionManager`. \n- `memcachedNodes` (required) - This attribute must contain all memcached nodes you have running, or the membase \nbucket uri(s). It should be the same for all tomcats.\n- `failoverNodes` (optional, must not be used for non-sticky sessions) - Defaults to `nil`. Specifies ids of the \nmemcached nodes that must only be used for session backup when none of the other memcached nodes are available. \nSeveral memcached node ids are separated by space or comma.\n- `username` - Defaults to `nil`. Specifies the username used for a membase bucket or SASL. \n- `password` - Defaults to `nil`. Specifies the password used for membase bucket or SASL authentication \n(can be left empty / omitted if the \"default\" membase bucket without a password shall be used).\n- `memcachedProtocol` - Defaults to `text` - Specifies the memcached protocol to use, one of `text` or \n`binary`.\n- `sticky` - Defaults to `true`. Specifies if sticky or non-sticky sessions are used.\n- `lockingMode` (optional, for non-sticky sessions only) - Defaults to `none`. Specifies the locking strategy \nfor non-sticky sessions. Session locking is useful to prevent concurrent modifications and lost updates of the session \nin the case of parallel requests. Session locking is done using memcached. Possible values for lockingMode are: \n`none`, `all`, `auto`, and `uriPattern:<regexp>`.\n- `requestUriIgnorePattern` - Defaults to `nil`. Specifies a regular expression for request URIs, that shall not \ntrigger a session backup. \n- `sessionBackupAsync` - Defaults to `true`. Specifies if the session shall be stored asynchronously in memcached. \nIf this is true, the backupThreadCount setting is evaluated. If this is false, the timeout set via sessionBackupTimeout \nis evaluated.\n- `backupThreadCount` - Defaults to `nil` (number-of-cpu-cores). The number of threads that are used for asynchronous \nsession backup (if sessionBackupAsync=\"true\"). For the default value the number of available processors (cores) is used.\n- `sessionBackupTimeout` - Defaults to `100` milliseconds. The timeout in milliseconds after that a session backup is \nconsidered as being failed. This property is only evaluated if sessions are stored synchronously \n(set via sessionBackupAsync). \n- `operationTimeout` - Defaults to `1000`. The memcached operation timeout used at various places, e.g. used for the \nspymemcached ConnectionFactory.\n- `storageKeyPrefix` - Defaults to `webappVersion` Allows to configure a prefix that's added to the session id when a \nsession is stored in memcached. \n- `sessionAttributeFilter` - Defaults to `nil`. A regular expression to control which session attributes are serialized \nto memcached. \n- `transcoderFactoryClass` - Defaults to `de.javakaffee.web.msm.JavaSerializationTranscoderFactory`.\n- `copyCollectionsForSerialization` - Defaults to `false`. A boolean value that specifies, if iterating over collection \nelements shall be done on a copy of the collection or on the collection itself. \n-  `customConverter` - Defaults to `nil`. Custom converter allow you to provide custom serialization of application \nspecific types. Multiple custom converter class names are specified separated by comma (with optional space following \nthe comma). Converter classes must be available in the classpath of the web application (place jars in WEB-INF/lib).\n- `enableStatistics` - Defaults to `true`. A boolean value that specifies, if statistics shall be gathered. \n- `enabled` - Defaults to `true`. Specifies if session storage in memcached is enabled or not, can also be changed at \nruntime via JMX. Only allowed in sticky mode.\n\n\n## ChefSpec Matchers\n\nThis cookbook includes custom [ChefSpec](https://github.com/sethvargo/chefspec) matchers you can use to test \nyour own cookbooks.\n\nExample Matcher Usage\n\n```ruby\nexpect(chef_run).to install_memcached_session_manager_context('/path/to/context.xml').with(\n  memcachedNodes: 'n1:host1.yourdomain.com:11211,n2:host2.yourdomain.com:11211',\n  failoverNodes: 'n1',\n  storageKeyPrefix: 'context',\n  requestUriIgnorePattern: '.*\\.(ico|png|gif|jpg|css|js)$'\n)\n```\n\nCookbook Matchers\n\n- install_memcached_session_manager_context(path)\n- remove_memcached_session_manager_context(path)\n\n\n## Getting Help\n\n- Ask specific questions on [Stack Overflow](http://stackoverflow.com/questions/tagged/chef).\n- Report bugs and discuss potential features in \n[Github issues](https://github.com/dhoer/chef-memcached_session_manager/issues).\n\n## Contributing\n\nPlease refer to [CONTRIBUTING](https://github.com/dhoer/chef-memcached_session_manager/blob/master/CONTRIBUTING.md).\n\n## License\n\nMIT - see the accompanying [LICENSE](https://github.com/dhoer/chef-memcached_session_manager/blob/master/LICENSE.md) \nfile for details.\n",
  "requires": [
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/maven",
      "revision": "~> 1.3",
      "self_resolve": true
    }
  ]
}