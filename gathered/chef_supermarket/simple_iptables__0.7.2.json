{
  "name": "simple_iptables Chef cookbook",
  "chef_cookbook_name": "simple_iptables",
  "revision": "0.7.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/simple_iptables",
    "https://supermarket.chef.io/cookbooks/simple_iptables/download",
    "https://supermarket.chef.io/cookbooks/simple_iptables/versions/0.7.2",
    "https://supermarket.chef.io/cookbooks/simple_iptables/versions/0.7.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/simple_iptables/versions/0.7.2",
    "https://supermarket.chef.io/api/v1/cookbooks/simple_iptables",
    "https://supermarket.chef.io/api/v1/cookbooks/simple_iptables/versions/0.7.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Networking",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/simple_iptables",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/simple_iptables/versions/0.7.2/download",
  "deprecated": false,
  "created": "2012-05-12T20:55:42.000Z",
  "updated": "2016-06-27T17:42:34.736Z",
  "description": "Simple LWRP and recipe for managing iptables rules",
  "maintainer": {
    "name": "mhart",
    "email": "dev@arcticwolf.com"
  },
  "license": "BSD",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 26,
  "downloads_count": 16356497,
  "downloads_count_revision": 101184,
  "repository_url": "https://github.com/rtkwlf/cookbook-simple-iptables",
  "issues_url": "https://github.com/rtkwlf/cookbook-simple-iptables",
  "chef_source_url": "https://github.com/rtkwlf/cookbook-simple-iptables",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "[![Build Status](https://travis-ci.org/rtkwlf/cookbook-simple-iptables.png?branch=master)](https://travis-ci.org/rtkwlf/cookbook-simple-iptables)\n\nDescription\n===========\n\nSimple cookbook with LWRPs for managing iptables rules and policies.\n\nRequirements\n============\n\nNone, other than a system that supports iptables.\n\n\nPlatforms\n=========\n\nThe following platforms are supported and known to work:\n\n* Debian (6.0 and later)\n* RedHat (5.8 and later)\n* CentOS (5.8 and later)\n* Ubuntu (10.04 and later)\n\nOther platforms that support `iptables` and the `iptables-restore` script\nare likely to work as well; if you use one, please let me know so that I can\nupdate the supported platforms list.\n\nAttributes\n==========\n\nThis cookbook uses node attributes to track internal state when generating\nthe iptables rules and policies. These attributes _should not_ be overridden\nby roles, other recipes, etc.\n\nUsage\n=====\n\nInclude the recipe `simple_iptables` somewhere in your run list, then use\nthe LWRPs `simple_iptables_rule` and `simple_iptables_policy` in your\nrecipes.\n\n`simple_iptables_rule` Resource\n-------------------------------\n\nDefines a single iptables rule, composed of a rule string (passed as-is to\niptables), and a jump target. The name attribute defines an iptables chain\nthat this rule will live in (and, thus, that other rules can jump to). For\ninstance:\n\n    # Allow SSH\n    simple_iptables_rule \"ssh\" do\n      rule \"--proto tcp --dport 22\"\n      jump \"ACCEPT\"\n    end\n\nFor convenience, you may also specify an array of rule strings in a single\nLWRP invocation:\n\n    # Allow HTTP, HTTPS\n    simple_iptables_rule \"http\" do\n      rule [ \"--proto tcp --dport 80\",\n             \"--proto tcp --dport 443\" ]\n      jump \"ACCEPT\"\n    end\n\nAdditionally, if you want to declare a module (such as log) you can define jump as false:\n\n    # Log\n    simple_iptables_rule \"system\" do\n      rule \"--match limit --limit 5/min --jump LOG --log-prefix \\\"iptables denied: \\\" --log-level 7\"\n      jump false\n    end\n\nBy default rules are added to the filter table but the nat and mangle tables are also supported. For example:\n\n    # Tomcat redirects\n    simple_iptables_rule \"tomcat\" do\n      table \"nat\"\n      direction \"PREROUTING\"\n      rule [ \"--protocol tcp --dport 80 --jump REDIRECT --to-port 8080\",\n             \"--protocol tcp --dport 443 --jump REDIRECT --to-port 8443\" ]\n      jump false\n    end\n\n    #mangle example\n    #NOTE: set jump to false since iptables expects the -j MARK --set-mark in that order\n    simple_iptables_rule \"mangle\" do\n      table \"mangle\"\n      direction \"PREROUTING\"\n      jump false\n      rule \"-i eth0 -j MARK --set-mark 0x6\n    end\n\n    #reject all outbound connections attempts to 10/8 on a dual-homed host\n    simple_iptables_rule \"reset_10slash8_outbound\" do\n      direction \"OUTPUT\"\n      jump false\n      rule \"-p tcp -o eth0 -d 10/8 --jump REJECT --reject-with tcp-reset\"\n    end\n\nBy default rules are added to the chain, in the order in which its occur in the recipes.\nYou may use the weight parameter for control the order of the rules in chains. For example:\n\n    simple_iptables_rule \"reject\" do\n      direction \"INPUT\"\n      jump \"REJECT --reject-with icmp-host-prohibited\"\n      weight 90\n    end\n\n    simple_iptables_rule \"established\" do\n      direction \"INPUT\"\n      rule \"-m conntrack --ctstate ESTABLISHED,RELATED\"\n      jump \"ACCEPT\"\n      weight 1\n    end\n\n    simple_iptables_rule \"icmp\" do\n      direction \"INPUT\"\n      rule \"--proto icmp\"\n      jump \"ACCEPT\"\n      weight 2\n    end\n\nThis would generate the rules:\n\n    -A INPUT --jump ACCEPT -m conntrack --ctstate ESTABLISHED,RELATED\n    -A INPUT --jump ACCEPT --proto icmp\n    -A INPUT --jump REJECT --reject-with icmp-host-prohibited\n\nDefining a `simple_iptables_rule` resource actually creates a new chain with the name of\nthe resource and a jump to the chain from the chain specified in the `direction` attribute.\nBy default, the jump is unconditional. However, the `chain_condition` attribute can be\nspecified to make the jump conditional. For example:\n\n    simple_iptables_rule \"management_interface\" do\n      direction \"INPUT\"\n      chain_condition \"-i eth1\"\n      rule [ \"-p tcp --dport 80\", \"-p tcp --dport 443\" ]\n      jump \"ACCEPT\"\n    end\n\nThe rules specified under the `rule` attribute will only be evaluate for packets for which\nthe rule in `chain_condition` holds.\n\nSometimes we might want to define a chain where we only want to jump from another chain we define.\nBy default, an automatic jump will be made to chains defined using the `simple_iptables_rule` resource\nfrom the chain specified using the `direction` attribute of the resource. To prevent jumping to the\nchain from the direction chains, we can set the direction attribute to the symbol `:none`.\nFor example, consider a chain used to log\n\n    simple_iptables_rule \"logging_drop\" do\n      direction :none\n      rule ['-j LOG --log-level 4 --log-prefix \"IPTABLES_DROP: \"',\n            '-j DROP']\n      jump false\n    end\n\nWe can then jump to this chain from other simple_iptables_rule chains, but an automatic jump to\nthis chain won't be added.\n\nBy default, the name of the `simple_iptables_resource` is also used for an `iptables` comment.\nThis default can be overridden by explicitly specifying a `comment` attribute.\n\n\n`simple_iptables_policy` Resource\n---------------------------------\n\nDefines a default action for a given iptables chain. This is usually used to\nswitch from a default-accept policy to a default-reject policy. For\ninstance:\n\n    # Reject packets other than those explicitly allowed\n    simple_iptables_policy \"INPUT\" do\n      policy \"DROP\"\n    end\n\nAs with the `simple_iptables_rules` resource, policies are applied to the filter table\nby default. You may change the target table to nat as follows:\n\n    # Reject packets other than those explicitly allowed\n    simple_iptables_policy \"INPUT\" do\n      table \"nat\"\n      policy \"DROP\"\n    end\n\n`redhat.rb` recipe\n------------------\n`redhat.rb` recipe contains default iptables rules for redhat based distributions, such as RHEL, CentOS and etc. You may include `simple_iptables::redhat` on your linux and get following rules:\n```\n*nat\n:PREROUTING ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\nCOMMIT\n# Completed\n# This file generated by Chef. Changes will be overwritten.\n*mangle\n:PREROUTING ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\nCOMMIT\n# Completed\n# This file generated by Chef. Changes will be overwritten.\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT --jump ACCEPT -m conntrack --ctstate ESTABLISHED,RELATED\n-A INPUT --jump ACCEPT --proto icmp\n-A INPUT --jump ACCEPT --in-interface lo\n-A INPUT --jump ACCEPT --proto tcp --dport 22 -m conntrack --ctstate NEW\n-A INPUT --jump REJECT --reject-with icmp-host-prohibited\n-A FORWARD --jump REJECT --reject-with icmp-host-prohibited\nCOMMIT\n# Completed\n# This file generated by Chef. Changes will be overwritten.\n*raw\n:PREROUTING ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\nCOMMIT\n# Completed\n```\n\n`IPv6` support\n--------------\n\nTo support IPv6, you will need to add `ipv6` the attribute like:\ndefault[\"simple_iptables\"][\"ip_versions\"] = [\"ipv4\", \"ipv6\"]\n\nWhen using `simple_iptables_policy` or `simple_iptables_rule` resources, you\ncan enable the policy/rule for either `:ipv4`, `:ipv6` or `:both` using the\n`ip_version` parameter. For example:\n\n    simple_iptables_rule \"management_interface\" do\n      direction \"INPUT\"\n      chain_condition \"-i eth1\"\n      rule [ \"-p tcp --dport 80\", \"-p tcp --dport 443\" ]\n      jump \"ACCEPT\"\n      ip_version :both\n    end\n\nwill set the rule for both IPv4 and IPv6,\n\n    simple_iptables_rule \"management_interface\" do\n      direction \"INPUT\"\n      chain_condition \"-i eth1\"\n      rule [ \"-p tcp --dport 80\", \"-p tcp --dport 443\" ]\n      jump \"ACCEPT\"\n      ip_version :ipv6\n    end\n\nwill set it for IPv6 only. The default is to set the rule/policy for ipv4 only.\n\n\nExample\n=======\n\nSuppose you had the following `simple_iptables` configuration:\n\n    # Reject packets other than those explicitly allowed\n    simple_iptables_policy \"INPUT\" do\n      policy \"DROP\"\n    end\n\n    # The following rules define a \"system\" chain; chains\n    # are used as a convenient way of grouping rules together,\n    # for logical organization.\n\n    # Allow all traffic on the loopback device\n    simple_iptables_rule \"system\" do\n      rule [ # Allow all traffic on the loopback device\n             \"--in-interface lo\",\n             # Allow any established connections to continue, even\n             # if they would be in violation of other rules.\n             \"-m conntrack --ctstate ESTABLISHED,RELATED\",\n             # Allow SSH\n             \"--proto tcp --dport 22\",\n           ]\n      jump \"ACCEPT\"\n    end\n\n    # Allow HTTP, HTTPS\n    simple_iptables_rule \"http\" do\n      rule [ \"--proto tcp --dport 80\",\n             \"--proto tcp --dport 443\" ]\n      jump \"ACCEPT\"\n    end\n\n    # Tomcat redirects\n    simple_iptables_rule \"tomcat\" do\n      table \"nat\"\n      direction \"PREROUTING\"\n      rule [ \"--protocol tcp --dport 80 --jump REDIRECT --to-port 8080\",\n             \"--protocol tcp --dport 443 --jump REDIRECT --to-port 8443\" ]\n      jump false\n    end\n\nThis would generate a file `/etc/iptables-rules` with the contents:\n\n    # This file generated by Chef. Changes will be overwritten.\n    *nat\n    :PREROUTING ACCEPT [0:0]\n    :INPUT ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    :POSTROUTING ACCEPT [0:0]\n    :tomcat - [0:0]\n    -A PREROUTING --jump tomcat\n    -A tomcat --protocol tcp --dport 80 --jump REDIRECT --to-port 8080\n    -A tomcat --protocol tcp --dport 443 --jump REDIRECT --to-port 8443\n    COMMIT\n    # Completed\n    # This file generated by Chef. Changes will be overwritten.\n    :PREROUTING ACCEPT [0:0]\n    :INPUT ACCEPT [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    :POSTROUTING ACCEPT [0:0]\n    COMMIT\n    # Completed\n    # This file generated by Chef. Changes will be overwritten.\n    *filter\n    :INPUT DROP [0:0]\n    :FORWARD ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    :system - [0:0]\n    :http - [0:0]\n    -A INPUT --jump system\n    -A system --in-interface lo --jump ACCEPT\n    -A system -m conntrack --ctstate ESTABLISHED,RELATED --jump ACCEPT\n    -A system --proto tcp --dport 22 --jump ACCEPT\n    -A INPUT --jump http\n    -A http --proto tcp --dport 80 --jump ACCEPT\n    -A http --proto tcp --dport 443 --jump ACCEPT\n    COMMIT\n    # Completed\n    # This file generated by Chef. Changes will be overwritten.\n    *raw\n    :PREROUTING ACCEPT [0:0]\n    :OUTPUT ACCEPT [0:0]\n    COMMIT\n    # Completed\n\nWhich results in the following iptables configuration:\n\n    # iptables -L\n    Chain INPUT (policy DROP)\n    target     prot opt source               destination\n    system     all  --  anywhere             anywhere\n    http       all  --  anywhere             anywhere\n\n    Chain FORWARD (policy ACCEPT)\n    target     prot opt source               destination\n\n    Chain OUTPUT (policy ACCEPT)\n    target     prot opt source               destination\n\n    Chain http (1 references)\n    target     prot opt source               destination\n    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http\n    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:https\n\n    Chain system (1 references)\n    target     prot opt source               destination\n    ACCEPT     all  --  anywhere             anywhere\n    ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED\n    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh\n\n    #iptables -L -t nat\n    Chain PREROUTING (policy ACCEPT)\n    target     prot opt source               destination\n    tomcat     all  --  anywhere             anywhere\n\n    Chain INPUT (policy ACCEPT)\n    target     prot opt source               destination\n\n    Chain OUTPUT (policy ACCEPT)\n    target     prot opt source               destination\n\n    Chain POSTROUTING (policy ACCEPT)\n    target     prot opt source               destination\n\n    Chain tomcat (1 references)\n    target     prot opt source               destination\n    REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:http redir ports 8080\n    REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:https redir ports 8443\n\nChanges\n=======\n* 0.7.2 (June 12, 2015)\n    * simple_iptables_rule attribute \"rule\" defaults to \"\" (#71 - rtkcstegel)\n    * fixed foodcritic errors saying provider needed to always call new_resource.updated_by_last_action (#71 - rtkcstegel)\n    * support aws AMI (#69 - chantra)\n* 0.7.1 (Feburary 5, 2015)\n    * Allow setting comment for rule (#57 - TheMeier)\n    * Load rules on reboot on RHEL 7 and later (#58 - TheMeier)\n    * Use the `simple_iptables_rule` resource name as the comment by default (#63 - dblessing)\n    * Fix bug allowing duplicate entries (#60 - roman-yepishev-enoc)\n    * Add ChefSpec matchers (#64 - dblessing)\n* 0.7.0 (September 6, 2014)\n    * Add ip6tables (IPv6) support (#56 - chantra)\n    * Add `:none` to one of the values that the attribute `direction` can be set to.\n      When set to :none, a rule to jump to the chain created will not be added to any\n      direction chains (#54 - Kevin Deng)\n    * Add `node.simple_iptables.tables` attribute to specify the tables for which rules\n      will be generated (#53 - Pavel Yudin)\n    * Add Test Kitchen tests (#51 - Pavel Yudin)\n* 0.6.5 (July 20, 2014)\n    * Fix one-shot testing code to work with Chef versions prior to 11.12.\n    * Make one-shot testing error line detection code more robust (#48 - Kim Tore Jensen)\n    * Add `chain_condition` attribute to `rule` provider. This allows to specify\n      a condition which is tested before jumping to the chain.\n      If a `chain_condition` is not specified, the jump is unconditional, as before.\n    * Fix README examples to use `direction` attribute rather than `chain`.\n* 0.6.4 (June 8, 2014)\n    * Change testing mechanism to use `iptables-restore --test`. This tests\n      all rules at once and results in much better performance. In case of a\n      failure, the rule causing it is included in the exception raised.\n* 0.6.3 (May 30, 2014)\n    * Change how default attributes are set in `attributes/default.rb` file for\n      consistency with how they are set when they are cleared in\n      `simple_iptables` recipe\n    * Clarify in the README that the `simple_iptables` recipe needs to be included\n      before any of the resources provided by the cookbook are used\n    * The changes in this version are to address #37\n* 0.6.2 (May 27, 2014)\n    * Add default iptables rules for redhat platfrom (#41 - Pavel Yudin)\n    * Add case for fedora platform (#38 - Jordan Evans)\n* 0.6.1 (April 14, 2014)\n    * Add support mechanism weights.\n* 0.6.0 (March 19, 2014)\n    * Add support for the raw table (#33 - Ray Ruvinskiy)\n    * Add :delete semantics to iptables rules (#34 - Michael Parrott)\n* 0.5.2 (March 19, 2014)\n    * Fix #21, error parsing node\\['kernel'\\]\\['release'\\] (#30 - Michael Parrott)\n* 0.5.1 (March 18, 2014)\n    * Update README example so Chef doesn't warn duplicate resources (#32 - Michael Parrott)\n* 0.5.0 (March 18, 2014)\n    * Extend cleanup and test code (#31 - Sander van Harmelen)\n    * Disallow adding built-in chains multiple times (#31 - Sander van Harmelen)\n* 0.4.0 (May 9, 2013)\n    * Update foodcritic version used in Travis-CI (#29 - Michael Parrott)\n    * Added support for mangle table (#18 - Michael Hart)\n    * Updated Gemfile to 11.4.4 (#18 - Michael Hart)\n* 0.3.0 (March 5, 2013)\n    * Added support for nat table (#10 - Nathan Mische)\n    * Updated Gemfile for Travis-CI integration (#10 - Nathan Mische)\n* 0.2.4 (Feb 13, 2013)\n    * Fixed attribute precedence issues in Chef 11 (#9 - Warwick Poole)\n    * Added `name` to metadata to satisfy recent foodcritic versions\n* 0.2.3 (Nov 10, 2012)\n    * Fixed a warning in Chef 11+ (#7 - Hector Castro)\n* 0.2.2 (Oct 13, 2012)\n    * Added support for logging module and other non-jump rules (#6 - phoolish)\n* 0.2.1 (Aug 5, 2012)\n    * Fixed a bug using `simple_iptables` with chef-solo (#5)\n* 0.2.0 (Aug 1, 2012)\n    * Allow an array of rules in `simple_iptables_rule` LWRP (Johannes Becker)\n    * RedHat/CentOS compatibility (David Stainton)\n    * Failing `simple_iptables_rule`s now fail with a more helpful error message\n* 0.1.2 (July 24, 2012)\n    * Fixed examples in README (SchraderMJ11)\n* 0.1.1 (May 22, 2012)\n    * Added Travis-CI integration (Nathen Harvey)\n    * Fixed foodcritic warnings (Nathen Harvey)\n* 0.1.0 (May 12, 2012)\n    * Initial release\n\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 5.8",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 5.8",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 10.04",
      "one_of_group": "os"
    }
  ]
}