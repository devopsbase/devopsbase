{
  "name": "apt-periodic Chef cookbook",
  "chef_cookbook_name": "apt-periodic",
  "revision": "0.2.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/apt-periodic",
    "https://supermarket.chef.io/cookbooks/apt-periodic/download",
    "https://supermarket.chef.io/cookbooks/apt-periodic/versions/0.2.0",
    "https://supermarket.chef.io/cookbooks/apt-periodic/versions/0.2.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/apt-periodic/versions/0.2.0",
    "https://supermarket.chef.io/api/v1/cookbooks/apt-periodic",
    "https://supermarket.chef.io/api/v1/cookbooks/apt-periodic/versions/0.2.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Package Management",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/apt-periodic",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/apt-periodic/versions/0.2.0/download",
  "deprecated": false,
  "created": "2014-03-15T09:52:30.000Z",
  "updated": "2014-08-11T10:35:44.826Z",
  "description": "Installs/configures apt-periodic and unattended-upgrades",
  "maintainer": {
    "name": "madwork",
    "email": "vincent.durand@madwork.org"
  },
  "license": "MIT",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 3652845,
  "downloads_count_revision": 1103114,
  "repository_url": "https://github.com/madwork/chef-apt-periodic",
  "issues_url": "https://github.com/madwork/chef-apt-periodic",
  "chef_source_url": "https://github.com/madwork/chef-apt-periodic",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# APT::Periodic Cookbook\n\n[![Build Status](https://img.shields.io/travis/madwork/chef-apt-periodic.svg)](https://travis-ci.org/madwork/chef-apt-periodic)\n[![Cookbook Version](https://img.shields.io/cookbook/v/apt-periodic.svg)](https://supermarket.getchef.com/cookbooks/apt-periodic)\n\nChef cookbook for configuring **APT::Periodic** variables for daily cron job `/etc/cron.daily/apt` and [unattended-upgrades](http://packages.ubuntu.com/precise/unattended-upgrades) package on Ubuntu.\n\n- `/etc/apt/apt.conf.d/10periodic`\n- `/etc/apt/apt.conf.d/50unattended-upgrades`\n\n## Requirements\n\n#### supports\n\n- `ubuntu >= 12.04`\n\n#### depends\n\n- `apt`\n\n## Installation\n\n### From the [Community Site](https://supermarket.getchef.com/cookbooks/apt-periodic)\n\nUse the knife command:\n\n```sh\n$ knife cookbook site install apt-periodic\n```\n\n### With [librarian-chef](https://github.com/applicationsonline/librarian-chef)\n\nEdit `Cheffile`\n\n    site \"https://supermarket.getchef.com/api/v1\"\n\n    cookbook 'apt-periodic', '~> 0.2.0'\n\nResolves and installs all of the dependencies:\n\n```sh\n$ librarian-chef install\n```\n\n### With [berkshelf](http://berkshelf.com/)\n\nEdit `Berksfile`\n\n\tsource \"https://supermarket.getchef.com\"\n\n\tcookbook 'apt-periodic', '~> 0.2.0'\n\nInstall the cookbooks you specified in the Berksfile and their dependencies:\n\n```sh\n$ berks install\n```\n\n## Attributes\n\n#### apt-periodic::default\n\nSee [attributes/default.rb](attributes/default.rb)\n\n<table>\n  <tr>\n    <th>Description</th>\n    <th>Type</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['auto_apt_enable']</tt></td>\n  </tr>\n  <tr>\n    <td>Enable the update/upgrade script (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"1\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['update_interval']</tt></td>\n  </tr>\n  <tr>\n    <td>Do \"apt-get update\" automatically every n-days (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"1\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['download_upgradeable_interval']</tt></td>\n  </tr>\n  <tr>\n    <td>Do \"apt-get upgrade --download-only\" every n-days (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['debdelta']</tt></td>\n  </tr>\n  <tr>\n    <td>Use debdelta-upgrade to download updates if available (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"1\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['autoclean_interval']</tt></td>\n  </tr>\n  <tr>\n    <td>Do \"apt-get autoclean\" every n-days (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['backup_level']</tt></td>\n  </tr>\n  <tr>\n    <td>Backup level (0=disable), 1 is invalid.</td>\n    <td>String</td>\n    <td><tt>\"3\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['backup_archive_interval']</tt></td>\n  </tr>\n  <tr>\n    <td>Backup after n-days if archive contents changed (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['random_sleep']</tt></td>\n  </tr>\n  <tr>\n    <td>Sleep for a random interval of time</td>\n    <td>String</td>\n    <td><tt>\"1800\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['verbose']</tt></td>\n  </tr>\n  <tr>\n    <td>Set VERBOSE mode from apt-config</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['min_age']</tt></td>\n  </tr>\n  <tr>\n    <td>Set minimum age of a package file. If a file is younger it will not be deleted (0=disable). Usefull to prevent races and to keep backups of the packages for emergency.</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['max_age']</tt></td>\n  </tr>\n  <tr>\n    <td>Set maximum allowed age of a cache package file. If a cache package file is older it is deleted (0=disable)</td>\n    <td>String</td>\n    <td><tt>\"2\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['max_size']</tt></td>\n  </tr>\n  <tr>\n    <td>Set maximum size of the cache in MB (0=disable). If the cache is bigger, cached package files are deleted until the size requirement is met (the biggest packages will be deleted first).</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrade_interval']</tt></td>\n  </tr>\n  <tr>\n    <td>Run the \"unattended-upgrade\" security upgrade script every n-days (0=disabled)</td>\n    <td>String</td>\n    <td><tt>\"0\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['allowed_origins']</tt></td>\n  </tr>\n  <tr>\n    <td>Automatically upgrade packages from these (origin:archive) pairs</td>\n    <td>Array</td>\n    <td></td>\n  </tr>\n   <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['package_blacklist']</tt></td>\n  </tr>\n  <tr>\n    <td>List of packages to not update</td>\n    <td>Array</td>\n    <td><tt>[]</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['auto_fix_interrupted_dpkg']</tt></td>\n  </tr>\n  <tr>\n    <td>This option allows you to control if on a unclean dpkg exit unattended-upgrades will automatically run dpkg --force-confold --configure -a</td>\n    <td>String</td>\n    <td><tt>\"true\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['minimal_steps']</tt></td>\n  </tr>\n  <tr>\n    <td>Split the upgrade into the smallest possible chunks so that they can be interrupted with SIGUSR1. This makes the upgrade a bit slower but it has the benefit that shutdown while a upgrade is running is possible (with a small delay)</td>\n    <td>String</td>\n    <td><tt>\"false\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['install_on_shutdown']</tt></td>\n  </tr>\n  <tr>\n    <td>Install all unattended-upgrades when the machine is shuting down instead of doing it in the background while the machine is running. This will (obviously) make shutdown slower</td>\n    <td>String</td>\n    <td><tt>\"false\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['mail']</tt></td>\n  </tr>\n  <tr>\n    <td>Send email to this address for problems or packages upgrades. If empty or unset then no email is sent, make sure that you have a working mail setup on your system.</td>\n    <td>String</td>\n    <td><tt>\"\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['mail_only_on_error']</tt></td>\n  </tr>\n  <tr>\n    <td>Set this value to \"true\" to get emails only on errors.</td>\n    <td>String</td>\n    <td><tt>\"false\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['remove_unused_dependencies']</tt></td>\n  </tr>\n  <tr>\n    <td>Do automatic removal of new unused dependencies after the upgrade (equivalent to apt-get autoremove)</td>\n    <td>String</td>\n    <td><tt>\"true\"</tt></td>\n  </tr>\n  <tr>\n    <td colspan=\"3\"><tt>['apt_periodic']['unattended_upgrades']['automatic_reboot']</tt></td>\n  </tr>\n  <tr>\n    <td>Automatically reboot *WITHOUT CONFIRMATION* if a the file /var/run/reboot-required is found after the upgrade</td>\n    <td>String</td>\n    <td><tt>\"false\"</tt></td>\n  </tr>\n</table>\n\n## Usage\n\n#### apt-periodic::default\n\nJust include `apt-periodic` in your node's `run_list` and override default values if needed.\n\nExample with unattended upgrades every days and notification by mail:\n\n```json\n{\n  \"name\": \"app.crazy-automation.io\",\n  \"apt_periodic\": {\n    \"unattended_upgrade_interval\": \"1\",\n    \"unattended_upgrades\": {\n      \"mail\": \"admin@crazy-automation.io\"\n    }\n  },\n  \"run_list\": [\n    \"recipe[apt-periodic]\"\n  ]\n}\n```\n\n## Development\n\n#### Dependencies\n\n* [bundler](http://bundler.io/)\n* [vagrant](https://www.vagrantup.com/)\n* [kitchen-vagrant](https://github.com/test-kitchen/kitchen-vagrant)\n* [berkshelf](http://berkshelf.com/)\n\n#### Installation\n\nEnsure the gem dependencies are installed:\n\n```sh\n$ bundle install\n$ bundle exec berks install\n```\n\nRunning the tests:\n\n```sh\n$ bundle exec rspec\n$ bundle exec kitchen test\n```\n\n## Contributing\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\n## License\n\nWritten by [Vincent Durand](https://github.com/madwork).\n\nReleased under the terms of the MIT License. For further information, please see the file [LICENSE.txt](LICENSE.txt).",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 12.04",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}