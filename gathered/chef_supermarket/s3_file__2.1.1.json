{
  "name": "s3_file Chef cookbook",
  "chef_cookbook_name": "s3_file",
  "revision": "2.1.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/s3_file",
    "https://supermarket.chef.io/cookbooks/s3_file/download",
    "https://supermarket.chef.io/cookbooks/s3_file/versions/2.1.1",
    "https://supermarket.chef.io/cookbooks/s3_file/versions/2.1.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.1.1",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.1.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/s3_file",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.1.1/download",
  "deprecated": false,
  "created": "2012-02-24T19:00:52.000Z",
  "updated": "2016-02-01T19:31:15.989Z",
  "description": "Installs/Configures s3_file LWRP",
  "maintainer": {
    "name": "adamsb6",
    "email": "brandon.adams@me.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 25,
  "downloads_count": 26895378,
  "downloads_count_revision": 1170476,
  "repository_url": "https://github.com/adamsb6/s3_file/",
  "issues_url": "https://github.com/adamsb6/s3_file/",
  "chef_source_url": "https://github.com/adamsb6/s3_file/",
  "gatherbase_origin": "chef-supermarket",
  "readme": "= DESCRIPTION:\nAn LWRP that can be used to fetch files from S3.\n\nI created this LWRP to solve the chicken-and-egg problem of fetching files from S3 on the first Chef run on a newly provisioned machine. Ruby libraries that are installed on that first run are not available to Chef during the run, so I couldn't use a library like Fog to get what I needed from S3.\n\nThis LWRP has no dependencies beyond the Ruby standard library, so it can be used on the first run of Chef.\n\n= REQUIREMENTS:\nAn Amazon Web Services account and something in S3 to fetch.\n\nMulti-part S3 uploads do not put the MD5 of the content in the ETag header. If x-amz-meta-digest is provided in User-Defined Metadata on the S3 Object it is processed as if it were a Digest header (RFC 3230).\n\nThe MD5 of the local file will be checked against the MD5 from x-amz-meta-digest if it is present.  It not it will check against the ETag.  If there is no match or the local file is absent it will be downloaded.\n\nIf credentials are not provided, s3_file will attempt to use the first instance profile associated with the instance. See documentation at http://docs.aws.amazon.com/IAM/latest/UserGuide/instance-profiles.html for more on instance profiles.\n\n= USAGE:\ns3_file acts like other file resources.  The only supported action is :create, which is the default.\n\nAttribute Parameters:\nÂ \n* `aws_access_key_id` - your AWS access key id. (optional)\n* `aws_secret_access_key` - your AWS secret access key. (optional)\n* `token` - token used for temporary IAM credentials. (optional)\n* `bucket` - the bucket to pull from.\n* `remote_path` - the S3 key to pull.\n* `owner` - the owner of the file. (optional)\n* `group` - the group owner of the file. (optional)\n* `mode` - the octal mode of the file. (optional)\n\nExample:\n\n    s3_file \"/tmp/somefile\" do\n    \tremote_path \"/my/s3/key\"\n    \tbucket \"my-s3-bucket\"\n    \taws_access_key_id \"mykeyid\"\n    \taws_secret_access_key \"mykey\"\n    \towner \"me\"\n    \tgroup \"mygroup\"\n    \tmode \"0644\"\n    \taction :create\n    end\n\n\n"
}