{
  "name": "container Chef cookbook",
  "chef_cookbook_name": "container",
  "revision": "0.3.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/container",
    "https://supermarket.chef.io/cookbooks/container/download",
    "https://supermarket.chef.io/cookbooks/container/versions/0.3.0",
    "https://supermarket.chef.io/cookbooks/container/versions/0.3.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/container/versions/0.3.0",
    "https://supermarket.chef.io/api/v1/cookbooks/container",
    "https://supermarket.chef.io/api/v1/cookbooks/container/versions/0.3.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/container",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/container/versions/0.3.0/download",
  "deprecated": false,
  "created": "2014-01-20T09:52:48.000Z",
  "updated": "2016-05-13T23:32:22.660Z",
  "description": "Installs lxc and offers containers as resource",
  "maintainer": {
    "name": "rdeys",
    "email": "ranjib@linux.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 1865100,
  "downloads_count_revision": 296584,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "## Container cookbook\n[Chef](https://www.chef.io/chef/) cookbook for managing [linux containers](https://linuxcontainers.org/).\n\n### Description\n\nThis cookbook provides chef gears for installing and managing linux\ncontainers. You can use this cookbook following ways:\n\n1. Recipes\n  - *container::install* recipe installs lxc and related packages\n  - *container::ruby* recipe installs [ruby-lxc](https://github.com/lxc/ruby-lxc) and [chef-lxc](https://github.com/ranjib/chef-lxc) gems.\n2. Resource-Providers\n  - *container* - resource/provider to create privileged container\n  - *container_user* - resource/provider to create an user who can create containers (unprivileged container).\n\n  These resource providers require native ruby-lxc bindings (installed by *container::ruby* recipe).\n\nNote: Container cookbook is only tested on ubuntu 14.04.\n\n### Usage\n\n#### container resource\n\nFollowing will create a privileged ubuntu container named `test-1`\n\n```ruby\ncontainer 'test-1'\n\n```\n\nAnd following will create and start a ubuntu 10.04 container\n```ruby\ncontainer 'test-2' do\n  options(template: 'ubuntu', template_options: ['-r lucid'])\n  action [:create, :start]\nend\n```\n`container` resource can have following actions:\n- create _default_\n- destroy\n- start\n- stop\n\nAnd following attributes\n- container_name _name attribute, default to resource name_\n- options _a hash of action specific parameters_\n\nThe _options_ attribute can take following parameters (as hash)\n- for _create_ action:\n  - template: name of the template that will be used for creating the container (e.g. ubuntu, fedora, oracle etc). Default is ubuntu.\n  - template_options: an array containing addiotional arguments that will be passed to template (use `lxc-create -t foo --help` to get the list of supported options for individual templates). Default is an empty array\n  - block_device: The backing storage device (e.g lvm, zfs etc). Default is nil\n  - flags: An integer flag passed to lxc-crate (currently only LXC::LXC_CREATE_QUIET is available)\n\n#### container_user resource\n\nThis resource/provider setup necessary configuration files and folders required\nto create [unprivilged containers](https://www.stgraber.org/2014/01/17/lxc-1-0-unprivileged-containers/)\n(containers that are not owned by root).\n\nFollowing will create an user named `foo` with '/opt/foo' as home directory, who can create containers.\n\n```ruby\n  container_user 'foo' do\n    home_dir '/opt/foo'\n  end\n```\n`container_user` resource can have following attributes:\n- _user_ name of the user\n- _user_password_ shadow password of the user\n- _create_user_ whetere the user will be created or an existing user will be used\n- _home_dir_ home directory of the user. Containers will be stored under this directory\n- _veth_limit_ number the veth interfaces that this user can create for containers (default is 100, which means by default 100 containers can be created by this user, assuming each of them will have 1 veth interface).\n\n`container_user` only allows `setup` action\n\n#### Chef-Lxc offerings\n`container::ruby` recipe installs [chef-lxc](https://github.com/ranjib/chef-lxc)\ngem which also allowis creation of containers via the `lxc` resource or chef-lxc\ncommand line binary. But unlike the `container` resource provided by this cookbook\n `lxc` resource can also configure containers (packages, services etc) using the same\nchef recipe, but without actually installing chef inside it.\n\n```ruby\nlxc \"web\" do\n  template \"ubuntu\"\n  recipe do\n    package \"apache2\"\n    service \"apache2\" do\n      action [:start, :enable]\n    end\n  end\n  action [:create, :start]\nend\n```\n\nIf you want to install chef inside a container to configure it, you should look at\n[chef-provisioning-lxc](https://github.com/chef/chef-provisioning-lxc).\n\n## License\n[Apache 2](http://www.apache.org/licenses/LICENSE-2.0)\n\n## Contributing\n\n1. Fork it ( https://github.com/GoatOS/container/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "container::install": "Installs basic LXC packages",
    "container::ruby": "Install ruby binding for lxc, chef-lxc etc"
  }
}