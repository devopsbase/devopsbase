{
  "name": "chef-splunk Chef cookbook",
  "chef_cookbook_name": "chef-splunk",
  "revision": "1.6.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/chef-splunk",
    "https://supermarket.chef.io/cookbooks/chef-splunk/download",
    "https://supermarket.chef.io/cookbooks/chef-splunk/versions/1.6.0",
    "https://supermarket.chef.io/cookbooks/chef-splunk/versions/1.6.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/chef-splunk/versions/1.6.0",
    "https://supermarket.chef.io/api/v1/cookbooks/chef-splunk",
    "https://supermarket.chef.io/api/v1/cookbooks/chef-splunk/versions/1.6.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/chef-splunk",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/chef-splunk/versions/1.6.0/download",
  "deprecated": false,
  "created": "2014-01-17T00:00:40.000Z",
  "updated": "2016-07-19T19:57:51.795Z",
  "description": "Manage Splunk Enterprise or Splunk Universal Forwarder",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 24,
  "downloads_count": 8063662,
  "downloads_count_revision": 2067,
  "repository_url": "https://github.com/opscode-cookbooks/chef-splunk",
  "issues_url": "https://github.com/opscode-cookbooks/chef-splunk/issues",
  "chef_source_url": "https://github.com/opscode-cookbooks/chef-splunk",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "chef-splunk Cookbook\n====================\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/chef-splunk.svg?branch=master)](https://travis-ci.org/chef-cookbooks/chef-splunk)\n[![Cookbook Version](https://img.shields.io/cookbook/v/chef-splunk.svg)](https://supermarket.chef.io/cookbooks/chef-splunk)\n\nThis cookbook manages a Splunk Universal Forwarder (client) or a\nSplunk Enterprise (server) installation, including a Splunk clustered\nenvironment.\n\nThe Splunk default user is admin and the password is changeme. See the\n`setup_auth` recipe below for more information about how to manage\nchanging the password with Chef and Chef Vault.\n\nThis recipe downloads packages from Splunk directly. There are\nattributes to set a URL to retrieve the packages, so if the packages\nare mirrored locally, supply the local URL instead. At this time the\ncookbook doesn't support installing from networked package managers\n(like apt or yum), since Splunk doesn't provide package repositories.\n\n\n## Requirements\n\nChef 11.10.0+ for `declare_resource`.\n\n### Platforms\n\nThis cookbook uses Test Kitchen to do cross-platform convergence and\npost-convergence tests. The tested platforms are considered supported.\nThis cookbook may work on other platforms or platform versions with or\nwithout modification.\n\n* Debian 7\n* Ubuntu 12.04, 14.04\n* CentOS 6\n* OmniOS r151008\n\n### Cookbooks\n\nUsed for managing secrets, see __Usage__:\n\n* chef-vault\n\n## Attributes\n\nAttributes have default values set in `attributes/default.rb`. Where\npossible or appropriate, the default values from Splunk Enterprise are\nused.\n\nGeneral attributes:\n\n* `node['splunk']['accept_license']`: Whether to accept the Splunk\n  EULA. Default is false. This *must* be set to true for Splunk to be\n  functional with this cookbook, which means end users must read the\n  EULA and agree to the terms.\n* `node['splunk']['is_server']`: Set this to true if the node is a\n  splunk server, for example in a role. Default is false.\n* `node['splunk']['disabled']`: Disable the splunk agent by setting\n  this to true. Default is false.\n* `node['splunk']['receiver_port']`: The port that the receiver\n  (server) listens to. This is set to the Splunk Enterprise default,\n  9997.\n* `node['splunk']['web_port']`: The port that the splunkweb service\n  listens to. This is set to the default for HTTPS, 443, as it is\n  configured by the `setup_ssl` recipe.\n* `node['splunk']['ratelimit_kilobytessec']`: The default splunk rate limiting rate can now easily be changed with an attribute.  Default is 2048KBytes/sec.\n\nThe two URL attributes below are selected by platform and architecture\nby default.\n\n* `node['splunk']['forwarder']['url']`: The URL to the Splunk\n  Universal Forwarder package file.\n* `node['splunk']['server']['url']`: The URL to the Splunk Enterprise\n  package file.\n\nSpecial attributes for managing the Splunk user:\n\n* `node['splunk']['user']`: A hash of attributes to set for the splunk\n  user resource in the `user` recipe. It's unlikely that someone would\n  need to change these, other than the UID, but just in case...\n\n- `username`: the username\n- `comment`: gecos field\n- `home`: the home directory, defaults to `/opt/splunkforwarder`, will\n  be set to `/opt/splunk` if `node['splunk']['is_server']` is true.\n- `shell`: the shell to use\n- `uid`: the numeric UID. The default, `396` is an integer arbitrarily\n  chosen and doesn't conflict with anything on the supported platforms\n  (see list above). It is within the `system` UID range on Linux\n  systems.\n\n* `node['splunk']['server']['runasroot']`: if runasroot is true (which is the splunk upstream package default) then the splunk server runs as root.  If runasroot is false modify the init script to run as the `node['splunk']['user']`.  This does not apply to the splunk client as they may need root permissions to read logfiles.  NOTE1: you may also need to change `node['splunk']['web_port']` on a splunk server to run on a port >1024 if you don't run as root (splunk user cannot bind to privelaged ports).  NOTE2: If you want to switch from root to the splunk user or vice versa on an existing install, please stop the splunk service first before changing the runasroot boolean value.\n\nThe following attributes are related to setting up `splunkweb` with\nSSL in the `setup_ssl` recipe.\n\n* `node['splunk']['ssl_options']`: A hash of SSL options used in the\n  `setup_ssl` recipe\n* `node['splunk']['ssl_options']['enable_ssl']`: Whether to enable\n  SSL, must be set to `true` to use the `setup_ssl` recipe. Defaults\n  to `false`, must be set using a boolean literal `true` or `false`.\n* `node['splunk']['ssl_options']['data_bag']`: The data bag name to\n  load, defaults to `vault` (as chef-vault is used).\n* `node['splunk']['ssl_options']['data_bag_item']`: The data bag item\n  name that contains the keyfile and crtfile, defaults to\n  `splunk_ceritficates`.\n* `node['splunk']['ssl_options']['keyfile']`: The name of the SSL key\n  file, and the content will be written to\n  `etc/auth/splunkweb/KEYFILE`. Must be an element under `data` in the\n  data bag item. See __Usage__ for instructions. Defaults to\n  '`self-signed.example.com.key`', and should be changed to something\n  relevant for the local site before use, in a role or wrapper cookbook.\n* `node['splunk']['ssl_options']['crtfile']`: The name of the SSL cert\n  (crt) file, and the content will be written to\n  `/etc/auth/splunkweb/CRTFILE`. Must be an element under `data` in\n  the data bag item. See __Usage__ for instructions. Defaults to\n  '`self-signed.example.com.crt`', and should be changed to something\n  relevant for the local site before use, in a role or wrapper cookbook.\n\nThe following attributes are related to setting up a Splunk server with indexer\nclustering in the `setup_clustering` recipe:\n\n* `node['splunk']['clustering']`: A hash of indexer clustering configurations\n  used in the `setup_clustering` recipe\n* `node['splunk']['clustering']['enable']`: Whether to enable indexer clustering,\n  must be set to `true` to use the `setup_clustering` recipe. Defaults to `false`,\n  must be a boolean literal `true` or `false`.\n* `node['splunk']['clustering']['mode']`: The clustering mode of the node within\n  the indexer cluster. Must be set using string literal 'master',\n  'slave', or 'searchhead'.\n* `node['splunk']['clustering']['replication_factor']`: The replication factor\n  of the indexer cluster. Defaults to 3, must be a positive integer. Only valid\n  when `node['splunk']['clustering']['mode']='master'`.\n* `node['splunk']['clustering']['search_factor']`: The search factor\n  of the indexer cluster. Only valid when `node['splunk']['clustering']['mode']='master'`.\n  Defaults to 2, must be a positive integer.\n* `node['splunk']['clustering']['replication_port']`: The replication port\n  of the cluster peer member. Only valid when `node['splunk']['clustering']['mode']='slave'`.\n  Defaults to 9887.\n\nThe following attributes are related to setting up a splunk forwarder\nwith the `client` recipe\n\n`node['splunk']['outputs_conf']` is a hash of configuration values that are used to dynamically populate the `outputs.conf` file's \"`tcpout:splunk_indexers_PORT`\" configuration section. Each key/value pair in the hash is used as configuration in the file. For example the `attributes/default.rb` has this:\n\n```ruby\ndefault['splunk']['outputs_conf'] = {\n  'forwardedindex.0.whitelist' => '.*',\n  'forwardedindex.1.blacklist' => '_.*',\n  'forwardedindex.2.whitelist' => '_audit',\n  'forwardedindex.filter.disable' => 'false'\n}\n```\n\nThis will result in the following being rendered in `outputs.conf`:\n\n```\n[tcpout:splunk_indexers_9997]\nserver=10.0.2.47:9997\nforwardedindex.0.whitelist = .*\nforwardedindex.1.blacklist = _.*\nforwardedindex.2.whitelist = _audit\nforwardedindex.filter.disable = false\n```\n\nThe `tcpout:splunk_indexers_9997` section is defined by the search results for Splunk Servers, and the `server` directive is a comma-separated listed of server IPs and the ports. For example, to add an `sslCertPath` directive, define the attribute in your role, wrapper cookbook, etc:\n\n```\nnode.default['splunk']['outputs_conf']['sslCertPath'] = '$SPLUNK_HOME/etc/certs/cert.pem'\n```\n\n`node['splunk']['inputs_conf']` is a hash of configuration values that are used to populate the `inputs.conf` file.\n\n* `node['splunk']['inputs_conf']['host']`: A string that specifies the\ndefault host name used in the inputs.conf file. The inputs.conf file\nis not overwritten if this is not set or is an empty string.\n* `node['splunk']['inputs_conf']['ports']`: An array of hashes that contain\nthe input port configuration necessary to generate the inputs.conf\nfile.\n\nFor example:\n```\nnode.default['splunk']['inputs_conf']['ports'] = [\n  {\n    port_num => 123123,\n    config => {\n      'sourcetype' => 'syslog'\n    }\n  }\n]\n```\n\nThe following attributes are related to upgrades in the `upgrade`\nrecipe. **Note** The version is set to 4.3.7 and should be modified to\nsuit in a role or wrapper, since we don't know what upgrade versions\nmay be relevant. Enabling the upgrade and blindly using the default\nURLs may have undesirable consequences, hence this is not enabled, and\nmust be set explicitly elsewhere on the node(s).\n\n* `node['splunk']['upgrade_enabled']`: Controls whether the upgrade is\n  enabled and the `attributes/upgrade.rb` file should be loaded. Set\n  this in a role or wrapper cookbook to perform an upgrade.\n* `node['splunk']['upgrade']`: Sets `server_url` and `forwarder_url`\n  attributes based on platform and architecture. These are only loaded\n  if `upgrade_enabled` is set.\n\n## Definitions\n\n### splunk_installer\n\nThe Splunk Enterprise and Splunk Universal Forwarder package\ninstallation is the same save the name of the package and the URL to\ndownload. This definition abstracts the package installation to a\ncommon baseline. Any new platform installation support should be added\nby modifying the definition as appropriate. One goal of this\ndefinition is to have a single occurance of a `package` resource,\nusing the appropriate \"local package file\" provider per platform. For\nexample, on RHEL, we use `rpm` and on Debian we use `dpkg`.\n\nPackage files will be downloaded to Chef's file cache path (e.g.,\n`file_cache_path` in `/etc/chef/client.rb`, `/var/chef/cache` by\ndefault).\n\nThe definition has two parameters.\n\n* `name`: The name of the package (e.g., `splunk`).\n* `url`: The URL to the package file.\n\n#### Examples\n\nFor example, if the nodes in the environment are all Debian-family,\nand the desired splunkforwarder package is provided locally as\n`splunkforwarder.deb` on an internal HTTP server:\n\n```ruby\nsplunk_installer 'splunkforwarder' do\n  url 'https://www-int.example.com/splunk/splunkforwarder.deb'\nend\n```\n\nThe `install_forwarder` and `install_server` recipes use the\ndefinition with the appropriate `url` attribute.\n\n## Recipes\n\nThis cookbook has several composable recipes that can be used in a\nrole, or a local \"wrapper\" cookbook. The `default`, `client`, and\n`server` recipes are intended to be used wholesale with all the\nassumptions they contain.\n\nThe general default assumption is that a node including the `default`\nrecipe will be a Splunk Universal Forwarder (client).\n\n### client\n\nThis recipe encapsulates a completely configured \"client\" - a Splunk\nUniversal Forwarder configured to talk to a node that is the splunk\nserver (with node['splunk']['is_server'] true). The recipes can be\nused on their own composed in a wrapper cookbook or role. This recipe\nwill include the `user`, `install_forwarder`, `service`, and\n`setup_auth` recipes.\n\nIt will also search a Chef Server for a Splunk Enterprise (server)\nnode with `splunk_is_server:true` in the same `chef_environment` and\nwrite out `etc/system/local/outputs.conf` with the server's IP and the\n`receiver_port` attribute in the Splunk install directory\n(`/opt/splunkforwarder`).\n\nSetting node['splunk']['tcpout_server_config_map'] with key value pairs\nupdates the outputs.conf server configuration with those key value pairs.\nThese key value pairs can be used to setup SSL encryption on messages\nforwarded through this client:\n\n```\n# Note that the ssl CA and certs must exist on the server.\nnode['splunk']['tcpout_server_config_map'] = {\n  'sslCommonNameToCheck' => 'sslCommonName',\n  'sslCertPath' => '$SPLUNK_HOME/etc/certs/cert.pem',\n  'sslPassword' => 'password'\n  'sslRootCAPath' => '$SPLUNK_HOME/etc/certs/cacert.pem'\n  'sslVerifyServerCert' => false\n}\n```\n\nThe inputs.conf file can also be managed through this recipe if you want to\nsetup a splunk forwarder just set the  default host:\n\n```\nnode['splunk']['inputs_conf']['host'] = 'myhost'\n```\nThen set up the port configuration for each input port:\n\n```\nnode['splunk']['inputs_conf']['ports'] =\n[\n  {\n    port_num => 123123,\n    config => {\n      'sourcetype' => 'syslog',\n      ...\n    }\n  },\n  ...\n]\n```\n\n\n### default\n\nThe default recipe will include the `disabled` recipe if\n`node['splunk']['disabled']` is true.\n\nIt will include the `client` or `server` recipe depending on whether\nthe `is_server` attribute is set.\n\nThe attribute use allows users to control the included recipes by\neasily manipulating the attributes of a node, or a node's roles, or\nthrough a wrapper cookbook.\n\n### disabled\n\nIn some cases it may be required to disable Splunk on a particular\nnode. For example, it may be sending too much data to Splunk and\nexceed the local license capacity. To use the `disabled` recipe, set\nthe `node['splunk']['disabled']` attribute to true, and include the\nrecipe on the required node, or just use the `default` recipe.\n\n### install_forwarder\n\nThis recipe uses the `splunk_installer` definition to install the\nsplunkforwarder package from the specified URL (via the\n`node['splunk']['forwarder']['url']` attribute).\n\n### install_server\n\nThis recipe uses the `splunk_installer` definition to install the\nsplunk (Enterprise server) package from the specified URL (via the\n`node['splunk']['server']['url']` attribute).\n\n### server\n\nThis recipe encapsulates a completely configured \"server\" - Splunk\nEnterprise configured to receive data from Splunk Universal Forwarder\nclients. The recipe sets the attribute `node['splunk']['is_server']`\nto true, and is included from the `default` recipe if the attribute is\ntrue as well. The recipes can be used on their own composed in a\nwrapper cookbook or role, too. This recipe will include the `user`,\n`install_server`, `service`, and `setup_auth` recipes. It will also\nconditionally include the `setup_ssl` and `setup_clustering` recipes\nif enabled via the corresponding node attributes, as defined\nin __Attributes__ above.\n\nIt will also enable Splunk Enterprise as an indexer, listening on the\n`node['splunk']['receiver_port']`.\n\n## service\n\nThis recipe sets up the `splunk` service, and applies to both client\nand server use, since `splunk` is the same service for both\ndeployments of Splunk.\n\nThe attribute `node['splunk']['accept_license']` must be true in order\nto set up the boot script. If it's true, then the boot script gets put\ninto place (`/etc/init.d/splunk` on Linux/Unix systems), with the\nlicense accepted. The service is managed using the Chef `init` service\nprovider, which operates by using the `/etc/init.d/splunk` script for\nstart, stop, restart, etc commands.\n\n## setup_auth\n\nThis recipe loads an encrypted data bag with the Splunk user\ncredentials as an `-auth` string, '`user:password`', using the\n[chef-vault cookbook](http://ckbk.it/chef-vault) helper method,\n`chef_vault_item`. See __Usage__ for how to set this up. The recipe\nwill edit the specified user (assuming `admin`), and then write a\nstate file to `etc/.setup_admin_password` to indicate in future Chef\nruns that it has set the password. If the password should be changed,\nthen that file should be removed.\n\n## setup_clustering\n\nThis recipe sets up Splunk indexer clustering based on the node's\nclustering mode or `node['splunk']['clustering']['mode']`. The attribute\n`node['splunk']['clustering']['enable']` must be set to true in order to\nrun this recipe. Similar to `setup_auth`, this recipes loads\nthe same encrypted data bag with the Splunk `secret` key (to be shared among\ncluster members), using the [chef-vault cookbook](http://ckbk.it/chef-vault)\nhelper method, `chef_vault_item`. See __Usage__ for how to set this up. The\nrecipe will edit the cluster configuration, and then write a state file to\n`etc/.setup_cluster_{master|slave|searchhead}` to indicate in future Chef\nruns that it has set the node's indexer clustering configuration. If cluster\nconfiguration should be changed, then that file should be removed.\n\nIt will also search a Chef Server for a Splunk Enterprise (server)\nnode of type cluster master, that is with `splunk_clustering_enable:true` and\n`splunk_clustering_mode:master` in the same `chef_environment` and\nuse that server's IP when configuring a cluster search head or a cluster\npeer node to communicate with the cluster master (Refer to `master_uri` attribute\nof clustering stanza in `etc/system/local/server.conf`). \n\nIndexer clustering is used to achieve some data availability & recovery. To learn\nmore about Splunk indexer clustering, refer to [Splunk Docs](http://docs.splunk.com/Documentation/Splunk/latest/Indexer/Aboutclusters).\n\n## upgrade\n\n**Important** Read the upgrade documentation and release notes for any\n  particular Splunk version upgrades before performing an upgrade.\n  Also back up the Splunk directory, configuration, etc.\n\nThis recipe can be used to upgrade a splunk installation, for example\nfrom an existing 4.2.1 to 4.3.7. The default recipe can be used for\n6.0.1 after upgrading earlier versions is completed. Note that the\nattributes file is only loaded w/ the URLs to the splunk packages to\nupgrade if the `node['splunk']['upgrade_enabled']` attribute is set to\ntrue. We recommend setting the actual URL attributes needed in a\nwrapper cookbook or role.\n\n## user\n\nThis recipe manages the `splunk` user and group. On Linux systems, the\nuser and group will be created with the `system` attribute; other\nplatforms may not be aware of `system` users/groups (e.g.,\nillumos/solaris). Both resources will be created with the UID or GID\nof the `node['splunk']['user']['uid']` attribute. The default value is\n396, arbitrarily chosen to fall under the `system` UID/GID set by\n`/etc/login.defs` on both RHEL and Debian family Linux systems. If\nthis is a conflicting UID/GID, then modify the attribute as required.\n\n## Usage\n\n### Data Bag Items\n\n#### Splunk Secrets & Admin User Authentication\n\nSplunk secret key and admin user authentication information should be stored in a\ndata bag item that is encrypted using Chef Vault. Create a data bag\nnamed `vault`, with an item `splunk_CHEF-ENVIRONMENT`, where\n`CHEF-ENVIRONMENT` is the `node.chef_environment` that the Splunk\nEnterprise server will be assigned. If environments are not used, use\n`_default`. For example in a Chef Repository (not in a cookbook):\n\n    % cat data_bags/vault/splunk__default.json\n    {\n      \"id\": \"splunk__default\",\n      \"auth\": \"admin:notarealpassword\",\n      \"secret\": \"notarealsecret\"\n    }\n\nOr with an environment, '`production`':\n\n    % cat data_bags/vault/splunk_production.json\n    {\n      \"id\": \"splunk_production\",\n      \"auth\": \"admin:notarealpassword\",\n      \"secret\": \"notarealsecret\"\n    }\n\nThen, upload the data bag item to the Chef Server using the\n`chef-vault` `knife encrypt` plugin (first example, `_default`\nenvironment):\n\n    knife encrypt create vault splunk__default \\\n        --json data_bags/vault/splunk__default.json \\\n        --search 'splunk:*' --admins 'yourusername' \\\n        --mode client\n\nMore information about Chef Vault is available on the\n[GitHub Project Page](https://github.com/Nordstrom/chef-vault).\n\n#### Web UI SSL\n\nA Splunk server should have the Web UI available via HTTPS. This can\nbe set up using self-signed SSL certificates, or \"real\" SSL\ncertificates. This loaded via a data bag item with chef-vault. Using\nthe defaults from the attributes:\n\n    % cat data_bags/vault/splunk_certificates.json\n    {\n      \"id\": \"splunk_certificates\",\n      \"data\": {\n        \"self-signed.example.com.crt\": \"-----BEGIN CERTIFICATE-----\\n...SNIP\",\n        \"self-signed.example.com.key\": \"-----BEGIN RSA PRIVATE KEY-----\\n...SNIP\"\n      }\n    }\n\nLike the authentication credentials above, run the `knife encrypt`\ncommand. Note the search here is for the splunk server only:\n\n    knife encrypt create vault splunk_certificates \\\n        --json data_bags/vault/splunk_certificates.json \\\n        --search 'splunk_is_server:true' --admins 'yourusername' \\\n        --mode client\n\n## License and Authors\n\n- Author: Joshua Timberman <joshua@chef.io>\n- Copyright 2013, Chef Software, Inc <legal@chef.io>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef-vault",
      "revision": ">= 1.0.4",
      "self_resolve": true
    }
  ]
}