{
  "name": "bacula-backup Chef cookbook",
  "chef_cookbook_name": "bacula-backup",
  "revision": "1.9.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/bacula-backup",
    "https://supermarket.chef.io/cookbooks/bacula-backup/download",
    "https://supermarket.chef.io/cookbooks/bacula-backup/versions/1.9.0",
    "https://supermarket.chef.io/cookbooks/bacula-backup/versions/1.9.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/bacula-backup/versions/1.9.0",
    "https://supermarket.chef.io/api/v1/cookbooks/bacula-backup",
    "https://supermarket.chef.io/api/v1/cookbooks/bacula-backup/versions/1.9.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/bacula-backup",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/bacula-backup/versions/1.9.0/download",
  "deprecated": false,
  "created": "2014-10-23T19:34:12.888Z",
  "updated": "2016-02-08T22:42:52.784Z",
  "description": "Installs and autoconfigures bacula backup system",
  "maintainer": {
    "name": "biolauniversity",
    "email": "troy.ready@biola.edu"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 2896056,
  "downloads_count_revision": 59369,
  "repository_url": "https://github.com/biola/chef-bacula-backup",
  "issues_url": "https://github.com/biola/chef-bacula-backup/issues",
  "chef_source_url": "https://github.com/biola/chef-bacula-backup",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Description\n\n**NOTE:** This cookbook is forked from the awesome work done by [computerlyrik](http://github.com/computerlyrik/chef-bacula) to add additional features (e.g. tape drive support). Its name has been changed to `bacula-backup` to allow for a unique cookbook name to be used on the Supermarket. It may be renamed to just `bacula` again in the future.\n\nTested on Ubuntu 12.04 server (should also work on Debian - please report!). Also supports file daemon (e.g. 'client') installs on RHEL 5 & Windows.\n\nSupports File backup on a dedicated storage server with a single bacula director and multiple clients to be backed up.\n\nPainlessly autoconfigures itself and the Jobs to be done.\nBacks up daily incremental, full weekly. (see usage)\nAlso supports installation of bacula console to observe your backup progresses.\n\n## Autogenerated Jobs\n\n- Files\n- LDAP\n- Chef server\n\n\n## Recipes\n### Bacula Director (bacula-dir)\n```ruby\nbacula-backup::server \n```\nCentral backup server \n\n### Bacula File Daemon (bacula-fd)\n```ruby\nbacula-backup::client\n```\nUsed by each client to be backed up. Currently supports Ubuntu 12.04/14.04, RHEL/CentOS 5, and MS Windows.\n\n### Bacula Storage Daemon (bacula-sd)\n```ruby\nbacula-backup::storage (bacula-sd)\n```\nFor use on storage system\n\n### Bacula Administration Tool BAT (bacula-console-qt)\n```ruby\nbacula-backup::bat\n```\nUsed for Systems with graphic environment - installs and configures \"bat\" Bacula qt-console\n\n# Requirements\n\nSee metadata for cookbook dependencies.\n\n#Attributes\n\n**default.rb**\n\nConfigure the bacula user\n```ruby\nnode['bacula']['user']\nnode['bacula']['group']\n```\n\n**server.rb**\n\nSet general backup properties\n```ruby\nnode['bacula']['dir']['max_concurrent_jobs'] = \"1\"\nnode['bacula']['dir']['address'] = nil # if set, causes to director to bind to the specified address\n```\n\nSet properties for File based backup\n```ruby\nnode['bacula']['volume_size'] = \"1G\"\nnode['bacula']['volume_max'] = 20\nnode['bacula']['label_format'] = \"BaculaFile\"\n```\n\nAdditional storage pools (beyond the built-in File & Default pools) can be specified as arrays in the `['bacula']['dir']['pools']` attribute. E.g.:\n```ruby\ndefault['bacula']['dir']['pools'] = [\n  {\n    \"Name\": \"MyTapePool\",\n    \"Volume Retention\": \"365 days\",\n    \"Storage\": \"\\\"mystorage.local-mytapelibrary-LTO-5\\\"\",\n    \"Pool Type\": \"Backup\",\n    \"RecyclePool\": \"Scratch\",\n    \"Recycle Oldest Volume\": \"yes\"\n  }\n]\n```\nThe contents of this array will be directly converted into `Pool` resources in the storage configuration file. E.g., the above example would be translated to:\n```\nPool {\n  Name = MyTapePool\n  Volume Retention = 365 days\n  Storage = \"mystorage.local-mytapelibrary-LTO-5\"\n  Pool Type = Backup\n  RecyclePool = Scratch\n  Recycle Oldest Volume = yes\n}\n```\n\n\n**client.rb**\n\nSet files to be backed up (see Usage below)\n```ruby\nnode['bacula']['fd']['files']\n```\n\n[Client side encryption](http://www.bacula.org/5.2.x-manuals/en/main/main/Data_Encryption.html) can be enabled with the attributes:\n```ruby\nnode['bacula']['fd']['encrypt_backups'] = true\nnode['bacula']['fd']['pki_masterkey_public'] = \"-----BEGIN CERTIFICATE-----\\nMII...\"\n```\nWhen `encrypt_backups` is set to `true`, a SSL keypair is generated automatically for the client (you should back this up separately). If `pki_masterkey_public` is populated with a public key, it will be deployed to the client as well.\n\n**storage.rb**\n\nSet up destination of File-Storage\n```ruby\ndefault['bacula']['sd']['backup_dir'] = \"/backup\"\n```\n\nConfigures the Maximum Network Buffer Size for the File-Storage device\n```ruby\ndefault['bacula']['sd']['file_max_net_buffer'] = \"32768\"\n```\n\nAdditional storage devices (e.g. tape devices and autochangers) can be specified in the `['bacula']['sd']['devices']` or `['bacula']['sd']['autochangers']` attributes (and then again in `['bacula']['sd']['dir-devices']` -- see below). E.g.:\n```ruby\ndefault['bacula']['sd']['devices'] = [\n  {\n    \"Name\": \"LTO5-1\",\n    \"Media Type\": \"LTO-5\",\n    \"RemovableMedia\": \"yes\",\n    \"RandomAccess\": \"no\",\n    \"Archive Device\": \"/dev/nst1\"\n  }\n]\n```\nThe contents of these arrays will be directly converted into `Device` or `Autochanger` resources in the storage configuration file. E.g., the above example would be translated to:\n```\nDevice {\n  Name = LTO5-1\n  Media Type = LTO-5\n  RemovableMedia = yes\n  RandomAccess = no\n  Archive Device = /dev/nst1\n}\n```\nBecause options for the corresponding director `Storage` resources can vary (e.g., are devices in an autochanger? If yes, don't make their own Storage resource), these need to be manually specified. E.g.:\n```ruby\ndefault['bacula']['sd']['dir-devices'] = [\n  {\n    \"Device\": \"mytapelibrary\",\n    \"Media Type\": \"LTO-5\",\n    \"AllowCompression\": \"no\",\n    \"Autochanger\": \"yes\"\n  }\n]\n```\nNote that the `Name`, `Address`, `SDPort`, and `Password` attributes **must be ommitted** as they are automatically configured. The contents of this array will be directly converted into `Storage` resources in the director configuration file. E.g., the above example would be translated to the following (assuming a server with a FQDN of mystorage.local, ip of 1.2.3.4, and password of 12345):\n```\nStorage {\n  Name = mystorage.local-mytapelibrary-LTO-5\n  Address = 1.2.3.4\n  SDPort = 9103\n  Password = \"12345\"\n  Device = mytapelibrary\n  Media Type = LTO-6\n  AllowCompression = no\n  Autochanger = yes\n}\n```\n\n# Usage\n\n\n## Backup Job generation\n\nTo autogenerate jobs the following expressions need to be ```true``` on ```bacula-backup::client``` machine:\n\n**Ldap**\n\n```ruby\nnode['openldap'] && node['openldap']['slapd_type'] == \"master\"\n```\n\n**Chef Server**\n\n```ruby\nnode['fqdn'] == \"chef.#{node['domain']}\"\n```\n\n## Default deployment\n- node A => bacula-backup::server\n- node B => bacula-backup::storage (with much storage)\n- node C-Z => bacula-backup::client\n\n# Examples\n\n## Simple file backup\nSet on your ```bacula-backup::client``` node\n```ruby\nnode.set['bacula']['fd']['files'] = {\n  'includes' => ['/']],\n  'excludes' => [ '/dev','sys']\n}\n```\n\n## Custom Backups\n\nWhen more granual control over backup jobs/filesets/schedules is needed, they can be specified as arrays on the clients' `['bacula']['fd']['jobs']`, `['bacula']['fd']['filesets']`, & `['bacula']['fd']['schedules']` attributes. E.g.:\n\n```ruby\n\n\"default_attributes\": {\n  \"bacula\": {\n    \"fd\": {\n      \"filesets\": [\n        [\n          \"Name = \\\"myclient-accurate-opt\\\"\",\n          \"Ignore FileSet Changes = yes\",\n          \"Include {\",\n          \"  Options {\",\n          \"    signature = MD5\",\n          \"  }\",\n          \"File = /opt\",\n          \"}\"\n        ]\n      ],\n      \"jobs\": [\n        {\n          \"Name\": \"\\\"myclient-wednesdays\\\"\",\n          \"Client\": \"myclient.local\",\n          \"Type\": \"Backup\",\n          \"Accurate\": \"yes\",\n          \"Level\": \"Incremental\",\n          \"Messages\": \"Standard\",\n          \"FileSet\": \"\\\"myclient-accurate-opt\\\"\",\n          \"Schedule\": \"\\\"myclient-wednesday\\\"\",\n          \"Pool\": \"Default\",\n          \"Storage\": \"File\"\n        }\n      ],\n      \"schedules\": [\n        [\n          \"Name = \\\"myclient-wednesday\\\"\",\n          \"Run = Level=Full 1st wed at 18:00\",\n          \"Run = Level=Incremental 2nd wed at 18:00\",\n          \"Run = Level=Incremental 3rd wed at 18:00\",\n          \"Run = Level=Incremental 4th wed at 18:00\",\n          \"Run = Level=Incremental 5th wed at 18:00\"\n        ]\n      ]\n    }\n  }\n}\n```\nNote that `schedules` and `filesets` are specified as raw arrays under their parent array (because of their varied and often complex structure), and `jobs` are specified are hashes under their parent array. The above example will generate the following director entries:\n\n```\nFileSet {\n  Name = \"myclient-accurate-opt\"\n  Ignore FileSet Changes = yes\n  Include {\n    Options {\n      signature = MD5\n    }\n  File = /opt\n  }\n}\n\nJob {\n  Name = \"myclient-wednesdays\"\n  Client = myclient.local\n  Type = Backup\n  Accurate = yes\n  Level = Incremental\n  Messages = Standard\n  FileSet = \"myclient-accurate-opt\"\n  Schedule = \"myclient-wednesday\"\n  Pool = Default\n  Storage = File\n}\n\nSchedule {\n  Name = \"myclient-wednesday\"\n  Run = Level=Full 1st wed at 18:00\n  Run = Level=Incremental 2nd wed at 18:00\n  Run = Level=Incremental 3rd wed at 18:00\n  Run = Level=Incremental 4th wed at 18:00\n  Run = Level=Incremental 5th wed at 18:00\n}\n```\n\n\n# Contact\nsee metadata.rb\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/database",
      "revision": "< 4.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/mysql",
      "revision": "~> 5.5",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/mysql-chef_gem",
      "revision": "~> 0.0.2",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/openssl",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/windows",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}