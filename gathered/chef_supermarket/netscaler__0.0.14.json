{
  "name": "netscaler Chef cookbook",
  "chef_cookbook_name": "netscaler",
  "revision": "0.0.14",
  "uris": [
    "https://supermarket.chef.io/cookbooks/netscaler",
    "https://supermarket.chef.io/cookbooks/netscaler/download",
    "https://supermarket.chef.io/cookbooks/netscaler/versions/0.0.14",
    "https://supermarket.chef.io/cookbooks/netscaler/versions/0.0.14/download",
    "https://supermarket.chef.io/api/v1/cookbooks/netscaler/versions/0.0.14",
    "https://supermarket.chef.io/api/v1/cookbooks/netscaler",
    "https://supermarket.chef.io/api/v1/cookbooks/netscaler/versions/0.0.14/download"
  ],
  "labels": [
    "Chef cookbook",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/netscaler",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/netscaler/versions/0.0.14/download",
  "deprecated": false,
  "created": "2014-10-08T21:27:13.320Z",
  "updated": "2015-11-17T00:29:52.717Z",
  "description": "A collection of resources for managing Citrix NetScaler",
  "maintainer": {
    "name": "heathsnow",
    "email": "dl_teamengineering@daptiv.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 4,
  "downloads_count": 4904105,
  "downloads_count_revision": 240381,
  "repository_url": "https://github.com/daptiv/netscaler",
  "issues_url": "https://github.com/daptiv/netscaler/issues",
  "chef_source_url": "https://github.com/daptiv/netscaler",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "[![Build Status](https://secure.travis-ci.org/daptiv/netscaler.png)](http://travis-ci.org/daptiv/netscaler)\n\n# netscaler cookbook\n\nA collection of resources for managing Citrix NetScaler (Nitro API).\n\nThis has been written so that adding a missing NetScaler resource *should* be easy.\n\nCreating a new resource\n\n1.  All resources should have required attributes: hostname, username, password, and the resource name\n2.  All other attributes (payload for rest call) should default to nil.\n  1. Use http://\\<netscaler_ip\\>/nitro/v1/config/<resource_name> to see available payload options.\n\nCreating a new provider\n\n1.  Actions supported: \n  * :create - calls `create_resource`\n  * :update - calls `update_resource`\n  * :delete - calls `delete_resource`\n  * :bind   - calls `bind_resource`\n2.  Attributes in the payload should be passed in as a hash\n3.  `resource_type` should be the the feature that you're manipulating (ie server, lbvserver, etc)\n4.  `resource_id` should be set to the key of the resource (ie name, servicegroupname, etc)\n5.  Be carefull of chef reserved words.  If you look at the `netscaler_server` resource/provider\nyou'll see I use the payload key as my attribute names for everthing except for `servername` which\ndoesn't exist as a key for the `server` resource type.  The key in the options hash is still 'name'\nthough.  The options hash key has to match the netscaler payload key.\n\n## Supported Platforms\n\n* Any supported by chef\n\nLibrary Methods\n===============\n\nNetscaler::Helper\n-----------------\nA collection of methods for CRUD operations on NetScaler\n\n### Methods\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Vars</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>create_resource</tt></td>\n    <td>resource_type, resource_id, hostname, username, password, payload = {}</td>\n    <td>Make a post call to the netscaler</td>\n  </tr>\n  <tr>\n    <td><tt>update_resource</tt></td>\n    <td>resource_type, resource_id, hostname, username, password, payload = {}</td>\n    <td>Make a put call to the netscaler</td>\n  </tr>\n  <tr>\n    <td><tt>delete_resource</tt></td>\n    <td>resource_type, resource_id, hostname, username, password, payload = {}</td>\n    <td>Make a delete call to the netscaler</td>\n  </tr>\n</table>\n\nLibrary Classes\n===============\n\nNetscaler::Utilites\n-----------------\nA utility class used by Netscaler::Helper\n\n### Methods\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Vars</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>resource_exists?</tt></td>\n    <td>resource_type, resource</td>\n    <td>Check if a resource exists</td>\n  </tr>\n  <tr>\n    <td><tt>key_value_exists?</tt></td>\n    <td>resource_type, resource, key, value</td>\n    <td>Check if a key/value exists</td>\n  </tr>\n  <tr>\n    <td><tt>build_request</tt></td>\n    <td>method, resource_type, resource, options</td>\n    <td>Create the rest call</td>\n  </tr>\n  <tr>\n    <td><tt>build_url</tt></td>\n    <td>method, primary_hostname, resource_type, resource, resource_id, binding</td>\n    <td>Create the url used for the rest call</td>\n  </tr>\n  <tr>\n    <td><tt>find_primary</tt></td>\n    <td>method, resource_type, resource, resource_id, binding, payload</tc>\n    <td>Given an array of options, find the primary Netscaler</td>\n  </tr>\n  <tr>\n    <td><tt>save_config</tt></td>\n    <td></tc>\n    <td>Save the netscaler configuration</td>\n  </tr>\n  <tr>\n    <td><tt>logout</tt></td>\n    <td></tc>\n    <td>Log out of the netscaler</td>\n  </tr>\n</table>\n\n### Examples\n    # New netscaler instance\n    netscalers = search(:node, \"role:netscaler AND chef_environment:#{node.chef_environment}\"\n    netscaler_ips = netscalers.map { |n| n['ipaddress'] }\n    ns = Netscaler::Utilities.new(\n      :hostname => netscaler_ips,\n      :username => 'iamgroot',\n      :password => 'iamgroot'\n    )\n\n    # Check if a StarLord server exists\n    resource_exists = ns.resource_exists?('server','StarLord')\n\n    # Check if server StarLord exists\n    server_exists = ns.resource_exists?('server','StarLord')\n\n    # Check if StarLord server is UP in Guardians service group\n    server_up = ns.key_value_exists?(\n      'server_servicegroup_binding',\n      'StarLord',\n      'svrstate',\n      'UP'\n    )\n\n    # GET request for server StarLord\n    request = ns.build_request('get', 'server', 'StarLord')\n    response = request.execute\n\n    # Build the rest request to get StarLord server info\n    url = ns.build_url('get', '123.456.12.34', 'server', 'StarLord')\n\n    # Find the primary netscaler given an array\n    primary = ns.find_primary\n\n    # Save the configuration file\n    ns.save_config\n\n    # Logout of the netscaler\n    ns.logout\n\nResources/Providers\n===================\n\nThe idea here is that every rest call will eventually be represented with a new\nresource/provider.  Below are a few examples to get you started.\n\nnetscaler_server\n----------------\n\n### Actions\n- :create: Create a resource\n- :update: Update an existing resource\n- :delete: Delete an existing resource\n\n### Examples\n    # Create a new server called StarLord\n    netscaler_server \"Create StarLord\" do\n      servername 'StarLord'\n      hostname '123.45.123.1'\n      domainresolveretry 6\n      username 'iamgroot'\n      password 'iamgroot'\n      domain 'mydomain.com'\n      action :create\n    end\n\n    # Update a server called StarLord\n    netscaler_server 'Update StarLord' do\n      servername 'StarLord'\n      hostname '123.45.123.1'\n      domainresolveretry 22\n      username 'iamgroot'\n      password 'iamgroot'\n      action :update\n    end\n\n    # Delete a server called StarLord\n    netscaler_server 'Delete StarLord' do\n      servername 'StarLord'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :delete\n    end\n\nnetscaler_servicegroup\n----------------------\n\n### Actions\n- :create: Create a resource\n- :update: Update an existing resource\n- :delete: Delete an existing resource\n- :bind: Bind one resource to another\n\n### Examples\n    # Create a service group called Guardians\n    netscaler_servicegroup 'Create Guardians' do\n      servicegroupname 'Guardians'\n      servicetype 'HTTP'\n      comment 'Something good, something bad'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :create\n    end\n\n    # Bind server StarLord to service group FannyUrAunt\n    netscaler_servicegroup 'Bind StarLord' do\n      hostname '172.16.198.2'\n      username 'iamgroot'\n      password 'iamgroot'\n      servicegroupname 'Guardians'\n      servername 'StarLord'\n      port 80\n      action :bind\n    end\n\nnetscaler_monitor\n----------------------\n\n### Actions\n- :create: Create a resource\n- :update: Update an existing resource\n- :bind: Bind one resource to another\n\n### Examples\n    # Create a monitor called Xandar\n    netscaler_monitor 'Create Xandar' do\n      monitorname 'Xandar'\n      type 'PING'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :create\n    end\n\n    # Bind server StarLord to service group FannyUrAunt\n    netscaler_monitor 'Bind Xandar' do\n      hostname '172.16.198.2'\n      username 'iamgroot'\n      password 'iamgroot'\n      monitorname 'Xandar'\n      servicegroupname 'Guardians'\n      action :bind\n    end\n\n## List of created resources/providers\n* netscaler_server\n* netscaler_servicegroup\n* netscaler_monitor\n\n## TO DO\n\n* More/better testing\n* Add more resource/providers\n\n## Contributing\n\n1. Fork the repository on Github\n2. Create a named feature branch (i.e. `add-new-recipe`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request\n\n## License and Authors\n\nAuthor:: Daptiv Engineering (dl_teamengineering@daptiv.com)\n"
}