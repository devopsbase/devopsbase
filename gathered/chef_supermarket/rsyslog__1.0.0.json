{
  "name": "rsyslog Chef cookbook",
  "chef_cookbook_name": "rsyslog",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/rsyslog",
    "https://supermarket.chef.io/cookbooks/rsyslog/download",
    "https://supermarket.chef.io/cookbooks/rsyslog/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/rsyslog/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/rsyslog/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/rsyslog",
    "https://supermarket.chef.io/api/v1/cookbooks/rsyslog/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Logging"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/rsyslog",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/rsyslog/versions/1.0.0/download",
  "deprecated": false,
  "created": "2009-10-28T19:19:53.000Z",
  "updated": "2016-07-21T02:46:00.074Z",
  "description": "Installs and configures rsyslog",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 72,
  "downloads_count": 36956757,
  "downloads_count_revision": 1260110,
  "repository_url": "https://github.com/chef-cookbooks/rsyslog",
  "issues_url": "https://github.com/chef-cookbooks/rsyslog/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/rsyslog",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstalls rsyslog to replace sysklogd for client and/or server use. By default, server will be set up to log to files.\n\nChanges\n=======\n\n## v1.0.0:\n\n* [COOK-836] - use an attribute to specify the role to search for\n  instead of relying on the rsyslog['server'] attribute.\n* Clean up attribute usage to use strings instead of symbols.\n* Update this README.\n* Better handling for chef-solo.\n\nRequirements\n============\n\nPlatform\n--------\n\nTested on Ubuntu 8.04, 9.10, 10.04.\n\nFor Ubuntu 8.04, the rsyslog package will be installed from a PPA via the default.rb recipe in order to get 4.2.0 backported from 10.04.\n\n* https://launchpad.net/~a.bono/+archive/rsyslog\n\nUbuntu 8.10 and 9.04 are no longer supported releases and have not been tested with this cookbook.\n\nCookbooks\n---------\n\n* cron (http://community.opscode.com/cookbooks/cron)\n\nOther\n-----\n\nTo use the `recipe[rsyslog::client]` recipe, you'll need to set up a\nrole to search for. See the __Recipes__, and __Examples__ sections below.\n\nAttributes\n==========\n\nSee `attributes/default.rb` for default values.\n\n* `node['rsyslog']['log_dir']` - If the node is an rsyslog server,\n  this specifies the directory where the logs should be stored.\n* `node['rsyslog']['server']` - Used to indicate whether the node\n  running Chef is an rsyslog server. As of cookbook v1.0.0, this is\n  determined automatically through search. The server recipe will set\n  this to true. It is otherwise unused in the current version.\n* `node['rsyslog']['protocol']` - Specify whether to use `udp` or\n  `tcp` for remote loghost.\n* `node['rsyslog']['port']` - Specify the port which rsyslog should\n  connect to a remote loghost.\n* `node['rsyslog']['server_role']` - Role applied to a remote\n  loghost. Used by `recipe[rsyslog::client]` to search for the\n  loghost.\n\nRecipes\n=======\n\ndefault\n-------\n\nInstalls the rsyslog package, manages the rsyslog service and sets up\nbasic configuration for a standalone machine.\n\nclient\n------\n\nIncludes `recipe[rsyslog]`.\n\nUses Chef search to find a remote loghost node with the role specified\nby `node['rsyslog']['server_role']` and uses its `ipaddress` attribute\nto send log messages. If the node itself has the `server_role` in the\nexpanded roles, then the configuration is skipped. If the node had an\n`/etc/rsyslog.d/server.conf` file previously configured, this file\ngets removed to prevent duplicate logging. Any previous logs are not\ncleaned up from the `log_dir`.\n\nserver\n------\n\nConfigures the node to be an rsyslog loghost. The node should have the\nrole specified by `node['rsyslog']['server_role']` applied so client\nnodes can find it with search. This recipe will create the logs in\n`node['rsyslog']['log_dir']`, and the configuration is in\n`/etc/rsyslog.d/server.conf`. This recipe also removes any previous\nconfiguration to a remote server by removing the\n`/etc/rsyslog.d/remote.conf` file. Finally, a cron job is set up to\ncompress logs in the `log_dir` that are older than one day.\n\nThe server configuration will set up `log_dir` for each client, by\ndate. Directory structure:\n\n    <%= @log_dir %>/YEAR/MONTH/DAY/HOSTNAME/\"logfile\"\n\nFor example:\n\n    /srv/rsyslog/2011/11/19/www/messages\n\nAt this time, the server can only listen on UDP *or* TCP.\n\nUsage\n=====\n\nUse `recipe[rsyslog]` to install and start rsyslog as a basic\nconfigured service for standalone systems.\n\nUse `recipe[rsyslog::client]` to have nodes search for the loghost\nautomatically to configure remote [r]syslog.\n\nUse `recipe[rsyslog::server]` to set up a loghost. It will listen on\n`node['rsyslog']['port']` protocol `node['rsyslog']['protocol']`.\n\nIf you set up a different kind of centralized loghost (syslog-ng,\ngraylog2, logstash, etc), you can still send log messages to it as\nlong as the port and protocol match up with the server\nsoftware. See __Examples__\n\nExamples\n--------\n\nA `base` role (e.g., roles/base.rb), applied to all nodes so they are syslog clients:\n\n    name \"base\"\n    description \"Base role applied to all nodes\n    run_list(\"recipe[rsyslog::client]\")\n\nThen, a role for the loghost (should only be one):\n\n    name \"loghost\"\n    description \"Central syslog server\"\n    run_list(\"recipe[rsyslog::server]\")\n\nBy default this will set up the clients search for a node with the\n`loghost` role to talk to the server on TCP port 514. Change the\n`protocol` and `port` rsyslog attributes to modify this.\n\nIf you're using another log server software on your loghost, such as\ngraylog2, you can use the role for that loghost for the search\ninstead. For example, if the role of your graylog2 server is\n`graylog2_server`, then modify the base role for the server role:\n\n    name \"base\"\n    description \"Base role applied to all nodes\n    run_list(\"recipe[rsyslog::client]\")\n    default_attributes(\n      \"rsyslog\" => {\n        \"server_role\" => \"graylog2_server\"\n      }\n    )\n\nThen make sure you have a role named `graylog2_server` applied to some\nnode, and `recipe[rsyslog::client]` will configure the local system to\nsend logs to graylog2.\n\nLicense and Author\n==================\n\nAuthor:: Joshua Timberman (<joshua@opscode.com>)\n\nCopyright:: 2009-2011, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 8.04",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 5.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/cron",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "rsyslog": "Installs rsyslog",
    "rsyslog::client": "Sets up a client to log to a remote rsyslog server",
    "rsyslog::server": "Sets up an rsyslog server"
  },
  "parameters": {
    "rsyslog": {
      "display_name": "Rsyslog",
      "description": "Hash of Rsyslog attributes",
      "type": "hash",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "rsyslog/log_dir": {
      "display_name": "Rsyslog Log Directory",
      "description": "Filesystem location of logs from clients",
      "default": "/srv/rsyslog",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "rsyslog/server": {
      "display_name": "Rsyslog Server?",
      "description": "Is this node an rsyslog server?",
      "default": "false",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "rsyslog/protocol": {
      "display_name": "Rsyslog Protocol",
      "description": "Set which network protocol to use for rsyslog",
      "default": "tcp",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "rsyslog/port": {
      "display_name": "Rsyslog Port",
      "description": "Port that Rsyslog listens for incoming connections",
      "default": "514",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}