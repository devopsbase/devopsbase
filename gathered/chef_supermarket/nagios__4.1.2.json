{
  "name": "nagios Chef cookbook",
  "chef_cookbook_name": "nagios",
  "revision": "4.1.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/nagios",
    "https://supermarket.chef.io/cookbooks/nagios/download",
    "https://supermarket.chef.io/cookbooks/nagios/versions/4.1.2",
    "https://supermarket.chef.io/cookbooks/nagios/versions/4.1.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/4.1.2",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/4.1.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Monitoring/Nagios",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/nagios",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/4.1.2/download",
  "deprecated": false,
  "created": "2010-02-26T22:48:02.000Z",
  "updated": "2015-12-14T10:07:48.537Z",
  "description": "Installs and configures Nagios server",
  "maintainer": {
    "name": "sbotman",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 151,
  "downloads_count": 45236859,
  "downloads_count_revision": 1253968,
  "repository_url": "https://github.com/schubergphilis/nagios",
  "issues_url": "https://github.com/schubergphilis/nagios/issues",
  "chef_source_url": "https://github.com/schubergphilis/nagios",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstalls and configures Nagios server and NRPE client.  Chef nodes are automatically discovered using search, and Nagios host groups are created based on Chef roles and optionally environments as well.  NRPE client commands can be defined by using a LWRP, and Nagios service checks applied to hostgroups using definitions in data bag items.\n\nRequirements\n============\n\nChef\n----\n\nChef version 0.10.10+ and Ohai 0.6.12+ are required.\n\nBecause of the heavy use of search, this recipe will not work with Chef Solo, as it cannot do any searches without a server.\n\nThis cookbook relies heavily on multiple data bags.  See __Data Bag__ below.\n\nThe system running the 'server' recipe should have a role named 'monitoring' so that NRPE clients can authorize monitoring from that system.  This role name is configurable via an attribute. See __Attributes__ below.\n\n\nPlatform\n--------\n\n* Debian 6\n* Ubuntu 10.04, 12.04\n* Red Hat Enterprise Linux (CentOS/Amazon/Scientific/Oracle) 5.8, 6.3\n\n**Notes**: This cookbook has been tested on the listed platforms. It\n  may work on other platforms with or without modification.\n\nCookbooks\n---------\n\n* apache2\n* build-essential\n* nginx\n* nginx_simplecgi\n* php\n* yum\n\nAttributes\n==========\n\ndefault\n-------\n\nThe following attributes are used by both client and server recipes.\n\n* `node['nagios']['user']` - Nagios user, default 'nagios'.\n* `node['nagios']['group']` - Nagios group, default 'nagios'.\n* `node['nagios']['plugin_dir']` - location where Nagios plugins go, default '/usr/lib/nagios/plugins'.\n* `node['nagios']['multi_environment_monitoring']` - Chef server will monitor hosts in all environments, not just its own, default 'false'\n\nclient\n------\n\nThe following attributes are used for the NRPE client\n\n* `node['nagios']['client']['install_method']` - whether to install from package or source. Default chosen by platform based on known packages available for NRPE: debian/ubuntu 'package', redhat/centos/fedora/scientific: source\n* `node['nagios']['plugins']['url']` - url to retrieve the plugins source\n* `node['nagios']['plugins']['version']` - version of the plugins source to download\n* `node['nagios']['plugins']['checksum']` - checksum of the plugins source tarball\n* `node['nagios']['nrpe']['home']` - home directory of nrpe, default /usr/lib/nagios\n* `node['nagios']['nrpe']['conf_dir']` - location of the nrpe configuration, default /etc/nagios\n* `node['nagios']['nrpe']['url']` - url to retrieve NRPE source\n* `node['nagios']['nrpe']['version']` - version of NRPE source to download\n* `node['nagios']['nrpe']['checksum']` - checksum of the nrpe source tarball\n* `node['nagios']['nrpe']['packages']` - nrpe / plugin packages to install.  The default attribute for RHEL/Fedora platforms contains a bare minimum set of packages.  The full list of available packages is available at: `http://dl.fedoraproject.org/pub/epel/6/x86_64/repoview/letter_n.group.html`\n* `node['nagios']['server_role']` - the role that the Nagios server will have in its run list that the clients can search for.\n* `node['nagios']['allowed_hosts']` - additional hosts that are allowed to connect to this client. Must be an array of strings (i.e. `%w(test.host other.host)`). These hosts are added in addition to 127.0.0.1 and IPs that are found via search.\n\nserver\n------\n\nThe following attributes are used for the Nagios server\n\n* `node['nagios']['server']['install_method']` - whether to install from package or source. Default chosen by platform based on known packages available for Nagios: debian/ubuntu 'package', redhat/centos/fedora/scientific: source\n* `node['nagios']['server']['service_name']` - name of the service used for Nagios, default chosen by platform, debian/ubuntu \"nagios3\", redhat family \"nagios\", all others, \"nagios\"\n* `node['nagios']['home']` - Nagios main home directory, default \"/usr/lib/nagios3\"\n* `node['nagios']['conf_dir']` - location where main Nagios config lives, default \"/etc/nagios3\"\n* `node['nagios']['config_dir']` - location where included configuration files live, default \"/etc/nagios3/conf.d\"\n* `node['nagios']['log_dir']` - location of Nagios logs, default \"/var/log/nagios3\"\n* `node['nagios']['cache_dir']` - location of cached data, default \"/var/cache/nagios3\"\n* `node['nagios']['state_dir']` - Nagios runtime state information, default \"/var/lib/nagios3\"\n* `node['nagios']['run_dir']` - where pidfiles are stored, default \"/var/run/nagios3\"\n* `node['nagios']['docroot']` - Nagios webui docroot, default \"/usr/share/nagios3/htdocs\"\n* `node['nagios']['enable_ssl]` - boolean for whether Nagios web server should be https, default false\n* `node['nagios']['http_port']` - port that the Apache server should listen on, determined whether ssl is enabled (443 if so, otherwise 80)\n* `node['nagios']['server_name']` - common name to use in a server cert, default \"nagios\"\n* `node['nagios']['ssl_req']` - info to use in a cert, default `/C=US/ST=Several/L=Locality/O=Example/OU=Operations/CN=#{node['nagios']['server_name']}/emailAddress=ops@#{node['nagios']['server_name']}`\n\n*  `node['nagios']['server']['url']` - url to download the server source from if installing from source\n*  `node['nagios']['server']['version']` - version of the server source to download\n*  `node['nagios']['server']['checksum']` - checksum of the source files\n*  `node['nagios']['url']` - URL to host nagios from - defaults to nil and instead uses  FQDN\n\n* `node['nagios']['notifications_enabled']` - set to 1 to enable notification.\n* `node['nagios']['check_external_commands']`\n* `node['nagios']['default_contact_groups']`\n* `node['nagios']['sysadmin_email']` - default notification email.\n* `node['nagios']['sysadmin_sms_email']` - default notification sms.\n* `node['nagios']['server_auth_method']` - authentication with the server can be done with openid (using `apache2::mod_auth_openid`), cas (using `apache2::mod_auth_cas`),ldap (using `apache2::mod_authnz_ldap`), or htauth (basic). The default is openid, \"cas\" will utilize cas authentication, \"ldap\" will utilize LDAP authentication, and any other value will use htauth (basic).\n* `node['nagios']['cas_login_url']` - login url for cas if using cas authentication.\n* `node['nagios']['cas_validate_url']` - validation url for cas if using cas authentication.\n* `node['nagios']['cas_validate_server']` - whether to validate the server cert. Defaults to off.\n* `node['nagios']['cas_root_proxy_url']` - if set, sets the url that the cas server redirects to after auth.\n* `node['nagios']['ldap_bind_dn']` - DN used to bind to the server when searching for ldap entries.\n* `node['nagios']['ldap_bind_password']` - bind password used with the DN provided for searcing ldap.\n* `node['nagios']['ldap_url']` - ldap url and search parameters.\n* `node['nagios']['ldap_authoritative']` - accepts \"on\" or \"off\". controls other authentication modules from authenticating the user if this one fails.\n* `node['nagios']['users_databag_group']` - users databag group considered Nagios admins.  defaults to sysadmins\n* `node['nagios']['host_name_attribute']` - node attribute to use for naming the host. Must be unique across monitored nodes. Defaults to hostname\n* `node['nagios']['templates']`\n* `node['nagios']['interval_length']` - minimum interval.\n\n* `node['nagios']['default_host']['check_interval']`\n* `node['nagios']['default_host']['retry_interval']`\n* `node['nagios']['default_host']['max_check_attempts']`\n* `node['nagios']['default_host']['notification_interval']`\n\n* `node['nagios']['default_service']['check_interval']`\n* `node['nagios']['default_service']['retry_interval']`\n* `node['nagios']['default_service']['max_check_attempts']`\n* `node['nagios']['default_service']['notification_interval']`\n\n* `node['nagios']['server']['web_server']` - web server to use. supports Apache or Nginx, default \"apache\"\n* `node['nagios']['server']['nginx_dispatch']` - nginx dispatch method. support cgi or php, default \"cgi\"\n* `node['nagios']['server']['stop_apache']` - stop apache service if using nginx, default false\n* `node['nagios']['server']['redirect_root']` - if using Apache, should http://server/ redirect to http://server/nagios3 automatically, default false\n* `node['nagios']['server']['normalize_hostname']` - If set to true, normalize all hostnames in hosts.cfg to lowercase.  Defaults to false.\n\n\nRecipes\n=======\n\ndefault\n-------\n\nIncludes the `nagios::client` recipe to install NRPE client.\n\nclient\n------\n\nIncludes the correct NRPE client installation recipe based on platform, either `nagios::client_package` or `nagios::client_source`.\n\nThe client recipe searches for servers allowed to connect via NRPE that have a role named in the `node['nagios']['server_role']` attribute. The recipe will also install the required packages and start the NRPE service. A custom plugin for checking memory is also added.\n\nSearches are confined to the node's `chef_environment` unless the `multi_environment_monitoring` attribute has been set to true.\n\nClient commands for NRPE can be installed using the nrpecheck lwrp. (See __Resources/Providers__ below.)\n\nRHEL and Fedora default to installation via source, but you can install NRPE via package by changing `node['nagios']['client']['install_method']` to \"package\".  Note that this will enable the EPEL repository on RHEL systems, which may not be desired.  You will also need to modify `node['nagios']['nrpe']['packages']` to include the appropriate NRPE plugins for your environment.  The complete list is available at `http://dl.fedoraproject.org/pub/epel/6/x86_64/repoview/letter_n.group.html`\n\nclient\\_package\n---------------\n\nInstalls the NRPE client and plugins from packages. Default for Debian / Ubuntu systems.\n\nclient\\_source\n--------------\n\nInstalls the NRPE client and plugins from source. Default for Redhat and Fedora based systems, as native packages for NRPE are not available in the default repositories.\n\nserver\n------\n\nIncludes the correct client installation recipe based on platform, either `nagios::server_package` or `nagios::server_source`.\n\nThe server recipe sets up Apache as the web front end by default. The nagios::client recipe is also included. This recipe also does a number of searches to dynamically build the hostgroups to monitor, hosts that belong to them and admins to notify of events/alerts.\n\nSearches are confined to the node's `chef_environment` unless multi-environment monitoring is enabled.\n\nThe recipe does the following:\n\n1. Searches for users in 'users' databag belonging to to 'sysadmins' group and authorizes them to access the Nagios web UI and receive notification e-mails.\n2. Searches all available roles/environments and builds a list which will become the Nagios hostgroups.\n3. Places nodes in Nagios hostgroups by role / environment membership.\n4. Installs various packages required for the server.\n5. Sets up configuration directories.\n6. Moves the package-installed Nagios configuration to a 'dist' directory.\n7. Disables the 000-default VirtualHost present on Debian/Ubuntu Apache2 package installations.\n8. Templates configuration files for services, contacts, contact groups, templates, hostgroups and hosts.\n9. Enables the Nagios web UI.\n10. Starts the Nagios server service\n\n\nserver\\_package\n---------------\n\nInstalls the Nagios server from packages. Default for Debian / Ubuntu systems.\n\nserver\\_source\n--------------\n\nInstalls the Nagios server from source. Default for Red Hat / Fedora based systems as native packages for Nagios are not available in the default repositories.\n\npagerduty\n---------\n\nInstalls and configures pagerduty plugin for nagios.  You need to set a `node['nagios']['pagerduty_key']` attribute on your server for this to work.  This can be set through environments so that you can use different API keys for servers in production vs staging for instance.\n\nThis recipe was written based on the [Nagios Integration Guide](http://www.pagerduty.com/docs/guides/nagios-integration-guide) from PagerDuty which explains how to get an API key for your nagios server.\n\n\nData Bags\n=========\n\nUsers\n-----\n\nCreate a `users` data bag that will contain the users that will be able to log into the Nagios webui. Each user can use htauth with a specified password, or an openid. Users that should be able to log in should be in the sysadmin group. Example user data bag item:\n\n    {\n      \"id\": \"nagiosadmin\",\n      \"groups\": \"sysadmin\",\n      \"htpasswd\": \"hashed_htpassword\",\n      \"openid\": \"http://nagiosadmin.myopenid.com/\",\n      \"nagios\": {\n        \"pager\": \"nagiosadmin_pager@example.com\",\n        \"email\": \"nagiosadmin@example.com\"\n      }\n    }\n\nWhen using `server_auth_method` 'openid' (default), use the openid in the data bag item. Any other value for this attribute (e.g., \"htauth\", \"htpasswd\", etc) will use the htpasswd value as the password in `/etc/nagios3/htpasswd.users`.\n\nThe openid must have the http:// and trailing /. The htpasswd must be the hashed value. Get this value with htpasswd:\n\n    % htpasswd -n -s nagiosadmin\n    New password:\n    Re-type new password:\n    nagiosadmin:{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=\n\nFor example use the `{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=` value in the data bag.\n\nContacts and Contact Groups\n---------------------------\n\nTo send alerting notification to contacts that aren't authorized to login to Nagios via the 'users' data bag create `nagios_contacts` and `nagios_contactgroups` data bags.\n\nExample `nagios_contacts` data bag item\n\n    {\n\t  \"id\": \"devs\",\n      \"alias\": \"Developers\",\n\t  \"use\": \"default-contact\",\n      \"email\": \"devs@company.com\",\n      \"pager\": \"page_the_devs@company.com\"\n    }\n\n\nExample `nagios_contactgroup` data bag item\n\n    {\n\t  \"id\": \"non_admins\",\n      \"alias\": \"Non-Administrator Contacts\",\n      \"members\": \"devs helpdesk managers\"\n    }\n\n\nServices\n--------\n\nTo add service checks to Nagios create a `nagios_services` data bag containing definitions for services to be monitored.  This allows you to add monitoring rules without directly editing the services and commands templates in the cookbook.  Each service will be named based on the id of the data bag item and the command will be named using the same id prepended with \"check\\_\".  Just make sure the id in your data bag doesn't conflict with a service or command already defined in the templates.\n\nHere's an example of a service check for sshd that you could apply to all hostgroups:\n\n    {\n\t  \"id\": \"ssh\",\n      \"hostgroup_name\": \"linux\",\n\t  \"command_line\": \"$USER1$/check_ssh $HOSTADDRESS$\"\n    }\n\nYou may optionally define the service template for your service by including `service_template` and a valid template name.  Example:  \"service_template\": \"special_service_template\".  You may also optionally add a service description that will be displayed in the Nagios UI using \"description\": \"My Service Name\".  If this is not present the databag item ID will be used as the description.  You use defined escalations for the service with 'use_escalation'.  See ___Service_Escalations__ for more information.\n\nYou may also use an already defined command definition by omitting the command\\_line parameter and using use\\_existing\\_command parameter instead:\n\n    {\n    \"id\": \"pingme\",\n     \"hostgroup_name\": \"all\",\n     \"use_existing_command\": \"check-host-alive\"\n    }\n\nService Groups\n--------------\n\nCreate a nagios\\_servicegroups data bag that will contain definitions for service groups.  Each server group will be named based on the id of the data bag.\n\n    {\n    \"id\": \"ops\",\n    \"alias\": \"Ops\",\n    \"notes\": \"Services for ops\"\n    }\n\nYou can group your services by using the \"servicegroups\" keyword in your services data bags. For example, to have your ssh\nchecks show up under the ops service group, you could define it like this:\n\n    {\n    \"id\": \"ssh\",\n    \"hostgroup_name\": \"all\",\n    \"command_line\": \"$USER1$/check_ssh $HOSTADDRESS$\",\n    \"servicegroups\": \"ops\"\n    }\n\nTemplates\n---------\n\nTemplates are optional, but allow you to specify combinations of attributes to apply to a service.  Create a nagios_templates\\ data bag that will contain definitions for templates to be used.  Each template need only specify id and whichever parameters you want to override.\n\nHere's an example of a template that reduces the check frequency to once per day and changes the retry interval to 1 hour.\n\n    {\n      \"id\": \"dailychecks\",\n      \"check_interval\": \"86400\",\n      \"retry\": \"3600\"\n    }\n\nYou then use the template in your service data bag as follows:\n\n    {\n      \"id\": \"expensive_service_check\",\n      \"hostgroup_name\": \"linux\",\n      \"command_line\": \"$USER1$/check_example $HOSTADDRESS$\",\n      \"service_template\": \"dailychecks\"\n    }\n\nSearch Defined Hostgroups\n-------------------------\n\nCreate a nagios\\_hostgroups data bag that will contain definitions for Nagios hostgroups populated via search.  These data bags include a Chef node search query that will populate the Nagios hostgroup with nodes based on the search.\n\nHere's an example to find all HP hardware systems for an \"hp_systems\" hostgroup:\n\n\t{\n\t  \"search_query\": \"dmi_system_manufacturer:HP\",\n\t  \"hostgroup_name\": \"hp_systems\",\n\t  \"id\": \"hp_systems\"\n\t}\n\nMonitoring Systems Not In Chef\n------------------------------\n\nCreate a nagios\\_unmanagedhosts data bag that will contain definitions for hosts not in Chef that you would like to manage.  \"hostgroups\" can be an existing Chef role (every Chef role gets a Nagios hostgroup) or a new hostgroup.  Note that \"hostgroups\" must be an array of hostgroups even if it contains just a single hostgroup.\n\nHere's an example host definition:\n\n\t{\n\t  \"address\": \"webserver1.mydmz.dmz\",\n\t  \"hostgroups\": [\"web_servers\",\"production_servers\"],\n\t  \"id\": \"webserver1\",\n\t  \"notifications\": 1\n\t}\n\nService Escalations\n-------------------\n\nYou can optionally define service escalations for the data bag defined services.  Doing so involves two steps - creating the `nagios_serviceescalations` data bag and invoking it from the service.  For example, to create an escalation to page managers on a 15 minute period after the 3rd page:\n\n\t{\n      \"id\": \"15-minute-escalation\",\n      \"contact_groups\": \"managers\",\n      \"first_notification\": \"3\",\n      \"last_notification\": \"0\",\n      \"escalation_period\": \"24x7\",\n      \"notification_interval\": \"900\"\n\t}\n\nThen, in the service data bag,\n\n\t{\n      \"id\": \"my-service\",\n      ...\n      \"use_escalation\": \"15-minute-escalation\"\n\t}\n\nEvent Handlers\n--------------\n\nYou can optionally define event handlers to trigger on service alerts by creating a nagios\\_eventhandlers data bag that will contain definitions of event handlers for services monitored via Nagios.\n\nThis example event handler data bags restarts chef-client.  Note: This assumes you have already defined a NRPE job restart\\_chef-client on the host where this command will run.  You can use the NRPE LWRP to add commands to your local NRPE configs from within your cookbooks.\n\n\t{\n      \"command_line\": \"$USER1$/check_nrpe -H $HOSTADDRESS$ -t 45 -c restart_chef-client\",\n      \"id\": \"restart_chef-client\"\n\t}\n\nOnce you've defined an event handler you will need to add the event handler to a service definition in order to trigger the action.  See the example service definition below.\n\n\t{\n      \"command_line\": \"$USER1$/check_nrpe -H $HOSTADDRESS$ -t 45 -c check_chef_client\",\n      \"hostgroup_name\": \"linux\",\n      \"id\": \"chef-client\",\n      \"event_handler\": \"restart_chef-client\"\n\t}\n\n\nMonitoring Role\n===============\n\nCreate a role to use for the monitoring server. The role name should match the value of the attribute \"`node['nagios']['server_role']`\". By default, this is '`monitoring`'. For example:\n\n    % cat roles/monitoring.rb\n    name \"monitoring\"\n    description \"Monitoring server\"\n    run_list(\n      \"recipe[nagios::server]\"\n    )\n\n    default_attributes(\n      \"nagios\" => {\n        \"server_auth_method\" => \"htauth\"\n      }\n    )\n\n    % knife role from file monitoring.rb\n\n\nDefinitions\n===========\n\nnagios_conf\n-----------\n\nThis definition is used to drop in a configuration file in the base Nagios configuration directory's conf.d. This can be used for customized configurations for various services.\n\nLibraries\n=========\n\ndefault\n-------\n\nThe library included with the cookbook provides some helper methods used in templates.\n\n* `nagios_boolean`\n* `nagios_interval` - calculates interval based on interval length and a given number of seconds.\n* `nagios_attr` - retrieves a nagios attribute from the node.\n\nResources/Providers\n===================\n\nnrpecheck\n---------\n\nThe nrpecheck LWRP provides an easy way to add and remove NRPE checks from within cookbooks.\n\n### Actions\n\n- `:add` creates a NRPE configuration file and restart the NRPE process. Default action.\n- `:remove` removes the configuration file and restart the NRPE process\n\n### Attribute Parameters\n\n- `command_name`  The name of the check.  This is the command that you will call from your nagios\\_service data bag check\n- `warning_condition` String that you will pass to the command with the -w flag\n- `critical_condition` String that you will pass to the command with the -c flag\n- `command` The actual command to execute (including the path). If this is not specified, this will use `node['nagios']['plugin_dir']/command_name` as the path to the command.\n- `parameters` Any additional parameters you wish to pass to the plugin.\n\n### Examples\n\n    # Use LWRP to define check_load\n    nagios_nrpecheck \"check_load\" do\n      command \"#{node['nagios']['plugin_dir']}/check_load\"\n      warning_condition node['nagios']['checks']['load']['warning']\n      critical_condition node['nagios']['checks']['load']['critical']\n      action :add\n    end\n\n    # Remove the check_load definition\n    nagios_nrpecheck \"check_load\" do\n      action :remove\n    end\n\nUsage\n=====\n\nserver setup\n------------\n\nCreate a role named '`monitoring`', and add the nagios server recipe to the `run_list`.  See __Monitoring Role__ above for an example.\n\nApply the nagios client recipe to nodes in order to install the NRPE client\n\nBy default the Nagios server will only monitor systems in its same environment. To change this set the `multi_environment_monitoring` attribute. See __Attributes__\n\nCreate data bag items in the `users` data bag for each administer you would like to be able to login to the Nagios server UI.  Pay special attention to the method you would like to use to authorization users (openid or htauth). See __Users__ and __Atttributes__\n\nAt this point you now have a minimally functional Nagios server, however the server will lack any service checks outside of the single Nagios Server health check.\n\ndefining checks\n---------------\n\nNRPE commands are defined in recipes using the nrpecheck LWRP provider.  For base system monitoring such as load, ssh, memory, etc you may want to create a cookbook in your environment that defines each monitoring command via the LWRP.  See the examples folder for an example of base monitoring.\n\nWith NRPE commands created using the LWRP you will need to define nagios Services to use those commands.  These services are defined using the `nagios_services` data bag and applied to roles and/or environments.  See __Services__\n\nenabling notifications\n----------------------\n\nYou need to set `default['nagios']['notifications_enabled'] = 1` attribute on your nagios server to enable email notifications.\n\nFor email notifications to work an appropriate mail program package and local MTA need to be installed so that /usr/bin/mail or /bin/mail is available on the system.\n\nExample:\n\nInclude [postfix cookbook](https://github.com/opscode-cookbooks/postfix) to be installed on your nagios server node.\n\nAdd override_attributes to your `monitoring` role:\n\n    % cat roles/monitoring.rb\n\n    name \"monitoring\"\n    description \"Monitoring Server\"\n    run_list(\n      \"recipe[nagios::server]\",\n      \"recipe[postfix]\"\n    )\n\n    override_attributes(\n      \"nagios\" => { \"notifications_enabled\" => \"1\" },\n      \"postfix\" => { \"myhostname\":\"your_hostname\", \"mydomain\":\"example.com\" }\n    )\n\n    default_attributes(\n      \"nagios\" => { \"server_auth_method\" => \"htauth\" }\n    )\n\n    % knife role from file monitoring.rb\n\n\nLicense and Author\n==================\n\nAuthor:: Joshua Sierles <joshua@37signals.com>\nAuthor:: Nathan Haneysmith <nathan@opscode.com>\nAuthor:: Joshua Timberman <joshua@opscode.com>\nAuthor:: Seth Chisamore <schisamo@opscode.com>\nAuthor:: Tim Smith <tsmith84@gmail.com>\n\nCopyright 2009, 37signals\nCopyright 2009-2013, Opscode, Inc\nCopyright 2012, Webtrends Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/php",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx_simplecgi",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "nagios": "Includes the client recipe.",
    "nagios::client": "Installs and configures a nrpe client",
    "nagios::server": "Installs and configures a nagios server",
    "nagios::pagerduty": "Integrates contacts w/ PagerDuty API"
  }
}