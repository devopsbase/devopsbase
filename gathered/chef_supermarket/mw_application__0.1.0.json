{
  "name": "mw_application Chef cookbook",
  "chef_cookbook_name": "mw_application",
  "revision": "0.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/mw_application",
    "https://supermarket.chef.io/cookbooks/mw_application/download",
    "https://supermarket.chef.io/cookbooks/mw_application/versions/0.1.0",
    "https://supermarket.chef.io/cookbooks/mw_application/versions/0.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/mw_application/versions/0.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/mw_application",
    "https://supermarket.chef.io/api/v1/cookbooks/mw_application/versions/0.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Type/Middleware/Runtime/Ruby",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/mw_application",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/mw_application/versions/0.1.0/download",
  "deprecated": false,
  "created": "2016-03-02T16:25:11.044Z",
  "updated": "2016-04-25T21:33:33.700Z",
  "description": "Provides application, application_ruby resources and helpers to create new application LWRPs",
  "maintainer": {
    "name": "car",
    "email": "chrodriguez@gmail.com"
  },
  "license": "all_rights",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 713,
  "downloads_count_revision": 207,
  "repository_url": "https://github.com/Mikroways/mw_application",
  "issues_url": "https://github.com/Mikroways/mw_application/issues",
  "chef_source_url": "https://github.com/Mikroways/mw_application",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Generic Aplication cookbook\n\n[![Build Status](https://travis-ci.org/Mikroways/mw_application.svg?branch=master)](https://travis-ci.org/Mikroways/mw_application)\n\nThe Application cookbook  `mw_application` is a library cookbook that provides\nresource primitives (LWRP) for use in recipes to easily deploy applications. It also provides with helper methods\nto easily define new custom application resources\n\nRequirements\n------------\n\n* Chef 12+\n\nPlatform support\n----------------\n\nThe following platforms have been tested with test kitchen\n\n* Debian 7\n* Ubuntu 14.04\n* CentOS 6.7\n* CentOS 7.1\n\n\nCookbook dependencies\n---------------------\n\n* ruby_build\n* ruby_rbenv\n\nOther cookbooks may be required depending on the platform used:\n\n* apt/yum so packages are updated if ubuntu/debian/centos/rhel\n* git if your application will be deployed using git\n\nUsage\n-----\n\nPlace a dependency on the mw_application cookbook in your cookbook's metadata.rb\n\n```ruby\n  depends 'mw_application', '~> 0.1.0'\n```\n\nThen, in a recipe:\n\n```ruby\n  application 'my_app' do\n    path '/opt/applications/my_app'\n    database database_content.gt\n    shared_directories %w(log tmp files public)\n    repository 'https://github.com/user/my_app.git'\n    revision 'master'\n  end\n```\n\nor if it is a ruby application:\n\n\n```ruby\n  application_ruby 'my_app' do\n    path '/opt/applications/my_app'\n    database database_content.gt\n    shared_directories %w(log tmp files public)\n    repository 'https://github.com/user/my_app.git'\n    revision 'master'\n    ruby '2.2.4'\n  end\n```\n\nLast example installs ruby 2.2.4 using ruby_rbenv and ruby_build\ncookbooks. In both examples application is installed as a user with resource\nname, this is, `my_app` user will be created and application will be deployed as\nthis user.\n\nResources overview\n------------------\n\nBefore describing exposed resources, is necessary to describe deployment\nconventions assumed:\n\n* An application will be deployed as a user, meaning that if more than one\n  application will be deployed, each one can be deployed as different users. You\n  can deploy more than one application with the same user\n* Symlinks are specified as array instead of a hash as deploy resource defines.\n  This is because each release file that will be shared, by convention, will be\n  in the same directory under shared directory\n* Shared directories must be specified so they are first purged using\n  `purge_before_symlink` after cloning repository and this attribute is not\n  necessary in application resource\n\n\n\n### application\n\nThis resource manages the basic deployment of an application owned by a specific user.\nThe implementation of this resource provider is using original chef resources\nlike user, directory and deploy_revision. The implementation of the application\nresource is a wrapper resource that avoids repeating code for user creation and\nshared directories structure creation.\n\nThe `:deploy action` creates a user and deploys application as that user,\nrunning only before_migrate callback and simplifying the way deploy_revision\nresource is used, basically using deployment convention previously described.\nIt also set node attributes so they can be used using search or reading this\nattributes for custom development needs.\n\n#### Actions\n\nActions are the same for original chef deploy resource:\n\n- `:deploy`\n- `:force_deploy`\n- `:rollback`\n\nAn additional `:delete` action is provided to remove saved node attributes, but\nit will not delete installed application from server. This action must be run\nmanually.\n\n#### Parameters\n\n- `name` - name of the resource. It will be used as default value for creating\n  application ti deploy application as.\n- `user` - user to be created and used to deploy code as.\n- `path` - path to deploy code using `deploy_revision` chef resource\n- `shared_directories` - array of directories to be created in shared directory\n  and purged after cloning code\n- `repository` - url of repository\n- `revision` - reivsion of the application to be deployed\n- `symlink_before_migrate` - files to be symlinked to shared directory before\n  running `migration_command`\n- `deploy_action` - `deploy_revision` action to be used. Defaults to `:deploy`\n- `node_attribute` - name of node's attribute to save this parameters after\n  deployment\n- `database` - hash to be used for custom code as developer wants. For example,\n  dump hash as YAML file\n- `before_migrate` -  Proc with custom code to be used as callback to\n  `deploy_revision` resource. This callback can use a custom helper named\n  `application_resource` that will return current resource, this is an application\n  resource or a custom subclass of it. Inside this Proc, other helpers provided by\n  deploy resource are available as `new_resource`, `shared_path` and `release_path`\n- `before_restart` -  Proc with custom code to be used as callback to\n  `deploy_revision` resource. This callback can use a custom helper named\n  `application_resource` as explained for `before_migrate`\n- `environment`: environment variables specified as hash of key values. Defaults\n  to nil\n- `migration_command`: string with command to be run. Default nil. Command will\n  be run with specified environment\n- `migrate`: boolean indicating if migration_command should be run. Default to\n  false\n\n\n### application_ruby\n\nThis is a specialized version of the above resource, but it allows to specify a\nruby version and it will installs it before proceding. Also it will provide more\nhelpers: the ones provided by ruby_rbenv cookbook.\n\nFor example:\n\n```ruby\n  application_ruby 'my_app' do\n    path '/opt/applications/my_app'\n    database database_content.gt\n    shared_directories %w(log tmp files public)\n    repository 'https://github.com/user/my_app.git'\n    revision 'master'\n\n    ruby '2.2.4'\n\n    before_migrate do\n\n      # Will be run as root\n      rbenv_script \"rbenv local\" do\n        cwd release_path\n        rbenv_version application_resource.ruby\n        code %{rbenv local #{application_resource.ruby}}\n      end\n\n      # Will be run as root sharing gems\n      rbenv_script \"bundle update\" do\n        cwd release_path\n        rbenv_version application_resource.ruby\n        code %{rbenv bundle install --without development test --frozen}\n      end\n\n    end\n  end\n```\n\nSome tips when coding `before_migrate` block\n--------------------------------------------\n\nInside this block you can use any resource chef knows, but some useful helpers\nare not available inside `Chef::Provider` class. This is the case of\n`value_for_platform` or `value_for_platform_family`. When you need this helpers\ninside `before_migrate` block you can call them via `application_resource` or `new_resource`\nbecause this DSL methods are included by `Chef::Resource` class. \n\n```ruby\n\nnew_resource.value_for_platform_family debian: 'git-core'\n\n```\n\nHelpers provided\n----------------\n\nThis cookbook provides with two helpers to easily extend chef resources for your\ncustom applications:\n\n### `define_application` helper\n\nThis helper is used as a library in your cookbook and for example:\n\n```ruby\n  define_application 'my_app' do\n    # Set default values\n    shared_directories %w(log tmp files public),\n    repository 'https://github.com/user/app.git'\n\n    helpers do\n      def my_helper\n      end\n    end\n\n    before_migrate do\n      # CUSTOM CODE\n      # application_resource.my_helper can be used\n    end\n\n    before_restart do\n      # CUSTOM CODE\n      # application_resource.my_helper can be used\n    end\n  end\n```\n\n*Take a look at the custom helper defined. It can be accessed via `application_resource`*\n\nThe above example will create a resource named my_app that can be used in other\ncookbooks as:\n\n```ruby\n  my_app 'name' do\n    path '/opt/application/name'\n  end\n```\n\n### `define_application ruby` helper\n\nAs explained for `application_ruby` resource above this is a specialized version\nof the above helper, for ruby applications\n\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ruby_build",
      "revision": "~> 0.8.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ruby_rbenv",
      "revision": "~> 1.0.0",
      "self_resolve": true
    }
  ]
}