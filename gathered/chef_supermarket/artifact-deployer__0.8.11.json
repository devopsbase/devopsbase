{
  "name": "artifact-deployer Chef cookbook",
  "chef_cookbook_name": "artifact-deployer",
  "revision": "0.8.11",
  "uris": [
    "https://supermarket.chef.io/cookbooks/artifact-deployer",
    "https://supermarket.chef.io/cookbooks/artifact-deployer/download",
    "https://supermarket.chef.io/cookbooks/artifact-deployer/versions/0.8.11",
    "https://supermarket.chef.io/cookbooks/artifact-deployer/versions/0.8.11/download",
    "https://supermarket.chef.io/api/v1/cookbooks/artifact-deployer/versions/0.8.11",
    "https://supermarket.chef.io/api/v1/cookbooks/artifact-deployer",
    "https://supermarket.chef.io/api/v1/cookbooks/artifact-deployer/versions/0.8.11/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/artifact-deployer",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/artifact-deployer/versions/0.8.11/download",
  "deprecated": false,
  "created": "2015-02-23T13:28:08.424Z",
  "updated": "2015-10-29T18:10:19.417Z",
  "description": "A Chef Cookbook that provides a simple way to download, unpack and configure artifacts",
  "maintainer": {
    "name": "maoo",
    "email": "maurizio@session.it"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 2835113,
  "downloads_count_revision": 106768,
  "repository_url": "https://github.com/maoo/artifact-deployer",
  "issues_url": "https://github.com/maoo/artifact-deployer/issues",
  "chef_source_url": "https://github.com/maoo/artifact-deployer",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Artifact Deployer\n---\n\n[![Build Status](https://travis-ci.org/maoo/artifact-deployer.svg)](https://travis-ci.org/maoo/artifact-deployer) [![Gitter chat](https://badges.gitter.im/maoo/artifact-deployer.png)](https://gitter.im/maoo/artifact-deployer)\n\nA Chef Cookbook that provides a simple way to download, unpack and patch artifacts.\nDownload is offered via\n\n- Maven GAV coordinates\n- HTTP Url\n- File-system path\n- S3 (file copy and bucket sync)\n\n# Artifact sources\nConfiguration is done via Chef JSON attributes; hereby are examples for each source type.\n\n## Maven artifacts\n\n```\n\"artifacts\": {\n  \"alfresco\": {\n      \"enabled\": true,\n      \"groupId\": \"org.alfresco\",\n      \"artifactId\": \"alfresco\",\n      \"type\": \"war\",\n      \"version\": \"5.0.a\",\n      \"destination\": \"/var/lib/tomcat7/webapps\",\n      \"owner\": \"tomcat7\"\n  }\n}\n```\nDownloads `alfresco` WAR artifact and copies as `/var/lib/tomcat7/webapps/alfresco.war`\n\nYou can add Maven Repositories as artifact sources defining `maven_repos` databag item, as follows:\n\n```\n{\n  \"id\" : \"my-repo\",\n  \"url\" : \"https://my-repo.com/mvnrepo\",\n  \"username\" : \"user\",\n  \"password\" : \"pwd\"\n}\n```\nCheck [test maven_repos](https://github.com/maoo/artifact-deployer/tree/master/test/integration/data_bags/maven_repos) databags for more samples.\n\n## HTTP URL\n\n```\n\"artifacts\": {\n  \"junit\": {\n    \"enabled\": true,\n    \"url\": \"https://repo1.maven.org/maven2/junit/junit/4.9/junit-4.9.jar\",\n    \"destination\": \"/var/lib/tomcat7/lib\",\n    \"owner\": \"tomcat7\"\n  }\n}\n```\nDownloads `junit-4.9.jar` and copies as `/var/lib/tomcat7/lib/junit.jar`\n\n## File-system path\n\n```\n\"artifacts\": {\n  \"my-local-zip\": {\n    \"enabled\": true,\n    \"path\": \"/root/folder/my-zip.zip\",\n    \"destination\": \"/opt\",\n    \"owner\": \"myuser\"\n  }\n}\n```\nCopies `/root/folder/my-zip.zip` into `/opt/my-local-zip.zip`\n\n## S3\n\nIf you want to sync a bucket with a local folder\n\n```\n\"artifacts\": {\n  \"my-s3-bucket-folder\": {\n    \"enabled\": true,\n    \"s3_bucket\" : \"artifact-deployer-test\",\n    \"destination\": \"/opt\",\n    \"owner\": \"myuser\"\n  }\n}\n```\nCreates `/opt/my-s3-bucket-folder` directory with all `s3://artifact-deployer-test` bucket contents in it\n\nIf you want to sync a bucket with a local folder\n\n```\n\"artifacts\": {\n  \"my-s3-zip\": {\n    \"enabled\": true,\n    \"s3_bucket\" : \"artifact-deployer-test\",\n    \"s3_filename\" : \"keep-calm-and-daje-forte.png.zip\",\n    \"destination\": \"/opt\",\n    \"owner\": \"myuser\"\n  }\n}\n```\nDownloads `keep-calm-and-daje-forte.png.zip` from `s3://artifact-deployer-test` bucket and copies as `/opt/my-s3-zip.zip`\n\nYou can specify AWS key and secret defining `awscli` databag item, as follows:\n\n```\n{\n  \"id\" : \"my-credentials\",\n  \"aws_access_key_id\" : \"AKI*****************\",\n  \"aws_secret_access_key\" : \"****************************************\"\n}\n```\nCheck [test awscli](https://github.com/maoo/artifact-deployer/tree/master/test/integration/data_bags/awscli) databags for more samples.\n\n# Unpacking and filtering\n---\n\n```\n\"artifacts\": {\n  \"solr-home\": {\n    \"enabled\": true,\n    \"groupId\": \"org.alfresco\",\n    \"artifactId\": \"alfresco-solr\",\n    \"type\": \"zip\",\n    \"version\": \"5.0.a\",\n    \"destination\": \"/var/lib/tomcat7\",\n    \"owner\": \"tomcat7\",\n    \"unzip\": true,\n    \"filtering_mode\" : \"replace\",\n    \"properties\" : {\n      \"archive-SpacesStore/conf/solrcore.properties\" : [\n        \"alfresco.host\" : \"192.168.0.22\",\n        \"solr.secureComms\" : \"none\"\n      ],\n      \"test.properties\" : [\n        \"my.host\" : \"192.168.0.22\",\n        \"filtering_mode\" : \"append\"\n      ]\n    },\n    \"terms\" : {\n      \"context.xml\" : [\n        \"@@ALFRESCO_HOST@@\" : \"192.168.0.22\"\n      ]\n    }\n  }\n}\n```\n\nFiltering can be used via ```terms``` or ```properties``` attributes defined within the artifact configuration; each of those contain a list of ```file path(String) => attributes(Map<String,String>)```, where\n- *file path* is the path, within the unpacked ZIP file, of the file that needs to be patched\n- *attributes* maps the original string with the new ones to be injected\n\nWhen using ```terms```, each attribute's key is replaced with the attribute's value.\n\nWhen using ```properties```, a file line starting with ```<key>=``` will be searched and replaced with ```<key>=<value>```; if the line doesn't exist, by default nothing will happen (unless ```filtering_mode``` is set to ```append```); if the file doesn't exist, it will be created.\n\n```filtering_mode``` can be specified at artifact level or as an attribute of properties, as shown in the example above.\n\n## Unpacking options\n\n### Artifact name\n\nThe name of the file/folder fetched by artifact-deployer can be customised; by default it is the name of the JSON key (i.e `my-amp`), but you can override it using `destinationName` attribute:\n\n```\n\"artifacts\": {\n    \"my-amp\": {\n    \"enabled\": true,\n    \"path\": \"my-amp/target/my-amp.amp\",\n    \"destinationName\" : \"my.amp\"\n    \"destination\": \"/var/lib/tomcat7/amps\",\n    \"owner\": \"tomcat7\"\n  }\n}\n```\n#### Including a single sub-folder\n\nYou can only include one specific subfolder of a ZIP, using the following syntax:\n\n```\n\"artifacts\": {\n  \"keystore\": {\n    \"enabled\": true,\n    \"groupId\" : \"org.alfresco\",\n    \"artifactId\" : \"alfresco-repository\",\n    \"version\" : \"5.0.a\",\n    \"destination\": \"/var/lib/tomcat7/keystore\",\n    \"subfolder\": \"alfresco/keystore/\\*\",\n    \"owner\": \"tomcat7\"\n  }\n}\n```\n\n# Unit testing\n```\nbundle update\nbundle exec rake\n```\n\n# Integration testing\n```\nkitchen test\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu-12.04",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos-6.6",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos-7",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/maven",
      "revision": "~> 1.2.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/file",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": "~> 1.4.6",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": "~> 2.3.10",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ark",
      "revision": "~> 0.9.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/resolver",
      "revision": "~> 1.2.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": "~> 1.31.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "artifacts": "Installs artifacts",
    "awscli": "Installs Python awscli util",
    "default": "Invokes all other recipes",
    "maven": "Installs Apache Maven"
  }
}