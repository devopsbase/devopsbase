{
  "name": "cloudwatch-logs Chef cookbook",
  "chef_cookbook_name": "cloudwatch-logs",
  "revision": "0.0.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/cloudwatch-logs",
    "https://supermarket.chef.io/cookbooks/cloudwatch-logs/download",
    "https://supermarket.chef.io/cookbooks/cloudwatch-logs/versions/0.0.4",
    "https://supermarket.chef.io/cookbooks/cloudwatch-logs/versions/0.0.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudwatch-logs/versions/0.0.4",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudwatch-logs",
    "https://supermarket.chef.io/api/v1/cookbooks/cloudwatch-logs/versions/0.0.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Binding/Provider/Amazon",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Logging"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/cloudwatch-logs",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/cloudwatch-logs/versions/0.0.4/download",
  "deprecated": false,
  "created": "2015-08-10T09:14:46.896Z",
  "updated": "2016-08-18T15:14:13.030Z",
  "description": "Installs and configures AWS CloudWatch Logs",
  "maintainer": {
    "name": "benbridts",
    "email": "ben@cloudar.be"
  },
  "license": "FreeBSD",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 2,
  "downloads_count": 36431,
  "downloads_count_revision": 29026,
  "repository_url": "https://github.com/WeAreCloudar/chef-cloudwatch-logs",
  "issues_url": "https://github.com/WeAreCloudar/chef-cloudwatch-logs/issues",
  "chef_source_url": "https://github.com/WeAreCloudar/chef-cloudwatch-logs",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstalls the CloudWatch Logs client and enables easy configuration of multiple logs via attributes.\n\n\n# Supported OS\nCurrently all linux OS's are supported.\n\nOn Amazon Linux the yum package will be used.\n\n# Usage\nLogs are configured by appending to the `['cwlogs']['logfiles']` attribute from any recipe.  You can configure as many\nlogs as needed.  Simply include the default cwlogs recipe in your runlist after all recipes which define a log.\n\n\n# Example\n\n    default['cwlogs']['logfiles']['mysite-httpd_access'] = {\n        :log_stream_name => '{instance_id}-{hostname}',\n        :log_group_name => 'mysite-httpd_access-group',\n        :file => '/var/log/httpd/mysite.com/access_log',\n        :datetime_format => '%d/%b/%Y:%H:%M:%S %z',\n        :initial_position => 'end_of_file'\n    }\n\n    default['cwlogs']['logfiles']['mysite-httpd_error'] = {\n        :log_stream_name => '{instance_id}-{hostname}',\n        :log_group_name => 'mysite-httpd_error-group',\n        :file => '/var/log/httpd/mysite.com/error_log',\n        :datetime_format => '%d/%b/%Y:%H:%M:%S %z',\n        :initial_position => 'end_of_file'\n    }\n\n    default['cwlogs']['logfiles']['mysite-mod_security_log'] = {\n      :log_stream_name => '{instance_id}-{hostname}',\n      :log_group_name => 'mysite-mod_security_log',\n      :file => '/var/log/modsec_audit.log',\n      :datetime_format => '[%d/%b/%Y:%H:%M:%S %z]',\n      :multi_line_start_pattern => '^--([0-9a-fA-F]*){8}-[A]{1}--',\n      :initial_position => 'end_of_file'\n    }\n```\n\nFrom any attributes file will generate the following CloudWatch Logs config:\n\n    [mysite-httpd_access]\n    log_stream_name = {instance_id}-{hostname}\n    log_group_name = mysite-httpd_access-group\n    file = /var/log/httpd/mysite.com/access_log\n    datetime_format = %d/%b/%Y:%H:%M:%S %z\n    initial_position = end_of_file\n\n    [mysite-httpd_error]\n    log_stream_name = {instance_id}-{hostname}\n    log_group_name = mysite-httpd_error-group\n    file = /var/log/httpd/mysite.com/error_log\n    datetime_format = %d/%b/%Y:%H:%M:%S %z\n    initial_position = end_of_file\n\n    [mysite-mod_security_log]\n      log_stream_name = {instance_id}-{hostname}\n      log_group_name = mysite-mod_security_log\n      file = /var/log/modsec_audit.log\n      datetime_format = [%d/%b/%Y:%H:%M:%S %z]\n      multi_line_start_pattern = ^--([0-9a-fA-F]*){8}-[A]{1}--\n      initial_position = end_of_file\n\nAll hash elements will pass through to the config file, so for example you can use `encoding` or any other supported\nconfig element.  See the [AWS CloudWatch Logs configuration reference][1] for details.\n\n[1](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/AgentReference.html)\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}