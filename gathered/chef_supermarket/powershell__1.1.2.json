{
  "name": "powershell Chef cookbook",
  "chef_cookbook_name": "powershell",
  "revision": "1.1.2",
  "uris": [
    "https://supermarket.chef.io/cookbooks/powershell",
    "https://supermarket.chef.io/cookbooks/powershell/download",
    "https://supermarket.chef.io/cookbooks/powershell/versions/1.1.2",
    "https://supermarket.chef.io/cookbooks/powershell/versions/1.1.2/download",
    "https://supermarket.chef.io/api/v1/cookbooks/powershell/versions/1.1.2",
    "https://supermarket.chef.io/api/v1/cookbooks/powershell",
    "https://supermarket.chef.io/api/v1/cookbooks/powershell/versions/1.1.2/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System/Windows"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/powershell",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/powershell/versions/1.1.2/download",
  "deprecated": false,
  "created": "2011-05-20T15:05:34.000Z",
  "updated": "2016-09-02T19:21:47.995Z",
  "description": "Installs/Configures PowerShell on the Windows platform",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 80,
  "downloads_count": 20247025,
  "downloads_count_revision": 1251587,
  "repository_url": "https://github.com/chef-cookbooks/powershell",
  "issues_url": "https://github.com/chef-cookbooks/powershell/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/powershell",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "powershell cookbook\n===================\nInstalls and configures PowerShell 2.0.  Also includes a resource/provider for executing scripts using the PowerShell interpreter.\n\n\nRequirements\n------------\n### Platforms\n- Windows XP\n- Windows Server 2003 (R1, R2)\n- Windows Vista\n- Windows 7\n- Windows Server 2008 (R1, R2)\n\n\nResource/Provider\n-----------------\n### `powershell`\nExecute a script using the powershell interpreter (much like the script resources for bash, csh, perl, python and ruby). A temporary file is created and executed like other script resources, rather than run inline. By their nature, Script resources are not idempotent, as they are completely up to the user's imagination. Use the `not_if` or `only_if` meta parameters to guard the resource for idempotence.\n\n#### Actions\n\n- :run: run the script\n\n#### Attribute Parameters\n\n- command: name attribute. Name of the command to execute.\n- code: quoted string of code to execute.\n- creates: a file this command creates - if the file exists, the command will not be run.\n- cwd: current working directory to run the command from.\n- flags: command line flags to pass to the interpreter when invoking.\n- environment: A hash of environment variables to set before running this command.\n- user: A user name or user ID that we should change to before running this command.\n- group: A group name or group ID that we should change to before running this command.\n- returns: The return value of the command (may be an array of accepted values) - this resource raises an exception if the return value(s) do not match.\n- timeout: How many seconds to let the command run before timing it out.\n\n#### Examples\n\n```ruby\n# change the computer's hostname\npowershell \"rename hostname\" do\n  code <<-EOH\n  $computer_name = Get-Content env:computername\n  $new_name = 'test-hostname'\n  $sysInfo = Get-WmiObject -Class Win32_ComputerSystem\n  $sysInfo.Rename($new_name)\n  EOH\nend\n```\n\n```ruby\n# write out to an interpolated path\npowershell \"write-to-interpolated-path\" do\n  code <<-EOH\n  $stream = [System.IO.StreamWriter] \"#{Chef::Config[:file_cache_path]}/powershell-test.txt\"\n  $stream.WriteLine(\"In #{Chef::Config[:file_cache_path]}...word.\")\n  $stream.close()\n  EOH\nend\n```\n\n```ruby\n# use the change working directory attribute\npowershell \"cwd-then-write\" do\n  cwd Chef::Config[:file_cache_path]\n  code <<-EOH\n  $stream = [System.IO.StreamWriter] \"C:/powershell-test2.txt\"\n  $pwd = pwd\n  $stream.WriteLine(\"This is the contents of: $pwd\")\n  $dirs = dir\n  foreach ($dir in $dirs) {\n    $stream.WriteLine($dir.fullname)\n  }\n  $stream.close()\n  EOH\nend\n```\n\n```ruby\n# cwd to a winodws env variable\npowershell \"cwd-to-win-env-var\" do\n  cwd ENV['TEMP']\n  code <<-EOH\n  $stream = [System.IO.StreamWriter] \"./temp-write-from-chef.txt\"\n  $stream.WriteLine(\"chef on windows rox yo!\")\n  $stream.close()\n  EOH\nend\n```\n\n```ruby\n# pass an env var to script\npowershell \"read-env-var\" do\n  cwd Chef::Config[:file_cache_path]\n  environment ({'foo' => 'BAZ'})\n  code <<-EOH\n  $stream = [System.IO.StreamWriter] \"./test-read-env-var.txt\"\n  $stream.WriteLine(\"FOO is $env:foo\")\n  $stream.close()\n  EOH\nend\n```\n\n\nMixin\n-----\n### `Chef::Mixin::PowershellOut`\nMixin to execute powershell commands during compile time.  Most useful if needing powershell to drive LWRP behavior\n\n#### Parameters\n\n- script: The powershell code to execute\n- options: The options hash to drive execution behavior.  Same options available as in shell_out, with the addition of :architecture, which allows you to override the default architecture.  Essentially allows you to run 32-bit powershell in 64-bit windows.\n\n#### Example\n\nThe following illustrates using options to require 32-bit AND run as a different user\n\n```ruby\n# check if a user is a member of local admins\ninclude Chef::Mixin::PowershellOut\nscript =<<-EOF\n  $user = [Security.Principal.WindowsIdentity]::GetCurrent()\n  (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)\nEOF\ncmd = powershell_out(script, {architecture: :i386, user: \"vagrant\", password: \"vagrant\"})\nChef::Log.info(cmd.stdout)\n```\n\n\nUsage\n-----\n### default\nInclude the default recipe in a run list, to ensure PowerShell 2.0 is installed.\n\nOn the following versions of Windows the PowerShell 2.0 package will be downloaded from Microsoft and installed:\n\n- Windows XP\n- Windows Server 2003\n- Windows Server 2008 R1\n- Windows Vista\n\nOn the following versions of Windows, PowerShell 2.0 is present and must just be enabled:\n\n- Windows 7\n- Windows Server 2008 R2\n- Windows Server 2008 R2 Core\n\n**PLEASE NOTE** - The installation may require a restart of the node being configured before PowerShell (or the powershell script resource) can be used (yeah Windows!).\n\n\nLicense & Authors\n-----------------\n- Author:: Seth Chisamore (<schisamo@opscode.com>)\n\n```text\nCopyright:: 2011-2012, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/windows",
      "revision": ">= 1.2.8",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "powershell::default": "Installs and configures PowerShell 2.0"
  }
}