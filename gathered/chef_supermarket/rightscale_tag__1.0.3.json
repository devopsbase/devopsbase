{
  "name": "rightscale_tag Chef cookbook",
  "chef_cookbook_name": "rightscale_tag",
  "revision": "1.0.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/rightscale_tag",
    "https://supermarket.chef.io/cookbooks/rightscale_tag/download",
    "https://supermarket.chef.io/cookbooks/rightscale_tag/versions/1.0.3",
    "https://supermarket.chef.io/cookbooks/rightscale_tag/versions/1.0.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_tag/versions/1.0.3",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_tag",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_tag/versions/1.0.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System/macOS",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/rightscale_tag",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/rightscale_tag/versions/1.0.3/download",
  "deprecated": false,
  "created": "2014-03-05T01:18:37.000Z",
  "updated": "2015-01-22T21:13:49.342Z",
  "description": "Provides LWRPs and helper methods for building 3-tier applications using machine tags in RightScale",
  "maintainer": {
    "name": "rightscale",
    "email": "cookbooks@rightscale.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 5290959,
  "downloads_count_revision": 800741,
  "repository_url": "https://github.com/rightscale-cookbooks/rightscale_tag",
  "issues_url": "https://github.com/rightscale-cookbooks/rightscale_tag/issues",
  "chef_source_url": "https://github.com/rightscale-cookbooks/rightscale_tag",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# rightscale_tag cookbook\n\n[![Cookbook](https://img.shields.io/cookbook/v/rightscale_tag.svg?style=flat)][cookbook]\n[![Release](https://img.shields.io/github/release/rightscale-cookbooks/rightscale_tag.svg?style=flat)][release]\n[![Build Status](https://img.shields.io/travis/rightscale-cookbooks/rightscale_tag.svg?style=flat)][travis]\n\n[cookbook]: https://supermarket.getchef.com/cookbooks/rightscale_tag\n[release]: https://github.com/rightscale-cookbooks/rightscale_tag/releases/latest\n[travis]: https://travis-ci.org/rightscale-cookbooks/rightscale_tag\n\nThis cookbook provides recipes, resources, providers, and library methods for\ndealing with machine tags in RightScale. It builds on the resources and library\nmethods in the [machine_tag] cookbook and provides a higher level set of\nfunctionality dealing specifically with RightScale. There are resources,\nproviders, and library methods for defining a 3-tier web application consisting\nof load balancer, application, and database servers. The resources and providers\nallow for setting up tags on the respective servers while the helper methods can\nbe used by other servers needing to find them.\n\nFor information about some of the machine tags used by this cookbook, see [List\nof Instance RightScale Tags].\n\n[List of Instance RightScale Tags]: http://support.rightscale.com/15-References/Machine_Tags/List_of_RightScale_Tags#Tags_for_Instances\n\nGithub Repository: [https://github.com/rightscale-cookbooks/rightscale_tag](https://github.com/rightscale-cookbooks/rightscale_tag)\n\n# Requirements\n\n* Requires Chef 11 or higher\n* Requires Ruby 1.9 or higher\n* Platform\n  * Ubuntu 12.04\n  * CentOS 6\n* Cookbooks\n  * [machine_tag]\n  * [marker]\n\n[machine_tag]: http://community.opscode.com/cookbooks/machine_tag\n[marker]: http://community.opscode.com/cookbooks/marker\n\n# Usage\n\nOn a RightScale server, add `rightscale_tag::default` to the run list. This will\nuse the `node['rightscale']['instance_uuid']` attribute to create the\n`server:uuid` tag and the `node['cloud']['public_ips']` and\n`node['cloud']['private_ips']` values  that come from the Ohai cloud plugin to\npupulate the `server:public_ip_X` and `server:private_ip_X` tags (where `X` is\n0, 1, etc.).\n\nThe `rightscale_tag::monitoring` recipe should be placed in the run list after a\nrecipe setting up `collectd` or equivalent to send monitoring data to RightScale\nor, alternatively, used with `include_recipe` at the end of a recipe doing that.\n\nPlease see the [rs-base] cookbook for how these recipes are used in RightScale\nServerTemplates.\n\n[rs-base]: https://github.com/rightscale-cookbooks/rs-base\n\n## 3-Tier Web Applications\n\nThis cookbook supports building a 3-tier web application deployment architecture\nby providing an interface with tags on servers that can be set up with resources\nand providers and searched for using helper methods. For a complete\nimplementation of a 3-tier LAMP stack using this cookbook, please see the\n[rs-haproxy], [rs-application_php], and [rs-mysql] cookbooks.\n\n[rs-haproxy]: https://github.com/rightscale-cookbooks/rs-haproxy\n[rs-application_php]: https://github.com/rightscale-cookbooks/rs-application_php\n[rs-mysql]: https://github.com/rightscale-cookbooks/rs-mysql\n\n### Load Balancer Servers\n\nThe tags used for load balancer servers are as follows:\n\n* **`load_balancer:active=true`** - specifies that the load balancer server\n  is active\n* **`load_balancer:active_<application_name>=true`** - specifies an application\n  that the load balancer server serves; examples:\n  `load_balancer:active_api=true`, `load_balancer:active_www=true`\n\nThese tags can be set up on a server using the [`rightscale_tag_load_balancer`]\nresource and provider. For example, to tag a load balancer server for `api` and\n`www` applications respectively in a recipe:\n\n```ruby\nrightscale_tag_load_balancer 'api'\n\nrightscale_tag_load_balancer 'www'\n\n# the server where this recipe is run will now have the following tags:\n#   load_balancer:active=true\n#   load_balancer:active_api=true\n#   load_balancer:active_www=true\n```\n\nThe [`find_load_balancer_servers`] method can be used to find tagged load\nbalancer servers. For example, to find load balancer servers for the `www`\napplication in a Chef recipe:\n\n```ruby\nclass Chef::Recipe\n  include Rightscale::RightscaleTag\nend\n\nlb_servers = find_load_balancer_servers(node, 'www')\n\n# lb_servers will be a hash with contents like:\n#   {\n#     '01-ABCDEF123456' => {\n#       'tags' => MachineTag::Set[\n#         'load_balancer:active=true',\n#         'load_balancer:active_www=true',\n#         'server:public_ip_0=203.0.113.2',\n#         'server:private_ip_0=10.0.0.2',\n#         'server:uuid=01-ABCDEF123456'\n#       ],\n#       'application_names' => ['www'],\n#       'public_ips' => ['203.0.113.2'],\n#       'private_ips' => ['10.0.0.2']\n#     }\n#   }\n\nlb_servers.each do |uuid, server_info|\n  # here an application server could add each load balancer to its inbound\n  # firewall rules using server_info['private_ips']\nend\n```\n\n[`rightscale_tag_load_balancer`]: #rightscale_tag_load_balancer\n[`find_load_balancer_servers`]: #find_load_balancer_servers\n\n### Application Servers\n\nThe tags used for application servers are as follows:\n\n* **`application:active=true`** - specifies that the application server is\n  active\n* **`application:active_<application_name>=true`** - specifies an application\n  that the application server serves; examples: `application:active_api=true`,\n  `application:active_www=true`\n* **`application:bind_ip_address_<application_name>=<ip_address>`** - specifies\n  the bind IP address of the application server; examples:\n  `application:bind_ip_address_api=10.0.0.1`,\n  `application:bind_ip_address_www=10.0.0.2`\n* **`application:bind_port_<application_name>=<port>`** - specifies the bind\n  port of the application server; examples: `application:bind_port_api=8080`,\n  `application:bind_port_www=8080`\n* **`application:vhost_path_<application_name=<vhost/path>`** - specifies the\n  vhost or path name the application serves; examples:\n  `application:vhost_path_api=api.example.com`, `application:vhost_path_www=/`\n\nThese tags can be set up on a server using the [`rightscale_tag_application`]\nresource and provider. For example, to tag an application server for `api` and\n`www` applications respectively in a recipe:\n\n```ruby\nrightscale_tag_application 'api' do\n  bind_ip_address node['cloud']['private_ips'][0]\n  bind_port 8080\n  vhost_path 'api.example.com'\nend\n\nrightscale_tag_application 'www' do\n  bind_ip_address node['cloud']['private_ips'][0]\n  bind_port 8080\n  vhost_path '/'\nend\n\n# the server where this recipe is run will now have the following tags:\n#   application:active=true\n#   application:active_api=true\n#   application:active_www=true\n#   application:bind_ip_address_api=10.0.0.1\n#   application:bind_ip_address_www=10.0.0.1\n#   application:bind_port_api=8080\n#   application:bind_port_www=8080\n#   application:vhost_path_api=api.example.com\n#   application:vhost_path_www=/\n```\n\nThe [`find_application_servers`] method can be used to find tagged application\nservers. For example, to find application servers for the `www` application in a\nChef recipe:\n\n```ruby\nclass Chef::Recipe\n  include Rightscale::RightscaleTag\nend\n\napp_servers = find_application_servers(node, 'www')\n\n# app_servers will be a hash with content like:\n#   {\n#     '01-ABCDEF7890123' => {\n#       'tags' => MachineTag::Set[\n#         'application:active=true',\n#         'application:active_www=true',\n#         'application:bind_ip_address_www=10.0.0.3',\n#         'application:bind_port_www=8080',\n#         'application:vhost_path_www=/',\n#         'server:public_ip_0=203.0.113.3',\n#         'server:private_ip_0=10.0.0.3',\n#         'server:uuid=01-ABCDEF7890123'\n#       ],\n#       'applications' => {\n#         'www' => {\n#           'bind_ip_address' => '10.0.0.3',\n#           'bind_port' => 8080,\n#           'vhost_path' => '/',\n#         }\n#       },\n#       'public_ips' => ['203.0.113.3'],\n#       'private_ips' => ['10.0.0.3']\n#     }\n#   }\n\napp_servers.each do |uuid, server_info|\n  # here a load balancer server could add application servers to its\n  # configuration using the values in server_info['applications']['www']\nend\n```\n\n[`rightscale_tag_application`]: #rightscale_tag_application\n[`find_application_servers`]: #find_application_servers\n\n### Database Servers\n\nThe tags used for database servers are as follows:\n\n* **`database:active=true`** - specifies that a server is an active database\n  server\n* **`database:lineage=<lineage>`** - specifies the lineage of the database\n  server; examples: `database:lineage=production`, `database:lineage=staging`\n* **`database:master_active=<timestamp>`** - specifies that the database server\n  is an active master since `timestamp`; a timestamp is the number of seconds\n  since the UNIX epoch; examples: `database:master_active=1391473172` (in this\n  case the timestamp represents 2014-02-04 00:19:32 UTC)\n* **`database:slave_active=<timestamp>`** - specifies that the database server\n  is an active slave since `timestamp`; a timestamp is the number of seconds\n  since the UNIX epoch; examples: `database:slave_active=1391473672` (in this\n  case the timestamp represents 2014-02-04 00:27:52 UTC)\n* **`database:bind_ip_address=<ip_address>`** - specifies the bind IP address\n  of the database server; examples: `database:bind_ip_address=10.0.0.4`\n* **`database:bind_port=<port>`** - specifies the bind port of the database\n  server; examples: `database:bind_port=3306`\n\nThese tags can be set up on a server using the [`rightscale_tag_database`]\nresource and provider. For example, to tag a database server for the `staging`\nlineage as a master in a recipe:\n\n```ruby\nrightscale_tag_database 'staging' do\n  role 'master'\n  bind_ip_address node['cloud']['private_ips'][0]\n  bind_port 3306\nend\n\n# the server where this recipe is run will now have the following tags:\n#   database:active=true\n#   database:lineage=staging\n#   database:master_active=1391473172\n#   database:bind_ip_address=10.0.0.1\n#   database:bind_port=3306\n```\n\nThe [`find_database_servers`] method can be used to find tagged database\nservers. For example, to find the master database server for the `staging`\nlineage in a Chef recipe:\n\n```ruby\nclass Chef::Recipe\n  include Rightscale::RightscaleTag\nend\n\ndb_servers = find_database_servers(node, 'staging', 'master', only_latest_for_role: true)\n\n# db_servers will be a hash with content like:\n#   {\n#     '01-ABCDEF4567890' => {\n#       'tags' => MachineTag::Set[\n#         'database:active=true',\n#         'database:master_active=1391803034',\n#         'database:lineage=example',\n#         'server:public_ip_0=203.0.113.4',\n#         'server:private_ip_0=10.0.0.4',\n#         'server:uuid=01-ABCDEF4567890'\n#       ],\n#       'lineage' => 'example',\n#       'bind_ip_address' => '10.0.0.4',\n#       'bind_port' => 3306,\n#       'role' => 'master',\n#       'master_since' => Time.at(1391803034),\n#       'public_ips' => ['203.0.113.4'],\n#       'private_ips' => ['10.0.0.4']\n#     }\n#   }\n\ndb_servers.each do |uuid, server_info|\n  # here a slave database server could set up replication from the master using\n  # server_info['bind_ip_address'] and server_info['bind_port']\nend\n```\n\n[`rightscale_tag_database`]: #rightscale_tag_database\n[`find_database_servers`]: #find_database_servers\n\n# Attributes\n\nThere are no attributes in this cookbook.\n\n# Recipes\n\n## `rightscale_tag::default`\nSets the standard machine tags for a RightScale server which are `server:uuid`,\n`server:public_ip_X`, `server:private_ip_X` (where `X` is 0, 1, etc.).\n\n## `rightscale_tag::monitoring`\n\nSets the standard machine tag to enable RightScale monitoring which is\n`rs_monitoring:state=active`. This should only be set when `collectd` or\nequivalent is sending data to RightScale (for more information see [rs-base]).\n\n# Resources/Providers\n\n## `rightscale_tag_load_balancer`\n\nA resource to create and remove tags to identify a load balancer server.\n\n### Actions\n\n| Actions | Description | Default |\n| --- | --- | --- |\n| `:create` | creates the tags required for the load balancer server | yes |\n| `:delete` | removes the tags from the load balancer server | |\n\n### Attributes\n\n| Attribute | Description | Default Value | Required |\n| --- | --- | --- | --- |\n| `application_name` | the name of the application the load balancer will serve | | yes |\n\n## `rightscale_tag_application`\n\nA resource to create and remove tags to identify an application server.\n\n### Actions\n\n| Actions | Description | Default |\n| --- | --- | --- |\n| `:create` | creates the tags required for the application server | yes |\n| `:delete` | removes the tags from the application server | |\n\n### Attributes\n\n| Attribute | Description | Default Value | Required |\n| --- | --- | --- | --- |\n| `application_name` | the name of the application | | yes |\n| `bind_ip_address` | the IP address the application is bound to | | yes |\n| `bind_port` | the port the application is bound to | | yes |\n| `vhost_path | the vhost or path of the application | | yes |\n\n## `rightscale_tag_database`\n\nA resource to create and remove tags to identify a database server including its\nrole of master or slave.\n\n### Actions\n\n| Actions | Description | Default |\n| --- | --- | --- |\n| `:create` | creates the tags required for the database server | yes |\n| `:delete` | removes the tags from the database server | |\n\n### Attributes\n\n| Attribute | Description | Default Value | Required |\n| --- | --- | --- | --- |\n| `lineage` | the lineage of the database | | yes |\n| `bind_ip_address` | the IP address the database is bound to | | yes |\n| `bind_port` | the port the database is bound to | | yes |\n| `role` | the role of the database; this can be `'master'` or `'slave'` | | no |\n\n# Helpers\n\nThis cookbook also provides three helper methods for finding servers of each\ntype. To use them in a recipe add the following:\n\n```ruby\nclass Chef::Recipe\n  include RightScale::RightScaleTag\nend\n```\n\n## `find_load_balancer_servers`\n\nFind load balancer servers using tags. This will find all active load balancer\nservers, or, if `application_name` is given, it will find all load balancer\nservers serving for that application.\n\n```ruby\ndef find_load_balancer_servers(node, application_name = nil, options = {})\n```\n\n### Parameters\n\n| Name | Description | Type |\n| --- | --- | --- |\n| `node` | the Chef node | `Chef::Node` |\n| `application_name` | the name of the application served by load balancer servers to search for; this is an optional parameter | `String` |\n| `options` | optional parameters | `Hash` |\n| `options[:query_timeout]` | the seconds to timeout for the query operation; the default is `120` | `Integer` |\n\n## `find_application_servers`\n\nFind application servers using tags. This will find all active application\nservers, or, if `application_name` is given, it will find all application\nservers serving that application.\n\n```ruby\ndef find_application_servers(node, application_name = nil, options = {})\n```\n\n### Parameters\n\n| Name | Description | Type |\n| --- | --- | --- |\n| `node` | the Chef node | `Chef::Node` |\n| `application_name` | the name of the application served by the application servers to search for; this is an optional parameter | `String` |\n| `options` | optional parameters | `Hash` |\n| `options[:query_timeout]` | the seconds to timeout for the query operation; the default is `120` | `Integer` |\n\n## `find_database_servers`\n\nFind database servers using tags. This will find all active database servers,\nor, if `lineage` is given, it will find all database servers for that linage,\nor, if `role` is specified it will find the database server(s) with that role.\n\n```ruby\ndef find_database_servers(node, lineage = nil, role = nil, options = {})\n```\n\n### Parameters\n\n| Name | Description | Type |\n| --- | --- | --- |\n| `node` | the Chef node | `Chef::Node` |\n| `lineage` | the lineage of the database servers to search for; this is an optional parameter | `String` |\n| `role` | the role of the database servers to search for; this should be `'master'` or `'slave'`; this is an optional parameter | `String` |\n| `options` | optional parameters | `Hash` |\n| `options[:only_latest_for_role]` | only return the latest server tagged for a role; the default is `false` | `Boolean` |\n| `options[:query_timeout]` | the seconds to timeout for the query operation; the default is `120` | `Integer` |\n\n# Author\n\nAuthor:: RightScale, Inc. (<cookbooks@rightscale.com>)\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/machine_tag",
      "revision": "~> 1.0.3",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/marker",
      "revision": "~> 1.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "rightscale_tag::default": "Tags a server with the standard RightScale server tags",
    "rightscale_tag::monitoring": "Tags a server with the RightScale monitoring server tag"
  }
}