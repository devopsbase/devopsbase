{
  "name": "chef_eye Chef cookbook",
  "chef_cookbook_name": "chef_eye",
  "revision": "1.0.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/chef_eye",
    "https://supermarket.chef.io/cookbooks/chef_eye/download",
    "https://supermarket.chef.io/cookbooks/chef_eye/versions/1.0.3",
    "https://supermarket.chef.io/cookbooks/chef_eye/versions/1.0.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_eye/versions/1.0.3",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_eye",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_eye/versions/1.0.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/chef_eye",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/chef_eye/versions/1.0.3/download",
  "deprecated": false,
  "created": "2015-01-03T21:59:17.846Z",
  "updated": "2016-01-13T10:09:56.306Z",
  "description": "Installs/Configures chef_eye",
  "maintainer": {
    "name": "nikolaymurga",
    "email": "nikolay.m@randrmusic.com"
  },
  "license": "Apache v2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 2337850,
  "downloads_count_revision": 66883,
  "repository_url": "https://github.com/MurgaNikolay/chef-eye",
  "issues_url": "https://github.com/MurgaNikolay/chef-eye/issues",
  "chef_source_url": "https://github.com/MurgaNikolay/chef-eye",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# chef_eye cookbook\n\nCookbook for setup [eye](https://github.com/kostya/eye) services and applications\n\n[![Code Climate](https://codeclimate.com/github/MurgaNikolay/chef-eye/badges/gpa.svg)](https://codeclimate.com/github/MurgaNikolay/chef-eye)\n[![Build Status](https://travis-ci.org/MurgaNikolay/chef-eye.svg?branch=master)](https://travis-ci.org/MurgaNikolay/chef-eye)\n\n### Related projects\n\n[Capistrano chef eye](https://github.com/MurgaNikolay/capistrano-chef-eye) cookbook companion for Capistrano.\n\n## Supported Platforms\n\n* Ubuntu 12.04\n* Ubuntu 14.04\n\n## Attributes\n\n\n| Key | Type | Description | Default |\n|-----|------|-------------|---------|\n| chef_eye.eye_bin | String  |  Path to eye executable file | /usr/local/bin/eye |\n| chef_eye.leye_bin | String  |  Path to local eye executable file | /usr/local/bin/leye |\n| chef_eye.services | Hash or Array  |  Array of users or Hash with users as keys and service options as value | ['root'] |\n| chef_eye.service_provider | String |  `'upstart'` or `'init'` | `'upstart'`|\n| chef_eye.applications | Hash  | Applications configurations | {} |\n| chef_eye.install_ruby | Boolean  | Try to install ruby packages `ruby`, `ruby-dev`. If you want to install ruby using another way, you should set this value to `false` | true |\n\n\n## Usage\n\nThis cookbook provides two strategies of usage `eye`. \"Eye\" per user and \"eye\" per project (local eye).\nFirst strategy run one eye daemon for all configurations and load it.\n\nEye per user file structure (for user vagrant):\n\n    /etc/init/eye_vagrant.conf # Eye service for user vagrant (generated by chef_eye::service recipe)\n    /etc/eye/config.eye # Main eye file. This file contains eye service settings and load config files from /etc/eye/vagrant/*.eye\n    /etc/eye/vagrant/application1.eye # Application config (generated by chef_eye_application lwrp)\n    /etc/eye/vagrant/application2.eye\n    /etc/eye/vagrant/*.eye\n\nEye per project (local eye) file structure (generated by provider `Chef::Provider::ChefEyeApplicationLocal` ):\n\n    /etc/init/leye_application.conf\n    /var/www/application/shared # Eye home\n    /var/www/application/shared/Eyefile # Local eye service configuration and loader for application config\n    /var/www/application/shared/.eye/sock\n    /var/www/application/shared/.eye/pid\n    /var/www/application/shared/config/application.eye # Configuration file for application. Default path <eye_home>/config/<application_name>.eye\n\n## Recipes\n\n### chef_eye::default\n\nInclude `chef_eye` in your node's `run_list`:\n\n```json\n{\n  \"run_list\": [\n    \"recipe[chef_eye::default]\"\n  ]\n}\n```\n\n### chef_eye::ruby\n\nCookbook used system ruby and try to install `ruby`, `ruby-dev` packages if `node['chef_eye']['install_ruby']` set to `true`\nIf  you want to use custom system ruby, you need set `node['chef_eye']['install_ruby']` to `false` and install custom ruby before\nbefore this cookbook. For example, if you want to use `uid` and `gid` [application options](https://github.com/kostya/eye/issues/50),\nyou need install ruby 2.0.0 as system ruby. Its installation is your concern.\n\n## chef_eye::service\n\nThis recipe configure `chef_eye_service` for using with per user strategy\n\nBy default service named by `eye_<username>`. For example, service for user vagrant, will be named as `eye_vagrant`, service for user root as `eye_root`, etc.\n\nIf you need to reload service for user `vagrant`, you can use\n\n```ruby\nsome_resource do\n  ...\n  notifies :reload, 'chef_eye_service[eye_vagrant]'\nend\n```\n\nIf you want to change configuration for service for `ubuntu`:\n\n```ruby\ndefault['chef_eye']['services'] = {\n  ubuntu: {\n    'logger' => '/var/log/eye/ubuntu.log'\n    'mail' => {\n      'host' => 'mx.some.host',\n      'port' => 25,\n      'domain' => 'some.host'\n    },\n    contacts: {\n      'errors' => {\n        'type' => 'mail',\n        'contact' => 'error@some.host'\n      },\n      'dev' => {\n        'type' => 'mail',\n        'contact' => 'error@some.host',\n        'opts' => {}\n      },\n    }\n  }\n}\n```\n\n### chef_eye::applications\n\nThis service generate `chef_eye_application` LWRP's using `node['chef_eye']['applications']` attributes. \nFor example:\n\n```ruby\ndefault['chef_eye']['applications']['my_app'] = {\n  type: 'local',\n  owner: 'vagrant', # required\n  group: 'vagrant',\n  config_dir: '/var/www/rails_sample/shared/config',\n  \n  # for local version\n  eye_file: 'Eyefile',\n  eye_home: '/var/www/rails_sample/shared',\n  eye_config: {\n    logger: '/var/www/rails_sample/shared/log/eye.log'\n  },\n  service_provider: 'upstart',\n  #application config\n  config: {\n    working_dir: '/var/www/rails_sample/current',\n    checks: {\n      cpu: {\n        :every => 30,\n        :below => 80,\n        :times => 3\n      },\n      memory:{\n        :every => 30,\n        :below => 73400320,\n        :times => [ 3, 5 ]\n      }\n    },\n    process: {\n      unicorn: {\n        daemonize:  true,\n        pid_file: 'puma.pid',\n        stdall: 'puma.log',\n        start_command: 'bundle exec unicorn --port 33280 --environment production Config.ru',\n        stop_signals: ['TERM', 5, 'KILL']\n      },\n      resque: {\n        pid_file: 'tmp/pids/resque.pid',\n        start_command: 'bin/resque work --queue=high',\n        checks: {\n          cpu: {\n            :every => 30,\n            :below => 80,\n            :times => 3\n          }\n        }\n      }\n    }\n  }\n}\n```\n## LWRPs\n\n### chef_eye_service\n\n#### Attributes  \n\n\n|  Name       |  Type  | Description  |  Default Value |\n|-------------|--------|--------------|----------------|\n|  service_name | String | Name of the system service and system configuration file (/etc/init/<service_name>.conf).  | This is a name_attribute |\n|  type     | String | Type need for set execution file `eye` or `leye`. Can be 'local' or 'user'   |  `'user'`  |\n|  service_provider      | String | `upstart` or `init` | `'upstart'`    |\n|  owner   | String | Owner of service | `'root'`  |\n|  group   |String | Group of service | `'root'`    |\n|  cookbook   | Symbol, String, NilClass | Cookbook name for searching templates | `nil` |\n|  eye_home   | String, NilClass | Home directory for eye process. Used only for 'local' service type  | `nil`    |\n|  eye_file   | String, NilClass | Main configuration file for loading by service. For `local` service this is `Eyefile` name, for `user` '/etc/<username>.eye'. This file must be generated by another LWRP. | `nil`    |\n\n\n#### Actions   \n\n\n|  Name         | Description  |   |\n|---------------|--------------|--------------|\n|  :nothing     |   |  default  |\n|  :start       | Start eye service  |    |\n|  :stop        | Stop eye service   |  |\n|  :restart     | Restart eye service |  |\n|  :stop_all    | Send start to all loaded applications |  |\n|  :start_all   | Send stop to all loaded applications |  |\n|  :restart_all | Send restart to all loaded applications  |  |\n\n\n\n### chef_eye_application\n  \n  This is a main LWRP for configure eye application. \n  You can use any valid eye [options](https://github.com/kostya/eye/tree/master/examples) for config attribute.\n\n#### Attributes:\n\n|  Name       |  Type  | Description  |  Default Value |\n|-------------|--------|--------------|----------------|\n|  owner      | String | Owner fo application |  `'root'`    |\n|  group      | String | Owner fo application |   `'root'`      |\n|  cookbook   | String | Cookbook name for searching templates    | `'chef_eye'`  |\n|  config     | Hash or Block | Application configuration  |  `{}`   |\n|  config_dir     | String, NilClass | Application configuration |   nil (set dynamic: <eye_home>/config for `local`, /etc/eye/<user_name>/ for `user` strategies)   |\n|  service_provider | string | Application configuration   |    node['chef_eye']['service_type'] |\n|  eye_home | String, NillClass | Home for `.eye` directory, used only for `local` strategy. If empty, provider try to resolve eye_home path by `eye_file`. If eye_file is relative path, and eye_home empty, provider raise exception.  |    |\n|  eye_file | String | Application service configuration file name (relative of eye_home) or absolute path, used only for `local` strategy    | `'Eyefile'` |\n|  eye_config | Hash or Block | Application Service configuration, used only for `local` strategy |    `{}`  |\n\n\n#### Providers\n\n| Provider Name |      Description   |\n|---------------|---------------------|\n| Chef::Provider::ChefEyeApplication  | Default provider. This provider implement `user` application strategy   |  \n| Chef::Provider::ChefEyeApplicationLocal | Default provider. This provider implement `local` application strategy |\n\n\nCookbook provide `chef_eye_application` resource. This is a main resource for generate eye application configuration.\n\n```ruby\nchef_eye_application 'name_of_my_app' do\n  owner 'ubuntu'\n  group 'ubuntu'\n  working_dir '/var/www/rails_sample'\n  config do\n    env 'RAILS_ENV' => 'production'\n    working_dir '/var/www/my_app'\n    trigger :flapping, :times => 10, :within => 1.minute\n    process :puma do\n      daemonize true\n      pid_file \"puma.pid\"\n      stdall \"puma.log\"\n      start_command \"bundle exec puma --port 33280 --environment production thin.ru\"\n      stop_signals [:TERM, 5.seconds, :KILL]\n      restart_command \"kill -USR2 {PID}\"\n      restart_grace 10.seconds\n      check :cpu, :every => 30, :below => 80, :times => 3\n      check :memory, :every => 30, :below => 70.megabytes, :times => [3,5]\n    end\n  end\n  action :configure # or :delete\n  notifies :reload, 'chef_eye_service[eye_ubuntu]' # you need notify service for reload\nend\n```\n\nOr as hash\n\n```ruby\nchef_eye_application 'name_of_my_app' do\n  owner 'ubuntu'\n  group 'ubuntu'\n  config({\n      env: {\n        RAILS_ENV: 'production'\n      },\n      working_dir: '/var/www/my_app',\n      triggers: {\n        flapping: {\n          :times => 10,\n          :within => 1.minute\n        }\n      },\n      processes: {\n        puma: {\n          daemonize: true,\n          pid_file: \"puma.pid\",\n          stdall: \"puma.log\",\n          start_command: \"bundle exec puma --port 33280 --environment production thin.ru\",\n          stop_signals: [:TERM, 5.seconds, :KILL],\n          restart_command: \"kill -USR2 {PID}\",\n          restart_grace: 10.seconds,\n          checks: {\n            cpu: {:every => 30, :below => 80, :times => 3},\n            memory: {:every => 30, :below => 70.megabytes, :times => [3, 5]}\n          }\n        }\n      }\n    })\n  action :configure # or :delete\n  notifies :reload, 'chef_eye_service[eye_ubuntu]' # you need notify service for reload\nend\n```\n\n## TODO\n\n  * Add unit tests\n  * Add integration tests\n  \n\n## License and Authors\n\nAuthor:: Nikolay Murga (nikolay.m@randrmusic.com)\n\n\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "chef_eye": "Installs all"
  }
}