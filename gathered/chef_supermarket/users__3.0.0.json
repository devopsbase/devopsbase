{
  "name": "users Chef cookbook",
  "chef_cookbook_name": "users",
  "revision": "3.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/users",
    "https://supermarket.chef.io/cookbooks/users/download",
    "https://supermarket.chef.io/cookbooks/users/versions/3.0.0",
    "https://supermarket.chef.io/cookbooks/users/versions/3.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/users/versions/3.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/users",
    "https://supermarket.chef.io/api/v1/cookbooks/users/versions/3.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Middleware/Search"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/users",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/users/versions/3.0.0/download",
  "deprecated": false,
  "created": "2010-07-27T05:34:01.000Z",
  "updated": "2016-09-15T22:18:09.320Z",
  "description": "Creates users from a databag search",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 209,
  "downloads_count": 21139801,
  "downloads_count_revision": 233005,
  "repository_url": "https://github.com/chef-cookbooks/users",
  "issues_url": "https://github.com/chef-cookbooks/users/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/users",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# users Cookbook\n[![Build Status](https://travis-ci.org/chef-cookbooks/users.svg?branch=master)](http://travis-ci.org/chef-cookbooks/users) [![Cookbook Version](https://img.shields.io/cookbook/v/users.svg)](https://supermarket.chef.io/cookbooks/users)\n\nManages OS users from databags.\n\n## Scope\n\nThis cookbook is concerned with the management of OS users and groups from databags. It also manages the distribution of ssh keys to a user's home directory.\n\n## Requirements\n\nA data bag populated with user objects must exist. The default data bag in this recipe is `users`. See USAGE.\n\n### Chef\n\n- Chef 11+\n\n### Platform Support\n\nThe following platforms have been tested with Test Kitchen:\n\n- Debian / Ubuntu and derivatives\n- RHEL and derivatives \n- Fedora \n- FreeBSD / OpenBSD\n- Mac OS X\n\n### Cookbook Dependencies\n- none\n\n## Usage\nTo use the resource `users_manage`, make sure to add the dependency on the users cookbook by the following line to your wrapper cookbook's [metadata.rb](https://docs.chef.io/config_rb_metadata.html):\n\n```\ndepends 'users'\n```\n\nor to pin to a specific version of the users cookbook, in this case any version of 2.X:\n\n```\ndepends 'users', '~> 2'\n```\n\nThen in a recipe:\n\n```ruby\nusers_manage 'GROUPNAME' do\n  group_id GROUPID\n  action [:create]\n  data_bag 'DATABAG_NAME'\nend\n```\n\nExample:\n\n```ruby\nusers_manage 'testgroup' do\n  group_id 3000\n  action [:create]\n  data_bag 'test_home_dir'\nend\n```\n\n**Note**: If you do not specify the data_bag, the default will be to look for a databag called users.\n\n## Databag Definition\n\nA sample user object in a users databag would look like:\n\n```json\n{\n  \"id\": \"test_user\",\n  \"password\": \"$1$5cE1rI/9$4p0fomh9U4kAI23qUlZVv/\",\n  \"ssh_keys\": [\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\\nNrRFi9wrf+M7Q== chefuser@mylaptop.local\",\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\\nNQCPO0ZZEa1== chefuser@mylaptop.local\"\n  ],\n  \"groups\": [ \"testgroup\", \"nfsgroup\" ],\n  \"uid\": 9001,\n  \"shell\": \"\\/bin\\/bash\",\n  \"comment\": \"Test User\"\n}\n```\n\n### Databag Key Definitions \n\n* `id`: *String* specifies the username, as well as the data bag object id.\n* `password`: *String* specifies the user's password.\n* `ssh_keys`: *Array* an array of authorized keys that will be managed by Chef to the user's home directory in .ssh/authorized_keys\n* `groups`: *Array* an array of groups that the user will be added to\n* `uid`: *Integer* a unique identifier for the user\n* `shell`: *String* the user's shell\n* `comment`:*String* the [GECOS field](https://en.wikipedia.org/wiki/Gecos_field), generally the User's full name.\n\nOther potential fields:\n\n* `home`: *String* User's home directory. If not assigned, will be set based on platform and username.\n* `action`: *String* Supported actions are one's supported by the [user](https://docs.chef.io/resource_user.html#actions) resource. If not specified, the default action is `create`.\n* `ssh_private_key`: *String* manages user's private key generally ~/.ssh/id_*\n* `ssh_public_key`: *String* manages user's public key generally ~/.ssh/id_*.pub\n\n\n## Resources Overview\n\n### users_manage\n\nThe `users_manage` resource manages users and groups based off of a data bag search and specified action.\n\n#### Examples\n\nCreates the `sysadmin` group and users defined in the `users` databag.\n\n```ruby\nusers_manage 'sysadmin' do\n  group_id 2300\n  action [:create]\nend\n```\n\nCreates the `testgroup` group, and users defined in the `test_home_dir` databag.\n\n```ruby\nusers_manage 'testgroup' do\n  group_id 3000\n  action [:create]\n  data_bag 'test_home_dir'\nend\n```\n\nCreates the `nfsgroup` group, and users defined in the `test_home_dir` databag and does not manage nfs home directories.\n\n```ruby\nusers_manage 'nfsgroup' do\n  group_id 4000\n  action [:create]\n  data_bag 'test_home_dir'\n  manage_nfs_home_dirs false\nend\n```\n\n#### Parameters\n\n* `data_bag` *String* is the data bag to search\n* `search_group` *String* groups name to search for, defaults to resource name\n* `group_name` *String* name of the group to create, defaults to resource name\n* `group_id` *Integer* numeric id of the group to create, default is to allow the OS to pick next\n* `cookbook` *String* name of the cookbook that the authorized_keys template should be found in\n* `manage_nfs_home_dirs` *Boolean* whether to manage nfs home directories.\n\nOtherwise, this cookbook is specific for setting up `sysadmin` group and users with the sysadmins recipe for now.\n\n## Recipe Overview\n\n`sysadmins.rb`: recipe that manages the group sysadmins with group id 2300, and adds users to this group.\n\nTo use:\n\n```ruby\ninclude_recipe \"users::sysadmins\"\n```\n\nThe recipe is defined as follows:\n\n```ruby\nusers_manage \"sysadmin\" do\n  group_id 2300\n  action [ :create ]\nend\n```\n\nThis `users_manage` resource searches the `users` data bag for the `sysadmin` group attribute, and adds those users to a Unix security group `sysadmin`. The only required attribute is group_id, which represents the numeric Unix gid and _must_ be unique. The default action for the resource is `:create`.\n\nThe recipe, by default, will also create the sysadmin group. The sysadmin group will be created with GID 2300. This may become an attribute at a later date.\n\n## Data bag Overview \n\n**Reminder** Data bags generally should not be stored in cookbooks, but in a policy repo within your organization. Data bags are useful across cookbooks, not just for a single cookbook.\n\nUse knife to create a data bag for users.\n\n```bash\n$ knife data bag create users\n```\n\nCreate a user in the data_bag/users/ directory.\n\nAn optional password hash can be specified that will be used as the user's password.\n\nThe hash can be generated with the following command.\n\n```bash\n$ openssl passwd -1 \"plaintextpassword\"\n```\n\nNote: The ssh_keys attribute below can be either a String or an Array. However, we are recommending the use of an Array.\n\n```json\n{\n  \"id\": \"bofh\",\n  \"ssh_keys\": \"ssh-rsa AAAAB3Nz...yhCw== bofh\"\n}\n```\n\n```json\n{\n  \"id\": \"bofh\",\n  \"password\": \"$1$d...HgH0\",\n  \"ssh_keys\": [\n    \"ssh-rsa AAA123...xyz== foo\",\n    \"ssh-rsa AAA456...uvw== bar\"\n  ],\n  \"groups\": [ \"sysadmin\", \"dba\", \"devops\" ],\n  \"uid\": 2001,\n  \"shell\": \"\\/bin\\/bash\",\n  \"comment\": \"BOFH\"\n}\n```\n\nYou can pass any action listed in the [user](http://docs.chef.io/chef/resources.html#user) resource for Chef via the \"action\" option. For Example:\n\nLock a user, johndoe1.\n\n```bash\n$ knife data bag edit users johndoe1\n```\n\nAnd then change the action to \"lock\":\n\n```javascript\n{\n  \"id\": \"johndoe1\",\n  \"groups\": [\"sysadmin\", \"dba\", \"devops\"],\n  \"uid\": 2002,\n  \"action\": \"lock\", // <--\n  \"comment\": \"User violated access policy\"\n}\n```\n\nRemove a user, johndoe1.\n\n```bash\n$ knife data bag edit users johndoe1\n```\n\nAnd then change the action to \"remove\":\n\n```javascript\n{\n  \"id\": \"johndoe1\",\n  \"groups\": [ \"sysadmin\", \"dba\", \"devops\" ],\n  \"uid\": 2002,\n  \"action\": \"remove\", // <--\n  \"comment\": \"User quit, retired, or fired.\"\n}\n```\n\n- Note only user bags with the \"action : remove\" and a search-able \"group\" attribute will be purged by the :remove action.\n- As of v2.0.3 you can use the force parameter within the user data bag object for users with action remove. As per [user docs](https://docs.chef.io/resource_user.html) this may leave the system in an inconsistent state. For example, a user account will be removed even if the user is logged in. A user’s home directory will be removed, even if that directory is shared by multiple users.\n\nIf you have different requirements, for example:\n- You want to search a different data bag specific to a role such as\n- mail. You may change the data_bag searched.\n  - data_bag `mail`\n\n- You want to search for a different group attribute named\n- `postmaster`. You may change the search_group attribute. This\n- attribute defaults to the LWRP resource name.\n  - search_group `postmaster`\n\n- You want to add the users to a security group other than the\n- lightweight resource name. You may change the group_name attribute.\n- This attribute also defaults to the LWRP resource name.\n  - group_name `wheel`\n\nPutting these requirements together our recipe might look like this:\n\n```ruby\nusers_manage \"postmaster\" do\n  data_bag \"mail\"\n  group_name \"wheel\"\n  group_id 10\nend\n```\n\nKnife supports reading data bags from a file and automatically looks in a directory called +data_bags+ in the current directory. The \"bag\" should be a directory with JSON files of each item. For the above:\n\n```bash\n$ mkdir data_bags/users\n$EDITOR data_bags/users/bofh.json\n```\n\nPaste the user's public SSH key into the ssh_keys value. Also make sure the uid is unique, and if you're not using bash, that the shell is installed. \n\nThe Apache cookbook can set up authentication using OpenIDs, which is set up using the openid key here. See the Chef Software 'apache2' cookbook for more information about this.\n\n## License & Authors\n**Author:** Cookbook Engineering Team ([cookbooks@chef.io](mailto:cookbooks@chef.io))\n\n**Copyright:** 2009-2016, Chef Software, Inc.\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "freebsd",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "mac_os_x",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "zlinux",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "users::default": "Empty recipe for including LWRPs",
    "users::sysadmins": "Create and manage sysadmin group"
  }
}