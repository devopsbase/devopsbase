{
  "name": "flume Chef cookbook",
  "chef_cookbook_name": "flume",
  "revision": "3.0.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/flume",
    "https://supermarket.chef.io/cookbooks/flume/download",
    "https://supermarket.chef.io/cookbooks/flume/versions/3.0.3",
    "https://supermarket.chef.io/cookbooks/flume/versions/3.0.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/flume/versions/3.0.3",
    "https://supermarket.chef.io/api/v1/cookbooks/flume",
    "https://supermarket.chef.io/api/v1/cookbooks/flume/versions/3.0.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Monitoring & Trending",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Logging"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/flume",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/flume/versions/3.0.3/download",
  "deprecated": false,
  "created": "2011-11-15T13:03:10.000Z",
  "updated": "2012-01-31T06:47:23.000Z",
  "description": "Flume: reliable decoupled shipment of logs and data.",
  "maintainer": {
    "name": "mrflip",
    "email": "coders@infochimps.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 10,
  "downloads_count": 3623723,
  "downloads_count_revision": 1207798,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# flume chef cookbook\n\nInstalls/Configures flume\n\n## Overview\n\nCookbook to install flume on a cluster.\n\nUse flume::master to set up a master node. Use flume::node to set up a\nphysical node. Currently only one physical node per machines. \n\nConfigure logical nodes with the logical_node resource - see the test_flow.rb \nrecipe for an example. This is still somewhat experimental, and some features\nwill not work as well as they should until chef version 0.9.14 and others until\nthe next release of flume.\n\nComing soon flume::xxx_plugin.\n\n#### Notes\n\nThis recipe relies on cluster_discovery_services to determine which nodes \nacross the cluster act as flume masters, and which nodes provide zookeeper\nservers.\n\n## Attributes\n\n* `[:flume][:aws_access_key]`         - AWS access key used for writing to s3 buckets\n* `[:flume][:aws_secret_key]`         - AWS secret key used for writing to s3 buckets\n* `[:flume][:cluster_name]`           -  (default: \"cluster_name\")\n  - The name of the cluster to participate with (masters and zookeepers...)\n* `[:flume][:plugins]`                - Hash for plugin configuration\n  - If you have a particular plugin to configure, you can also configure the classpath and the classes to include in the configuration file with attributes in the following forms:\n  node[:flume][:plugin][{plugin_name}][:classes]\n  node[:flume][:plugin][{plugin_name}][:classpath]\n  node[:flume][:plugin][{plugin_name}][:java_opts]\n* `[:flume][:classes]`                - \n* `[:flume][:classpath]`              - list of directories and jars to add to the FLUME_CLASSPATH\n* `[:flume][:java_opts]`              - list of command line parameters to add to the jvm\n* `[:flume][:collector]`              - Format of node's logs\n  - output_format -- Controls what format the node writes logs (using collectorSink):\n   * avro - Avro Native file format. Default currently is uncompressed.\n   * avrodata - Binary encoded data written in the avro binary format.\n   * avrojson - JSON encoded data generated by avro.\n   * default - a debugging format.\n   * json - JSON encoded data.\n   * log4j - a log4j pattern similar to that used by CDH output pattern.\n   * raw - Event body only. This is most similar to copying a file but does not preserve any uniqifying metadata like host/timestamp/nanos.\n   * syslog - a syslog like text output format.\n  \n  codec -- Controls what kind of compression the collector will use when writing a file.\n  whether or not collected logs are gzipped before writing\n  them to their final resting place (using collectorSink)\n   * GZipCodec\n   * BZip2Codec\n  \n* `[:flume][:data_dir]`               - Directory for local in-transit files (default: \"/data/db/flume\")\n* `[:flume][:home_dir]`               -  (default: \"/usr/lib/flume\")\n* `[:flume][:conf_dir]`               -  (default: \"/etc/flume/conf\")\n* `[:flume][:log_dir]`                -  (default: \"/var/log/flume\")\n* `[:flume][:pid_dir]`                -  (default: \"/var/run/flume\")\n* `[:flume][:master][:external_zookeeper]` - Use External Zookeeper?\n  - false to use flume's zookeeper. True to attach to an external zookeeper.\n* `[:flume][:master][:zookeeper_port]` - port to talk to zookeeper on (for external zookeeper) (default: \"2181\")\n* `[:flume][:master][:run_state]`     -  (default: \"stop\")\n* `[:flume][:node][:run_state]`       -  (default: \"stop\")\n\n## Recipes \n\n* `default`                  - Base configuration for flume\n* `hbase_sink_plugin`        - Hbase Sink Plugin\n* `jruby_plugin`             - Jruby Plugin\n* `master`                   - Configures Flume Master, installs and starts service\n* `node`                     - Configures Flume Node, installs and starts service\n* `test_flow`                - Test Flow\n## Integration\n\nSupports platforms: debian and ubuntu\n\nCookbook dependencies:\n* java\n* apt\n* runit\n* volumes\n* metachef\n\n\n## License and Author\n\nAuthor::                Chris Howe - Infochimps, Inc (<coders@infochimps.com>)\nCopyright::             2011, Chris Howe - Infochimps, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n> readme generated by [cluster_chef](http://github.com/infochimps/cluster_chef)'s cookbook_munger\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/volumes",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/metachef",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/hadoop_cluster",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "flume::default": "Base configuration for flume",
    "flume::hbase_sink_plugin": "Hbase Sink Plugin",
    "flume::jruby_plugin": "Jruby Plugin",
    "flume::master": "Configures Flume Master, installs and starts service",
    "flume::node": "Configures Flume Node, installs and starts service",
    "flume::test_flow": "Test Flow"
  },
  "parameters": {
    "flume/aws_access_key": {
      "display_name": "AWS access key used for writing to s3 buckets",
      "description": "AWS access key used for writing to s3 buckets",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/aws_secret_key": {
      "display_name": "AWS secret key used for writing to s3 buckets",
      "description": "AWS secret key used for writing to s3 buckets",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/cluster_name": {
      "display_name": "",
      "description": "The name of the cluster to participate with (masters and zookeepers...)",
      "default": "cluster_name",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/plugins": {
      "display_name": "Hash for plugin configuration",
      "description": "If you have a particular plugin to configure, you can also configure the classpath and the classes to include in the configuration file with attributes in the following forms:\nnode[:flume][:plugin][{plugin_name}][:classes]\nnode[:flume][:plugin][{plugin_name}][:classpath]\nnode[:flume][:plugin][{plugin_name}][:java_opts]",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/classes": {
      "display_name": "",
      "description": "",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/classpath": {
      "display_name": "list of directories and jars to add to the FLUME_CLASSPATH",
      "description": "list of directories and jars to add to the FLUME_CLASSPATH",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/java_opts": {
      "display_name": "list of command line parameters to add to the jvm",
      "description": "list of command line parameters to add to the jvm",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/collector": {
      "display_name": "Format of node's logs",
      "description": "output_format -- Controls what format the node writes logs (using collectorSink):\n * avro - Avro Native file format. Default currently is uncompressed.\n * avrodata - Binary encoded data written in the avro binary format.\n * avrojson - JSON encoded data generated by avro.\n * default - a debugging format.\n * json - JSON encoded data.\n * log4j - a log4j pattern similar to that used by CDH output pattern.\n * raw - Event body only. This is most similar to copying a file but does not preserve any uniqifying metadata like host/timestamp/nanos.\n * syslog - a syslog like text output format.\n\ncodec -- Controls what kind of compression the collector will use when writing a file.\nwhether or not collected logs are gzipped before writing\nthem to their final resting place (using collectorSink)\n * GZipCodec\n * BZip2Codec\n",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/data_dir": {
      "display_name": "Directory for local in-transit files",
      "description": "Directory for local in-transit files",
      "default": "/data/db/flume",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/home_dir": {
      "display_name": "",
      "description": "",
      "default": "/usr/lib/flume",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/conf_dir": {
      "display_name": "",
      "description": "",
      "default": "/etc/flume/conf",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/log_dir": {
      "display_name": "",
      "description": "",
      "default": "/var/log/flume",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/pid_dir": {
      "display_name": "",
      "description": "",
      "default": "/var/run/flume",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/master/external_zookeeper": {
      "display_name": "Use External Zookeeper?",
      "description": "false to use flume's zookeeper. True to attach to an external zookeeper.",
      "default": "",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/master/zookeeper_port": {
      "display_name": "port to talk to zookeeper on (for external zookeeper)",
      "description": "port to talk to zookeeper on (for external zookeeper)",
      "default": "2181",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/master/run_state": {
      "display_name": "",
      "description": "",
      "default": "stop",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "flume/node/run_state": {
      "display_name": "",
      "description": "",
      "default": "stop",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}