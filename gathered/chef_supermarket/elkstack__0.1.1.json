{
  "name": "elkstack Chef cookbook",
  "chef_cookbook_name": "elkstack",
  "revision": "0.1.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/elkstack",
    "https://supermarket.chef.io/cookbooks/elkstack/download",
    "https://supermarket.chef.io/cookbooks/elkstack/versions/0.1.1",
    "https://supermarket.chef.io/cookbooks/elkstack/versions/0.1.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/elkstack/versions/0.1.1",
    "https://supermarket.chef.io/api/v1/cookbooks/elkstack",
    "https://supermarket.chef.io/api/v1/cookbooks/elkstack/versions/0.1.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/elkstack",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/elkstack/versions/0.1.1/download",
  "deprecated": false,
  "created": "2014-09-04T18:04:56.268Z",
  "updated": "2016-05-27T13:31:30.883Z",
  "description": "Installs/Configures elkstack",
  "maintainer": {
    "name": "rackops",
    "email": "rackspace-cookbooks@rackspace.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 34,
  "downloads_count": 14509901,
  "downloads_count_revision": 976143,
  "repository_url": "https://github.com/rackspace-cookbooks/elkstack",
  "issues_url": "https://github.com/rackspace-cookbooks/elkstack/issues",
  "chef_source_url": "https://github.com/rackspace-cookbooks/elkstack",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# elkstack\n\n**Please note that this cookbook does not restart elasticsearch automatically,\nin order to avoid causing an outage of the cluster. It does restart nginx and\nlogstash, however.**\n\nElasticsearch, Logstash, and Kibana stack. Due to the recommendations of the\ncommunity, we are not using the embedded elasticsearch functionality of logstash\nat this point. This cookbook provides recipes for all three components, along\nwith wrapper recipes such as `single` or `cluster` to facilitate different use\ncases.\n\nThis stack's design is intended for one or many standalone nodes, with a full\nstack of elasticsearch, logstash, and kibana. The only difference between one\nand many nodes is that elasticsearch is clustered together. Data dispatched to  \nLogstash on a particular node will use the local elasticsearch transport\ninterface to index those logs to the node (and thus, the cluster). HTTP traffic\ndispatched to Kibana on port 80 on any node will also use the local\nelasticsearch HTTP interface to fetch and manipulate data.\n\nPlease read the individual recipe summaries to understand what each recipe does,\nas well as what each wrapper recipe is actually wrapping. As much as possible,\nupstream attributes have been exposed/overriden for our needs.\n\n## [Changelog](CHANGELOG.md)\n\nSee CHANGELOG.md for additional information about changes to this stack over time.\n\n## Supported Platforms\n\nUbuntu 12.04\n\nUbuntu 14.04\n\nCentOS 6.5\n\n## Attributes\n\n<table>\n  <tr>\n    <th>Key</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>['elkstack']['config']['cluster']</tt></td>\n    <td>Boolean</td>\n    <td>whether to search for and connect Elasticsearch to cluster nodes</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['elkstack']['iptables']['enabled']</tt></td>\n    <td>Boolean</td>\n    <td>Enable/Disable iptables functionality</td>\n    <td><tt>true</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['elkstack']['config']['site_name']</tt></td>\n    <td>String</td>\n    <td>Control the name of the self-signed SSL key and cert in /etc/nginx/ssl</td>\n    <td><tt>kibana</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['elkstack']['config']['data_disk']['disk_config_type']</tt></td>\n    <td>String or Boolean</td>\n    <td>See customizing the stack section below</td>\n    <td><tt>false</tt></td>\n  </tr>\n</table>\n\n## Customizing the stack\n\nTo override local storage for elasticsearch nodes (the stack will format and mount, as well as configure elasticsearch), set `['elkstack']['config']['data_disk']['disk_config_type']` to `custom` and provide each storage device and mount point in the following way:\n```ruby\ndisk_config = {\n  'file_system' => 'ext4',\n  'mount_options' => 'rw,user',\n  'mount_path' => '/usr/local/var/data/elasticsearch/disk1',\n  'format_command' => 'mkfs -t ext4 ',\n  'fs_check_command' => 'dumpe2fs'\n}\n\nnode.override['elasticsearch']['data']['devices']['/dev/xvde1'] = disk_config\nnode.override['elasticsearch']['path']['data'] = disk_config['mount_path']\n```\n\nTo add additional logstash configuration to this stack, simply add additional templates in your wrapper cookbook. They should be placed in `\"#{@basedir}/#{@instance}/etc/conf.d\"` (see the config provider in the logstash cookbook).\n\nTo override the nginx configuration, simply supply a new template and specify your cookbook using `['kibana']['nginx']['template_cookbook']` and `['kibana']['nginx']['template']`. You can also override just the password for the reverse proxy using `node.run_state['elkstack_password']`.\n\nTo override anything else, set the appropriate node hash (`logstash`, `kibana`, or `elasticsearch`).\n\n## Usage\n\n### elkstack::default\n\nDefault recipe, does not do anything.\n\n### elkstack::single\n\nA simple wrapper recipe that sets up Elasticsearch, Logstash, and Kibana. Also\nconfigures an rsyslog sink into logstash on the local box. Everything except\nLogstash and Kibana is locked down to listen only on localhost.\n\n### elkstack::cluster\n\nA simple wrapper recipe that sets up Elasticsearch, Logstash, and Kibana. Also\nconfigures an rsyslog sink into logstash on the local box. Sets the cluster flag\nso that the elasticsearch recipe builds it in a cluster-friendly way.\n\n### elkstack::elasticsearch\n\nLeans on the upstream `elasticsearch/cookbook-elasticsearch` cookbook for much\nof its work. We do override the default set of plugins to be installed, as well\nas the amount of JVM heap. See `attributes/default.rb` for those settings.\n\nThis recipe also tags the node so that other nodes that run this recipe can\ndiscover it, and configure Elasticsearch appropriately to join their cluster.\nIt uses a tag, the current chef environment, and the cluster name as the default\nsearch criteria.\n\nMost of this is configurable using the upstream Elasticsearch cookbook's\nattributes, including the chef search itself. There is not an easy toggle to\nturn off the search, however.\nEnables iptables rules if default['elkstack']['iptables']['enabled'] not nil\n\n### elkstack::logstash\n\nLeans on the upstream `lusis/chef-logstash` cookbook for much\nof its work. We do override the default set of plugins to be installed, as well\nas the amount of JVM heap. See `attributes/default.rb` for those settings.\n\n### elkstack::kibana\n\nLeans on the upstream `lusis/chef-kibana` cookbook for most of its work. Sets up\nan nginx site for kibana by default. By default, it also does not pass through\nmost of the http paths directly to elasticsearch (whitelist).\n\n### elkstack::java\n\nWrapper for a java recipe. This is not included on the run list normally, so if\nyou don't already, you must include this recipe or get another JVM installed\nbefore including anything else in this cookbook.\n\n### elkstack::rsyslog\n\nLeans on the upstream `opscode-cookbooks/rsyslog` cookbook for most of its work.\nConfigures a local rsyslog that sends to the local logstash instance. The stack\nhas already been configured with attributes for this use case. See\n`attributes/default.rb` for those settings.\n\n### elkstack::newrelic\n\nValidates if there is a newrelic license set and based on that, see if the node\nis tagged as 'elkstack' or 'elkstack_cluster' and creates a file with\nelasticsearch details. Installs python, pip and setuptools packages in order to\nsupport newrelic_meetme_plugin\n\n## elkstack::acl\n\nAdds basic iptables rules and cluster iptables rules if appropriate attributes\nare set.\n\n## elkstack::disk_setup\n\nLook for `node['elkstack']['config']['data_disk']['disk_config_type']` to be truthy, and configure the upstream elasticsearch cookbook to format, mount, and use devices appropriately.\n\n## elkstack::\\*\\_monitoring\n\nThese correspond with the recipes above, and just provide a way to pull out the\nmonitoring work to make the original recipes cleaner.\n\n### Miscellaneous\n\nThe wrapper recipes are `single` and `cluster`. These change attributes and then\ninvoke `elasticsearch`, `logstash`, `kibana`, and `rsyslog`. Finally, there are\nutility recipes like `java` and `newrelic` (not invoked otherwise), as well as\n`acl` which is called by `_base` if `node['elkstack']['iptables']['enabled']`.\n\n## Contributing\n\nSee [CONTRIBUTING](https://github.com/AutomationSupport/elkstack/blob/master/CONTRIBUTING.md).\n\n## Authors\n\nAuthor:: Rackspace (devops-chef@rackspace.com)\n\n## License\n```\n# Copyright 2014, Rackspace Hosting\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n```\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apt",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/elasticsearch",
      "revision": "~> 0.3",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/logstash",
      "revision": "~> 0.9",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/kibana",
      "revision": "~> 1.3",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef-sugar",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/rsyslog",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/platformstack",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/newrelic_meetme_plugin",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/line",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/openssl",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/htpasswd",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}