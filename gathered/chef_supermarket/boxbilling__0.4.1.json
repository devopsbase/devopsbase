{
  "name": "boxbilling Chef cookbook",
  "chef_cookbook_name": "boxbilling",
  "revision": "0.4.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/boxbilling",
    "https://supermarket.chef.io/cookbooks/boxbilling/download",
    "https://supermarket.chef.io/cookbooks/boxbilling/versions/0.4.1",
    "https://supermarket.chef.io/cookbooks/boxbilling/versions/0.4.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/boxbilling/versions/0.4.1",
    "https://supermarket.chef.io/api/v1/cookbooks/boxbilling",
    "https://supermarket.chef.io/api/v1/cookbooks/boxbilling/versions/0.4.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Mode/CLI"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/boxbilling",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/boxbilling/versions/0.4.1/download",
  "deprecated": false,
  "created": "2014-08-28T15:40:39.019Z",
  "updated": "2015-09-01T18:29:26.994Z",
  "description": "Installs and configures BoxBilling, invoice and client management software\n",
  "maintainer": {
    "name": "zuazo",
    "email": "team@onddo.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 5917525,
  "downloads_count_revision": 466744,
  "repository_url": "https://github.com/zuazo/boxbilling-cookbook",
  "issues_url": "https://github.com/zuazo/boxbilling-cookbook/issues",
  "chef_source_url": "https://github.com/zuazo/boxbilling-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n[![Cookbook Version](https://img.shields.io/cookbook/v/boxbilling.svg?style=flat)](https://supermarket.getchef.com/cookbooks/boxbilling)\n[![Dependency Status](http://img.shields.io/gemnasium/onddo/boxbilling-cookbook.svg?style=flat)](https://gemnasium.com/onddo/boxbilling-cookbook)\n[![Build Status](http://img.shields.io/travis/onddo/boxbilling-cookbook/0.4.1.svg?style=flat)](https://travis-ci.org/onddo/boxbilling-cookbook)\n\nChef cookbook to install and configure [BoxBilling](http://www.boxbilling.com/), invoice and client management software.\n\nRequirements\n============\n\n## Supported Platforms\n\nThis cookbook has been tested on the following platforms:\n\n* Amazon Linux\n* CentOS `>= 6.0`\n* Debian\n* Fedora\n* RedHat\n* Ubuntu\n\nPlease, [let us know](https://github.com/onddo/boxbilling-cookbook/issues/new?title=I%20have%20used%20it%20successfully%20on%20...) if you use it successfully on any other platform.\n\n## Required Cookbooks\n\n* [apache2](https://supermarket.getchef.com/cookbooks/apache2)\n* [database](https://supermarket.getchef.com/cookbooks/database)\n* [encrypted_attributes (~> 0.2)](https://supermarket.getchef.com/cookbooks/encrypted_attributes)\n* [mysql (~> 5.0)](https://supermarket.getchef.com/cookbooks/mysql)\n* [openssl](https://supermarket.getchef.com/cookbooks/openssl)\n* [php](https://supermarket.getchef.com/cookbooks/php)\n* [ssl_certificate](https://supermarket.getchef.com/cookbooks/ssl_certificate)\n* [yum-epel](https://supermarket.getchef.com/cookbooks/yum-epel)\n\n## Required Applications\n\n* Ruby `1.9.3` or higher.\n\nAttributes\n==========\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['download_url']</code></td>\n    <td>BoxBilling download URL.</td>\n    <td><code>'http://www.boxbilling.com/version/latest.zip'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['required_packages']</code></td>\n    <td>BoxBilling required packages.</td>\n    <td><code>%w(unzip)</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['php_packages']</code></td>\n    <td>BoxBilling required PHP packages.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['dir']</code></td>\n    <td>BoxBilling installation directory.</td>\n    <td><code>'/srv/www/boxbilling'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['server_name']</code></td>\n    <td>BoxBilling server name.</td>\n    <td><code>node['fqdn']</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['cron_enabled']</code></td>\n    <td>Whether to enable BoxBilling cron job.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['headers']</code></td>\n    <td>BoxBilling HTTP headers to set as hash.</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['ssl']</code></td>\n    <td>Whether to enable SSL in BoxBilling.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['encrypt_attributes']</code></td>\n    <td>Whether to encrypt BoxBilling attributes containing credential secrets.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['web_server']</code></td>\n    <td>Web server to use: <code>'apache'</code> or <code>'nginx'</code></td>\n    <td><code>'apache'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['admin']['email']</code></td>\n    <td>BoxBilling admin email.</td>\n    <td><code>\"admin@#{node['boxbilling']['server_name']}\"</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['admin']['pass']</code></td>\n    <td>BoxBilling admin password.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['timezone']</code></td>\n    <td>BoxBilling timezone. See <a href=\"http://php.net/manual/en/timezones.php\">PHP supported timezones</a>.</td>\n    <td><code>'America/New_York'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['db_host']</code></td>\n    <td>BoxBilling database host.</td>\n    <td><code>'localhost'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['db_name']</code></td>\n    <td>BoxBilling database name.</td>\n    <td><code>'boxbilling'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['db_user']</code></td>\n    <td>BoxBilling database user.</td>\n    <td><code>'boxbilling'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['db_password']</code></td>\n    <td>BoxBilling database user password.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['url']</code></td>\n    <td>BoxBilling URL.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['license']</code></td>\n    <td>BoxBilling license key (<strong>required</strong>). Go to <a href=\"http://www.boxbilling.com/order\">BoxBilling order page</a> to get a new license.</td>\n    <td><code>nil</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['locale']</code></td>\n    <td>BoxBilling locale.</td>\n    <td><code>'en_US'</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['sef_urls']</code></td>\n    <td>Whether to enable BoxBilling <em>search engine friendly</em> URLs.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['config']['debug']</code></td>\n    <td>Whether to enable BoxBilling debug mode.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['api_config']['require_referer_header']</code></td>\n    <td>Whether to enable <em>require referer header</em> in the API.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['api_config']['allowed_ips']</code></td>\n    <td>BoxBilling allowed IP addresses to access the API. Empty array will allow all IPs to access the API.</td>\n    <td><code>[]</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['api_config']['rate_span']</code></td>\n    <td>BoxBilling API time span for limit in seconds.</td>\n    <td><code>3600</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['api_config']['rate_limit']</code></td>\n    <td>BoxBilling API requests allowed per time span.</td>\n    <td><code>1000</code></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['mysql']['server_root_password']</code></td>\n    <td>BoxBilling MySQL <em>root</em> password.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['mysql']['server_debian_password']</code></td>\n    <td>BoxBilling MySQL <em>debian</em> user password.</td>\n    <td><em>calculated</em></td>\n  </tr>\n  <tr>\n    <td><code>node['boxbilling']['mysql']['server_repl_password']</code></td>\n    <td>BoxBilling MySQL <em>repl</em> user password.</td>\n    <td><em>calculated</em></td>\n  </tr>\n</table>\n\n## The HTTPS Certificate\n\nThis cookbook uses the [`ssl_certificate`](https://supermarket.getchef.com/cookbooks/ssl_certificate) cookbook to create the HTTPS certificate. The namespace used is `node['boxbilling']`. For example:\n\n```ruby\nnode.default['boxbilling']['common_name'] = 'boxbilling.example.com'\nnode.default['boxbilling']['config']['license'] = '...' # BB_LICENSE key\ninclude_recipe 'boxbilling'\n```\n\nSee the [`ssl_certificate` namespace documentation](https://supermarket.getchef.com/cookbooks/ssl_certificate#namespaces) for more information.\n\n## Encrypted Attributes\n\nThis cookbook can use the [encrypted_attributes](https://supermarket.getchef.com/cookbooks/encrypted_attributes) cookbook to encrypt the secrets generated during the *Chef Run*. This feature is disabled by default, but can be enabled setting the `node['boxbilling']['encrypt_attributes']` attribute to `true`. For example:\n\n```ruby\ninclude_recipe 'encrypted_attributes::users_data_bag'\nnode.default['boxbilling']['encrypt_attributes'] = true\nnode.default['boxbilling']['config']['license'] = '...' # BB_LICENSE key\ninclure_recipe 'boxbilling'\n```\n\nThis will create the following encrypted attributes:\n\n* `node['boxbilling']['admin']['pass']`: BoxBilling admin password.\n* `node['boxbilling']['mysql']['root']`: MySQL *root* user password.\n* `node['boxbilling']['mysql']['debian']`: MySQL *debian* user password.\n* `node['boxbilling']['mysql']['repl']`: MySQL *repl* user password.\n* `node['boxbilling']['config']['db_password']`: MySQL BoxBilling user password.\n\nRead the [`chef-encrypted-attributes` gem documentation](http://onddo.github.io/chef-encrypted-attributes/) to learn how to read them.\n\nRecipes\n=======\n\n## boxbilling::default\n\nInstalls and configures BoxBilling. Including the MySQL server if set to localhost.\n\n## boxbilling::api\n\nInstalls the requirementes to use the `boxbilling_api` resource.\n\n## boxbilling::mysql\n\nInstalls MySQL server for BoxBilling.\n\nResources\n=========\n\n## boxbilling_api[path]\n\nThis resource uses the [BoxBilling v2 Admin API](http://www.boxbilling.com/docs/api-admin.html) with some modifications:\n\n* Some paths has been normalized, the action has been removed from the path and the resource action is issued instead.\n* The *update* action is simulated for some objects that do not support it, using *delete* and *create*.\n* All the action names has been simplified to *create*, *update* and *delete*.\n\n**Note:** Keep in mind that some API calls require self-generated/auto-incremented MySQL identifiers. So their use can become difficult sometimes.\n\n## boxbilling_api Actions\n\n* `request` (*default*): Sends a HTTP raw API request.\n* `create`: Sends a create action to the API object.\n* `update`: Sends an update action to the API object.\n* `delete`: Send a delete action to the API object.\n\n## boxbilling_api Parameters\n\n<table>\n  <tr>\n    <th>Parameter</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>path</td>\n    <td>BoxBilling API relative path. For example: <code>'admin/product'</code>.</td>\n    <td><em>name</em></td>\n  </tr>\n  <tr>\n    <td>data</td>\n    <td>Data to send as hash.</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td>debug</td>\n    <td>Whether to enable debug mode.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td>ignore_failure</td>\n    <td>Ignore API HTTP errors.</td>\n    <td><code>false</code></td>\n  </tr>\n</table>\n\nUsage\n=====\n\nYou need a valid BoxBilling license key to use this cookbook. You can get a new license in the [BoxBilling order page](http://www.boxbilling.com/order).\n\n## Including in a Cookbook Recipe\n\nYou can simply include it in a recipe:\n\n```ruby\n# in your recipe\nnode.default['boxbilling']['config']['license'] = '...' # BB_LICENSE key\ninclude_recipe 'boxbilling'\n```\n\nDon't forget to include the `boxbilling` cookbook as a dependency in the metadata:\n\n```ruby\n# metadata.rb\ndepends 'boxbilling'\n```\n\n## Including in the Run List\n\nAnother alternative is to include it in your *Run List*:\n\n```json\n{\n  \"name\": \"bb.onddo.com\",\n  [...]\n  \"normal\": {\n    \"boxbilling\": {\n      \"config\": {\n        \"license\": \"BB_LICENSE\"\n      }\n    }\n  },\n  \"run_list\": [\n    [...]\n    \"recipe[boxbilling]\"\n  ]\n}\n```\n\n## Installing BoxBilling 4\n\nTo install BoxBilling version 4, you must change the `node['boxbilling']['download_url']` attribute.\n\nYou can use GitHub to download the release. For example:\n\n```ruby\nnode.default['boxbilling']['config']['license'] = '...' # BB_LICENSE key\nnode.default['boxbilling']['download_url'] = 'https://github.com/boxbilling/boxbilling/releases/download/4.12.1/BoxBilling.zip'\n\ninclude_recipe 'boxbilling::default'\n```\n\n## *boxbilling::default* Recipe Usage Example\n\n```ruby\nnode.default['boxbilling']['config']['license'] = '...' # BB_LICENSE key\ninclude_recipe 'boxbilling::default'\n```\n\n## *boxbilling::api* Recipe Usage Example\n\n```ruby\ninclude_recipe 'boxbilling::api'\n```\n\n## *boxbilling::mysql* Recipe Usage Example\n\n```ruby\ninclude_recipe 'boxbilling::mysql'\n```\n\n## *boxbilling_api* Resource Usage Example\n\nBelow is a fairly complete real example:\n\n```ruby\n# =============================================================================\n# Products\n# =============================================================================\n\n# Disable \"Domains registration and transfer\" product\nboxbilling_api 'admin/product Domains registration and transfer' do\n  path 'admin/product'\n  data(\n    id: 1,\n    status: 'disabled'\n  )\n  action :update\nend\n\n# =============================================================================\n# News\n# =============================================================================\n\n# Delete some default blog news\n(1..3).each do |id|\n  boxbilling_api \"admin/news delete #{id}\" do\n    path 'admin/news'\n    data id: id\n    action :delete\n  end\nend\n\n# New blog post\n# boxbilling_api 'admin/news' do\n#   data(\n#     id: 4,\n#     content: 'Blog post content...',\n#     title: 'My first blog post',\n#     # image: 'http://www.yourdomain.com/image.jpg',\n#     status: 'active'\n#     # created_at: '2012-01-01',\n#     # updated_at: '2012-01-01'\n#   )\n#   action :create\n# end\n\n# =============================================================================\n# Knowledge Base\n# =============================================================================\n\n# Disable some default articles\n(1..3).each do |id|\n  boxbilling_api 'admin/kb/article #{id}' do\n    path 'admin/kb/article'\n    data(\n      id: id,\n      status: 'draft'\n    )\n    action :update\n  end\nend\n\n# Create some categories\n# boxbilling_api 'admin/kb/category 3' do\n#   path 'admin/kb/category'\n#   data(\n#     id: 3,\n#     title: 'New KB category',\n#     description: 'New KB category content description'\n#   )\n#   action :create\n# end\n\n# Add some articles\n# boxbilling_api 'admin/kb/article 4' do\n#   path 'admin/kb/article'\n#   data(\n#     id: 4,\n#     kb_article_category_id: 3,\n#     title: 'My New Article',\n#     status: 'active',\n#     content: 'My article content...'\n#   )\n#   action :create\n# end\n\n# =============================================================================\n# Configuration > Settings > Client\n# =============================================================================\n\nboxbilling_api 'admin/extension/config' do\n  data(\n    ext: 'mod_client',\n    allow_signup: 1,\n    require_email_confirmation: 1,\n    allow_change_email: 1,\n    required: %w(last_name country city state address_1 postcode phone)\n  )\n  action :update\nend\n\n# =============================================================================\n# Configuration > Settings > Currency settings\n# =============================================================================\n\nboxbilling_api 'admin/currency EUR' do\n  path 'admin/currency'\n  data(\n    code: 'EUR',\n    title: 'Euro',\n    format: \"{{price}} \\u20AC\"\n  )\n  action :create\nend\n\nboxbilling_api 'admin/currency GBP' do\n  path 'admin/currency'\n  data(\n    code: 'GBP',\n    title: 'Pound Sterling',\n    format: \"\\u00A3{{price}}\"\n  )\n  action :create\nend\n\nboxbilling_api 'admin/currency/set_default' do\n  data code: 'EUR'\nend\n\n# =============================================================================\n# Configuration > Settings > Email\n# =============================================================================\n\nboxbilling_api 'admin/email/batch_template_generate'\n\n# Reset a template\n# boxbilling_api 'admin/email/template_reset client_password_reset_approve' do\n#   path 'admin/email/template_reset'\n#   data code: 'mod_client_password_reset_approve'\n# end\n\n# Create a new template\n# boxbilling_api 'admin/email/template 1' do\n#   path 'admin/email/template'\n#   data(\n#     id: 1,\n#     enabled: 1,\n#     category: 'client',\n#     action_code: 'mod_client_password_reset_approve',\n#     subject: '[{{ guest.system_company.name }}] Password Changed',\n#     content: '...'\n#   )\n#   action :create\n# end\n\n# Update an existing template\n# boxbilling_api 'admin/email/template 1' do\n#   path 'admin/email/template'\n#   data(\n#     id: 1,\n#     enabled: 1,\n#     subject: '[{{ guest.system_company.name }}] Password Changed',\n#     content: <<-EOF\n# {% filter markdown %}\n# \n# Dear {{ c.first_name }} {{ c.last_name }},\n# \n# As you requested, your password for our client area has now been reset.\n# Your new login details are as follows:\n# \n# Login at: {{\"login\"|link}}?email={{ c.email }}\n# Email: {{ c.email }}\n# Password: {{ password }}\n# \n# To change your password to something more memorable, after logging in go to \n# Profile &gt; Change Password.\n# \n# Edit your profile at {{ \"me\"|link }}\n# \n# {{ guest.system_company.signature }}\n# \n# {% endfilter %}\n#     EOF\n#   )\n#   action :update\n# end\n\n# Email settings\n# boxbilling_api 'admin/extension/config mod_email' do\n#   path 'admin/extension/config'\n#   data(\n#     ext: 'mod_email',\n#     log_enabled: 1,\n#     mailer: 'smtp', # sendmail | smtp\n#     smtp_host: smtp_host,\n#     smtp_port: 587,\n#     smtp_username: smtp_username,\n#     smtp_password: smtp_password,\n#     smtp_security: 'tls',\n#   )\n#   action :update\n# end\n\n# =============================================================================\n# Configuration > Settings > Invoice settings\n# =============================================================================\n\n# Set next invoice number\n# IMPORTANT: this must be run only once, will cause duplicated invoice numbers\nboxbilling_api 'admin/system/params invoice starting_number' do\n  path 'admin/system/params'\n  data invoice_starting_number: '1'\n  action :nothing\nend\n\nboxbilling_api 'admin/system/params invoice settings' do\n  path 'admin/system/params'\n  data(\n    invoice_issue_days_before_expire: 14,\n    invoice_due_days: 5,\n    invoice_auto_approval: 1,\n    remove_after_days: 0,\n    invoice_series: 'PRO-N',\n    invoice_series_paid: 'N',\n    # negative_invoice | credit_note | manual\n    invoice_refund_logic: 'credit_note',\n    funds_min_amount: 10,\n    funds_max_amount: 200\n  )\n  action :update\n  notifies :update, 'boxbilling_api[admin/system/params invoice starting_number]'\nend\n\n# =============================================================================\n# Configuration > Settings > Orders settings\n# =============================================================================\n\nboxbilling_api 'admin/extension/config mod_order' do\n  path 'admin/extension/config'\n  data(\n    ext: 'mod_order',\n    # from_expiration_date | from_today | from_greater\n    order_renewal_logic: 'from_expiration_date',\n    batch_suspend_reason: ''\n  )\n  action :update\nend\n\n# =============================================================================\n# Configuration > Settings > System settings\n# =============================================================================\n\nboxbilling_api 'admin/system/params system settings' do\n  path 'admin/system/params'\n  data(\n    company_name: 'Testing Labs, Ltd',\n    company_logo: '',\n    company_email: 'testing@testing.com',\n    company_tel: '1234567890',\n    company_address_1: 'Somewhere',\n    company_number: 'B12345678',\n    company_vat_number: 'EU12345678',\n    company_account_number: 'BANK-1234',\n    company_signature: 'Testing signature'\n  )\n  action :update\nend\n\n# =============================================================================\n# Configuration > Domain registration/management\n# =============================================================================\n\n# Delete default domain TLD\nboxbilling_api 'admin/servicedomain/tld' do\n  data tld: '.com'\n  action :delete\nend\n\n# =============================================================================\n# Configuration > Payment gateways\n# =============================================================================\n\nboxbilling_api 'admin/invoice/gateway Custom' do\n  path 'admin/invoice/gateway'\n  data(\n    id: 1,\n    enabled: 0,\n    test_mode: 0\n  )\n  action :update\nend\n\n# boxbilling_api 'admin/invoice/gateway PayPal' do\n#   path 'admin/invoice/gateway'\n#   data(\n#     id: 2,\n#     enabled: 1,\n#     config: {\n#       email: paypal_email\n#     },\n#     accepted_currencies: %w(EUR USD GBP),\n#     test_mode: 0\n#   )\n#   action :update\n# end\n\nboxbilling_api 'admin/invoice/gateway AlertPay' do\n  path 'admin/invoice/gateway'\n  data(\n    id: 3,\n    enabled: 0,\n    test_mode: test_mode\n  )\n  action :update\nend\n\n# =============================================================================\n# Configuration > Tax\n# =============================================================================\n\n# Enable taxes\nboxbilling_api 'admin/system/params taxes' do\n  path 'admin/system/params'\n  data tax_enabled: 1\n  action :update\nend\n\n# It deletes all the taxes and regenerate them instead of checking if they\n# previously exists. Notified by boxbilling_api[admin/invoice/tax]\nboxbilling_api 'admin/invoice/tax_setup_eu' do\n  data(\n    name: 'VAT EU12345678',\n    taxrate: 21\n  )\n  action :nothing\nend\n\nboxbilling_api 'admin/invoice/tax' do\n  data(\n    id: 9, # important, must match tax id when usign auto generated/increment\n    name: 'EU12345678',\n    taxrate: 21,\n    country: 'ES'\n  )\n  action :create\n  notifies :request, 'boxbilling_api[admin/invoice/tax_setup_eu]'\nend\n```\n\nTesting\n=======\n\nSee [TESTING.md](https://github.com/onddo/boxbilling-cookbook/blob/master/TESTING.md).\n\n## ChefSpec Matchers\n\n### boxbilling_api(path)\n\nHelper method for locating a `boxbilling_api` resource in the collection.\n\n```ruby\nresource = chef_run.boxbilling_api('admin/system/params')\nexpect(resource)\n  .to notify('boxbilling_api[admin/system/params invoice starting_number]')\n  .to(:update).delayed\n```\n\n### request_boxbilling_api(path)\n\nAssert that the *Chef Run* makes a `boxbilling_api` request.\n\n```ruby\nexpect(chef_run).to request_boxbilling_api(path)\n```\n\n### create_boxbilling_api(path)\n\nAssert that the *Chef Run* makes a `boxbilling_api` create request.\n\n```ruby\nexpect(chef_run).to create_boxbilling_api(path)\n```\n\n### update_boxbilling_api(path)\n\nAssert that the *Chef Run* makes a `boxbilling_api` update request.\n\n```ruby\nexpect(chef_run).to update_boxbilling_api(path)\n```\n\n### delete_boxbilling_api(path)\n\nAssert that the *Chef Run* makes a `boxbilling_api` delete request.\n\n```ruby\nexpect(chef_run).to delete_boxbilling_api(path)\n```\n\nContributing\n============\n\nPlease do not hesitate to [open an issue](https://github.com/onddo/boxbilling-cookbook/issues/new) with any questions or problems.\n\nSee [CONTRIBUTING.md](https://github.com/onddo/boxbilling-cookbook/blob/master/CONTRIBUTING.md).\n\nTODO\n====\n\nSee [TODO.md](https://github.com/onddo/boxbilling-cookbook/blob/master/TODO.md).\n\n\nLicense and Author\n==================\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | [Raul Rodriguez](https://github.com/raulr) (<raul@onddo.com>)\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@onddo.com>)\n| **Copyright:**       | Copyright (c) 2013-2015, Onddo Labs, SL. (www.onddo.com)\n| **License:**         | Apache License, Version 2.0\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    \n        http://www.apache.org/licenses/LICENSE-2.0\n    \n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 6.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": "~> 3.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/database",
      "revision": "= 2.3.1",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/encrypted_attributes",
      "revision": "~> 0.2",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/mysql",
      "revision": "~> 5.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": "~> 2.7",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/openssl",
      "revision": "~> 2.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/php",
      "revision": "~> 1.5",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/php-fpm",
      "revision": ">= 0.7",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ssl_certificate",
      "revision": "~> 1.2",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/yum-epel",
      "revision": "~> 0.5",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "boxbilling::default": "Installs and configures BoxBilling. Including the MySQL server if set to localhost.",
    "boxbilling::api": "Installs the requirementes to use boxbilling_api resource.",
    "boxbilling::mysql": "Installs MySQL server for BoxBilling."
  },
  "parameters": {
    "boxbilling/download_url": {
      "display_name": "boxbilling download url",
      "description": "BoxBilling download URL.",
      "type": "string",
      "default": "http://www.boxbilling.com/version/latest.zip",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/required_packages": {
      "display_name": "boxbilling required packages",
      "description": "BoxBilling required packages.",
      "type": "array",
      "default": [
        "unzip"
      ],
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/php_packages": {
      "display_name": "boxbilling php packages",
      "description": "BoxBilling required PHP packages.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/dir": {
      "display_name": "boxbilling directory",
      "description": "BoxBilling installation directory.",
      "type": "string",
      "default": "/srv/www/boxbilling",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/server_name": {
      "display_name": "boxbilling server",
      "description": "BoxBilling server name.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/cron_enabled": {
      "display_name": "boxbilling cron enabled",
      "description": "Whether to enable BoxBilling cron job.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "true",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/headers": {
      "display_name": "boxbilling headers",
      "description": "BoxBilling HTTP headers to set as hash.",
      "type": "hash",
      "default": {},
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/ssl": {
      "display_name": "boxbilling ssl",
      "description": "Whether to enable SSL in BoxBilling.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "true",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/encrypt_attributes": {
      "display_name": "boxbilling encrypt attributes",
      "description": "Whether to encrypt BoxBilling attributes containing credential secrets.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "false",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/web_server": {
      "display_name": "Web Server",
      "description": "Web server to use: apache or nginx",
      "choice": [
        "apache",
        "nginx"
      ],
      "type": "string",
      "required": "optional",
      "default": "apache",
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/admin/email": {
      "display_name": "boxbilling admin email",
      "description": "BoxBilling admin email.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/admin/pass": {
      "display_name": "boxbilling admin pass",
      "description": "BoxBilling admin password.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/timezone": {
      "display_name": "boxbilling config timezone",
      "description": "BoxBilling timezone. See http://php.net/manual/en/timezones.php.",
      "type": "string",
      "default": "America/New_York",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/db_host": {
      "display_name": "boxbilling config db host",
      "description": "BoxBilling database host.",
      "type": "string",
      "default": "localhost",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/db_name": {
      "display_name": "boxbilling config db name",
      "description": "BoxBilling database name.",
      "type": "string",
      "default": "boxbilling",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/db_user": {
      "display_name": "boxbilling config db user",
      "description": "BoxBilling database user.",
      "type": "string",
      "default": "boxbilling",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/db_password": {
      "display_name": "boxbilling config db password",
      "description": "BoxBilling database user password.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/url": {
      "display_name": "boxbilling config url",
      "description": "BoxBilling URL.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/license": {
      "display_name": "boxbilling config license",
      "description": "BoxBilling license key.",
      "required": "required",
      "type": "string",
      "default": "nil",
      "choice": [],
      "calculated": false,
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/locale": {
      "display_name": "boxbilling config locale",
      "description": "BoxBilling locale.",
      "type": "string",
      "default": "en_US",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/sef_urls": {
      "display_name": "boxbilling config sef urls",
      "description": "Whether to enable BoxBilling search engine friendly URLs.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "false",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/config/debug": {
      "display_name": "boxbilling config debug",
      "description": "Whether to enable BoxBilling debug.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "false",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/api_config/require_referer_header": {
      "display_name": "boxbilling api config require referer header",
      "description": "Whether to enable require referer header in the API.",
      "type": "string",
      "choice": [
        "true",
        "false"
      ],
      "default": "true",
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/api_config/allowed_ips": {
      "display_name": "boxbilling api config allowed ips",
      "description": "BoxBilling allowed IP addresses to access the API. Empty array will allow all IPs to access the API.",
      "type": "array",
      "default": [],
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/api_config/rate_span": {
      "display_name": "boxbilling api config rate span",
      "description": "BoxBilling API time span for limit in seconds.",
      "type": "string",
      "default": "3600",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/api_config/rate_limit": {
      "display_name": "boxbilling api config rate limit",
      "description": "BoxBilling API requests allowed per time span.",
      "type": "string",
      "default": "1000",
      "choice": [],
      "calculated": false,
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/mysql/server_root_password": {
      "display_name": "boxbilling mysql server root password",
      "description": "BoxBilling MySQL root password.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/mysql/server_debian_password": {
      "display_name": "boxbilling mysql server debian password",
      "description": "BoxBilling MySQL debian user password.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "boxbilling/mysql/server_repl_password": {
      "display_name": "boxbilling mysql server repl password",
      "description": "BoxBilling MySQL repl user password.",
      "type": "string",
      "calculated": true,
      "choice": [],
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}