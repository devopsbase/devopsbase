{
  "name": "nagios Chef cookbook",
  "chef_cookbook_name": "nagios",
  "revision": "3.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/nagios",
    "https://supermarket.chef.io/cookbooks/nagios/download",
    "https://supermarket.chef.io/cookbooks/nagios/versions/3.1.0",
    "https://supermarket.chef.io/cookbooks/nagios/versions/3.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/3.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios",
    "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/3.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Monitoring/Nagios",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/nagios",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/nagios/versions/3.1.0/download",
  "deprecated": false,
  "created": "2010-02-26T22:48:02.000Z",
  "updated": "2015-12-14T10:07:48.537Z",
  "description": "Installs and configures Nagios server",
  "maintainer": {
    "name": "sbotman",
    "email": "cookbooks@opscode.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 151,
  "downloads_count": 45236859,
  "downloads_count_revision": 1254029,
  "repository_url": "https://github.com/schubergphilis/nagios",
  "issues_url": "https://github.com/schubergphilis/nagios/issues",
  "chef_source_url": "https://github.com/schubergphilis/nagios",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n\nInstalls and configures Nagios 3 for a server and NRPE for clients using Chef search capabilities.\n\nRequirements\n============\n\nChef\n----\n\nChef version 0.10.10+ and Ohai 0.6.12+ are required.\n\nA data bag named 'users' should exist, see __Data Bag__ below.\n\nThe monitoring server that uses this recipe should have a role named 'monitoring' or similar, the role name is configurable via an attribute. See __Attributes__ below.\n\nBecause of the heavy use of search, this recipe will not work with Chef Solo, as it cannot do any searches without a server.\n\nBy default NRPE clients can only be monitored by Nagios servers in the same environment. To change this set the multi_environment_monitoring attribute. See __Attributes__ below.\n\nPlatform\n--------\n\n* Debian 6\n* Ubuntu 10.04, 12.04\n* Red Hat Enterprise Linux (CentOS/Amazon/Scientific/Oracle) 5.8, 6.3\n\n**Notes**: This cookbook has been tested on the listed platforms. It\n  may work on other platforms with or without modification.\n\nCookbooks\n---------\n\n* apache2\n* build-essential\n* php\n* nginx\n* nginx_simplecgi\n\nAttributes\n==========\n\ndefault\n-------\n\nThe following attributes are used by both client and server recipes.\n\n* `node['nagios']['user']` - nagios user, default 'nagios'.\n* `node['nagios']['group']` - nagios group, default 'nagios'.\n* `node['nagios']['plugin_dir']` - location where nagios plugins go, default '/usr/lib/nagios/plugins'.\n* `node['nagios']['multi_environment_monitoring']` - Chef server will monitor hosts in all environments, not just its own, default 'false'\n\nclient\n------\n\nThe following attributes are used for the client NRPE checks for warning and critical levels.\n\n* `node['nagios']['client']['install_method']` - whether to install from package or source. Default chosen by platform based on known packages available for Nagios 3: debian/ubuntu 'package', redhat/centos/fedora/scientific: source\n* `node['nagios']['plugins']['url']` - url to retrieve the plugins source\n* `node['nagios']['plugins']['version']` - version of the plugins\n* `node['nagios']['plugins']['checksum']` - checksum of the plugins source tarball\n* `node['nagios']['nrpe']['home']` - home directory of nrpe, default /usr/lib/nagios\n* `node['nagios']['nrpe']['conf_dir']` - location of the nrpe configuration, default /etc/nagios\n* `node['nagios']['nrpe']['url']` - url to retrieve nrpe source\n* `node['nagios']['nrpe']['version']` - version of nrpe to download\n* `node['nagios']['nrpe']['checksum']` - checksum of the nrpe source tarball\n* `node['nagios']['checks']['memory']['critical']` - threshold of critical memory usage, default 150\n* `node['nagios']['checks']['memory']['warning']` - threshold of warning memory usage, default 250\n* `node['nagios']['checks']['load']['critical']` - threshold of critical load average, default 30,20,10\n* `node['nagios']['checks']['load']['warning']` - threshold of warning load average, default 15,10,5\n* `node['nagios']['checks']['smtp_host']` - default relayhost to check for connectivity. Default is an empty string, set via an attribute in a role.\n* `node['nagios']['server_role']` - the role that the nagios server will have in its run list that the clients can search for.\n\nserver\n------\n\nDefault directory locations are based on FHS. Change to suit your preferences.\n\n* `node['nagios']['server']['install_method']` - whether to install from package or source. Default chosen by platform based on known packages available for Nagios 3: debian/ubuntu 'package', redhat/centos/fedora/scientific: source\n* `node['nagios']['server']['service_name']` - name of the service used for nagios, default chosen by platform, debian/ubuntu \"nagios3\", redhat family \"nagios\", all others, \"nagios\"\n* `node['nagios']['server']['web_server']` - web server to use. supports apache or nginx, default \"apache\"\n* `node['nagios']['server']['nginx_dispatch']` - nginx dispatch method. support cgi or php, default \"cgi\"\n* `node['nagios']['server']['stop_apache']` - stop apache service if using nginx, default false\n* `node['nagios']['server']['redirect_root']` - if using apache, should http://server/ redirect to http://server//nagios3 automatically, default false\n* `node['nagios']['home']` - nagios main home directory, default \"/usr/lib/nagios3\"\n* `node['nagios']['conf_dir']` - location where main nagios config lives, default \"/etc/nagios3\"\n* `node['nagios']['config_dir']` - location where included configuration files live, default \"/etc/nagios3/conf.d\"\n* `node['nagios']['log_dir']` - location of nagios logs, default \"/var/log/nagios3\"\n* `node['nagios']['cache_dir']` - location of cached data, default \"/var/cache/nagios3\"\n* `node['nagios']['state_dir']` - nagios runtime state information, default \"/var/lib/nagios3\"\n* `node['nagios']['run_dir']` - where pidfiles are stored, default \"/var/run/nagios3\"\n* `node['nagios']['docroot']` - nagios webui docroot, default \"/usr/share/nagios3/htdocs\"\n* `node['nagios']['enable_ssl]` - boolean for whether nagios web server should be https, default false\n* `node['nagios']['http_port']` - port that the apache server should listen on, determined whether ssl is enabled (443 if so, otherwise 80)\n* `node['nagios']['server_name']` - common name to use in a server cert, default \"nagios\"\n* `node['nagios']['ssl_req']` - info to use in a cert, default `/C=US/ST=Several/L=Locality/O=Example/OU=Operations/CN=#{node['nagios']['server_name']}/emailAddress=ops@#{node['nagios']['server_name']}`\n\n* `node['nagios']['notifications_enabled']` - set to 1 to enable notification.\n* `node['nagios']['check_external_commands']`\n* `node['nagios']['default_contact_groups']`\n* `node['nagios']['sysadmin_email']` - default notification email.\n* `node['nagios']['sysadmin_sms_email']` - default notification sms.\n* `node['nagios']['users_databag_group']` - Users databag group considered Nagios admins.  Defaults to sysadmins\n* `node['nagios']['server_auth_method']` - authentication with the server can be done with openid (using `apache2::mod_auth_openid`), or htauth (basic). The default is openid, any other value will use htauth (basic).\n* `node['nagios']['templates']`\n* `node['nagios']['interval_length']` - minimum interval.\n* `node['nagios']['default_host']['check_interval']`\n* `node['nagios']['default_host']['retry_interval']`\n* `node['nagios']['default_host']['max_check_attempts']`\n* `node['nagios']['default_host']['notification_interval']`\n* `node['nagios']['default_service']['check_interval']`\n* `node['nagios']['default_service']['retry_interval']`\n* `node['nagios']['default_service']['max_check_attempts']`\n* `node['nagios']['default_service']['notification_interval']`\n\nRecipes\n=======\n\ndefault\n-------\n\nIncludes the `nagios::client` recipe.\n\nclient\n------\n\nIncludes the correct client installation recipe based on platform, either `nagios::client_package` or `nagios::client_source`.\n\nThe client recipe searches for servers allowed to connect via NRPE that have a role named in the `node['nagios']['server_role']` attribute. The recipe will also install the required packages and start the NRPE service. A custom plugin for checking memory is also added.\n\nSearches are confined to the node's `chef_environment`.\n\nClient commands for NRPE can be installed using the nrpecheck resource. (See __Resources/Providers__ below.)\n\nclient\\_package\n---------------\n\nInstalls the Nagios client libraries from packages. Default for Debian / Ubuntu systems.\n\nclient\\_source\n--------------\n\nInstalls the Nagios client libraries from source. Default for Red Hat / CentOS / Fedora systems as native packages of Nagios 3 are not available in the default repositories.\n\nserver\n------\n\nIncludes the correct client installation recipe based on platform, either `nagios::server_package` or `nagios::server_source`.\n\nThe server recipe sets up Apache as the web front end. The nagios::client recipe is also included. This recipe also does a number of searches to dynamically build the hostgroups to monitor, hosts that belong to them and admins to notify of events/alerts.\n\nSearches are confined to the node's `chef_environment`.\n\nThe recipe does the following:\n\n1. Searches for members of the sysadmins group by searching through 'users' data bag and adds them to a list for notification/contacts.\n2. Search all nodes for a role matching the app_environment.\n3. Search all available roles and build a list which will be the Nagios hostgroups.\n4. Search for all nodes of each role and add the hostnames to the hostgroups.\n5. Installs various packages required for the server.\n6. Sets up some configuration directories.\n7. Moves the package-installed Nagios configuration to a 'dist' directory.\n8. Disables the 000-default VirtualHost present on Debian/Ubuntu Apache2 package installations.\n9. Enables the Nagios web front end configuration.\n10. Sets up the configuration templates for services, contacts, hostgroups and hosts.\n\n*NOTE*: You will probably need to change the services.cfg.erb template for your environment.\n\nTo add custom commands for service checks, these can be done on a per-role basis by editing the 'services.cfg.erb' template. This template has some pre-configured checks that use role names used in an example infrastructure. Here's a brief description:\n\n* monitoring - check_smtp (e.g., postfix relayhost) w/ NRPE and tcp port 514 (e.g., rsyslog)\n* load\\_balancer - check_nginx with NRPE.\n* appserver - check_unicorn with NRPE, e.g. a Rails application using Unicorn.\n* database\\_master - check\\_mysql\\_server with NRPE for a MySQL database master.\n\nserver\\_package\n---------------\n\nInstalls the Nagios server libraries from packages. Default for Debian / Ubuntu systems.\n\nserver\\_source\n--------------\n\nInstalls the Nagios server libraries from source. Default for Red Hat / CentOS / Fedora systems as native packages of Nagios 3 are not available in the default repositories.\n\npagerduty\n---------\n\nInstalls and configures pagerduty plugin for nagios.  You need to set a `node['nagios']['pagerduty_key']` attribute on your server for this to work.  This can be set through environments so that you can use different API keys for servers in production vs staging for instance.\n\nThis recipe was written based on the [Nagios Integration Guide](http://www.pagerduty.com/docs/guides/nagios-integration-guide) from PagerDuty which explains how to get an API key for your nagios server.\n\nemail notifications\n--------------------\n\nYou need to set `default['nagios']['notifications_enabled'] = 1` attribute on your nagios server to enable email notifications.\n\nFor email notifications to work an appropriate mail program package and local MTA need to be installed so that /usr/bin/mail or /bin/mail is available on the system.\n\nExample:\n\nInclude [postfix cookbook](https://github.com/opscode-cookbooks/postfix) to be installed on your nagios server node.\n\nAdd override_attributes to your `monitoring` role:\n\n    % cat roles/monitoring.rb\n\n    name \"monitoring\"\n    description \"Monitoring Server\"\n    run_list(\n      \"recipe[nagios::server]\",\n      \"recipe[postfix]\"\n    )\n\n    override_attributes(\n      \"nagios\" => { \"notifications_enabled\" => \"1\" },\n      \"postfix\" => { \"myhostname\":\"your_hostname\", \"mydomain\":\"example.com\" }\n    )\n\n    default_attributes(\n      \"nagios\" => { \"server_auth_method\" => \"htauth\" }\n    )\n\n    % knife role from file monitoring.rb\n\nData Bags\n=========\n\nUsers\n-----\n\nCreate a `users` data bag that will contain the users that will be able to log into the Nagios webui. Each user can use htauth with a specified password, or an openid. Users that should be able to log in should be in the sysadmin group. Example user data bag item:\n\n    {\n      \"id\": \"nagiosadmin\",\n      \"groups\": \"sysadmin\",\n      \"htpasswd\": \"hashed_htpassword\",\n      \"openid\": \"http://nagiosadmin.myopenid.com/\",\n      \"nagios\": {\n        \"pager\": \"nagiosadmin_pager@example.com\",\n        \"email\": \"nagiosadmin@example.com\"\n      }\n    }\n\nWhen using server_auth_method 'openid', use the openid in the data bag item. Any other value for this attribute (e.g., \"htauth\", \"htpasswd\", etc) will use the htpasswd value as the password in `/etc/nagios3/htpasswd.users`.\n\nThe openid must have the http:// and trailing /. The htpasswd must be the hashed value. Get this value with htpasswd:\n\n    % htpasswd -n -s nagiosadmin\n    New password:\n    Re-type new password:\n    nagiosadmin:{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=\n\nFor example use the `{SHA}oCagzV4lMZyS7jl2Z0WlmLxEkt4=` value in the data bag.\n\nServices\n--------\n\nCreate a nagios\\_services data bag that will contain definitions for services to be monitored.  This allows you to add monitoring rules without mucking about in the services and commands templates.  Each service will be named based on the id of the data bag and the command will be named withe the same id prepended with \"check\\_\".  Just make sure the id in your data bag doesn't conflict with a service or command already defined in the templates.\n\nHere's an example of a service check for sshd that you could apply to all hostgroups:\n\n    {\n    \"id\": \"ssh\",\n    \"hostgroup_name\": \"all\",\n    \"command_line\": \"$USER1$/check_ssh $HOSTADDRESS$\"\n    }\n\nYou may optionally define the service template for your service by including service_template and a valid template name.  Example:  \"service_template\": \"special_service_template\".  You may also optionally add a service description that will be displayed in the Nagios UI using \"description\": \"My Service Name\".  If this is not present the databag name will be used.\n\nTemplates\n---------\n\nTemplates are optional, but allow you to specify combinations of attributes to apply to a service.  Create a nagios_templates\\ data bag that will contain definitions for templates to be used.  Each template need only specify id and whichever parameters you want to override.\n\nHere's an example of a template that reduces the check frequency to once per day and changes the retry interval to 1 hour.\n\n    {\n    \"id\": \"dailychecks\",\n    \"check_interval\": \"86400\",\n    \"retry\": \"3600\"\n    }\n\nYou then use the template in your service data bag as follows:\n\n    {\n    \"id\": \"expensive_service_check\",\n    \"hostgroup_name\": \"all\",\n    \"command_line\": \"$USER1$/check_example $HOSTADDRESS$\",\n    \"service_template\": \"dailychecks\"\n    }\n\nSearch Defined Hostgroups\n-------------------------\n\nCreate a nagios\\_hostgroups data bag that will contain definitions for Nagios hostgroups populated via search.  These data bags include a Chef node search query that will populate the Nagios hostgroup with nodes based on the search.\n\nHere's an example to find all HP hardware systems for an \"hp_systems\" hostgroup:\n\n\t\t{\n\t\t\"search_query\": \"dmi_system_manufacturer:HP\",\n\t\t\"hostgroup_name\": \"hp_systems\",\n\t\t\"id\": \"hp_systems\"\n\t\t}\n\nMonitoring Systems Not In Chef\n------------------------------\n\nCreate a nagios\\_unmanagedhosts data bag that will contain definitions for hosts not in Chef that you would like to manage.  \"hostgroups\" can be an existing Chef role (every Chef role gets a Nagios hostgroup) or a new hostgroup.\nHere's an example host definition:\n\n\t\t{\n\t\t\"address\": \"webserver1.mydmz.dmz\",\n\t\t\"hostgroups\": [\"web_servers\",\"production_servers\"],\n\t\t\"id\": \"webserver1\",\n\t\t\"notifications\": 1\n\t\t}\n\n\nRoles\n=====\n\nCreate a role to use for the monitoring server. The role name should match the value of the attribute \"nagios[:server_role]\". By default, this is 'monitoring'. For example:\n\n    % cat roles/monitoring.rb\n    name \"monitoring\"\n    description \"Monitoring server\"\n    run_list(\n      \"recipe[nagios::server]\"\n    )\n\n    default_attributes(\n      \"nagios\" => {\n        \"server_auth_method\" => \"htauth\"\n      }\n    )\n\n    % knife role from file monitoring.rb\n\n\nEvent Handlers\n=====\n\nYou can optionally define event handlers to trigger on service alerts by creating a nagios\\_eventhandlers data bag that will contain definitions of event handlers for services monitored via Nagios.\n\nThis example event handler data bags restarts chef-client.  Note: This assumes you have already defined a NRPE job restart\\_chef-client on the host where this command will run.  You can use the NRPE LWRP to add commands to your local NRPE configs from within your cookbooks.\n\n{\n    \"command_line\": \"$USER1$/check_nrpe -H $HOSTADDRESS$ -t 45 -c restart_chef-client\",\n    \"id\": \"restart_chef-client\"\n}\n\nOnce you've defined an event handler you will need to add the event handler to a service definition in order to trigger the action.  See the example service definition below.\n\n{\n    \"command_line\": \"$USER1$/check_nrpe -H $HOSTADDRESS$ -t 45 -c check_chef_client\",\n    \"hostgroup_name\": \"linux\",\n    \"id\": \"chef-client\",\n    \"event_handler\": \"restart_chef-client\"\n}\n\n\nDefinitions\n===========\n\nnagios_conf\n-----------\n\nThis definition is used to drop in a configuration file in the base Nagios configuration directory's conf.d. This can be used for customized configurations for various services.\n\nLibraries\n=========\n\ndefault\n-------\n\nThe library included with the cookbook provides some helper methods used in templates.\n\n* nagios_boolean\n* nagios_interval - calculates interval based on interval length and a given number of seconds.\n* nagios_attr - retrieves a nagios attribute from the node.\n\nResources/Providers\n===================\n\nThe nrpecheck LWRP provides an easy way to add and remove NRPE checks from within a cookbook.\n\n# Actions\n\n- :add: creates a NRPE configuration file and restart the NRPE process. Default action.\n- :remove: removes the configuration file and restart the NRPE process\n\n# Attribute Parameters\n\n- command_name: name attribute.  The name of the check.  You'll need to reference this in your commands.cfg template\n- warning_condition: String that you will pass to the command with the -w flag\n- critical_condition: String that you will pass to the command with the -c flag\n- command: The actual command to execute (including the path). If this is not specified, this will use `node['nagios']['plugin_dir']/command_name` as the path to the command.\n- parameters: Any additional parameters you wish to pass to the plugin.\n\n# Examples\n\n    # Use LWRP to define check_load\n    nagios_nrpecheck \"check_load\" do\n      command \"#{node['nagios']['plugin_dir']}/check_load\"\n      warning_condition node['nagios']['checks']['load']['warning']\n      critical_condition node['nagios']['checks']['load']['critical']\n      action :add\n    end\n\n    # Remove the check_load definition\n    nagios_nrpecheck \"check_load\" do\n      action :remove\n    end\n\nUsage\n=====\n\nSee below under __Environments__ for how to set up Chef 0.10 environment for use with this cookbook.\n\nFor a Nagios server, create a role named 'monitoring', and add the following recipe to the run_list:\n\n    recipe[nagios::server]\n\nThis will allow client nodes to search for the server by this role and add its IP address to the allowed list for NRPE.\n\nTo install Nagios and NRPE on a client node:\n\n    include_recipe \"nagios::client\"\n\nThis is a fairly complicated cookbook. For a walkthrough and example usage please see [Opscode's Nagios Quick Start](http://help.opscode.com/kb/otherhelp/nagios-quick-start).\n\nEnvironments\n------------\n\nThe searches used are confined to the node's `chef_environment`. If you do not use any environments (Chef 0.10+ feature) the `_default` environment is used, which is applied to all nodes in the Chef Server that are not in another defined role. To use environments, create them as files in your chef-repo, then upload them to the Chef Server.\n\n    % cat environments/production.rb\n    name \"production\"\n    description \"Systems in the Production Environment\"\n\n    % knife environment from file production.rb\n\nLicense and Author\n==================\n\nAuthor:: Joshua Sierles <joshua@37signals.com>\nAuthor:: Nathan Haneysmith <nathan@opscode.com>\nAuthor:: Joshua Timberman <joshua@opscode.com>\nAuthor:: Seth Chisamore <schisamo@opscode.com>\nAuthor:: Tim Smith <tim.smith@webtrends.com>\n\nCopyright 2009, 37signals\nCopyright 2009-2011, Opscode, Inc\nCopyright 2012, Webtrends Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/php",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/nginx_simplecgi",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "nagios": "Includes the client recipe.",
    "nagios::client": "Installs and configures a nagios client with nrpe",
    "nagios::server": "Installs and configures a nagios server",
    "nagios::pagerduty": "Integrates contacts w/ PagerDuty API"
  }
}