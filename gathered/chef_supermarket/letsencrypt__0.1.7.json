{
  "name": "letsencrypt Chef cookbook",
  "chef_cookbook_name": "letsencrypt",
  "revision": "0.1.7",
  "uris": [
    "https://supermarket.chef.io/cookbooks/letsencrypt",
    "https://supermarket.chef.io/cookbooks/letsencrypt/download",
    "https://supermarket.chef.io/cookbooks/letsencrypt/versions/0.1.7",
    "https://supermarket.chef.io/cookbooks/letsencrypt/versions/0.1.7/download",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/0.1.7",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/0.1.7/download"
  ],
  "labels": [
    "Chef cookbook",
    "Web Servers",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/letsencrypt",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/0.1.7/download",
  "deprecated": false,
  "created": "2015-12-11T15:33:20.385Z",
  "updated": "2016-08-15T11:42:02.956Z",
  "description": "Install free and trusted SSL/TLS certificates from Let's Encrypt",
  "maintainer": {
    "name": "thoutenbos",
    "email": "thoutenbos@schubergphilis.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 15,
  "downloads_count": 6055,
  "downloads_count_revision": 2661,
  "repository_url": "https://github.com/schubergphilis/letsencrypt",
  "issues_url": "https://github.com/schubergphilis/letsencrypt/issues",
  "chef_source_url": "https://github.com/schubergphilis/letsencrypt",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "letsencrypt cookbook\n=============\n\n[![Build Status](https://travis-ci.org/schubergphilis/letsencrypt.svg)](https://travis-ci.org/schubergphilis/letsencrypt)\n[![Cookbook Version](https://img.shields.io/cookbook/v/letsencrypt.svg)](https://supermarket.chef.io/cookbooks/letsencrypt)\n\nAutomatically get/renew free and trusted certificates from Let's Encrypt (letsencrypt.org).\n\nAttributes\n----------\n### default\n* `node['letsencrypt']['contact']` - Contact information, default empty. Set to `mailto:your@email.com`.\n* `node['letsencrypt']['endpoint']` - ACME server endpoint, default `https://acme-staging.api.letsencrypt.org`. Set to `https://acme-v01.api.letsencrypt.org` for real certificates.\n* `node['letsencrypt']['renew']` - Days before the certificate expires at which the certificate will be renewed, default `30`.\n* `node['letsencrypt']['source_ips']` - IP addresses used by letsencrypt to verify the TLS certificates, it will change over time. This attribute is for firewall purposes. Allow these IPs for HTTP (tcp/80).\n* `node['letsencrypt']['private_key']` - Private key content of registered account.\n\nRecipes\n-------\n### default\nInstalls the required acme-client rubygem.\n\nUsage\n-----\nUse the `letsencrypt_certificate` provider to request a certificate. The webserver for the domain for which you are requesting a certificate must be running on the local server. Currently only the http validation method is supported. Provide the path to your `wwwroot` for the specified domain.\n\n```ruby\nletsencrypt_certificate 'test.example.com' do\n  crt      '/etc/ssl/test.example.com.crt'\n  key      '/etc/ssl/test.example.com.key'\n  method   'http'\n  wwwroot  '/var/www'\nend\n```\n\nIn case your webserver needs an already existing certificate when installing a new server you will have a bootstrap problem. Webserver cannot start without certificate, but the certificate cannot be requested without the running webserver. To overcome this a self-signed certificate can be generated with the `letsencrypt_selfsigned` provider.\n\n```ruby\nletsencrypt_selfsigned 'test.example.com' do\n  crt     '/etc/ssl/test.example.com.crt'\n  key     '/etc/ssl/test.example.com.key'\nend\n```\n\nA working example can be found in the included `acme_client` test cookbook.\n\nProviders\n---------\n### certificate\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>cn</tt></td>\n    <td>String</td>\n    <td>The common name for the certificate</td>\n    <td><tt>Name of the resource block</tt></td>\n  </tr>\n  <tr>\n    <td><tt>alt_names</tt></td>\n    <td>Array</td>\n    <td>The SAN names for the certificate</td>\n    <td><tt>[]</tt></td>\n  </tr>\n  <tr>\n    <td><tt>crt</tt></td>\n    <td>String</td>\n    <td>File path to place the certificate</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>key</tt></td>\n    <td>String</td>\n    <td>File path to place the private key</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>chain</tt></td>\n    <td>String</td>\n    <td>File path to place the certificate chain</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>fullchain</tt></td>\n    <td>String</td>\n    <td>File path to place the certificate including the chain</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>owner</tt></td>\n    <td>String</td>\n    <td>Owner of the created files</td>\n    <td><tt>root</tt></td>\n  </tr>\n  <tr>\n    <td><tt>group</tt></td>\n    <td>String</td>\n    <td>Group of the created files</td>\n    <td><tt>root</tt></td>\n  </tr>\n  <tr>\n    <td><tt>method</tt></td>\n    <td>String</td>\n    <td>Validation method</td>\n    <td><tt>http</tt></td>\n  </tr>\n  <tr>\n    <td><tt>wwwroot</tt></td>\n    <td>String</td>\n    <td>Path to the wwwroot of the domain</td>\n    <td><tt>/var/www</tt></td>\n  </tr>\n  <tr>\n    <td><tt>ignore_failure</tt></td>\n    <td>Boolean</td>\n    <td>Whether to continue chef run if issuance fails</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>retries</tt></td>\n    <td>Integer</td>\n    <td>Number of times to catch exceptions and retry</td>\n    <td><tt>0</tt></td>\n  </tr>\n  <tr>\n    <td><tt>retry_delay</tt></td>\n    <td>Integer</td>\n    <td>Number of seconds to wait between retries</td>\n    <td><tt>2</tt></td>\n  </tr>\n</table>\n\n### selfsigned\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>cn</tt></td>\n    <td>String</td>\n    <td>The common name for the certificate</td>\n    <td><tt>Name of the resource block</tt></td>\n  </tr>\n  <tr>\n    <td><tt>crt</tt></td>\n    <td>String</td>\n    <td>File path to place the certificate</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>chain</tt></td>\n    <td>String</td>\n    <td>File path to place the certificate chain</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>key</tt></td>\n    <td>String</td>\n    <td>File path to place the private key</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>owner</tt></td>\n    <td>String</td>\n    <td>Owner of the created files</td>\n    <td><tt>root</tt></td>\n  </tr>\n  <tr>\n    <td><tt>group</tt></td>\n    <td>String</td>\n    <td>Group of the created files</td>\n    <td><tt>root</tt></td>\n  </tr>\n</table>\n\nTesting\n-------\nThe kitchen includes a `boulder` server to run the integration tests with, so testing can run locally without interaction with the online API's.\n\nContributing\n------------\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\nAuthors: Thijs Houtenbos <thoutenbos@schubergphilis.com>\n"
}