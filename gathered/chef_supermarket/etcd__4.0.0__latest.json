{
  "name": "etcd Chef cookbook",
  "chef_cookbook_name": "etcd",
  "revision": "4.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/etcd",
    "https://supermarket.chef.io/cookbooks/etcd/download",
    "https://supermarket.chef.io/cookbooks/etcd/versions/4.0.0",
    "https://supermarket.chef.io/cookbooks/etcd/versions/4.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/etcd/versions/4.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/etcd",
    "https://supermarket.chef.io/api/v1/cookbooks/etcd/versions/4.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/etcd",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/etcd/versions/4.0.0/download",
  "deprecated": false,
  "created": "2013-08-08T08:40:02.000Z",
  "updated": "2016-07-22T18:29:41.341Z",
  "description": "Installs and configures etcd",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 8,
  "downloads_count": 23850900,
  "downloads_count_revision": 166,
  "repository_url": "https://github.com/chef-cookbooks/etcd",
  "issues_url": "https://github.com/chef-cookbooks/etcd/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/etcd",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Etcd Cookbook\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/etcd.svg?branch=master)](https://travis-ci.org/chef-cookbooks/etcd) [![Cookbook Version](https://img.shields.io/cookbook/v/etcd.svg)](https://supermarket.chef.io/cookbooks/etcd)\n\nThe Etcd Cookbook is a library cookbook that provides custom resources for use in recipes.\n\n## Scope\n\nThis cookbook is concerned with the [Etcd](https://coreos.com/etcd/) distributed key/value store as distributed by CoreOS, Inc.\n\n## Requirements\n\n- Chef 12.0.0 or higher. Chef 11 is NOT SUPPORTED, please do not open issues about it.\n- Network accessible web server hosting the etcd binary.\n\n## Platform Support\n\nThe following platforms have been tested with Test Kitchen. It will most likely work on other platforms as well\n\n```\n|--------------+-------+\n|              | 2.3.7 |\n|--------------+-------+\n| debian-8     | X     |\n|--------------+-------+\n| centos-5     | X     |\n|--------------+-------+\n| centos-6     | X     |\n|--------------+-------+\n| centos-7     | X     |\n|--------------+-------+\n| fedora       | X     |\n|--------------+-------+\n| ubuntu-12.04 | X     |\n|--------------+-------+\n| ubuntu-14.04 | X     |\n|--------------+-------+\n| ubuntu-16.04 | X     |\n|--------------+-------+\n```\n\n## Cookbook Dependencies\n\n- [compat_resource](https://supermarket.chef.io/cookbooks/compat_resource)\n- [docker](https://supermarket.chef.io/cookbooks/docker)\n\n## Usage\n\n- Add `depends 'etcd', '~> 3.0'` to your cookbook's metadata.rb\n- Use the resources shipped in cookbook in a recipe, the same way you'd use core Chef resources (file, template, directory, package, etc).\n\n```ruby\netcd_service 'etcd0' do\n  advertise_client_urls 'http://127.0.0.1:2379,http://127.0.0.1:4001'\n  listen_client_urls 'http://0.0.0.0:2379,http://0.0.0.0:4001'\n  initial_advertise_peer_urls 'http://127.0.0.1:2380'\n  listen_peer_urls 'http://0.0.0.0:2380'\n  initial_cluster_token 'etcd-cluster-1'\n  initial_cluster 'etcd0=http://127.0.0.1:2380,etcd1=http://127.0.0.1:3380,etcd2=http://127.0.0.1:4380'\n  initial_cluster_state 'new'\n  action :start\nend\n\netcd_service 'etcd1' do\n  advertise_client_urls 'http://127.0.0.1:3379,http://127.0.0.1:5001'\n  listen_client_urls 'http://0.0.0.0:3379,http://0.0.0.0:5001'\n  initial_advertise_peer_urls 'http://127.0.0.1:3380'\n  listen_peer_urls 'http://0.0.0.0:3380'\n  initial_cluster_token 'etcd-cluster-1'\n  initial_cluster 'etcd0=http://127.0.0.1:2380,etcd1=http://127.0.0.1:3380,etcd2=http://127.0.0.1:4380'\n  initial_cluster_state 'new'\n  action :start\nend\n\netcd_service 'etcd2' do\n  advertise_client_urls 'http://127.0.0.1:4379,http://127.0.0.1:6001'\n  listen_client_urls 'http://0.0.0.0:4379,http://0.0.0.0:6001'\n  initial_advertise_peer_urls 'http://127.0.0.1:4380'\n  listen_peer_urls 'http://0.0.0.0:4380'\n  initial_cluster_token 'etcd-cluster-1'\n  initial_cluster 'etcd0=http://127.0.0.1:2380,etcd1=http://127.0.0.1:3380,etcd2=http://127.0.0.1:4380'\n  initial_cluster_state 'new'\n  action :start\nend\n```\n\n## Test Cookbooks as Examples\n\nThe cookbooks ran under test-kitchen make excellent usage examples.\n\nThe test recipes are found at:\n\n```ruby\ntest/cookbooks/etcd_test/\n```\n\n## Resources Overview\n\n- `etcd_service`: composite resource that uses etcd_installation and etcd_service_manager\n- `etcd_installation`: automatically selects an installation method\n- `etcd_service_manager`: automatically selects a service manager\n- `etcd_key`: manages keys in etcd\n- `etcd_installation_binary`: copies a pre-compiled etcd binary onto disk\n- `etcd_installation_docker`: pulls a docker image to the DOCKER_HOST\n- `etcd_service_manager_execute`: manage etcd daemon with Chef\n- `etcd_service_manager_sysvinit`: manage etcd daemon with a sysvinit script\n- `etcd_service_manager_upstart`: manage etcd daemon with upstart script\n- `etcd_service_manager_systemd`: manage etcd daemon with systemd unit files\n- `etcd_service_manager_docker`: starts a docker process on the DOCKER_HOST\n\n## Resources Details\n\n### etcd_installation\n\nThe `etcd_installation` resource auto-selects one of the below resources with the provider resolution system. Currently only the binary installation is available. Packages will be supported in the future versions.\n\n#### Example\n\n```ruby\netcd_installation 'default' do\n  action :create\nend\n```\n\n### etcd_installation_binary\n\nThe `etcd_installation_binary` resource copies the precompiled Go binary onto the disk. It exists to help run older Etcd versions. It should not be used in production, especially with devicemapper.\n\n#### Example\n\n```ruby\netcd_installation_binary 'default' do\n  version '2.3.7'\n  source 'https://my.computers.biz/dist/etcd'\n  checksum '90aff7364caa43932fd46974825af20e0ecb70fe7e01981e2d3a496106f147e7'\n  action :create\nend\n```\n\n### etcd_installation_docker\n\nThe `etcd_installation_docker` resource uses the `docker_image` resource to pull an image to the DOCKER_HOST.\n\n#### Properties\n\n- `repo` - The image name to pull. Defaults to 'quay.io/coreos/etcd'\n- `tag` - The image tag to pull.\n- `version` - String used to calculate tag string when tag is ommited. Defaults to '2.3.7'\n\n### etcd_service_manager\n\nThe `etcd_service_manager` resource auto-selects one of the below resources with the provider resolution system. The `etcd_service` family all share a common set of properties, which are listed under the `etcd_service` composite resource.\n\n#### Example\n\n```ruby\netcd_service_manager 'default' do\n  action :start\nend\n```\n\n### etcd_service_manager_execute\n\n#### Example\n\n```ruby\netcd_service_manager_execute 'default' do\n  action :start\nend\n```\n\n### etcd_service_manager_sysvinit\n\n#### Example\n\n```ruby\netcd_service_manager_sysvinit 'default' do\n  action :stop\nend\n```\n\n### etcd_service_manager_upstart\n\n#### Example\n\n```ruby\netcd_service_manager_upstart 'default' do\n  action :start\nend\n```\n\n### etcd_service_manager_systemd\n\n#### Example\n\n```ruby\netcd_service_manager_systemd 'default' do\n  action :start\nend\n```\n\n### etcd_service_manager_docker\n\n#### Example\n\n```ruby\netcd_service_manager_docker 'default' do\n  action :start\nend\n```\n\n#### properties\n\n- repo - defaults to 'quay.io/coreos/etcd'\n- tag - default calculated from version\n- version - defaults to '2.3.7',\n- container_name - defaults to resource name\n- port - defaults to ['2379/tcp4:2379', '4001/tcp4:4001']\n\n### etcd_service\n\nThe `etcd_service`: resource is a composite resource that uses `etcd_installation` and `etcd_service_manager` resources.\n\n- The `:create` action uses an `etcd_installation`\n- The `:delete` action uses an`etcd_installation`\n- The `:start` action uses an `etcd_service_manager`\n- The `:stop` action uses an `etcd_service_manager`\n\nThe service management strategy for the host platform is dynamically chosen based on platform, but can be overridden.\n\n#### Properties\n\nThe `etcd_service` resource property list corresponds to the options found in\n\n[Etcd Configuration Flags documentation](https://coreos.com/etcd/docs/2.3.7/configuration.html)\n\n##### Member flags\n\n- `source`\n- `node_name`\n- `data_dir`\n- `wal_dir`\n- `snapshot_count` snapshot to disk.\n- `heartbeat_interval`\n- `election_timeout`\n- `listen_peer_urls`\n- `listen_client_urls`\n- `max_snapshots`\n- `max_wals`\n- `cors`\n\n##### Clustering Flags\n\n- `initial`\n- `initial_advertise_peer_urls`\n- `initial_cluster`\n- `initial_cluster_state`\n- `initial_cluster_token`\n- `advertise_client_urls`\n- `discovery`\n- `discovery_srv`\n- `discovery_fallback`\n- `discovery_proxy`\n\n##### Proxy Flags\n\n- `proxy`\n- `proxy_failure_wait`\n- `proxy_refresh_interval`\n- `proxy_dial_timeout`\n- `proxy_write_timeout`\n- `proxy_read_timeout`\n\n##### Security Flags\n\n- `cert_file`\n- `key_file`\n- `client_cert_auth`\n- `trusted_ca_file`\n- `peer_cert_file`\n- `peer_key_file`\n- `peer_client_cert_auth`\n- `peer_trusted_ca_file`\n- `etcdctl_client_cert_file`\n- `etcdctl_client_key_file`\n\n##### Logging Flags\n\n- `debug`\n\n##### Unsafe Flags\n\n- `force_new_cluster`\n\n##### Experimental Flags\n\n- `experimental_v3demo`\n\n##### Misc\n\n- `http_proxy`\n- `https_proxy`\n- `no_proxy`\n- `auto_restart`\n\n### etcd_key\n\nThe `etcd_key` resource sets, watches and deletes keys in etcd.\n\n#### Actions\n\n- The `:set` action sets a key\n- The `:delete` action deletes a key\n- The `:watch` action waits for a key to update\n\n##### Properties\n\n- `key` - The key name\n- `value` - The desired value\n- `ttl` - The ttl for the key (optional)\n- `host` - The hostname of the etcd server, defaults to `127.0.0.1`\n- `port` - The port that etcd is listening on, defaults to `2379`\n\n#### Examples\n\n```ruby\netcd_key \"/test\" do\n  value \"a_test_value\"\n  action :set\nend\n```\n\n## License and Author\n\n**Original Author** | [Jesse Nelson](https://github.com/spheromak)\n\n**Contributor** | [Soulou](https://github.com/Soulou)\n\n**Contributor** | [Aaron O'Mullan](https://github.com/AaronO)\n\n**Contributor** | [Anthony Scalisi](https://github.com/scalp42)\n\n**Contributor** | [Robert Coleman](https://github.com/rjocoleman)\n\n**Contributor** | [James Gregory](https://github.com/jagregory)\n\n**Contributor** | [Sean OMeara](https://github.com/someara)\n\n**Copyright** | Copyright (c) 2013, Jesse Nelson\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/compat_resource",
      "revision": ">= 12.10",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/docker",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}