{
  "name": "ssl-key-vault Chef cookbook",
  "chef_cookbook_name": "ssl-key-vault",
  "revision": "0.2.3",
  "uris": [
    "https://supermarket.chef.io/cookbooks/ssl-key-vault",
    "https://supermarket.chef.io/cookbooks/ssl-key-vault/download",
    "https://supermarket.chef.io/cookbooks/ssl-key-vault/versions/0.2.3",
    "https://supermarket.chef.io/cookbooks/ssl-key-vault/versions/0.2.3/download",
    "https://supermarket.chef.io/api/v1/cookbooks/ssl-key-vault/versions/0.2.3",
    "https://supermarket.chef.io/api/v1/cookbooks/ssl-key-vault",
    "https://supermarket.chef.io/api/v1/cookbooks/ssl-key-vault/versions/0.2.3/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Test",
    "Type/Middleware/Data Store"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/ssl-key-vault",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/ssl-key-vault/versions/0.2.3/download",
  "deprecated": false,
  "created": "2013-06-24T15:05:52.000Z",
  "updated": "2015-02-11T15:15:25.163Z",
  "description": "SSL key & certificate storage in chef-vault",
  "maintainer": {
    "name": "mpasternacki",
    "email": "maciej@3ofcoins.net"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 9178898,
  "downloads_count_revision": 1259619,
  "repository_url": "https://github.com/3ofcoins/chef-cookbook-ssl-key-vault/",
  "issues_url": "https://github.com/3ofcoins/chef-cookbook-ssl-key-vault/",
  "chef_source_url": "https://github.com/3ofcoins/chef-cookbook-ssl-key-vault/",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "ssl-key-vault cookbook\n======================\n\nThis cookbook manages OpenSSL key pairs, using\n[chef-vault](https://github.com/Nordstrom/chef-vault/) to share and\nstore private keys.\n\nThis cookbook's home is at https://github.com/3ofcoins/ssl-key-vault/\n\nRequirements\n------------\n\nUsage\n-----\n\n1. Generate a self-signed key or a secret key and certificate.\n2. Store the private key in chef-vault. The name should be set to\n   *ssl-key-key.name*.:\n\n    $ ruby -rjson -e 'puts JSON[Hash[Hash[*ARGV].map { |k,v| [k, File.read(v)] }]]' -- \\\n        chain.pem example.com.chain.pem \\\n        crt example.com.crt \\\n        csr example.com.csr \\\n        key example.com.key \\\n        pem example.com.pem \\\n        > example.com.json\n\n    $ knife encrypt create certs --mode client \\\n      --search 'QUERY' --admins '' \\\n      --name ssl-key-example_com \\\n      --json /path/to/example.com.json\n    \n   Either add Chef server's admin API users to the `--admins`, or make\n   the key otherwise accessible to yourself in future (e.g. with\n   [knife-briefcase](https://github.com/3ofcoins/knife-briefcase/)).\n\n3. Add the certificate to node's `ssl_certificates` attribute (key is\n   key's name, and value is full certificate):\n\n```ruby\ndefault_attributes :ssl_certificates => {\n  'example.com' => true\n}\n```\n\n4. Add `recipe[ssl-key-vault]` to node's run list.\n\nThe key will be stored in `/etc/ssl/private/key.name.key`, and\ncertificate in `/etc/ssl/certs/key.name.pem`.\n\nTODOs & questions\n-----------------\n\nI don't have much of idea currently how to add tests, with chef-vault,\nencrypted data bags, and such.\n\nAuthor\n------\n\nAuthor:: Maciej Pasternacki <maciej@3ofcoins.net>\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}