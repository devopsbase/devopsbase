{
  "name": "chef_cfn Chef cookbook",
  "chef_cookbook_name": "chef_cfn",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/chef_cfn",
    "https://supermarket.chef.io/cookbooks/chef_cfn/download",
    "https://supermarket.chef.io/cookbooks/chef_cfn/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/chef_cfn/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_cfn/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_cfn",
    "https://supermarket.chef.io/api/v1/cookbooks/chef_cfn/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Executable/Script/Chef Cookbook",
    "Binding/Provider/Amazon/CloudFormation",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Integration"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/chef_cfn",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/chef_cfn/versions/1.0.0/download",
  "deprecated": false,
  "created": "2015-06-16T12:40:23.218Z",
  "updated": "2016-07-19T11:45:08.504Z",
  "description": "Chef integration with AWS cloudformation",
  "maintainer": {
    "name": "serafini",
    "email": "jonathan@serafini.ca"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 97249,
  "downloads_count_revision": 43,
  "repository_url": "https://github.com/JonathanSerafini/chef-cfn",
  "issues_url": "https://github.com/JonathanSerafini/chef-cfn/issues",
  "chef_source_url": "https://github.com/JonathanSerafini/chef-cfn",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Chef_cfn Cookbook\n=================\n\nProvide tools to aid in the integration of Chef with AWS Cloudformation.\n\nRequirements\n------------\n\n### Cookbooks:\n\n* chef_handler\n* ohai\n\nAttributes\n----------\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Description</td>\n    <td>Default</td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['properties']</code></td>\n    <td>Cloudformation metadata properties merged with cfn hint</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['properties']['mounts']</code></td>\n    <td>Provides a mechanism to ensure volumes are mounted during chef</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['stack']</code></td>\n    <td>Cloudformation Stack ohai namespace</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['stack']['autoscaling_name']</code></td>\n    <td>Name of the autoscaling group that spawn the instance</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['stack']['logical_id']</code></td>\n    <td>Cloudformation stack logical id</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['stack']['stack_id']</code></td>\n    <td>Cloudformation stack id</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['stack']['stack_name']</code></td>\n    <td>Cloudformation stack name</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['tags']</code></td>\n    <td>Cloudformation Tags ohai namespace, converted to snake case</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['tools']['delete_on_shutdown']</code></td>\n    <td>Delete the chef node on instance shutdown</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['tools']['cfn_hup']['interval']</code></td>\n    <td>cfn-hup will scan for metadata changes every N seconds</td>\n    <td><code>10</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['tools']['cfn_hup']['verbose']</code></td>\n    <td>Should cfn-hup provide verbose output</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['tools']['url']</code></td>\n    <td>Tarball url for cfn-init installation</td>\n    <td><code></code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['vpc']</code></td>\n    <td>Cloudformation VPC ohai namespace</td>\n    <td><code>{}</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['vpc']['region_id']</code></td>\n    <td>Aws region the instance belongs to</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['vpc']['subnet_id']</code></td>\n    <td>Aws subnet the instance belongs to</td>\n    <td><code>ohai</code></td>\n  </tr>\n  <tr>\n    <td><code>node['cfn']['vpc']['vpc_id']</code></td>\n    <td>Aws vpc the instance belongs to</td>\n    <td><code>ohai</code></td>\n  </tr>\n</table>\n\nRecipes\n-------\n\n### chef_cfn::default\n\nInstalls dependencies\n\n### chef_cfn::knife\n\n(optional) Provides a basic knife.rb\n\n### chef_cfn::ohai\n\nInstalls the aws-sdk chef_gem as well as the ohai[cfn] plugin.\nWhen this runs, it will populate the properties, stack, tags and vpc attribute hashes under the node['cfn'] namespace which may then be used to report signals with the signal handler. \n\nIn addition, the properties hash will be merged, and potentially overriden, by any hints set in the cfn hint.\n\n###### Required IAM policies\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1434370036000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:DescribeStackResource\",\n                \"ec2:DescribeInstances\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n### chef_cfn::handler\n\nInstalls a handler to signal cloudformation of the success or failure of the chef run. When used with either Creation or Update profiles in cloudformation, we can ensure that only nodes with valid chef runs are considered healthy.\n\n###### Required IAM policies\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1434370036000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:SignalResource\",\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n###### Example Cloudformation\n```json\n{\n  \"AutoScailingGroup\": {\n    \"CreationPolicy\": {\n      \"ResourceSignal\": {\n        \"Count\": 1,\n        \"Timeout\": \"PT10M\"\n      }\n    },\n    \"UpdatePolicy\": {\n      \"AutoScalingRollingUpdate\": {\n        \"WaitOnResourceSignals\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### chef_cfn::mounts\n\nMounts cloudformation defined volumes.\n\nPlease take note that this recipe assumes that cloudformation was responsible to creating and managing the volumes, not chef. As such, all block devices must exist prior to attempting to mount them.\n\n###### Example Cloudformation Attributes\n```json\n{\n  \"AutoScailingGroup\": {\n    \"Metadata\": {\n      \"Mounts\": {\n        \"xvdb3\": {\n          \"mount_point\": \"/var/log\",\n          \"mount_options\": \"\",\n          \"filesystem\": \"\"\n        }\n      }\n    }\n  }\n}\n```\n\n### chef_cfn::tools\n\nInstalls cloudformation cfn-init tools such as : \n\n* cfn-init\n* cfn-hup: Periodic polling of cloudformation resource metadata to determine when triggered actions should run.\n\n### chef_cfn::shutdown\n\nInstalls a service which will delete the node when the instance shuts down.\n\nResources\n---------\n\n### chef_cfn_signal\n\nProvides an interface to trigger cloudformation signals from within recipes. This is designed to be used with cloudformation WaitConditions. \n\n#### Actions\n\n* signal: Default action\n\n#### Attribute Parameters\n\n* *url*: Url of the resource or WaitHandler to signal\n* *unique_id*: Unique id of the notification\n* data:  Defaults to <code>\"\"</code>.\n* success:  Defaults to <code>true</code>.\n* reason:  Defaults to <code>\"Chef triggered signal from resource\"</code>.\n* once:  Defaults to <code>true</code>.\n\nOhai Plugins\n------------\n\n### CFN\n\nFetches instance attributes from Cloudformation:DescribeResource as well as EC2:DescribeInstances.\n\nLicense and Author\n------------------\n\nAuthor:: Jonathan Serafini (<jonathan@serafini.ca>)\n\nCopyright:: 2015, Jonathan Serafini\n\nLicense:: Apache 2.0\n\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef_handler",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ohai",
      "revision": ">= 4.0.0",
      "self_resolve": true
    }
  ],
  "chef_recipes": {
    "chef_cfn::default": "Installs dependencies",
    "chef_cfn::knife": "(optional) Provides a basic knife.rb",
    "chef_cfn::ohai": "Installs the ohai[cfn] plugin",
    "chef_cfn::handler": "Installs a handler to signal cloudformation",
    "chef_cfn::mounts": "Mounts cloudformation defined volumes",
    "chef_cfn::tools": "Installs cloudformation cfn-init tools",
    "chef_cfn::shutdown": "Installs a service which will delete the node"
  },
  "parameters": {
    "cfn/properties": {
      "display_name": "Cloudformation Properties",
      "description": "Cloudformation metadata properties merged with cfn hint",
      "default": {},
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/properties/mounts": {
      "display_name": "Cloudformation defined mount points",
      "description": "Provides a mechanism to ensure volumes are mounted during chef",
      "default": {},
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/stack": {
      "display_name": "Cloudformation Stack",
      "description": "Cloudformation Stack ohai namespace",
      "default": {},
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/stack/autoscaling_name": {
      "display_name": "Autoscaling group name",
      "description": "Name of the autoscaling group that spawn the instance",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/stack/logical_id": {
      "display_name": "Cloudformation stack logical id",
      "description": "Cloudformation stack logical id",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/stack/stack_id": {
      "display_name": "Cloudformation stack id",
      "description": "Cloudformation stack id",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/stack/stack_name": {
      "display_name": "Cloudformation stack name",
      "description": "Cloudformation stack name",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/tags": {
      "display_name": "Cloudformation Tags",
      "description": "Cloudformation Tags ohai namespace, converted to snake case",
      "default": {},
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/tools/delete_on_shutdown": {
      "title": "Delete the chef node on instance shutdown",
      "description": "Delete the chef node on instance shutdown",
      "default": true,
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/tools/cfn_hup/interval": {
      "title": "Scan interval",
      "description": "cfn-hup will scan for metadata changes every N seconds",
      "default": 10,
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/tools/cfn_hup/verbose": {
      "title": "cfn-hup verbosity",
      "description": "Should cfn-hup provide verbose output",
      "default": false,
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/tools/url": {
      "title": "Cloudformation init tools url",
      "description": "Tarball url for cfn-init installation",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/vpc": {
      "display_name": "Cloudformation VPC",
      "description": "Cloudformation VPC ohai namespace",
      "default": {},
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/vpc/region_id": {
      "display_name": "Aws Region id",
      "description": "Aws region the instance belongs to",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/vpc/subnet_id": {
      "display_name": "Aws Subnet id",
      "description": "Aws subnet the instance belongs to",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    },
    "cfn/vpc/vpc_id": {
      "display_name": "Aws VPC id",
      "description": "Aws vpc the instance belongs to",
      "default": "ohai",
      "choice": [],
      "calculated": false,
      "type": "string",
      "required": "optional",
      "recipes": [],
      "mapping": "cookbook_attribute"
    }
  }
}