{
  "name": "web Chef cookbook",
  "chef_cookbook_name": "web",
  "revision": "0.0.10",
  "uris": [
    "https://supermarket.chef.io/cookbooks/web",
    "https://supermarket.chef.io/cookbooks/web/download",
    "https://supermarket.chef.io/cookbooks/web/versions/0.0.10",
    "https://supermarket.chef.io/cookbooks/web/versions/0.0.10/download",
    "https://supermarket.chef.io/api/v1/cookbooks/web/versions/0.0.10",
    "https://supermarket.chef.io/api/v1/cookbooks/web",
    "https://supermarket.chef.io/api/v1/cookbooks/web/versions/0.0.10/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Data Processing/Hadoop/Hive"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/web",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/web/versions/0.0.10/download",
  "deprecated": false,
  "created": "2012-04-20T09:16:10.000Z",
  "updated": "2013-11-26T10:52:06.000Z",
  "description": "Light weight resource to deliver archived application to your host",
  "maintainer": {
    "name": "melezhik",
    "email": "melezhik@gmail.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 3,
  "downloads_count": 7523564,
  "downloads_count_revision": 1229837,
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\nLight weight resource to deliver archived application to your host.\n\nRequirements\n============\n- tar\n\nAttributes\n==========\n\nUsage\n=====\n\n    # fetch archive from remote host \n    # unpack archive in destination directory (see `base` parameter in `Resource's parameters` section)\n    # create symlink 'my-application' pointing to unpacked archive  \n\n    web_application 'my-application' do\n        url   'http://some.ftp.host/my-app-v0.0.1.tar.gz'\n        user  'alex'\n        group 'users'\n        action :deliver\n    end\n\n    # delete all unpacked archives matching glob pattern\n    web_application 'my-application' do\n        pattern   'my-app*/'\n        user  'alex'\n        group 'users'\n        action :clean\n    end\n\n    # delete symlinked unpacked archive\n    web_application 'my-application' do\n        user  'alex'\n        group 'users'\n        action :delete\n    end\n    \nResource's parameters\n=====================\n\n - `name` - name of symlink to point to unpacked archive\n - `url` - http url for application archive\n - `user` - owner of application files\n - `group` - group of applications files\n - `base` - directory where archive will be unpacked, default value is `user's home directory`. Archive will be unpacked in `base/apps/` directory. \n `base/apps/name` will point to unpacked archive\n \n\nActions\n=======\n - `fetch` - fetch archive from remote host and store it in `base/apps/`\n - `unpack` - unpack archive (see `override mode` section)\n - `symlink` - make symlink in `base/apps/` pointing to the archive unpacked \n - `deliver` - fetch, unpack, symlink actions successively\n - `delete` - delete symlinked unpacked archive\n - `clean` - delete all unpacked archives matching glob pattern (symlinked unpacked archive is excluded)\n\nOverride mode\n=============\nWhen doing `unpack` action if archive is already unpacked -  delete current unpacked archive first. By default `override` is set to `true`.\n\n    web_application 'my-application' do\n        url   'http://some.ftp.host/my-app.tar.gz'\n        user  'alex'\n        group 'users'\n        override true\n        action :deliver\n    end\n\n\n \n \n\n"
}