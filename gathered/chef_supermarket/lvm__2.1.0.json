{
  "name": "lvm Chef cookbook",
  "chef_cookbook_name": "lvm",
  "revision": "2.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/lvm",
    "https://supermarket.chef.io/cookbooks/lvm/download",
    "https://supermarket.chef.io/cookbooks/lvm/versions/2.1.0",
    "https://supermarket.chef.io/cookbooks/lvm/versions/2.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/lvm/versions/2.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/lvm",
    "https://supermarket.chef.io/api/v1/cookbooks/lvm/versions/2.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Logging"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/lvm",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/lvm/versions/2.1.0/download",
  "deprecated": false,
  "created": "2009-10-28T19:15:23.000Z",
  "updated": "2016-09-16T16:53:19.092Z",
  "description": "Installs and manages Logical Volume Manager",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 36,
  "downloads_count": 20695278,
  "downloads_count_revision": 7398,
  "repository_url": "https://github.com/chef-cookbooks/lvm",
  "issues_url": "https://github.com/chef-cookbooks/lvm/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/lvm",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# lvm Cookbook\n[![Build Status](https://travis-ci.org/chef-cookbooks/lvm.svg?branch=master)](https://travis-ci.org/chef-cookbooks/lvm)\n[![Cookbook Version](https://img.shields.io/cookbook/v/lvm.svg)](https://supermarket.chef.io/cookbooks/lvm)\n\nInstalls lvm2 package and includes custom resources (providers) for managing LVM.\n\n## Requirements\n### Platforms\n- Debian/Ubuntu\n- RHEL/CentOS/Scientific/Amazon/Oracle\n\n### Chef\n- Chef 12+\n\n### Cookbooks\n- none\n\n## Resources/Providers\n\n### lvm_physical_volume\nManages LVM physical volumes.\n\n#### Actions\n<table>\n  <tr>\n    <th>Action</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>:create</td>\n    <td>(default) Creates a new physical volume</td>\n  </tr>\n  <tr>\n    <td>:resize</td>\n    <td>Resize an existing physical volume</td>\n  </tr>\n</table>\n\n#### Parameters\n<table>\n  <tr>\n    <th>Parameter</th>\n    <th>Description</th>\n    <th>Example</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>(required) The device to create the new physical volume on</td>\n    <td><tt>'/dev/sda'</tt></td>\n    <td></td>\n  </tr>\n</table>\n\n#### Examples\n```ruby\nlvm_physical_volume '/dev/sda'\n```\n\n---\n\n\n### lvm_logical_volume\nManages LVM logical volumes.\n\n#### Actions\n<table>\n  <tr>\n    <th>Action</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>:create</td>\n    <td>(default) Creates a new logical volume</td>\n  </tr>\n  <tr>\n    <td>:resize</td>\n    <td>Resize an existing logical volume</td>\n  </tr>\n</table>\n\n#### Parameters\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Description</th>\n    <th>Example</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>(name attribute) Name of the logical volume</td>\n    <td><tt>bacon</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>group</td>\n    <td>(required) Volume group in which to create the new volume (not required if the volume is declared inside of an `lvm_volume_group` block)</td>\n    <td><tt>bits</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>size</td>\n    <td>(required) Size of the volume.\n      <ul>\n        <li>It can be the size of the volume with units (k, K, m, M, g, G, t, T)</li>\n        <li>It can be specified as the percentage of the size of the volume group</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li><tt>10G</tt></li>\n        <li><tt>25%VG</tt></li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem</td>\n    <td>The format for the file system</td>\n    <td><tt>'ext4'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem_params</td>\n    <td>Optional parameters to use when formatting the file system</td>\n    <td><tt>'-j -L log -m 2 -i 10240 -J size=400 -b 4096'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>mount_point</td>\n    <td>\n      Either a String containing the path to the mount point, or a Hash with the following keys:\n      <ul>\n        <li><tt>location<tt> - (required) the directory to mount the volume on</li>\n        <li><tt>options</tt> - the mount options for the volume</li>\n        <li><tt>dump</tt> - the <tt>dump</tt> field for the fstab entry</li>\n        <li><tt>pass</tt> - the <tt>pass</tt> field for the fstab entry</li>\n      </ul>\n    </td>\n    <td><tt>'/var/my/mount'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>physical_volumes</td>\n    <td>Array of physical volumes that the volume will be\n  restricted to</td>\n    <td><tt>['/dev/sda', '/dev/sdb']</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>stripes</td>\n    <td>Number of stripes for the volume</td>\n    <td><tt>5</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>stripe_size</td>\n    <td>Number of kilobytes per stripe segment (must be a power of 2 less than or equal to the physical extent size for the volume group)</td>\n    <td><tt>24</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>mirrors</td>\n    <td>Number of mirrors for the volume</td>\n    <td><tt>5</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>contiguous</td>\n    <td>Whether or not volume should use the contiguous allocation\n  policy</td>\n    <td><tt>true</tt></td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td>readahead</td>\n    <td>The readahead sector count for the volume (can be a value\n  between 2 and 120, 'auto', or 'none')</td>\n    <td><tt>'auto'</tt></td>\n    <td></td>\n  </tr>\n  <td>take_up_free_space</td>\n    <td>whether to have the LV take up the remainder of free space on the VG. Only valid for resize action</td>\n    <td><tt>true</tt></td>\n    <td>false</td>\n  </tr>\n</table>\n\n#### Examples\n\n```ruby\nlvm_logical_volume 'home' do\n  group       'vg00'\n  size        '25%VG'\n  filesystem  'ext4'\n  mount_point '/home'\n  stripes     3\n  mirrors     2\nend\n```\n\n---\n\n\n### lvm_thin_pool\nManages LVM thin pools (which are simply logical volumes created with the --thinpool argument to lvcreate).\n\n#### Actions\n<table>\n  <tr>\n    <th>Action</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>:create</td>\n    <td>(default) Create a new thin pool logical volume</td>\n  </tr>\n  <tr>\n    <td>:resize</td>\n    <td>Resize an existing thin pool logical volume</td>\n  </tr>\n</table>\n\n#### Parameters\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Description</th>\n    <th>Example</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>(name attribute) Name of the logical volume</td>\n    <td><tt>bacon</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>group</td>\n    <td>(required) Volume group in which to create the new volume (not required if the volume is declared inside of an `lvm_volume_group` block)</td>\n    <td><tt>bits</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>size</td>\n    <td>(required) Size of the volume.\n      <ul>\n        <li>It can be the size of the volume with units (k, K, m, M, g, G, t, T)</li>\n        <li>It can be specified as the percentage of the size of the volume group</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li><tt>10G</tt></li>\n        <li><tt>25%VG</tt></li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem</td>\n    <td>The format for the file system</td>\n    <td><tt>'ext4'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem_params</td>\n    <td>Optional parameters to use when formatting the file system</td>\n    <td><tt>'-j -L log -m 2 -i 10240 -J size=400 -b 4096'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>mount_point</td>\n    <td>\n      Either a String containing the path to the mount point, or a Hash with the following keys:\n      <ul>\n        <li><tt>location<tt> - (required) the directory to mount the volume on</li>\n        <li><tt>options</tt> - the mount options for the volume</li>\n        <li><tt>dump</tt> - the <tt>dump</tt> field for the fstab entry</li>\n        <li><tt>pass</tt> - the <tt>pass</tt> field for the fstab entry</li>\n      </ul>\n    </td>\n    <td><tt>'/var/my/mount'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>physical_volumes</td>\n    <td>Array of physical volumes that the volume will be\n  restricted to</td>\n    <td><tt>['/dev/sda', '/dev/sdb']</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>stripes</td>\n    <td>Number of stripes for the volume</td>\n    <td><tt>5</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>stripe_size</td>\n    <td>Number of kilobytes per stripe segment (must be a power of 2 less than or equal to the physical extent size for the volume group)</td>\n    <td><tt>24</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>mirrors</td>\n    <td>Number of mirrors for the volume</td>\n    <td><tt>5</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>contiguous</td>\n    <td>Whether or not volume should use the contiguous allocation\n  policy</td>\n    <td><tt>true</tt></td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td>readahead</td>\n    <td>The readahead sector count for the volume (can be a value\n  between 2 and 120, 'auto', or 'none')</td>\n    <td><tt>'auto'</tt></td>\n    <td></td>\n  </tr>\n  <td>take_up_free_space</td>\n    <td>whether to have the LV take up the remainder of free space on the VG. Only valid for resize action</td>\n    <td><tt>true</tt></td>\n    <td>false</td>\n  </tr>\n  <tr>\n    <td>thin_volume</td>\n    <td>Shortcut for creating a new `lvm_thin_volume` definition (the volumes will be created in the order they are declared)</td>\n    <td></td>\n    <td></td>\n </tr>\n</table>\n\n---\n\n\n### lvm_thin_volume\nManages LVM thin volumes (which are simply logical volumes created with the --thin argument to lvcreate and are contained inside of\nother logical volumes that were created with the --thinpool option to lvcreate).\n\n#### Actions\n<table>\n  <tr>\n    <th>Action</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>:create</td>\n    <td>(default) Create a new thin logical volume</td>\n  </tr>\n  <tr>\n    <td>:resize</td>\n    <td>Resize an existing thin logical volume</td>\n  </tr>\n</table>\n\n#### Parameters\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Description</th>\n    <th>Example</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>(name attribute) Name of the logical volume</td>\n    <td><tt>bacon</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>group</td>\n    <td>(required) Volume group in which to create the new volume (not required if the volume is declared inside of an `lvm_volume_group` block)</td>\n    <td><tt>bits</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>pool</td>\n    <td>(required) Thin pool volume in which to create the new volume (not required if the volume is declared inside of an `lvm_thin_pool` block)</td>\n    <td><tt>bits</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>size</td>\n    <td>(required) Size of the volume.\n      <ul>\n        <li>It can be the size of the volume with units (k, K, m, M, g, G, t, T)</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li><tt>10G</tt></li>\n      </ul>\n    </td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem</td>\n    <td>The format for the file system</td>\n    <td><tt>'ext4'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>filesystem_params</td>\n    <td>Optional parameters to use when formatting the file system</td>\n    <td><tt>'-j -L log -m 2 -i 10240 -J size=400 -b 4096'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>mount_point</td>\n    <td>\n      Either a String containing the path to the mount point, or a Hash with the following keys:\n      <ul>\n        <li><tt>location<tt> - (required) the directory to mount the volume on</li>\n        <li><tt>options</tt> - the mount options for the volume</li>\n        <li><tt>dump</tt> - the <tt>dump</tt> field for the fstab entry</li>\n        <li><tt>pass</tt> - the <tt>pass</tt> field for the fstab entry</li>\n      </ul>\n    </td>\n    <td><tt>'/var/my/mount'</tt></td>\n    <td></td>\n  </tr>\n</table>\n\n\n#### Examples\n\n```ruby\nlvm_thin_volume 'thin01' do\n  group       'vg00'\n  pool        'lv-thin-pool'\n  size        '5G'\n  filesystem  'ext4'\n  mount_point location: '/var/thin01', options: 'noatime,nodiratime'\nend\n```\n\n\n---\n\n\n### lvm_volume_group\nManages LVM volume groups.\n\n#### Actions\n<table>\n  <tr>\n    <th>Action</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>:create</td>\n    <td>(default) Creates a new volume group</td>\n  </tr>\n  <tr>\n    <td>:extend</td>\n    <td>Extend an existing volume group to include new physical volumes</td>\n  </tr>\n</table>\n\n#### Parameters\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Description</th>\n    <th>Example</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>(required) Name of the volume group</td>\n    <td><tt>'bacon'</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>physical_volumes</td>\n    <td>(required) The device or list of devices to use as physical volumes (if they haven't already been initialized as physical volumes, they will be initialized automatically)</td>\n    <td><tt>['/dev/sda', '/dev/sdb']</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>physical_extent_size</td>\n    <td>The physical extent size for the volume group</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>logical_volume</td>\n    <td>Shortcut for creating a new `lvm_logical_volume` definition (the logical volumes will be created in the order they are declared)</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>wipe_signatures</td>\n    <td>Force the creation of the Volume Group, even if `lvm` detects existing non-LVM data on disk</td>\n    <td>`true`</td>\n    <td>`false`</td>\n  </tr>\n  <tr>\n    <td>thin_pool</td>\n    <td>Shortcut for creating a new `lvm_thin_pool` definition (the logical volumes will be created in the order they are declared)</td>\n    <td></td>\n    <td></td>\n </tr>\n</table>\n\n#### Examples\n```ruby\nlvm_volume_group 'vg00' do\n  physical_volumes ['/dev/sda', '/dev/sdb', '/dev/sdc']\n  wipe_signatures true\n\n  logical_volume 'logs' do\n    size        '1G'\n    filesystem  'xfs'\n    mount_point location: '/var/log', options: 'noatime,nodiratime'\n    stripes     3\n  end\n\n  logical_volume 'home' do\n    size        '25%VG'\n    filesystem  'ext4'\n    mount_point '/home'\n    stripes     3\n    mirrors     2\n  end\n  \n  thin_pool \"lv-thin-pool\" do\n    size '5G'\n    stripes 2\n    \n    thin_volume \"thin01\" do\n      size '10G'\n      filesystem  'ext4'\n      mount_point location: '/var/thin01', options: 'noatime,nodiratime'\n    end\n  end  \nend\n```\n\n\n## Usage\n\nIf you're using [Berkshelf](http://berkshelf.com), just add this cookbook to your `Berksfile`:\n\n```ruby\ncookbook 'lvm'\n```\n\nYou can also install it from the community site:\n\n```ruby\nknife cookbook site install lvm\n```\n\nInclude the default recipe in your run list on a node, in a role, or in another recipe:\n\n```ruby\nrun_list(\n  'recipe[lvm::default]'\n)\n```\n\nDepend on `lvm` in any cookbook that uses its Resources/Providers:\n\n```ruby\n# other_cookbook/metadata.rb\ndepends 'lvm'\n```\n\n\n## Caveats\nThis cookbook depends on the [di-ruby-lvm](https://github.com/DrillingInfo/di-ruby-lvm) and [di-ruby-lvm-attrib](https://github.com/DrillingInfo/di-ruby-lvm-attrib) gems. The di-ruby-lvm-attrib gem in particular is a common cause of failures when using the providers. If you get a failure with an error message similar to\n\n```text\nNo such file or directory - /opt/chef/.../di-ruby-lvm-attrib-0.0.3/lib/lvm/attributes/2.02.86(2)/lvs.yaml\n```\n\nthen you are running a version of lvm that the gems do not support. However, getting support added is usually pretty easy. Just follow the instructions on \"Adding Attributes\" in the [di-ruby-lvm-attrib README](https://github.com/DrillingInfo/di-ruby-lvm-attrib).\n\n\n## License and Authors\n\n- Author:: Joshua Timberman <joshua@chef.io>\n- Author:: Greg Symons <gsymons@drillinginfo.com>\n\n```text\nCopyright:: 2011-2015, Chef Software, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "freebsd",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "sles",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "lvm": "Installs lvm2 package"
  }
}