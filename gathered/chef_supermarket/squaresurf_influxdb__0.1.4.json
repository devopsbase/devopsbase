{
  "name": "squaresurf_influxdb Chef cookbook",
  "chef_cookbook_name": "squaresurf_influxdb",
  "revision": "0.1.4",
  "uris": [
    "https://supermarket.chef.io/cookbooks/squaresurf_influxdb",
    "https://supermarket.chef.io/cookbooks/squaresurf_influxdb/download",
    "https://supermarket.chef.io/cookbooks/squaresurf_influxdb/versions/0.1.4",
    "https://supermarket.chef.io/cookbooks/squaresurf_influxdb/versions/0.1.4/download",
    "https://supermarket.chef.io/api/v1/cookbooks/squaresurf_influxdb/versions/0.1.4",
    "https://supermarket.chef.io/api/v1/cookbooks/squaresurf_influxdb",
    "https://supermarket.chef.io/api/v1/cookbooks/squaresurf_influxdb/versions/0.1.4/download"
  ],
  "labels": [
    "Chef cookbook",
    "Databases",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/squaresurf_influxdb",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/squaresurf_influxdb/versions/0.1.4/download",
  "deprecated": false,
  "created": "2014-11-22T00:06:56.128Z",
  "updated": "2015-05-06T22:17:03.755Z",
  "description": "Installs/Configures squaresurf_influxdb",
  "maintainer": {
    "name": "squaresurf",
    "email": "daniel.paul.searles@gmail.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 4120545,
  "downloads_count_revision": 642934,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "SquareSurf InfluxDB Cookbook\n===========================\n\n[Chef](https://www.getchef.com/chef/) cookbook for installing and configuring\n[InfluxDB](http://influxdb.com/). This cookbook took inspiration from the\n[influxdb cookbook](https://supermarket.getchef.com/cookbooks/influxdb). The\nmain difference is that this cookbook tries to take the approach that\n[InfluxDB](http://influxdb.com/) should be always running once it is installed.\nWhereas my understanding of the [influxdb\ncookbook](https://supermarket.getchef.com/cookbooks/influxdb) is that it tries\nto seperate configuration from starting the service into two processes.\n\nRequirements\n------------\n\n* Chef version 0.11 or higher\n* Ruby 1.9 (preferably from the Chef full-stack installer)\n\n### Tested Platforms\n\n* Ubuntu 14.04\n\nNote: I'm open to more platforms, this is just what I started with in order to\nfill my current need.\n\nResources\n---------\n\n### squaresurf\\_influxdb\\_user\n\nUse the *squaresurf\\_influxdb\\_user* resource to create/update/delete an\nInfluxDB database user.\n\n#### Actions\n\n* `:create` (Default)\n* `:delete`\n\n#### Attributes\n\n* `username`  - Name for the user. (Defaults to the name of the block)\n* `password`  - Password for the user.\n* `database`  - The database the user will have access to.\n* `admin`     - A bool whether or not the user is a database admin. (default: false)\n* `read_from` - A regex to match the series the user can read from. (default: '.\\*')\n* `write_to`  - A regex to match the series the user can write to. (default: '.\\*')\n\n#### Examples\n\n##### Create a user\n\n```ruby \nsquaresurf_influxdb_user 'john' do\n  action :create\n  password 'super secret'\n  database 'metrics'\n  admin true\n  read_from '/^public$/'\n  write_to '/^john_workspace$/'\nend\n```\n\n##### Delete a user\n\n```ruby\nsquaresurf_infludb_user 'old_user' do\n  action :delete\n  database 'sensitive data'\nend\n```\n\n### squaresurf\\_influxdb\\_cluster\\_admin\n\nUse the *squaresurf\\_influxdb\\_cluster\\_admin* resource to create/update/delete\nan InfluxDB cluster admin.\n\n#### Actions\n\n* `:create` (Default)\n* `:delete`\n\n#### Attributes\n\n* `username` - Name for the cluster admin. (Defaults to the name of the block)\n* `password` - Password for the cluster admin.\n\n#### Examples\n\n##### Create a cluster admin\n\n```ruby \nsquaresurf_influxdb_cluster_admin 'jane' do\n  action :create\n  password 'super secret again'\nend\n```\n\n##### Delete a cluster admin\n\n```ruby\nsquaresurf_infludb_cluster_admin 'old_cluster_admin' do\n  action :delete\nend\n```\n\n### squaresurf\\_influxdb\\_database\n\nUse the *squaresurf\\_influxdb\\_database* resource to create/update/delete an\nInfluxDB database.\n\n#### Actions\n\n* `:create` (Default)\n* `:delete`\n\n#### Attributes\n\n* `database` - Database name. (Defaults to the name of the block)\n\n#### Examples\n\n##### Create a database\n\n```ruby \nsquaresurf_influxdb_database 'metrics'\n```\n\n##### Delete a database\n\n```ruby\nsquaresurf_infludb_database 'old_project_name' do\n  action :delete\nend\n```\n\nRecipes\n-------\n\n### squaresurf\\_influxdb::default\n\nThis recipe includes the *squaresurf\\_influxdb::install* recipe then the\n*squaresurf\\_influxdb::configure* recipe.\n\n### squaresurf\\_influxdb::install\n\nThis recipe will download the appropriate package according to the version\nattribute and install it.\n\n### squaresurf\\_influxdb::configure\n\nThis recipe will:\n* Setup the influxdb service to be enabled and start.\n* Write out to toml the config and benchmark\\_config from the node attributes.\n* Update the main cluster admin password if it has changed.\n* Create an alternate cluster admin user if the main admin username is\n  different than *root*\n* Delete the root user if the main cluster admin username is different than *root*\n\n### squaresurf\\_influxdb::test\n\nThis is used by our chef spec and kitchen test suites.\n\n### squaresurf\\_influxdb::test\\_exceptions\n\nThis is used by our chef spec test suite.\n\nAttributes\n----------\n\n### General Attributes\n\nAttributes that will affect general cookbook usage.\n\n#### default.squaresurf\\_influxdb.fail\\_on\\_error = true\n\nIf set to false then failures will not fail the chef run and will log errors\ninstead.\n\n### Install attributes\n\nAttributes that affect the installation of InfluxDB.\n\n#### default.squaresurf\\_influxdb.version = :latest\n\nThis will decide which version of InfluxDB to download and install. It can\neither be the version string or the ruby symbol `:latest` in order to install\nthe latest available.\n\n#### default.squaresurf\\_influxdb.update\\_version = false\n\nThis will decide whether or not to install a new version of influxdb if it is\nalready installed and the version attribute above differs from that of the\ninstalled version.\n\n### InfluxDB Client Attributes\n\nAttributes that affect the ability for this cookbook to connect to InfluxDB in\norder to configure users, cluster admins, and databases.\n\n#### default.squaresurf\\_influxdb.client\\_retries = 10\n\nThis is how many times we should try to connect to InfluxDB before giving up.\nSet this to nil or '-1' to retry indefinitely.\n\n#### default.squaresurf\\_influxdb.client\\_hosts = ['localhost']\n\nThis is the host we should connect to InfluxDB with.\n\n#### default.squaresurf\\_influxdb.client\\_use\\_ssl = false\n\nWhether or not we should connect via ssl with our client when configuring\nusers, cluster admins, and databases.\n\n#### default.squaresurf\\_influxdb.admin\\_username = 'root'\n\nThe cluster admin username to use when connecting to InfluxDB.\n\n#### default.squaresurf\\_influxdb.admin\\_password = 'root'\n\nThe cluster admin password to use when connecting to InfluxDB.\n\n#### default.squaresurf\\_influxdb.admin\\_old\\_username = 'root'\n\nThe previous cluster admin username for use if you ever change the username to\nanother value. This is so that we can create a new cluster admin and delete\nthis old cluster admin.\n\n#### default.squaresurf\\_influxdb.admin\\_old\\_password = 'root'\n\nThe previous cluster admin password for use if you ever change the password to\nanother value. This is so that we can set the new password.\n\n### InfluxDB TOML Config Attributes\n\n#### default.squaresurf\\_influxdb.config\n\nThis should be a ruby hash that will be converted to toml for the InfluxDB\nconfig.toml. The default was generated from the default config.toml that comes\nwith InfluxDB.\n\n#### default.squaresurf\\_influxdb.benchmark\\_config\n\nThis should be a ruby hash that will be converted to toml for the InfluxDB\nbenchmark\\_config.toml. The default was generated from the default\nbenchmark\\_config.toml that comes with InfluxDB.\n\nUsage\n-----\n\nThe one main attribute that you should always change is the\nnode.squaresurf\\_influxdb.admin\\_password. That way you won't have a default\ncluster admin password that anyone can connect to your server with.\n\n### squaresurf\\_influxdb::default\n\nEither include the recipe in your *run\\_list* or `include_recipe` from within\none of your recipes. For example you could do the following to setup influxdb\nand create a database named *metrics* and a user named *sensu*.\n\n```ruby\n# Make sure to set the admin password to some secret value. It would probably\n# be even better to use an encrypted data bag here as shown in the next example.\nnode.set.squaresurf_influxdb.admin_password = 'super secret'\n\ninclude_recipe 'squaresurf_influxdb::default'\n\nsquaresurf_influxdb_database 'metrics'\n\nsquaresurf_influxdb_user 'sensu' do\n    password 'some secret value'\n    database 'metrics'\nend\n```\n\n### squaresurf\\_influxdb::install and squaresurf\\_influxdb::configure\n\nInstead of using the default recipe you can seperate your logic into an install\nthen a configure in case you need to setup some items vefore the service is\nstarted. For example you could set up ssl configuration for the http api like so:\n\n```ruby\ncert_file = '/opt/influxdb/ssl_cert.pem'\nnode.set.squaresurf_influxdb.config.api['ssl-cert'] = cert_file\nnode.set.squaresurf_influxdb.config.api['ssl-port'] = 8084\n\ncert = Chef::EncryptedDataBagItem.load('ssl', 'influxdb')\n\nadmin = Chef::EncryptedDataBagItem.load('influxdb', 'admin')\nnode.default.squaresurf_influxdb.admin_password = admin['password']\nnode.default.squaresurf_influxdb.admin_old_password = admin['old_password']\n\n# install first so that the /opt/influxdb dir and influxdb user will be created\ninclude_recipe 'squaresurf_influxdb::install'\n\nfile cert_file do\n  content cert['cert'] + \"\\n\" + cert['key']\n  user 'influxdb'\n  group 'influxdb'\n  mode '0700'\nend\n\ninclude_recipe 'squaresurf_influxdb::configure'\n```\n\nContributing\n------------\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\n### Testing\n\nThere is a Rakefile with tasks to make testing easy. You will probably need to\n`bundle install` before running any of them.\n\n* rake test:all            # Run all tests\n* rake test:chefspec       # Run chefspec\n* rake test:foodcritic     # Run foodcritic linter against cookbook\n* rake test:kitchen\\_test  # This is here as a convenience so that the test\n  suite will check kitchen as well as the other tests\n* rake test:rubocop        # Run rubocop against cookbook ruby files\n\n### config and benchmark\\_config attribute generation\n\nThere is a convenience script `toml_to_attr.rb` to help generate the config and\nbenchmark\\_config ruby hashes from a default toml file included with influxdb.\n\nIf you haven't run `bundle install` for the test suite above you'll probably\nneed to do so in order to run `toml_to_attr.rb`.\n\nLicense and Authors\n-------------------\n\n### License\n\nThe License is the MIT License and can be found in the LICENSE file.\n\n### Authors\n\n* [Daniel Paul Searles (squaresurf)](https://github.com/squaresurf)\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}