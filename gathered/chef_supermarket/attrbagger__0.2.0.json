{
  "name": "attrbagger Chef cookbook",
  "chef_cookbook_name": "attrbagger",
  "revision": "0.2.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/attrbagger",
    "https://supermarket.chef.io/cookbooks/attrbagger/download",
    "https://supermarket.chef.io/cookbooks/attrbagger/versions/0.2.0",
    "https://supermarket.chef.io/cookbooks/attrbagger/versions/0.2.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/attrbagger/versions/0.2.0",
    "https://supermarket.chef.io/api/v1/cookbooks/attrbagger",
    "https://supermarket.chef.io/api/v1/cookbooks/attrbagger/versions/0.2.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/attrbagger",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/attrbagger/versions/0.2.0/download",
  "deprecated": false,
  "created": "2013-09-02T22:41:39.000Z",
  "updated": "2013-09-03T02:42:54.000Z",
  "description": "Gets attributes from data bags.",
  "maintainer": {
    "name": "meatballhat",
    "email": "github+attrbagger-cookbook@modcloth.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 2436399,
  "downloads_count_revision": 1218129,
  "repository_url": "https://github.com/modcloth-cookbooks/attrbagger",
  "issues_url": "https://github.com/modcloth-cookbooks/attrbagger",
  "chef_source_url": "https://github.com/modcloth-cookbooks/attrbagger",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "`attrbagger` Cookbook\n=====================\n\nGets your attributes from your bags.\n\nSomewhat fancy.\n\n## Auto-loading\n\nInclusion of `recipe[attrbagger::default]` will result in the\n`keyspec_string => bag_cascade_string_array` pairs specified in the\n`node['attrbagger']['configs']` hash being walked and merged into the\nnode's attribute precedence level specified via each hash's\n`precedence_level` attribute.  An example role using attrbagger to load\napplication-specific configuration from a base, custom, and dynamic\nenvironment-specific data bag, as well as loading mail service\nconfiguration might look like this:\n\n``` ruby\nname 'attrbagger_example'\ndescription 'Attrbagger example role'\n\ndefault_attributes(\n  'deployment_env' => 'demo',\n  'attrbagger' => {\n    'configs' => {\n      'example_app' => {\n        'precedence_level' => 'override',\n        'bag_cascade' => [\n          'data_bag_item[applications::base::example_app]',\n          'data_bag_item[applications::example_app]',\n          \"data_bag_item[applications::config_<%= node['deployment_env'] %>::example_app]\"\n        ]\n      },\n      'services::mail' => {\n        'precedence_level' => 'default',\n        'bag_cascade' => [\n          'data_bag_item[services::mail]'\n        ]\n      }\n    }\n  },\n  'example_app' => {\n    'awesome' => true\n  },\n  'mail' => {\n    'host' => 'localhost',\n    'port' => 25\n  }\n)\n\nrun_list(\n  'recipe[attrbagger]',\n  # ... other stuff\n)\n```\n\nThis would result in the following actions:\n\n- Load `data_bag_item('applications', 'base')` and merge its `example_app`\nhash with `node.default['example_app']`, then assign the result to\n`node.override['example_app']`\n- Load `data_bag_item('applications', 'example_app')` and merge the\nentire data bag contents (except for builtin attributes like `id` and\n`chef_type`) with `node.default['example_app']`, then assign the result\nto `node.override['example_app']`.\n- Load `data_bag_item('applications', 'config_demo')` and merge its `example_app`\nhash with `node.default['example_app']`, then assign the result to\n`node.override['example_app']`\n- Load `data_bag_item('services', 'mail')` and merge the entire data bag\ncontents (except for builtin attributes like `id` and `chef_type`) with\n`node.default['services']['mail']`, then assign the result to\n`node.default['services']['mail']`.\n"
}