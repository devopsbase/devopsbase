{
  "name": "js Chef cookbook",
  "chef_cookbook_name": "js",
  "revision": "0.0.6",
  "uris": [
    "https://supermarket.chef.io/cookbooks/js",
    "https://supermarket.chef.io/cookbooks/js/download",
    "https://supermarket.chef.io/cookbooks/js/versions/0.0.6",
    "https://supermarket.chef.io/cookbooks/js/versions/0.0.6/download",
    "https://supermarket.chef.io/api/v1/cookbooks/js/versions/0.0.6",
    "https://supermarket.chef.io/api/v1/cookbooks/js",
    "https://supermarket.chef.io/api/v1/cookbooks/js/versions/0.0.6/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Type/Middleware/Runtime/Java",
    "Mode/Executable/Script/Chef Cookbook",
    "Style/Virtualization Level/Application",
    "Type/Devopsware/Build/JavaScript"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/js",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/js/versions/0.0.6/download",
  "deprecated": false,
  "created": "2012-04-19T10:21:01.000Z",
  "updated": "2013-07-12T12:45:50.000Z",
  "description": "light weight resource for installing java script applications/libraries",
  "maintainer": {
    "name": "melezhik",
    "email": "melezhik@gmail.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 2513527,
  "downloads_count_revision": 1256464,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# Description\nlight weight resource for installing java script applications/libraries\n\n# Requirements\n - tar\n - wget\n\n# Attributes\n\n# Usage\n\n    js_application 'my JavaScript application' do\n        tarball 'http://some.ftp.host/my-application.tar.gz'\n        install_base '/home/user/my-application/root/'\n        dirs [ { :source => 'www_files'  } ]\n        action :install\n    end\n\n## Resource parameters\n\n -  tarball - http url to tarball where distribution files where are placed\n -  cookbook - contrariwise one may store distribution files as cookbook's files in files/default/js-app directory.\n    so 'cookbook' is the name of the cookbook, see 'Installing from cookbook files' section.\n\n -  user - the owner for files to be installed, default value is nil\n -  group - the group for files to be installed, default value is nil \n\n -  install_base - installation root, default value is nil, so you need to define it or rely upon $PERL_MB_OPT \n    environment var, see \"Installing with default install_base\"\n    \n -  document_root - will be added to install_base, default value is 'htdocs', \n    so everything is installed into 'install_base/document_root/'\n\n -  dirs - list of directories to be installed, see \"Installing directories\" section\n -  files - list of files to be installed, see \"Installing files\" section\n -  templates - list of templates to be installed, see \"Installing templates\" section\n\n -  variables - hash of variables to get used in templates files and :destination template strings, \n    see \"Installing templates\" and \"Destination template strings\" sections \n        \n -  cleanup - whether to delete \"install_base/document_root\" directory before installing, default value is 'false'\n\n# Examples of usage\n\n## Installing with default install_base\n\none my choose not to define install_base explicitly and setup environment via perl local::lib tool:\n\n    eval $(perl -Mlocal::lib=/home/user/my-application/root/)\n    chef-client\n\nthis will result in installing into '/home/user/my-application/root/'\n\n## Installing from tarball\n\n    tarball 'ftp://some.ftp.host/my-application.tar.gz'    \n\nmy-application.tar.gz should contain 'my-application' directory - standard way of packaging\n\n## Installing from cookbook files\n\n    cookbook 'my-application'\n\ncookbook 'my-application' should contain files/default/js-app/ directory with files to install and is treated as chef remote_directory\nresource\n\n\n## Installing from local source\n\n    local_source_dir '/home/user/src/my-application/'\n    \nlocal_source_dir should be directory with files to install, this way of installing is used in cucumber tests\n\n\n## Installing files\n\n    files [\n        { :source => 'web_files/index.html', },\n        { :source => 'web_files/css/main.css', :destination => 'css/' }\n        { :source => 'web_files/img/picture.gif', :destination => 'images/my_picture.gif' }\n    ]\n\nthis will install files:\n\n  - 'web_files/index.html' as 'install_base/document_root/index.html'\n  - 'web_files/css/main.css' as 'install_base/document_root/css/main.css'\n  - 'web_files/img/picture.gif' as 'install_base/document_root/images/my_picture.gif'\n  \n\n## Installing directories\n\n    dirs [\n        { :source => 'web_files', },\n        { :source => 'css', :destination => 'css2/' }\n    ]\n\nthis will install directories content:\n\n  - 'web_files/' into 'install_base/document_root/'\n  - 'css/' into 'install_base/document_root/css2/'\n  \n## Installing templates\n\nin the way of installing templates are the files. The only difference variables gets interpolated into templates content:\n\n    templates [\n        { :source => 'templates/index.erb', :destination => 'index.html' }\n    ]\n    variables => {\n        :foo => 'foo-value'\n    }\n  \nthis will install template 'templates/index.erb' as 'install_base/document_root/index.html' and given that\ntemplate contains \"<%= @params[:foo] %>\" :foo variable gets interpolated with 'foo-value'\n\n\n## Destination template strings \n\n:destination keys in dir/files/templates lists could contain arbitrary numbers of %template% strings:\n\n    dirs [\n        { :source => 'css', :destination => 'css/%prefix%' }\n    ]\n\n    variables => {\n        :prefix => 'beta'\n    }\n\nthis will install directories content 'css/' into 'install_base/document_root/css/beta/'\n\nthe only exception is %version%  template string which result in a little bit different substitution:\n\n    dirs [\n        { :source => 'css', :destination => '%version%/css' }\n    ]\n\n    variables => {\n        :version => '0.0.1'\n    }\n\nthis will install directories content 'css/' into 'install_base/document_root/version-0.0.1/css/', also\nversion_dir variable will be passed into any templates\n\n\n## Changing document_root\n\nby default document_root is 'htdocs', you can change it with:\n\n    document_root 'public'\n    \n    \n"
}