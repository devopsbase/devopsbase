{
  "name": "sparrow Chef cookbook",
  "chef_cookbook_name": "sparrow",
  "revision": "0.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/sparrow",
    "https://supermarket.chef.io/cookbooks/sparrow/download",
    "https://supermarket.chef.io/cookbooks/sparrow/versions/0.1.0",
    "https://supermarket.chef.io/cookbooks/sparrow/versions/0.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow",
    "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Applications",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/sparrow",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/sparrow/versions/0.1.0/download",
  "deprecated": false,
  "created": "2016-01-14T12:32:42.321Z",
  "updated": "2016-06-07T13:50:49.224Z",
  "description": "Installs/Configures Sparrow tool chain and Sparrow plugins",
  "maintainer": {
    "name": "melezhik",
    "email": "melezhik@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 2330,
  "downloads_count_revision": 25,
  "repository_url": "https://github.com/melezhik/sparrow-cookbook",
  "issues_url": "https://github.com/melezhik/sparrow-cookbook/issues",
  "chef_source_url": "https://github.com/melezhik/sparrow-cookbook",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# NAME\n\nSparrow\n\n[![Build Status](https://travis-ci.org/melezhik/sparrow.svg)](https://travis-ci.org/melezhik/sparrow)\n \n# SYNOPSIS\n\nSparrow - multipurposes scenarios manager.\n\n# Install\n\n    $ sudo yum install git # only required for installing private plugins\n    $ sudo yum install curl\n    $ cpanm Sparrow\n\n# Sparrow plugins\n\nSparrow plugins are shareable multipurposes scenarios distributed via central repository - [SparrowHub](https://sparrowhub.org).\nEvery single plugin represents a various scripts to solve a specific task. Plugins are easily installed, configured and run on\ndedicated servers with the help of sparrow console client. \n\nThe notion of sparrow plugins is very close to the conception of CPAN modules in Perl or Ruby gems in Ruby.\nIt's just a small suites of scripts to solve a specific tasks.\n\nTo find a specific sparrow plugin say this:\n\n    $ sparrow plg search nginx\n\n\nTo install a sparrow plugin say this: \n\n    $ sparrow plg install nginx-check\n\nSee [sparrow command line API](#api) below.\n \n# Sparrow client\n\n`Sparrow` is a console client to search, install, setup and run various sparrow plugins. \nThink about it as of `cpan client` for CPAN modules or `gem client` for Ruby gems.\n\n# Sparrow basic entities\n\nSparrow architecture comprises of 4 basic parts:\n\n* Plugins\n* Tasks\n* Projects\n* Task Boxes\n\n\n# Tasks\n\n_Task_ is configurable sparrow plugin. Some plugins does not require configuration and could be run as is,\nbut many ones require some piece of input data. Thus sparrow task is a container for:\n\n* plugin\n* plugin configuration\n\nPlugin configuration is just a text file in one of 2 formats:\n\n* [Config::General](https://metacpan.org/pod/Config::General) format\n* YAML format\n\n# Projects\n\nProjects are _logical groups_ of sparrow tasks. It is convenient to split a whole list of tasks to different logical groups. \nLike some tasks for system related issues - f.e. checking [disk available space](https://sparrowhub.org/info/df-check) or inspecting [stale processes](https://sparrowhub.org/info/stale-proc-check), other tasks for\nweb services related issues - f.e. [checking nginx health](https://sparrowhub.org/info/nginx-check) or [monitoring http errors](https://sparrowhub.org/info/logdog) in web server logs, so on. \n\n# Task Boxes\n\nSparrow tasks boxes are YAML format files to describe sequential tasks to run. You could think about sparrow boxes as of multi tasks -\ntasks run sequentially.\n\nWARNING! This feature is not implemented yet.\n\n# API\n\nThis is a sparrow command line API documentation.\n\n## Projects API\n\nSparrow project is a logical group of sparrow tasks. To create a project use `sparrow project create` command:\n\n**sparrow project create $project\\_name**\n\nCommand examples:\n\n    # system level tasks\n    $ sparrow project create system\n\n    # web servers related tasks\n    $ sparrow project create web-servers\n\nTo get project information say this:\n\n**sparrow project show $project\\_name**\n\nFor example:\n\n    $ sparrow project show system\n\nTo get projects list say this:\n\n**sparrow project list**\n\nTo remove project data say this:\n\n**sparrow project remove $project\\_name**\n\nFor example:\n\n    $ sparrow project web-servers remove\n\nNOTE! This command will remove all project tasks as well!\n\n## Plugins API\n\nTo search available plugins use `sparrow plg search` command:\n\n**sparrow plg search $pattern**\n\nWhere $pattern is Perl regular expression pattern.\n\nExamples:\n\n  \n    # find ssh-* plugins\n    $ sparrow plg search ssh\n\n    [found sparrow plugins]\n    \n    type    name\n    \n    public  ssh-sudo-check\n    public  ssh-sudo-try\n    public  sshd-check\n    \n    # find package managers plugins\n    $ sparrow plg search package\n\n    [found sparrow plugins]\n    \n    type    name\n    \n    public  package-generic\n    \n\nTo list all available plugins say this:\n\n    $ sparrow plg search \n\n### Index API\n\nSparrow index is cached data used by sparrow to search plugins.\n\nIndex consists of two parts:\n\n* private plugins index , see [SPL file](#spl-file) section for details\n* public  plugins index, [PUBLIC PLUGINS](#public-plugins) section for details\n\nThere are two basic command to work with index:\n\n* **sparrow index summary**\n\nThis command will show timestamps and file locations for public and private index files.\n\n* **sparrow index update**\n\nThis command will fetch fresh index from SparrowHub and update local cached index.\n\nThis is very similar to what `cpan index reload` command does.\n\nYou need `sparrow index update` to get know about updates, changes of SparrowHub repository. For example\nwhen someone release new version of plugin.\n\nSee [public plugins](#public-plugins) section for details on sparrow public plugins and SparrowHub.\n\n### Installing sparrow plugins\n\n**sparrow plg install $plugin\\_name**\n\nFor example:\n\n    $ sparrow plg search  nginx        # to get know available nginx* plugins\n    $ sparrow plg install nginx-check  # to download and install a chosen plugin\n    $ sparrow plg install nginx-check --version 0.1.1 # install specific version\n\nTo see installed plugin list say this:\n\n    $ sparrow plg list\n\nTo get installed plugin information say this:\n\n**sparrow plg show $plugin\\_name**\n\nTo remove plugin installed use `sparrow plg remove` command:\n\n**sparrow plg remove $plugin\\_name**\n\nFor example:\n\n    $ sparrow plg remove df-check\n\n## Tasks API\n\n### Create tasks\n\nTo create a task use `sparrow task add` command:\n\n**sparrow task add $project\\_name $task\\_name $plugin\\_name**\n\nTasks always belong to projects, so to create a task you have to create a project first if not exists.\nTasks binds a plugin with configuration, so to create a task you have to install a plugin first.\n\nCommand examples:\n\n    $ sparrow project create system\n    $ sparrow plg install df-check\n    $ sparrow task add system disk-health df-check\n\n\n### Run plugins\n\nThere are two ways to run sparrow plugins:\n\n* as\\_is\n\n* as tasks\n\nThe first one is simplest as it does not require creating a task at all. If you don't want provide a specific plugin configuration,\nyou may run a plugin as is using  `sparrow plg run` command:\n\n\n**sparrow plg run [ options ]**\n\nFor example:\n\n    $ sparrow plg run df-check\n\nThe second way requires task creation and benefits in applying specific configuration for a plugin:\n\n**sparrow task run $project\\_name $task\\_name [ options ]**\n\nFor example:\n\n    $ sparrow task run system disk-health\n\nSee [configuring tasks](#configuring-tasks) section on how one can configure task plugin.\n\n### Setting runtime parameters \n\nIt is possible to pass _whatever_ runtime configuration parameters when running tasks or plugins:\n\n\n    $ sparrow plg run df-check --param threshold=60\n\n    $ sparrow task run system disk-health --param threshold=60\n\n    # or even nested and multi parameters!\n\n    $ sparrow plg run foo --param foo.bar.baz=60 --param id=100\n\nRuntime parameters override default parameters ones set in tasks configurations, see [configuring tasks](#configuring-task) section.\n\n### Setting outthentic parameters\n\nAs sparrow runs plugins with the help of [Outthentic scenarios runner](https://github.com/melezhik/outthentic#options) it accepts all\n_runner related_ parameters, check out [Outthentic](https://github.com/melezhik/outthentic#options) for details. Other parameters examples:\n\n\n    $ sparrow task run system disk-health --silent\n    $ sparrow task run system disk-health --debug 1 --prove '-Q'\n\n\n### Running tasks with cron\n\nWhen running tasks with cron it is handy only have an output if something goes wrong, \nf.e. if plugin failed for some reasons. Use `--cron` flag to enable this behavior:\n\n**sparrow task run $project\\_name $task\\_name --cron**\n\nRunning task with --cron flag suppress a normal output and only emit something in case of failures.\n\nExample:\n\n    $ sparrow task system disk-health --cron # pleas keep quite if disk space is ok\n\n### Configuring tasks\n\nTask configuration is a some input parameters consumed by plugin binded to task. \nUser should consult plugin documentation to get know a certain structure of configuration data to feed.\n\nSparrow supports two configuration formats:\n\n* Config::General \n* YAML\n\nConfig::General format is _default_ format for task configuration.  Use `task ini` command to set task configuration:\n\n**sparrow task ini $project\\_name $task\\_name**\n\nFor example:\n\n    $ export EDITOR=nano\n\n    $ sparrow task ini system disk-health\n\n    # disk used threshold in %\n    threshold = 80\n\nHaving this sparrow will save plugin configuration in the file related to task and will use it during task run:\n\n    $ sparrow task run system disk-health # the value of threshold is 80\n\nUser could copy existed configuration from file using `task load_ini` command:\n\n**sparrow task load_ini $project\\_name $task\\_name /path/to/ini/file**\n\nFor example:\n\n    $ sparrow task load_ini system disk-health /etc/plugins/disk.ini\n\nTo get task configuration use `sparrow task show` command:\n\n**sparrow task show $project\\_name $task\\_name**\n\nFor example:\n\n    $ sparrow task show system disk-health\n\n\nAlternative way to configure sparrow task is to load configuration from yaml file _during_ task run:\n\n    $ cat disk.yml\n\n    ---\n    threshold: 80\n\n    $ sparrow task run system disk --yaml disk.yml\n     \nWhile `sparrow task ini/load_ini` command saves task configuration and makes it persistent,\n`sparrow task run --yaml` command applies plugin configuration only for runtime and won't save it after plugin execution.\n\nFor common usage, when user runs tasks manually first approach is more convenient, \nwhile the second one is a _way automatic_, when tasks configurations are kept as yaml files\nand maintained out of sparrow scope and applied during task run.\n \n### Removing tasks\n\nUse this command to remove task from the project container:\n\n**sparrow task remove $project\\_name $task\\_name**\n\nExamples:\n\n    # remove task disk-health project system\n    $ sparrow task remove system disk-health\n\n# Sparrow plugins\n\nSparrow plugins are shareable multipurposes scenarios installed from remote sources.\n\nThere are two type of sparrow plugins:\n\n* public plugins are provided by [SparrowHub](https://sparrowhub.org/) community repository and considered as public access.\n\n* private plugins are provided by internal or external git repositories and _not necessary_ considered as public access.\n\nBoth public and private plugins are installed with help of sparrow client:\n\n**sparrow plg install plugin_name**\n\n## Public plugins\n\nThe public plugins features:\n\n* they are kept in a central place called [SparrowHub](https://sparrowhub.org/) - community plugins repository.\n\n* they are versioned so you may install various version of a one plugin.\n\n \n## Private plugins\n\nPrivate plugins are ones created by you and not supposed to be accessed publicly.\n\nThe private plugins features:\n\n* they are kept in arbitrary remote git repositories ( public or private ones )\n\n* they are not versioned, a simple \\`git clone/pull' command is executed to install/update a plugin\n\n* private plugins should be listed at sparrow plugin list file (SPL file)\n\n### SPL file\n\nSparrow plugin list is represented by text file placed at `\\~/sparrow.list'\n\nSPL file should contains lines in the following format:\n\n*$plugin\\_name $git\\_repo\\_url*\n\nWhere:\n\n* git\\_repo\\_url\n\nIs a remote git repository URL\n\n* plugin\\_name\n\nA name of your sparrow plugin, could be arbitrary name but see restriction notice concerning public plugin names.\n\nExample entries:\n\n    package-generic   https://github.com/melezhik/package-generic.git\n\nOnce you add a proper entries into SPL file you may list and install a private plugins:\n\n    $ sparrow plg show package-generic\n\n# Publishing public sparrow plugin to SparrowHub\n\nOn how to create a sparrow plugins please follow [Outthentic documentation](https://github.com/melezhik/outthentic).\n\nOnce a plugin is create you should do 4 simple steps:\n\n* get registered on SparrowHub and create a token\n* setup sparrowhub.json file\n* create a plugin meta file - sparrow.json\n* upload a plugin with the help of `sparrow plg upload` command\n\n## Get registered on SparrowHub\n\nGo to [https://sparrowhub.org/sign_up](https://sparrowhub.org/sign_up) and create an account\n\n## Generate a token\n\nLogin into SparrowHub, go to Profile page and hit \"Regenerate Token\" on  [https://sparrowhub.org/token](https://sparrowhub.org/token)  page.\n\n## Setup sparrowhub.json\n\nOnce your get you token, setup a sparrowhub credentials on the machine where you are going upload plugin from:\n\n    $ cat ~/sparrowhub.json\n\n    {\n        \"user\"  : \"melezhik\",\n        \"token\" : \"ADB4F4DC-9F3B-11E5-B394-D4E152C9AB83\"\n    }\n\nNOTE! Another way to provide SparrowHub credentials is to set `$sph_user` and `$sph_token` environment variables:\n\n    $ export sph_user=melezhik \n    $ export sph_token=ADB4F4DC-9F3B-11E5-B394-D4E152C9AB83\n\n\n## Create a plugin meta file sparrow.json\n\nSparrow.json file holds plugin  meta information required for plugin gets uploaded to SparrowHub.\n\nCreate sparrow.json file and place it in a plugin root directory:\n\n    {\n        \"version\": \"0.1.1\",\n        \"name\": \"df-check\",\n        \"description\" : \"elementary file system checks using df utility report \",\n        \"url\" : \"https://github.com/melezhik/df-check\"\n    }\n\nThis is the list of obligatory parameters you have to set:\n\n* version - perl version string.\n\nA detailed information concerning version syntax could be find here -\n[https://metacpan.org/pod/distribution/version/lib/version.pm](https://metacpan.org/pod/distribution/version/lib/version.pm)\n\n* name - plugin name.\n\nOnly symbols \\`a-zA-Z1-9_-.' are allowable in plugin name\n\nThis the list of optional parameters you may set as well:\n\n* url - an http URL for the site where one could find a detailed plugin information ( docs, source code, issues ... )\n\n* description - a short description of your plugin\n\n## Upload plugin\n\n* Install sparrow client on your machine\n    \n    $ cpanm Sparrow\n    \n* Go to directory where your plugin source code at and say:\n    \n    $ sparrow plg upload\n    \nThat's it!\n\n# Publishing private sparrow plugins\n\nThe process is almost the same as for public plugins, except you don't have to provide SparrowHub credentials\nand gets registered as you host your plugin at remote git repository. \n\nYou have to do 3 simple steps:\n\n* create a plugin and commit it into local git repository, plugin root directory should be repository root directory\n* create plugin meta file - sparrow.json and commit it into local git repository ( sparrow.json file is the same as for public plugins )\n* push your changes into remote git repository\n\n# Declaring dependencies\n\nThis is the way how one can declare dependencies for sparrow plugins:\n\n    +----------+----------+\n    | Language |  File    |\n    +----------+----------+\n    | Perl     | cpanfile |\n    | Ruby     | Gemfile  |\n    +----------+----------+\n\nYou should place a dependency file into a plugin root directory.\n\n \n# AUTHOR\n\n[Aleksei Melezhik](mailto:melezhik@gmail.com)\n\n# Home page\n\n[https://github.com/melezhik/sparrow](https://github.com/melezhik/sparrow)\n\n# Copyright\n\nCopyright 2015 Alexey Melezhik.\n\nThis program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.\n\n# See also\n\n* [Outthentic](https://github.com/melezhik/outthentic) - Multipurposes scenarios framework.\n\n# Thanks\n\nTo God as the One Who inspires me to do my job!\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/perl",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}