{
  "name": "s3_file Chef cookbook",
  "chef_cookbook_name": "s3_file",
  "revision": "2.4.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/s3_file",
    "https://supermarket.chef.io/cookbooks/s3_file/download",
    "https://supermarket.chef.io/cookbooks/s3_file/versions/2.4.0",
    "https://supermarket.chef.io/cookbooks/s3_file/versions/2.4.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.4.0",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file",
    "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.4.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/s3_file",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/s3_file/versions/2.4.0/download",
  "deprecated": false,
  "created": "2012-02-24T19:00:52.000Z",
  "updated": "2016-02-01T19:31:15.989Z",
  "description": "Installs/Configures s3_file LWRP",
  "maintainer": {
    "name": "adamsb6",
    "email": "brandon.adams@me.com"
  },
  "license": "MIT",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 25,
  "downloads_count": 26895378,
  "downloads_count_revision": 1237840,
  "repository_url": "https://github.com/adamsb6/s3_file/",
  "issues_url": "https://github.com/adamsb6/s3_file/",
  "chef_source_url": "https://github.com/adamsb6/s3_file/",
  "gatherbase_origin": "chef-supermarket",
  "readme": "= DESCRIPTION:\nAn LWRP that can be used to fetch files from S3.\n\nI created this LWRP to solve the chicken-and-egg problem of fetching files from S3 on the first Chef run on a newly provisioned machine. Ruby libraries that are installed on that first run are not available to Chef during the run, so I couldn't use a library like Fog to get what I needed from S3.\n\nThis LWRP has no dependencies beyond the Ruby standard library, so it can be used on the first run of Chef.\n\n= REQUIREMENTS:\nAn Amazon Web Services account and something in S3 to fetch.\n\nMulti-part S3 uploads do not put the MD5 of the content in the ETag header. If x-amz-meta-digest is provided in User-Defined Metadata on the S3 Object it is processed as if it were a Digest header (RFC 3230).\n\nThe MD5 of the local file will be checked against the MD5 from x-amz-meta-digest if it is present.  It not it will check against the ETag.  If there is no match or the local file is absent it will be downloaded.\n\nIf credentials are not provided, s3_file will attempt to use the first instance profile associated with the instance. See documentation at http://docs.aws.amazon.com/IAM/latest/UserGuide/instance-profiles.html for more on instance profiles.\n\n= USAGE:\ns3_file acts like other file resources.  The only supported action is :create, which is the default.\n\nAttribute Parameters:\n\n* `aws_access_key_id` - your AWS access key id. (optional)\n* `aws_secret_access_key` - your AWS secret access key. (optional)\n* `token` - token used for temporary IAM credentials. (optional)\n* `bucket` - the bucket to pull from.\n* `remote_path` - the S3 key to pull.\n* `owner` - the owner of the file. (optional)\n* `group` - the group owner of the file. (optional)\n* `mode` - the octal mode of the file. (optional)\n* `decryption_key` - the 32 character SHA256 key used to encrypt your S3 file. (optional)\n\nExample:\n\n    s3_file \"/tmp/somefile\" do\n    \tremote_path \"/my/s3/key\"\n    \tbucket \"my-s3-bucket\"\n    \taws_access_key_id \"mykeyid\"\n    \taws_secret_access_key \"mykey\"\n    \towner \"me\"\n    \tgroup \"mygroup\"\n    \tmode \"0644\"\n    \taction :create\n    \tdecryption_key \"my SHA256 digest key\"\n    \tdecrypted_file_checksum \"SHA256 hex digest of decrypted file\"\n\n    end\n\t\n= MD5 and Multi-Part Upload:\ns3_file compares the MD5 hash of a local file, if present, and the ETag header of the S3 object.  If they do not match, then the remote object will be downloaded and notifiations will be fired.\n\nIn most cases, the ETag of an S3 object will be identical to its MD5 hash.  However, if the file was uploaded to S3 via multi-part upload, then the ETag will be set to the MD5 hash of the first uploaded part.  In these cases, MD5 of the local file and remote object will never match.\n\nTo work around this issue, set an X-Amz-Meta-Digest tag on your S3 object with value set to `md5=MD5 of the entire object`.  s3_file will then use that value in place of the ETag value, and will skip downloading in case the MD5 of the local file matches the value of the X-Amz-Meta-Digest header.\n\n= USING ENCRYPTED S3 FILES:\ns3_file can decrypt files that have been encrypted using an AES-256-CBC cipher.  To use the decryption part of the resource, you must provide a decryption_key which can be generated by following the instructions below.  You can also include an optional decrypted_file_checksum which allows Chef to check to see if it needs to redownload the encrypted file.  Note that this checksum is different from the one in S3 because the file you compare to is already decrypted so a SHA256 checksum is used instead of the MD5. Instructions to generate the decrypted_file_checksum are below as well.\n\nTo use s3_file with encrypted files:\n\n1. Create a new key using `bin/s3_crypto -g > my_new_key`.\n1. Create a SHA256 hex digest checsksum of your source file by calling `bin/s3_crypto -c -i my_source_file [ -o my_checksum_file ]`.\n1. Encrypt your file using the new key by calling `bin/s3_crypto -e -k my_new_key -i my_source_file [ -o my_destination_file ]`.\n1. You can test decryption of your file using `bin/s3_crypto -d -k my_new_key -i my_encoded_file [ -o my_decoded_destionation ]`.\n1. Upload your encrypted file to S3 as normal.\n1. In the s3_file resource call, provide the string within `my_new_key` as the decryption_key of the resource.\n1. In the s3_file resource call, provide the string within `my_checksum_file` as the decrypted_file_checksum of the resource.\n\nNote that when you make the s3_file call, it is best if you make decryption_key a node property and provide it via an encrypted databag or pull the key from the environment.  It is not wise to check in your decryption key to your recipe.\n\nTo create your cipher, run `bin/s3_crypto -g > my_new_key` and a new 256-bit (32 hexidecimal characters) will be generated for you. Paste that key into a file for later use.  DO NOT include an endline in the file otherwise the encryption and decryption will fail.\n\nTry `bin/s3_crypto -g > my_new_key`.\n\nYou can use the utility `bin/s3_crypto` to encrypt files prior to uploading to S3 and to decrypt files prior to make sure the encryption is working.\n"
}