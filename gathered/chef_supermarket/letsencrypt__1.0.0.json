{
  "name": "letsencrypt Chef cookbook",
  "chef_cookbook_name": "letsencrypt",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/letsencrypt",
    "https://supermarket.chef.io/cookbooks/letsencrypt/download",
    "https://supermarket.chef.io/cookbooks/letsencrypt/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/letsencrypt/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt",
    "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Web Servers",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/letsencrypt",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/letsencrypt/versions/1.0.0/download",
  "deprecated": false,
  "created": "2015-12-11T15:33:20.385Z",
  "updated": "2016-08-15T11:42:02.956Z",
  "description": "Install free and trusted SSL/TLS certificates from Let's Encrypt",
  "maintainer": {
    "name": "thoutenbos",
    "email": "thoutenbos@schubergphilis.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 15,
  "downloads_count": 6055,
  "downloads_count_revision": 92,
  "repository_url": "https://github.com/schubergphilis/letsencrypt",
  "issues_url": "https://github.com/schubergphilis/letsencrypt/issues",
  "chef_source_url": "https://github.com/schubergphilis/letsencrypt",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "letsencrypt cookbook\n=============\n\n[![Build Status](https://travis-ci.org/schubergphilis/letsencrypt.svg)](https://travis-ci.org/schubergphilis/letsencrypt)\n[![Cookbook Version](https://img.shields.io/cookbook/v/letsencrypt.svg)](https://supermarket.chef.io/cookbooks/letsencrypt)\n\nAutomatically get/renew free and trusted certificates from Let's Encrypt (letsencrypt.org).\n\nAttributes\n----------\n### default\n* `node['letsencrypt']['contact']` - Contact information, default empty. Set to `mailto:your@email.com`.\n* `node['letsencrypt']['endpoint']` - ACME server endpoint, default `https://acme-v01.api.letsencrypt.org`. Set to `https://acme-staging.api.letsencrypt.org` if you want to use the letsencrypt staging environment and corresponding certificates.\n* `node['letsencrypt']['renew']` - Days before the certificate expires at which the certificate will be renewed, default `30`.\n* `node['letsencrypt']['source_ips']` - IP addresses used by letsencrypt to verify the TLS certificates, it will change over time. This attribute is for firewall purposes. Allow these IPs for HTTP (tcp/80).\n* `node['letsencrypt']['private_key']` - Private key content of registered account.\n\nRecipes\n-------\n### default\nInstalls the required acme-client rubygem.\n\nUsage\n-----\nUse the `letsencrypt_certificate` provider to request a certificate. The webserver for the domain for which you are requesting a certificate must be running on the local server. Currently only the http validation method is supported. Provide the path to your `wwwroot` for the specified domain.\n\n```ruby\nletsencrypt_certificate 'test.example.com' do\n  crt      '/etc/ssl/test.example.com.crt'\n  key      '/etc/ssl/test.example.com.key'\n  method   'http'\n  wwwroot  '/var/www'\nend\n```\n\nIn case your webserver needs an already existing certificate when installing a new server you will have a bootstrap problem. Webserver cannot start without certificate, but the certificate cannot be requested without the running webserver. To overcome this a self-signed certificate can be generated with the `letsencrypt_selfsigned` provider.\n\n```ruby\nletsencrypt_selfsigned 'test.example.com' do\n  crt     '/etc/ssl/test.example.com.crt'\n  key     '/etc/ssl/test.example.com.key'\nend\n```\n\nA working example can be found in the included `acme_client` test cookbook.\n\nProviders\n---------\n### certificate\n| Property         | Type    | Default  | Description                                            |\n|  ---             |  ---    |  ---     |  ---                                                   |\n| `cn`             | string  | _name_   | The common name for the certificate                    |\n| `alt_names`      | array   | []       | The common name for the certificate                    |\n| `crt`            | string  | nil      | File path to place the certificate                     |\n| `key`            | string  | nil      | File path to place the private key                     |\n| `chain`          | string  | nil      | File path to place the certificate chain               |\n| `fullchain`      | string  | nil      | File path to place the certificate including the chain |\n| `owner`          | string  | root     | Owner of the created files                             |\n| `group`          | string  | root     | Group of the created files                             |\n| `method`         | string  | http     | Validation method                                      |\n| `wwwroot`        | string  | /var/www | Path to the wwwroot of the domain                      |\n| `ignore_failure` | boolean | false    | Whether to continue chef run if issuance fails         |\n| `retries`        | integer | 0        | Number of times to catch exceptions and retry          |\n| `retry_delay`    | integer | 2        | Number of seconds to wait between retries              |\n\n### selfsigned\n| Property         | Type    | Default  | Description                                            |\n|  ---             |  ---    |  ---     |  ---                                                   |\n| `cn`             | string  | _name_   | The common name for the certificate                    |\n| `crt`            | string  | nil      | File path to place the certificate                     |\n| `key`            | string  | nil      | File path to place the private key                     |\n| `chain`          | string  | nil      | File path to place the certificate chain               |\n| `owner`          | string  | root     | Owner of the created files                             |\n| `group`          | string  | root     | Group of the created files                             |\n\nExample\n-------\nTo generate a certificate for an apache2 website you can use code like this:\n\n    # Set up contact information. Note the mailto: notation\n    node.set['letsencrypt']['contact'] = [ 'mailto:me@example.com' ] \n    # Real certificates please...\n    node.set['letsencrypt']['endpoint'] = 'https://acme-v01.api.letsencrypt.org' \n\n    site=\"example.com\"\n    sans=Array[ \"www.#{site}\" ]\n\n    # Set up your server here...\n\n    # Let's letsencrypt\n\n    # Generate a self-signed if we don't have a cert to prevent bootstrap problems\n    letsencrypt_selfsigned \"#{site}\" do\n        crt     \"/etc/httpd/ssl/#{site}.crt\"\n        key     \"/etc/httpd/ssl/#{site}.key\"\n        chain    \"/etc/httpd/ssl/#{site}.pem\"\n        owner   \"apache\"\n        group   \"apache\"\n        notifies :restart, \"service[apache2]\", :immediate\n        not_if do\n            # Only generate a self-signed cert if needed\n            ::File.exists?(\"/etc/httpd/ssl/#{site}.crt\")\n        end\n    end\n\n    # Get and auto-renew the certificate from letsencrypt\n    letsencrypt_certificate \"#{site}\" do\n        crt      \"/etc/httpd/ssl/#{site}.crt\"\n        key      \"/etc/httpd/ssl/#{site}.key\"\n        chain    \"/etc/httpd/ssl/#{site}.pem\"\n        method   \"http\"\n        wwwroot  \"/var/www/#{site}/htdocs/\"\n        notifies :restart, \"service[apache2]\"\n        alt_names sans\n    end\n\nTesting\n-------\nThe kitchen includes a `boulder` server to run the integration tests with, so testing can run locally without interaction with the online API's.\n\nContributing\n------------\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\nAuthors: Thijs Houtenbos <thoutenbos@schubergphilis.com>\n"
}