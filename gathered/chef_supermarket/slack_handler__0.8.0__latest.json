{
  "name": "slack_handler Chef cookbook",
  "chef_cookbook_name": "slack_handler",
  "revision": "0.8.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/slack_handler",
    "https://supermarket.chef.io/cookbooks/slack_handler/download",
    "https://supermarket.chef.io/cookbooks/slack_handler/versions/0.8.0",
    "https://supermarket.chef.io/cookbooks/slack_handler/versions/0.8.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.8.0",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.8.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/slack_handler",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.8.0/download",
  "deprecated": false,
  "created": "2015-03-25T19:38:27.750Z",
  "updated": "2016-09-16T06:49:40.928Z",
  "description": "Installs/Configures a Chef handler for reporting results to a Slack channel.",
  "maintainer": {
    "name": "rackops",
    "email": "rackspace-cookbooks@rackspace.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 8,
  "downloads_count": 310344,
  "downloads_count_revision": 1139,
  "repository_url": "https://github.com/rackspace-cookbooks/chef-slack_handler",
  "issues_url": "https://github.com/rackspace-cookbooks/chef-slack_handler/issues",
  "chef_source_url": "https://github.com/rackspace-cookbooks/chef-slack_handler",
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "[![Build Status](https://img.shields.io/circleci/project/rackspace-cookbooks/chef-slack_handler/master.svg)](https://circleci.com/gh/rackspace-cookbooks/chef-slack_handler)\n\n# Description\n\nA cookbook for a `chef_handler` that sends reports and exceptions to Slack.  There are two options for use:\n\n1. Providing a team name and api_key (Uses the [slackr gem](https://rubygems.org/gems/slackr))\n2. Providing a hash containing incoming webhook url(s)\n\nNOTE: If both methods are configured, webhooks will take precedence.\n\nThis cookbook was originally a fork of [dcm-ops/chef-slack_handler](https://github.com/dcm-ops/chef-slack_handler) by [Dan Ryan](dan.ryan@enstratius.com). We have taken over maintenance of this cookbook and released it to Supermarket.\n\n# Requirements\n\n* The `chef_handler` cookbook\n* An existing Slack incoming webhook(s)\n\n# Usage 1\n\n1. Create a new Slack webhook ([https://slack.com/services/new/incoming-webhook](https://slack.com/services/new/incoming-webhook))\n2. Set the `team` and `api_key` attributes above on the node/environment/etc.\n3. Include this `slack_handler` recipe.\n\n## Usage 1 Attributes\n\n* `node['chef_client']['handler']['slack']['team']` - Your Slack team name (<team-name>.slack.com)\n* `node['chef_client']['handler']['slack']['api_key']` - The API key of your Slack incoming webhook\n* `node['chef_client']['handler']['slack']['channel']` - The #channel to send the results, should include the hash\n\n### Optional attributes\n\n* `node['chef_client']['handler']['slack']['username']` - The username of the Slack message, defaults to the node name\n* `node['chef_client']['handler']['slack']['icon_url']` - The Slack message icon, defaults to nil\n* `node['chef_client']['handler']['slack']['icon_emoji']` - The Slack message icon defined by available `:emoji:`, defaults to nil\n* `node['chef_client']['handler']['slack']['timeout']` - Timeout in seconds for the Slack API call, defaults to 15\n* `node['chef_client']['handler']['slack']['fail_only']` - Only report when runs fail as opposed to every single occurrence, defaults to false\n* `node['chef_client']['handler']['slack']['send_start_message']` - Send a message when the run starts, defaults to false\n* `node['chef_client']['handler']['slack']['message_detail_level']` - The level of detail in the message. Valid options are `basic`, `elapsed` and `resources`, defaults to `basic`\n* `node['chef_client']['handler']['slack']['cookbook_detail_level']` - The level of detail about the cookbook used in the message. Valid options are `off` and `all`, defaults to `off`\n* `node['chef_client']['handler']['slack']['send_environment']` - Send the `node.chef_environment`, defaults to false\n* `node['chef_client']['handler']['slack']['send_organization']` - Send the `organization from /etc/chef/client.rb`, defaults to false\n\nNOTE: If both `icon_url` and `icon_emoji` are set, `icon_url` will take precedence.\n\n# Usage 2\n\n1. Create a new Slack webhook ([https://slack.com/services/new/incoming-webhook](https://slack.com/services/new/incoming-webhook))\n2. Set the attributes as specified below\n3. Include this `slack_handler` recipe.\n\n## Usage 2 Attributes\n\nPush as many webhooks as you wish onto the node config:\n\n```\n# Add `webhook1` URL\nnode['chef_client']['handler']['slack']['webhooks']['name'].push('webhook1')\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['url'] = 'https://hooks.slack.com/1/2/3'\n\n# Add `webhook2` URL\nnode['chef_client']['handler']['slack']['webhooks']['name'].push('webhook2')\nnode['chef_client']['handler']['slack']['webhooks']['webhook2']['url'] = 'https://hooks.slack.com/1/2/4'\n```\n\n### Optional attributes\n\nGlobal to all webhooks:\n\n```\n# Timeout in seconds for the Slack API call, defaults to 15\nnode['chef_client']['handler']['slack']['timeout'] = 30\n\n## Customizations for Slack WebHook config\n## See https://api.slack.com/incoming-webhooks#customizations_for_custom_integrations\n# The username of the Slack message, defaults to Slack WebHook config (i.e. nil)\nnode['chef_client']['handler']['slack']['username'] = 'Chef Bot'\n# Icon URL, defaults to Slack WebHook config (i.e. nil)\nnode['chef_client']['handler']['slack']['icon_url'] = 'https://avatars1.githubusercontent.com/u/29740'\n# Emoji for the Slack call, defaults to Slack WebHook config (i.e. nil)\nnode['chef_client']['handler']['slack']['icon_emoji'] = ':fork_and_knife:'\n\n# Only report when runs fail as opposed to every single occurrence, defaults to false\nnode['chef_client']['handler']['slack']['fail_only'] = true\n# Send a message when the run starts, defaults to false\nnode['chef_client']['handler']['slack']['send_start_message'] = true\n# The level of detail in the message. Valid options are 'basic', 'elapsed' and 'resources', defaults to 'basic'\nnode['chef_client']['handler']['slack']['message_detail_level'] = 'resources'\n# The level of detail about the cookbook used in the message. Valid options are 'off' and 'all', defaults to 'off'\nnode['chef_client']['handler']['slack']['cookbook_detail_level'] = 'all'\n# Send the node.chef_environment, defaults to false\nnode['chef_client']['handler']['slack']['send_environment'] = true\n# Send the organization from /etc/chef/client.rb, defaults to false\nnode['chef_client']['handler']['slack']['send_organization'] = true\n```\n\nNOTE: If both `icon_url` and `icon_emoji` are set, `icon_url` will take precedence.\n\nEach webhook may also override the `fail_only`, `message_detail_level` and `cookbook_detail_level` global optional attributes:\n\n```\n# Optional attributes for `webhook1`\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['fail_only'] = true\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['send_start_message'] = true\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['message_detail_level'] = 'elapsed'\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['cookbook_detail_level'] = 'all'\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['send_environment'] = true\nnode['chef_client']['handler']['slack']['webhooks']['webhook1']['send_organization'] = true\n```\n\n# Credits\n\nBorrowed everything from the `logstash_handler` cookbook [here](https://github.com/lusis/logstash_handler), who in turn borrowed quite a bit from the `graphite_handler` cookbook [here](https://github.com/realityforge-cookbooks/graphite_handler).\n\n# License\n\n`slack_handler` is provided under the Apache License 2.0. See `LICENSE` for details.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef_handler",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}