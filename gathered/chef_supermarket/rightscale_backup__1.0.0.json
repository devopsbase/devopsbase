{
  "name": "rightscale_backup Chef cookbook",
  "chef_cookbook_name": "rightscale_backup",
  "revision": "1.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/rightscale_backup",
    "https://supermarket.chef.io/cookbooks/rightscale_backup/download",
    "https://supermarket.chef.io/cookbooks/rightscale_backup/versions/1.0.0",
    "https://supermarket.chef.io/cookbooks/rightscale_backup/versions/1.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_backup/versions/1.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_backup",
    "https://supermarket.chef.io/api/v1/cookbooks/rightscale_backup/versions/1.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/rightscale_backup",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/rightscale_backup/versions/1.0.0/download",
  "deprecated": false,
  "created": "2014-02-24T15:34:17.000Z",
  "updated": "2015-04-01T19:02:34.241Z",
  "description": "Provides a resource to manage volume backups on any cloud RightScale supports.",
  "maintainer": {
    "name": "rightscale",
    "email": "cookbooks@rightscale.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 0,
  "downloads_count": 10561054,
  "downloads_count_revision": 1247932,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# rightscale_backup cookbook\n\n[![Build Status](https://travis-ci.org/rightscale-cookbooks/rightscale_backup.png?branch=master)](https://travis-ci.org/rightscale-cookbooks/rightscale_backup)\n\nThis cookbook provides a `rightscale_backup` resource that can create,\nrestore, and clean up block device storage (\"volume\") backups on numerous\npublic and private IaaS clouds.\n\nA backup represents a collection of volume snapshots taken at the same\ntime from one or more volumes attached to the server. A backup belongs\nto a series of backups, called the \"lineage\". Maintaining a lineage allows for\npoint-in-time data recovery using timestamps (even if the snapshots are taken from\ndifferent volumes). It also supports a more sophisticated algorithm for backup\nrotation/retention, as opposed to simple snapshot truncation.\n\nThe `rightscale_backup` resource uses RightScale's instance-facing API to\nmanage backups in the cloud.\n\n# Requirements\n\n* The system being configured must be a RightScale managed VM to have the\nrequired access to the RightScale API.\n* Chef 11 or higher.\n* Requires a RightScale account that is registered with all the cloud vendors\nyou expect to provision on (e.g. AWS, Rackspace, Openstack, CloudStack, GCE,\nand Azure).\n\n# Recipes\n\n## default\n\nThe default recipe installs the [right_api_client gem][RightAPI Client] to make\ninstance-facing RightScale API calls.\n\n# Resource/Providers\n\n## rightscale_backup\n\nA resource to create, restore, and cleanup backups in the cloud.\n\n### Action: create\n\nCreates a snapshot for every volume attached to the server. The newly created snapshot\nwill be tagged with the following\n\n<table>\n  <tr>\n    <th>Tag Name</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:lineage=&lt;string&gt;</tt></td>\n    <td>Lineage name of the backup</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:backup_id=&lt;UUID&gt;</tt></td>\n    <td>Unique identifier for a backup (all snapshots in a backup will share this ID)</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:committed=true</tt></td>\n    <td>The backup is committed</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:count=X</tt></td>\n    <td>Number of snapshots in the backup</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:device=&lt;device&gt;</tt></td>\n    <td>Device to which the volume was attached</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:position=Y</tt></td>\n    <td>Position of the snapshot in a backup</td>\n  </tr>\n  <tr>\n    <td><tt>rs_backup:timestamp=&lt;timestamp&gt;</tt></td>\n    <td>Time at which the backup was taken</td>\n  </tr>\n</table>\n\nA backup is considered a *perfect backup* when it is completed (all the snapshots are\ncompleted), committed (all the snapshots are committed), and the number of snapshots\nit found is equal to the number in the \"rs_backup:count=\" tag on each of the snapshots.\n\n#### Attributes\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Description</th>\n    <th>Default</th>\n    <th>Required</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the backup to be created. All snapshots in the backup will be created\nwith this name.</td>\n    <td></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>lineage</td>\n    <td>Lineage in which the backup must belong</td>\n    <td></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description for the backup</td>\n    <td></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>from_master</td>\n    <td>Set this to 'true' to create a <tt>rs_backup:from_master=true</tt> true on the\nsnapshots which can be used in filtering</td>\n    <td><tt>false</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>timeout</td>\n    <td>Throws an error if the volume could not be backed up in the cloud within this\ntimeout (in minutes)</td>\n    <td><tt>15</tt></td>\n    <td>No</td>\n  </tr>\n</table>\n\n### Action: restore\n\nRestores a backup from the cloud. This will\n\n* create a volume for each snapshot in the backup\n* attach all the created volumes to the server at the device specified in the snapshot\n(obtained from `rs_backup:device=`). NOTE: If the devices are already being used on the\nserver, the restore will fail.\n\n#### Attributes\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Description</th>\n    <th>Default</th>\n    <th>Required</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the backup to be restored</td>\n    <td></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>lineage</td>\n    <td>Lineage in which the backup belongs</td>\n    <td></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description to be set for the volumes created from the snapshots in the\nbackup. If description is not given, the description in the snapshots will be used\nfor the newly created volumes.</td>\n    <td></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>timestamp</td>\n    <td>The timestamp on the backup. The latest <em>perfect backup</em> on or before\nthis timestamp in the specified lineage will be picked for restore. This attribute\ncan be set using the Time class or the seconds since UNIX epoch (Integer)</td>\n    <td></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>size</td>\n    <td>All volumes created from the snapshot will be of this size. NOTE: This size\nmust be equal to or larger than the size of the snapshots in the backup.\nWARNING: Some clouds do not support volume resizing and throws an exception when we\npass this parameter. On clouds that supports resizing (currently only tested in EC2),\nthe volumes will be created with this size instead of the original backup's size.</td>\n    <td></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>timeout</td>\n    <td>Throws an error if the volume could not be restored within this timeout (in minutes)</td>\n    <td><tt>15</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Optional parameters hash. For example, <tt>:volume_type</tt> on Rackspace Open Clouds\ncan be specified to restore the volume as an 'SATA' or 'SSD' device.</td>\n    <td></td>\n    <td>No</td>\n  </tr>\n</table>\n\n### Action: cleanup\n\nDeletes old backups from the cloud. For all the *perfect backups*, the constraints of\nkeep_last, dailies, weeklies, monthlies, and yearlies attributes will be applied\n(See 'Parameters' section below). The algorithm for choosing the backups to keep is\nenforced by the RightScale API which is the union of those set of backups if each of\nthose conditions are applied independently.\n\n```\nbackups_to_keep = backups_to_keep(keep_last) U backups_to_keep(dailies) U\nbackups_to_keep(weeklies) U backups_to_keep(monthlies) U backups_to_keep(yearlies)\n```\n\nAn *imperfect backup* is picked up for clean up only if there exists a perfect backup\nwith a newer timestamp. No constraints will be applied on *imperfect backups* and all\nof them will be cleaned up.\n\n#### Attributes\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Description</th>\n    <th>Default</th>\n    <th>Required</th>\n  </tr>\n  <tr>\n    <td>lineage</td>\n    <td>Lineage in which the backups belong</td>\n    <td></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>keep_last</td>\n    <td>Number of backups to keep from deleting</td>\n    <td><tt>60</tt></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <td>dailies</td>\n    <td>Number of daily backups to keep</td>\n    <td><tt>1</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>monthlies</td>\n    <td>Number of monthly backups to keep</td>\n    <td><tt>12</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>weeklies</td>\n    <td>Number of weekly backups to keep</td>\n    <td><tt>4</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>yearlies</td>\n    <td>Number of yearly backups to keep</td>\n    <td><tt>2</tt></td>\n    <td>No</td>\n  </tr>\n  <tr>\n    <td>timeout</td>\n    <td>Throws an error if the volume could not be cleaned up in the cloud within this\ntimeout (in minutes)</td>\n    <td><tt>15</tt></td>\n    <td>No</td>\n  </tr>\n</table>\n\n# Usage\n\nThis resource only handles manipulating volume backups. Managing volumes is\nhandled by the [rightscale_volume][RightScale Volume] resource.\n\n**Example 1:** Creates and attaches 2 volumes using the [rightscale_volume][RightScale Volume] resource,\nand then takes a backup of the volumes using the `rightscale_backup` resource.\n\n```ruby\n# Creates and attaches two 1 GB volumes\n2.times do |count|\n  rightscale_volume \"db_data_volume_#{count}\" do\n    size 1\n    action [:create, :attach]\n  end\nend\n\n# Backs up the two volumes to a 'db_backup_lineage' lineage\nrightscale_backup \"db_data_volume_backup\" do\n  lineage 'db_backup_lineage'\n  action :create\nend\n```\n\n**Example 2:** Restores the backup (created in Example 1) to the server\n\n```ruby\n# Restores the latest backup in the 'db_backup_lineage' taken on or before\n# the UNIX timestamp '1391118125'\nrightscale_backup \"db_data_volume_backup\" do\n  lineage 'db_backup_lineage'\n  timestamp 1391118125\n  action :restore\nend\n```\n\n**Example 3:** Deletes old backups\n\n```ruby\n# Deletes old backups from the 'db_backup_lineage' lineage. After this action\n# there will be only 2 backups in the cloud.\nrightscale_backup \"db_data_volume_backup\" do\n  lineage 'db_backup_lineage'\n  keep_last 2\n  monthlies 1\n  yearlies 1\n  dailies 1\n  weeklies 1\n  action :cleanup\nend\n```\n\n[RightAPI Client]: https://rubygems.org/gems/right_api_client\n[RightScale Volume]: http://community.opscode.com/cookbooks/rightscale_volume\n\n# Author\n\nAuthor:: RightScale, Inc. (<cookbooks@rightscale.com>)\n",
  "chef_recipes": {
    "rightscale_backup::default": "Default recipe for installing required packages/gems."
  }
}