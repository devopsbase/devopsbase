{
  "name": "keepalived Chef cookbook",
  "chef_cookbook_name": "keepalived",
  "revision": "2.1.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/keepalived",
    "https://supermarket.chef.io/cookbooks/keepalived/download",
    "https://supermarket.chef.io/cookbooks/keepalived/versions/2.1.1",
    "https://supermarket.chef.io/cookbooks/keepalived/versions/2.1.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/keepalived/versions/2.1.1",
    "https://supermarket.chef.io/api/v1/cookbooks/keepalived",
    "https://supermarket.chef.io/api/v1/cookbooks/keepalived/versions/2.1.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/keepalived",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/keepalived/versions/2.1.1/download",
  "deprecated": false,
  "created": "2009-10-25T23:51:58.000Z",
  "updated": "2016-09-21T15:08:46.529Z",
  "description": "Installs and configures keepalived",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 11,
  "downloads_count": 7568922,
  "downloads_count_revision": 979,
  "repository_url": "https://github.com/chef-cookbooks/keepalived",
  "issues_url": "https://github.com/chef-cookbooks/keepalived/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/keepalived",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# keepalived Cookbook\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/keepalived.svg?branch=master)](http://travis-ci.org/chef-cookbooks/keepalived) [![Cookbook Version](https://img.shields.io/cookbook/v/keepalived.svg)](https://supermarket.chef.io/cookbooks/keepalived)\n\nInstalls keepalived and generates the configuration files, using resource-driven configuration.\n\n## Requirements\n\n### Platforms\n\n- Debian/Ubuntu\n- RHEL/CentOS/Scientific/Amazon/Oracle\n\n### Chef\n\n- Chef 11+\n\n### Cookbooks\n\n- none\n\n## Recommended Background Reading\n\n- `man:keepalived(8)`\n- `man:keepalived.conf(5)`\n- [Keepalived Documentation](https://github.com/acassen/keepalived/tree/master/doc)\n\n## Usage\n\n### Recipes\n\n- `keepalived::default`: loads the install, configure, and service recipes\n- `keepalived::install`: installs the `keepalived` package\n- `keepalived::configure`: configures `/etc/keepalived/keepalived.conf` for inclusion of `keepalived_*` resources\n- `keepalived::service`: enables/starts the `keepalived` service, sets a restart subscription to `/etc/keepalived/keepalived.conf`.\n\n### Attributes\n\n- `default['keepalived']['package']`: specify package name to install (e.g. 'keepalived/trusty-backports').\n- `default['keepalived']['daemon_args']`: array of args to override default daemon cli args with\n- `default['keepalived']['daemon_args_env_var']`: name of env var used by init script to pass in the daemon cli arguments\n- `default['keepalived']['defaults_path']`: path of file to write daemon cli arg env var to (e.g. \"/etc/default/keepalived\")\n\n## Resource Usage\n\nThis cookbook provides a set of resources for managing keepalived via LWRPs. These resources rely on support for the `include` directive, supported since keepalived version `1.1.15`, released in Sept, 2007. Please confirm your vendor package supports this before attempting to use these resources.\n\n### Generic Config\n\nThe `keepalived_config` resource is the base resource on which other resources are built. It's not generally intended for direct consumption, but can be used in a pinch to provide a custom configuration if needed via the content property.\n\nExample:\n\n```ruby\nkeepalived_config 'linkbeat_use_polling' do\n  content \"linkbeat_use_polling\"\nend\n```\n\nSupported properties:\n\nProperty | Type   | Default\n-------- | ------ | --------\ncontent  | String | #to_conf\npath     | String | dynamically computed\n\n### Global Defs\n\nThe `keepalived_global_defs` resource is a singleton resource, which can be used to manage configuration within the `global_defs` section of keepalived.conf.\n\nExample:\n\n```ruby\nkeepalived_global_defs 'global_defs' do\n  notification_email %w( sys-admin@example.com net-admin@example.com )\n  notification_email_from \"keepalived@#{node.name}\"\n  router_id node.name\n  enable_traps true\nend\n```\n\nSupported properties:\n\nProperty                        | Type                  | Default\n------------------------------- | --------------------- | -------\nnotification_email              | Array                 | nil\nnotification_email_from         | String                | nil\nsmtp_server                     | String                | nil\nsmtp_helo_name                  | String                | nil\nsmtp_connect_timeout            | Integer               | nil\nrouter_id                       | String                | nil\nvrrp_mcast_group4               | String                | nil\nvrrp_mcast_group6               | String                | nil\nvrrp_garp_master_delay          | Integer               | nil\nvrrp_garp_master_repeat         | Integer               | nil\nvrrp_garp_master_refresh        | Integer               | nil\nvrrp_garp_master_refresh_repeat | Integer               | nil\nvrrp_version                    | Integer (2 or 3)      | nil\nvrrp_iptables                   | String                | nil\nvrrp_check_unicast_src          | String                | nil\nvrrp_strict                     | TrueClass, FalseClass | nil\nvrrp_priority                   | Integer -20->20       | nil\nchecker_priority                | Integer -20->20       | nil\nvrrp_no_swap                    | TrueClass, FalseClass | nil\nchecker_no_swap                 | TrueClass, FalseClass | nil\nsnmp_socket                     | String                | nil\nenable_snmp_keepalived          | TrueClass, FalseClass | nil\nenable_snmp_checker             | TrueClass, FalseClass | nil\nenable_snmp_rfc                 | TrueClass, FalseClass | nil\nenable_snmp_rfcv2               | TrueClass, FalseClass | nil\nenable_snmp_rfcv3               | TrueClass, FalseClass | nil\nenable_traps                    | TrueClass, FalseClass | nil\n\n### Static IP Addresses\n\nThe `keepalived_static_ipaddress` resource is a singleton resource, which can be used to manage configuration within the `static_ipaddress` section of keepalived.conf\n\nExample:\n\n```ruby\nkeepalived_static_ipaddress 'static_ipaddress' do\n  addresses [\n    '192.168.1.2/24 dev eth0 scope global',\n    '192.168.1.3/24 dev eth0 scope global'\n  ]\nend\n```\n\nSupported properties:\n\nProperty  | Type  | Default\n--------- | ----- | -------\naddresses | Array | nil\n\n### Static Routes\n\nThe `keepalived_static_routes` resource is a singleton resource, which can be used to manage configuration within the `static_routes` section of keepalived.conf.\n\nExample:\n\n```ruby\nkeepalived_static_routes 'static_routes' do\n  routes [\n    '192.168.2.0/24 via 192.168.1.100 dev eth0',\n    '192.168.3.0/24 via 192.168.1.100 dev eth0'\n  ]\nend\n```\n\nSupported properties:\n\nProperty | Type  | Default\n-------- | ----- | -------\nroutes   | Array | nil\n\n### VRRP Sync Groups\n\nThe `keepalived_vrrp_sync_group` resource can be used to configure VRRP Sync Groups (groups of resources that fail over together).\n\nExample:\n\n```ruby\nkeepalived_vrrp_sync_group 'VG_1' do\n  group %w( inside_network outside_network )\n  notify '/usr/local/bin/keepalived-notify.sh'\n  smtp_alert true\nend\n```\n\nSupported properties:\n\nProperty      | Type                 | Default\n------------- | -------------------- | -------\ngroup         | Array                | nil\nnotify_master | String               | nil\nnotify_backup | String               | nil\nnotify_fault  | String               | nil\nnotify        | String               | nil\nsmtp_alert    | TrueClass,FalseClass | nil\n\n### VRRP Track Scripts\n\nThe `keepalived_vrrp_script` resource can be used to configure a track script via a `vrrp_script` configuration block.\n\nExample:\n\n```ruby\nkeepalived_vrrp_script 'chk_haproxy' do\n  interval 2\n  weight 50\n  script '\"/usr/bin/killall -0 haproxy\"'\nend\n```\n\nSupported properties:\n\nProperty | Type    | Default\n-------- | ------- | -------\nscript   | String  | nil\ninterval | Integer | nil\ntimeout  | Integer | nil\nweight   | Integer | nil\nfall     | Integer | nil\nrise     | Integer | nil\n\n### VRRP Instances\n\nThe `keepalived_vrrp_instance` resource can be used to configure a VRRP instance with keepalived via a `vrrp_instance` configuration block.\n\nExample:\n\n```ruby\nkeepalived_vrrp_instance 'inside_network' do\n  state 'MASTER'\n  interface node['network']['default_interface']\n  virtual_router_id 51\n  priority 101\n  authentication auth_type: 'PASS', auth_pass: 'buttz'\n  virtual_ipaddress %w( 192.168.1.1 )\n  notify '/usr/local/bin/keepalived-notify.sh'\n  smtp_alert true\nend\n```\n\nSupported properties:\n\nProperty                   | Type                                            | Default\n-------------------------- | ----------------------------------------------- | -------\nnotify_master              | String                                          | nil\nnotify_backup              | String                                          | nil\nnotify_fault               | String                                          | nil\nnotify                     | String                                          | nil\nnotify_stop                | String                                          | nil\nsmtp_alert                 | TrueClass,FalseClass                            | nil\nstate                      | String (either MASTER or BACKUP)                | nil\ninterface                  | String                                          | nil\nuse_vmac                   | String                                          | nil\nvmac_xmit_base             | TrueClass,FalseClass                            | nil\ndont_track_primary         | TrueClass,FalseClass                            | nil\ntrack_interface            | Array                                           | nil\nmcast_src_ip               | String                                          | nil\nunicast_src_ip             | String                                          | nil\nunicast_peer               | String                                          | nil\nlvs_sync_daemon_interface  | String                                          | nil\ngarp_master_delay          | Integer                                         | nil\ngarp_master_repeat         | Integer                                         | nil\ngarp_master_refresh        | Integer                                         | nil\ngarp_master_refresh_repeat | Integer                                         | nil\nvirtual_router_id          | Integer (0-255)                                 | nil\npriority                   | Integer (0-255)                                 | 100\nadvert_int                 | Integer                                         | nil\nauthentication             | Hash, required, keys of: :auth_type, :auth_pass | nil\nvirtual_ipaddress          | Array                                           | nil\nvirtual_ipaddress_excluded | Array                                           | nil\nvirtual_routes             | Array                                           | nil\nvirtual_rules              | Array                                           | nil\ntrack_script               | Array                                           | nil\nnopreempt                  | TrueClass,FalseClass                            | nil\npreempt_delay              | Integer (0-1000)                                | nil\nstrict_mode                | String                                          | nil\nversion                    | Integer                                         | nil\nnative_ipv6                | TrueClass, FalseClass                           | nil\ndebug                      | TrueClass, FalseClass                           | nil\n\n### Virtual Server Groups\n\nThe `keepalived_virtual_server_group` resource can be used to configure a virtual server group via a `virtual_server_group` configuration block.\n\nExample:\n\n```ruby\nkeepalived_virtual_server_group 'web_frontend' do\n  vips [\n    '192.168.1.1-20 80',\n    '192.168.2.1-20 80'\n  ]\nend\n```\n\nSupported properties:\n\nProperty | Type              | Default\n-------- | ----------------- | -------\nvips     | Array of Strings  | nil\nfwmarks  | Array of Integers | nil\n\n### Virtual Servers\n\nThe `keepalived_virtual_server` resource can be used to configure a virtual server via `virtual_server` configuration blocks.\n\nAlong with the officially supported directives, this resource takes a list of include paths under the `real_servers` property, which can be used to load `real_server` sections, whether configured with the `keepalived_real_server` resource or not. If using the `keepalived_real_server` resource, you can use the `path` method on the real_server resource to auto-generate the `real_servers` array from your Chef run_context, as shown below.\n\nExample:\n\n```ruby\nfrontends = search(:node, 'role:frontend')\n\nfrontends.each do |fe|\n  keepalived_real_server fe.name do\n    ipaddress fe['ipaddress']\n    port 80\n    weight 5\n  end\nend\n\nserver_paths = frontends.map do |fe|\n  resources(keepalived_real_server: fe.name).path\nend\n\nkeepalived_virtual_server '192.168.1.5 80' do\n  lb_algo 'rr'\n  lb_kind 'NAT'\n  virtualhost 'www.example.com'\n  sorry_server '127.0.0.1 8080'\n  real_servers server_paths.to_a\nend\n```\n\nSupported properties:\n\nProperty                | Type                                     | Default\n----------------------- | ---------------------------------------- | -------\nip_family               | String (inet or inet6)                   | nil\ndelay_loop              | Integer                                  | nil\nlvs_sched               | String (one of rr,wrr,lc,wlc,lblc,sh,dh) | nil\nlb_algo                 | String (one of rr,wrr,lc,wlc,lblc,sh,dh) | nil\nops                     | TrueClass,FalseClass                     | nil\nlb_kind                 | String (one of NAT,DR,TUN)               | nil\nlvs_method              | String (one of NAT,DR,TUN)               | nil\npersistence_engine      | String                                   | nil\npersistence_timeout     | Integer                                  | nil\npersistence_granularity | String                                   | nil\nprotocol                | String (TCP,UDP,SCTP)                    | nil\nha_suspend              | TrueClass,FalseClass                     | nil\nvirtualhost             | String                                   | nil\nalpha                   | TrueClass,FalseClass                     | nil\nomega                   | TrueClass,FalseClass                     | nil\nquorum                  | Integer                                  | nil\nhysteresis              | Integer                                  | nil\nquorum_up               | String                                   | nil\nquorum_down             | String                                   | nil\nsorry_server            | String                                   | nil\nsorry_server_inhibit    | TrueClass,FalseClass                     | nil\nreal_servers            | required, Array of Strings               | nil\n\n### Real Servers\n\nThe `keepalived_real_server` resource can be used to configure real_server blocks within a `virtual_server`. They are managed as separate configuration files, and injected into the `virtual_server` block via `include` directives configured via the `real_servers` property of the `keepalived_virtual_server` resource.\n\nA `keepalived_real_server` can be associated with a healthcheck via an `include` of a file containing a check sub-block using the `healthcheck` property. If using any of the health check resources provided by this cookbook, you can use the `path` method on the associated resource to automatically get the appropriate configuration path, as shown below.\n\nExample:\n\n```ruby\nkeepalived_http_get 'health_check_url' do\n  nb_get_retry 3\n  url path: '/health_check', status_code: 200\nend\n\nkeepalived_real_server 'fe01' do\n  ipaddress '192.168.1.1'\n  port 80\n  weight 5\n  inhibit_on_failure true\n  healthcheck resources(keepalived_http_get: 'health_check_url').path\nend\n```\n\nSupported properties:\n\nProperty           | Type                        | Default\n------------------ | --------------------------- | -------\nipaddress          | String (required)           | nil\nport               | Integer (required, 0-65535) | nil\nhealthcheck        | String                      | nil\nweight             | Integer                     | nil\ninhibit_on_failure | TrueClass,FalseClass        | nil\nnotify_up          | String                      | nil\nnotify_down        | String                      | nil\n\n### Health Checks\n\nThis cookbook provides a set of resources for configuring healthchecker sub-blocks within real_server sub-blocks of a virtual_server definition.\n\nIf you're using the `keepalived_real_server` resource, healthcheckers can be loaded using the `healthcheck` property of the `keepalived_real_server` resource along with the `path` method of the healthcheck resource, as shown in the documentation for the `keepalived_real_server` resource.\n\n#### HTTP_GET\n\nThe `keepalived_http_get` resource can be used to configure a `HTTP_GET` healthchecker.\n\nExample:\n\n```ruby\nkeepalived_http_get 'http_check' do\n  warmup 5\n  nb_get_retry 3\n  delay_before_retry 5\n  url path: '/health_check', status_code: 200\nend\n```\n\nSupported properties:\n\nProperty           | Type                                                                 | Default\n------------------ | -------------------------------------------------------------------- | -------\nconnect_ip         | String                                                               | nil\nconnect_port       | Integer (0-65535)                                                    | nil\nbindto             | String                                                               | nil\nbind_port          | Integer (0-65535)                                                    | nil\nconnect_timeout    | Integer                                                              | nil\nfwmark             | Integer                                                              | nil\nnb_get_retry       | Integer                                                              | nil\ndelay_before_retry | Integer                                                              | nil\nwarmup             | Integer                                                              | nil\nurl                | Hash, required, w/ keys of :path, :status_code, and optional :digest | nil\n\n#### SSL_GET\n\nThe `keepalived_ssl_get` resource can be used to configure an `SSL_GET` healthchecker.\n\nExample:\n\n```ruby\nkeepalived_ssl_get 'https_check' do\n  warmup 5\n  nb_get_retry 3\n  delay_before_retry 5\n  url path: '/health_check', status_code: 200\nend\n```\n\nSupported properties:\n\nProperty           | Type                                                                 | Default\n------------------ | -------------------------------------------------------------------- | -------\nconnect_ip         | String                                                               | nil\nconnect_port       | Integer (0-65535)                                                    | nil\nbindto             | String                                                               | nil\nbind_port          | Integer (0-65535)                                                    | nil\nconnect_timeout    | Integer                                                              | nil\nfwmark             | Integer                                                              | nil\nnb_get_retry       | Integer                                                              | nil\ndelay_before_retry | Integer                                                              | nil\nwarmup             | Integer                                                              | nil\nurl                | Hash, required, w/ keys of :path, :status_code, and optional :digest | nil\n\n#### TCP_CHECK\n\nThe `keepalived_tcp_check` resource can be used to configure a `TCP_CHECK` healthecker.\n\nExample:\n\n```ruby\nkeepalived_tcp_check 'redis' do\n  connect_port 6379\n  connect_timeout 30\nend\n```\n\nSupported properties:\n\nProperty        | Type              | Default\n--------------- | ----------------- | -------\nconnect_ip      | String            | nil\nconnect_port    | Integer (0-65535) | nil\nbindto          | String            | nil\nbind_port       | Integer (0-65535) | nil\nconnect_timeout | Integer           | nil\nfwmark          | Integer           | nil\n\n#### SMTP_CHECK\n\nThe `keepalived_smtp_check` resource can be used to configure a `SMTP_CHECK` healthchecker.\n\nExample:\n\n```ruby\nkeepalived_smtp_check 'postfix' do\n  helo_name node.name\n  host connect_timeout: 30\nend\n```\n\nSupported properties:\n\nProperty           | Type                                                                                     | Default\n------------------ | ---------------------------------------------------------------------------------------- | -------\nconnect_timeout    | Integer                                                                                  | nil\ndelay_before_retry | nil\nhelo_name          | String                                                                                   | nil\nwarmup             | Integer                                                                                  | nil\nhost               | Hash, keys of :connect_ip, :connect_port, :bindto, :bind_port, :connect_timeout, :fwmark | nil\n\n#### MISC_CHECK\n\nThe `keepalived_misc_check` resource can be used to configure a `MISC_CHECK` healthchecker.\n\nExample:\n\n```ruby\nkeepalived_misc_check 'ping-check' do\n  misc_path '\"/usr/bin/ping -c 3\"'\n  misc_timeout 5\n  warmup 5\nend\n```\n\nSupported properties:\n\nProperty     | Type                  | Default\n------------ | --------------------- | -------\nmisc_path    | String                | nil\nmisc_timeout | Integer               | nil\nwarmup       | Integer               | nil\nmisc_dynamic | TrueClass, FalseClass | nil\n\n## License & Authors\n\n**Author:** Cookbook Engineering Team ([cookbooks@chef.io](mailto:cookbooks@chef.io))\n\n**Copyright:** 2009-2016, Chef Software, Inc.\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "scientific",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "oracle",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "amazon",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ],
  "chef_recipes": {
    "keepalived::default": "Install, configure, and run keepalived",
    "keepalived::install": "Install keepalived package",
    "keepalived::configure": "Configure keepalived via attributes",
    "keepalived::service": "Enable, start the keepalived service"
  }
}