{
  "name": "slack_handler Chef cookbook",
  "chef_cookbook_name": "slack_handler",
  "revision": "0.3.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/slack_handler",
    "https://supermarket.chef.io/cookbooks/slack_handler/download",
    "https://supermarket.chef.io/cookbooks/slack_handler/versions/0.3.0",
    "https://supermarket.chef.io/cookbooks/slack_handler/versions/0.3.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.3.0",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler",
    "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.3.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/slack_handler",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/slack_handler/versions/0.3.0/download",
  "deprecated": false,
  "created": "2015-03-25T19:38:27.750Z",
  "updated": "2016-09-16T06:49:40.928Z",
  "description": "Installs/Configures a Chef handler for reporting results to a Slack channel.",
  "maintainer": {
    "name": "rackops",
    "email": "dan.ryan@enstratius.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 8,
  "downloads_count": 310344,
  "downloads_count_revision": 1223,
  "repository_url": "https://github.com/rackspace-cookbooks/chef-slack_handler",
  "issues_url": "https://github.com/rackspace-cookbooks/chef-slack_handler/issues",
  "chef_source_url": "https://github.com/rackspace-cookbooks/chef-slack_handler",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Description\n===========\n[![Build Status](https://img.shields.io/circleci/project/rackspace-cookbooks/chef-slack_handler/master.svg)](https://circleci.com/gh/rackspace-cookbooks/chef-slack_handler)\n\nA cookbook for a `chef_handler` that sends reports and exceptions to Slack.  There are two options for use:\n1. Providing a team name and api_key (Uses the slackr gem)\n2. Providing a hash containing incoming webhook url(s)\n\nThis cookbook was originally a fork of [dcm-ops/chef-slack_handler](https://github.com/dcm-ops/chef-slack_handler). We have taken over maintenance of this cookbook and released it to Supermarket.\n\nRequirements\n============\n\n* The `chef_handler` cookbook\n* An existing Slack incoming webhook(s)\n\nUsage 1\n=====\n\n1. Create a new Slack webhook ([https://slack.com/services/new/incoming-webhook](https://slack.com/services/new/incoming-webhook))\n2. Set the `team` and `api_key` attributes above on the node/environment/etc.\n3. Include this `slack_handler` recipe.\n\nUsage 1 Attributes\n==========\n* `node['chef_client']['handler']['slack']['team']` - Your Slack team name (<team-name>.slack.com)\n* `node['chef_client']['handler']['slack']['api_key']` - The API key of your Slack incoming webhook\n\nOptional attributes\n\n* `node['chef_client']['handler']['slack']['channel']` - The #channel to send the results\n* `node['chef_client']['handler']['slack']['username']` - The username of the Slack message\n* `node['chef_client']['handler']['slack']['icon_url']` - The Slack message icon\n* `node['chef_client']['handler']['slack']['icon_emoji']` - The Slack message icon defined by available `:emoji:`\n* `node['chef_client']['handler']['slack']['detail_level']` - The level of detail in the message. Valid options are `basic`, `elapsed` and `resources`\n* `node['chef_client']['handler']['slack']['fail_only']` - Only report when runs fail as opposed to every single occurance\n\nNOTE: Either `icon_url` or `icon_emoji` can be used. If both are set, `icon_url` will take precedence.\n\nUsage 2\n=====\n\n1. Create a new Slack webhook ([https://slack.com/services/new/incoming-webhook](https://slack.com/services/new/incoming-webhook))\n2. Set the attributes as specified below\n3. Include this `slack_handler` recipe.\n\nUsage 2 Attributes\n==========\n* `node['chef_client']['handler']['slack']['username'] = 'Chef Handler - 2963351-crowdcube_app'`\n*\n* `node['chef_client']['handler']['slack']['webhooks']['name'].push('webhook1')`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook1']['url'] = 'https://hooks.slack.com/1/2/3'`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook1']['fail_only'] = true`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook1']['detail_level'] = 'elapsed'`\n\n* `node['chef_client']['handler']['slack']['webhooks']['name'].push('webhook2')`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook2']['url'] = 'https://hooks.slack.com/1/2/4'`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook2']['fail_only'] = false`\n* `node['chef_client']['handler']['slack']['webhooks']['webhook2']['detail_level'] = 'resources'`\n\n\nNOTE: Either `icon_url` or `icon_emoji` can be used. If both are set, `icon_url` will take precedence.\n\nCredits\n=======\n\nBorrowed everything from the `logstash_handler` cookbook [here](https://github.com/lusis/logstash_handler), who in turn borrowed quite a bit from the `graphite_handler` cookbook [here](https://github.com/realityforge-cookbooks/graphite_handler).\n\nLicense\n=======\n\n`slack_handler` is provided under the Apache License 2.0. See `LICENSE` for details.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef_handler",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}