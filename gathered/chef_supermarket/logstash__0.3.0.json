{
  "name": "logstash Chef cookbook",
  "chef_cookbook_name": "logstash",
  "revision": "0.3.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/logstash",
    "https://supermarket.chef.io/cookbooks/logstash/download",
    "https://supermarket.chef.io/cookbooks/logstash/versions/0.3.0",
    "https://supermarket.chef.io/cookbooks/logstash/versions/0.3.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/logstash/versions/0.3.0",
    "https://supermarket.chef.io/api/v1/cookbooks/logstash",
    "https://supermarket.chef.io/api/v1/cookbooks/logstash/versions/0.3.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Devopsware/Logging/Logstash"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/logstash",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/logstash/versions/0.3.0/download",
  "deprecated": false,
  "created": "2011-08-02T07:43:22.000Z",
  "updated": "2015-09-13T18:21:49.150Z",
  "description": "Installs/Configures logstash",
  "maintainer": {
    "name": "lusis",
    "email": "lusis.org+github.com@gmail.com"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 104,
  "downloads_count": 16788461,
  "downloads_count_revision": 1259063,
  "repository_url": "https://github.com/lusis/chef-logstash",
  "issues_url": "https://github.com/lusis/chef-logstash",
  "chef_source_url": "https://github.com/lusis/chef-logstash",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# <a name=\"title\"></a> chef-logstash [![Build Status](https://secure.travis-ci.org/lusis/chef-logstash.png?branch=master)](http://travis-ci.org/lusis/chef-logstash)\n\nDescription\n===========\nThis is the semi-official 'all-in-one' Logstash cookbook.\n\n\nRequirements\n============\nAll of the requirements are explicitly defined in the recipes. Every effort has been made to utilize official Opscode cookbooks.\n\nHowever if you wish to use an external ElasticSearch cluster, you will need to install that yourself and change the relevant attributes for discovery.\nThe same applies to integration with Graphite.\n\nThis cookbook has been tested together with the following cookbooks\n\n* [Heavywater Graphite Cookbook](https://github.com/heavywater/chef-graphite) - This is the one I use\n* [Karmi's ElasticSearch Cookbook](https://github.com/karmi/cookbook-elasticsearch) \n\n\nAttributes\n==========\n\n## Default\n\n* `node[:logstash][:basedir]` - the base directory for all the Logstash components\n* `node[:logstash][:user]` - the owner for all Logstash components\n* `node[:logstash][:group]` - the group for all Logstash components\n* `node[:logstash][:graphite_role]` - the Chef role to search for discovering your preexisting Graphite server\n* `node[:logstash][:elasticsearch_role]` - the Chef role to search for discovering your preexisting ElasticSearch cluster.\n* `node[:logstash][:elasticsearch_cluster]` - the cluster name assigned to your preexisting ElasticSearch cluster. Only applies to external ES clusters.\n* `node['logstash']['elasticsearch_ip']` - the IP address that will be used for your elasticsearch server in case you are using Chef-solo\n* `node['logstash']['graphite_ip']` - the IP address that will be used for your graphite server in case you are using Chef-solo \n\n\n## Agent\n\n* `node[:logstash][:agent][:install_method]` - The method to install logstash - either `jar` or `source`, defaults to `jar`\n* `node[:logstash][:agent][:version]` - The version of Logstash to install. Only applies to `jar` install method.\n* `node[:logstash][:agent][:source_url]` - The URL of the Logstash jar to download. Only applies to `jar` install method.\n* `node[:logstash][:agent][:checksum]` - The checksum of the jar file. Only applies to `jar` install method.\n* `node[:logstash][:agent][:base_config]` - The name of the template to use for `logstash.conf` as a base config.\n* `node[:logstash][:agent][:base_config_cookbook]` - Where to find the base\\_config template.\n* `node[:logstash][:agent][:xms]` - The minimum memory to assign the JVM.\n* `node[:logstash][:agent][:xmx]` - The maximum memory to assign the JVM.\n* `node[:logstash][:agent][:debug]` - Run logstash with `-v` option?\n* `node[:logstash][:agent][:server_role]` - The role of the node behaving as a Logstash `server`/`indexer`\n\n## Server\n\n* `node[:logstash][:server][:install_method]` - The method to install logstash - either `jar` or `source`\n* `node[:logstash][:server][:version]` - The version of Logstash to install. Only applies to `jar` install method.\n* `node[:logstash][:server][:source_url]` - The URL of the Logstash jar to download. Only applies to `jar` install method.\n* `node[:logstash][:server][:checksum]` - The checksum of the jar file. Only applies to `jar` install method.\n* `node[:logstash][:server][:base_config]` - The name of the template to use for `logstash.conf` as a base config.\n* `node[:logstash][:server][:base_config_cookbook]` - Where to find the base\\_config template.\n* `node[:logstash][:server][:xms]` - The minimum memory to assign the JVM.\n* `node[:logstash][:server][:xmx]` - The maximum memory to assign the JVM.\n* `node[:logstash][:server][:debug]` - Run logstash with `-v` option?\n* `node[:logstash][:server][:enable_embedded_es]` - Should Logstash run with the embedded ElasticSearch server or not?\n\n## Kibana\n\n* `node[:logstash][:kibana][:repo]` - The git repo to install Kibana from.\n* `node[:logstash][:kibana][:sha]` - The sha/branch of the repo you wish to clone.\n* `node[:logstash][:kibana][:apache_template]` - The name of the template file to use for the Apache site file\n* `node[:logstash][:kibana][:config]` - The name of the template to use for the Kibana `config.php` file\n* `node[:logstash][:kibana][:server_name]` - The value to use for the Apache `ServerName` variable to use for the Kibana Apache virtual host.\n\n## Source\n\n* `node[:logstash][:source][:repo]` - The git repo to use for the source code of Logstash\n* `node[:logstash][:source][:sha]` - The sha/branch of the repo you wish to clone.\n* `node[:logstash][:source][:java_home]` - your `JAVA_HOME` location. Needed explicity for `ant` when building JRuby\n\nUsage\n=====\nA proper readme is forthcoming but in the interim....\n\nThere are 3 recipes you need to concern yourself with:\n\n* server - This would be your indexer node\n* agent - This would be a local host's agent for collection\n* kibana - This is the web interface\n\nEvery attempt (and I mean this) was made to ensure that the following objectives were met:\n\n* Any agent install can talk to a server install\n* Kibana web interface can talk to the server install\n* Each component works OOB and with each other\n* Utilize official opscode cookbooks where possible\n\nThis setup makes HEAVY use of roles. Additionally, ALL paths have been made into attributes. Everything I could think of that would need to be customized has been made an attribute.\n\n## Defaults\nBy default, the recipes look for the following roles (defined as attributes so they can be overridden):\n\n* `graphite_server` - `node[:logstash][:graphite_role]`\n* `elasticsearch_server` - `node[:logstash][:elasticsearch_role]`\n* `logstash_server` - `node[:logstash][:kibana][:elasticsearch_role]` and `node[:logstash][:agent[:server_role]`\n\nThe reason for giving `kibana` its own role assignment is to allow you to point to existing ES clusters/logstash installs.\n\nThe reason for giving `agent` its own role assignment is to allow the `server` and `agent` recipes to work together.\n\nYes, if you have a graphite installation with a role of `graphite_server`, logstash will send stats of events received to `logstash.events`.\n\n## Agent and Server configuration\nThe template to use for configuration is made an attribute as well. This allows you to define your OWN logstash configuration file without mucking with the default templates.\n\nThe `server` will, by default, enable the embedded ES server. This can be overriden as well.\n\nSee the `server` and `agent` attributes for more details.\n\n## Source vs. Jar install methods\nBoth `agent` and `server` support an attribute for how to install. By default this is set to `jar` to use the 1.1.1preview as it is required to use elasticsearch 0.19.4. The current release is defined in attributes if you choose to go the `source` route.\n\n## Out of the box behaviour\nHere are some basic steps\n\n* Create a role called `logstash_server` and assign it the following recipes: `logstash::server` and `logstash::kibana`\n* Assign the role to a new server\n* Assign the `logstash::agent` recipe to another server\n\nIf there is a system found with the `logstash_server` role, the agent will automatically configure itself to send logs to it over tcp port 5959. This is, not coincidently, the port used by the chef logstash handler.\n\nIf there is NOT a system with the `logstash_server` role, the agent will use a null output. The default input is to read files from `/var/log/*.log` excluding and gzipped files.\n\nIf you point your browser to the `logstash_server` system's ip address, you should get the kibana web interface.\n\nDo something to generate a new line in any of the files in the agent's watch path (I like to SSH to the host), and the events will start showing up in kibana. You might have to issue a fresh empty search.\n\nThe `pyshipper` recipe will work as well but it is NOT wired up to anything yet.\n\n## Letting data drive your templates\n\nThe current templates for the agent and server are written so that you can provide ruby hashes in your roles that map to inputs, filters, and outputs. Here is a role for logstash_server\n\n    name\t\"logstash_server\"\n    description \"Attributes and run_lists specific to FAO's logstash instance\"\n    default_attributes(\n                   :logstash => {\n                     :server => {\n                       :enable_embedded_es => false,\n                       :inputs => [\n                                   :amqp => {\n                                       :type => \"all\",\n                                       :host => \"127.0.0.1\",\n                                       :exchange => \"rawlogs\",\n                                       :name => \"rawlogs_consumer\"\n                                      }\n                                  ],\n                       :filters => [\n                                    :grok => {\n                                      :type => \"haproxy\",\n                                      :pattern => \"%{HAPROXYHTTP}\",\n                                      :patterns_dir => '/opt/logstash/server/etc/patterns/'\n                                    }\n                                   ],\n                       :outputs => [\n                                    :file => {\n                                      :type => 'haproxy',\n                                      :path => '/opt/logstash/server/haproxy_logs/%{request_header_host}.log',\n                                      :message_format => '%{client_ip} - - [%{accept_date}] \"%{http_request}\" %{http_status_code} ....'\n                                    }\n                                   ]\n                      }\n                    }\n                   )\n    run_list(\n         \"role[elasticsearch_server]\",\n         \"recipe[logstash::server]\",\n         \"recipe[php::module_curl]\",\n         \"recipe[logstash::kibana]\"\n         )\n\n\nIt will produce the following logstash.conf file\n\n     input {\n     \n             amqp {\n                       name => 'rawlogs_consumer'\n                       exchange => 'rawlogs'\n                       type => 'all'\n                       host => '127.0.0.1'\n             }\n      }\n\n      filter {\n         grok {\n             pattern => '%{HAPROXYHTTP}'\n             type => 'haproxy'\n             patterns_dir => '/opt/logstash/server/etc/patterns/'\n              }\n      }\n\n      output {\n          stdout { debug => true debug_format => \"json\" }\n          elasticsearch { host => \"169.1.1.1\" }\n          file {\n                       type => 'haproxy'\n                       message_format => '%{client_ip} - - [%{accept_date}] \"%{http_request}\" %{http_status_code} %{bytes_read} ....'\n                       path => '/opt/logstash/server/haproxy_logs/%{request_header_host}.log'\n              }\n       }\n\n\n\n# BIG WARNING\n\n* Currently only tested on Ubuntu Natty, Precise, and RHEL 6.2.\n\n\n## License and Author\n\nAuthor::                John E. Vincent \nAuthor::                Bryan W. Berry (<bryan.berry@gmail.com>)\nAuthor::                Richard Clamp (@richardc)\nAuthor::                Juanje Ojeda (@juanje)\nCopyright::             2012, John E. Vincent\nCopyright::             2012, Bryan W. Berry\nCopyright::             2012, Richard Clamp\nCopyright::             2012, Juanje Ojeda\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/apache2",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/php",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/git",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/python",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/java",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/ant",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/logrotate",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/rabbitmq",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}