{
  "name": "backup_lwrp Chef cookbook",
  "chef_cookbook_name": "backup_lwrp",
  "revision": "0.0.10",
  "uris": [
    "https://supermarket.chef.io/cookbooks/backup_lwrp",
    "https://supermarket.chef.io/cookbooks/backup_lwrp/download",
    "https://supermarket.chef.io/cookbooks/backup_lwrp/versions/0.0.10",
    "https://supermarket.chef.io/cookbooks/backup_lwrp/versions/0.0.10/download",
    "https://supermarket.chef.io/api/v1/cookbooks/backup_lwrp/versions/0.0.10",
    "https://supermarket.chef.io/api/v1/cookbooks/backup_lwrp",
    "https://supermarket.chef.io/api/v1/cookbooks/backup_lwrp/versions/0.0.10/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/backup_lwrp",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/backup_lwrp/versions/0.0.10/download",
  "deprecated": false,
  "created": "2012-11-01T04:14:59.000Z",
  "updated": "2015-09-20T01:29:16.584Z",
  "description": "Installs/Configures backup",
  "maintainer": {
    "name": "scottmlikens",
    "email": "scott@likens.us"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": false,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 5,
  "downloads_count": 7307996,
  "downloads_count_revision": 1217375,
  "repository_url": "https://github.com/damm/backup",
  "issues_url": "https://github.com/damm/backup/issues",
  "chef_source_url": "https://github.com/damm/backup",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "Backup Cookbook\n===================\n\nThis cookbook automates deploying the [backup](https://github.com/meskyanichi/backup) gem and the configuration of any *models* you may want.  With a little work you can backup everything using this cookbook as the framework.\n\nRequirements\n============\n\n#### packages\n- `ruby` - ruby is required for the backup gem to be installed.  This can be provided either via chef or via other means.\n- `libxml2-dev`\n- `libxslt1-dev`\n\nResources and Providers\n----------\n\nThis cookbook provides three resources and corresponding providers.\n\n`install.rb`\n--------\n\n\nInstall or Remove the backup gem with this resource.\n\nActions:\n\n* `install` - installs the backup gem\n* `remove` - removes the backup gem\n\n`generate_config.rb`\n-------------\n\nGenerate a configuration file for the backup gem with this resource.\n\nActions: \n\n* `setup` - sets up a basic config.rb for the backup gem\n* `remove` - **removes the base directory for the backup gem** and everything underneath it.\n\n### backup::install\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>version</tt></td>\n    <td>String</td>\n    <td>Version of the backup gem to install</td>\n    <td></td>\n  </tr>\n</table>\n\n### backup::generate_config\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>encryption_password</tt></td>\n    <td>String</td>\n    <td>Password to encrypt all backups with</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>base_dir</tt></td>\n    <td>String</td>\n    <td>Path where backup and it's configuration files and models reside</td>\n    <td><tt>/opt/backup</tt></td>\n  </tr>\n  <tr>\n    <td><tt>cookbook</tt></td>\n    <td>String</td>\n    <td>Cookbook that has the erb template specified in the <code>source</code> to generate config.rb</td>\n    <td><tt>backup</tt></td>\n  </tr>\n  <tr>\n    <td><tt>source</tt></td>\n    <td>String</td>\n    <td>Filename of the erb template that generates <code>config.rb</code></td>\n    <td><tt>config.rb.erb</tt></td>\n  </tr>\n</table>\n\n### backup::generate_model\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n\n  <tr>\n    <td><tt>options</tt></td>\n    <td>Hash</td>\n    <td>Specifies the options used in the backup model</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>base_dir</tt></td>\n    <td>String</td>\n    <td>Path where backup and it's configuration files and models reside</td>\n    <td><tt>/opt/backup</tt></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>gem_bin_dir</tt></td>\n    <td>String</td>\n    <td>Path where gem binaries, such as backup, reside (e.g. \"/usr/local/bin\" )</td>\n    <td><tt>nil</tt></td>\n    <td></td>\n  <tr>\n    <td><tt>split_into_chunks_of</tt></td>\n    <td>Fixnum</td>\n    <td>Split the backup archive into multiple smaller files</td>\n    <td><tt>nil</tt></td>\n  </tr>\n  <tr>\n    <td><tt>description</tt></td>\n    <td>String</td>\n    <td>Description of the backup</td>\n  </tr>\n  <tr>\n    <td><tt>backup_type</tt></td>\n    <td>String</td>\n    <td>What kind of backup? <a href=\"http://meskyanichi.github.io/backup/v4/archives/\">archive</a> or <a href=\"http://meskyanichi.github.io/backup/v4/databases/\">database</a></td>\n    <td><tt>database</tt></td>\n  </tr>\n  <tr>\n    <td><tt>database_type</tt></td>\n    <td>String</td>\n    <td>Type of Database to backup</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>store_with</tt></td>\n    <td>Hash</td>\n    <td>Specify what  <a href=\"https://github.com/meskyanichi/backup/wiki/Storages\">storage</a> engines you wish enable.</td>\n    <td></td>\n    </tr>\n  <tr>\n    <td><tt>hour</tt></td>\n    <td>String</td>\n    <td>What hour to run the backup</td>\n    <td><tt>1</tt></td>\n  </tr>\n  <tr>\n    <td><tt>minute</tt></td>\n    <td>String</td>\n    <td>How many minutes past the hour to run the backup</td>\n    <td><tt>0</tt></td>\n  </tr>\n  <tr>\n    <td><tt>day</tt></td>\n    <td>String</td>\n    <td>Day of the week to run the backup</td>\n    <td><tt>*</tt></td>\n  </tr>\n  <tr>\n    <td><tt>month</tt>\n    <td>String</td>\n    <td>Day of the month to run backup</td>\n    <td><tt>*</tt></td>\n  </tr>\n  <tr>\n    <td><tt>weekday</tt></td>\n    <td>String</td>\n    <td>Day of the Week to run backup</td>\n    <td><tt>*</tt></td>\n  </tr>\n  <tr>\n    <td><tt>mailto</tt></td>\n    <td>String</td>\n    <td>sets the MAILTO variable in the crontab to specify who should get the output of the crontab run</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>tmp_path</tt></td>\n    <td>String</td>\n    <td>sets the tmp path for the backup</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>cron_path</tt></td>\n    <td>String</td>\n    <td>sets the PATH variable in the crontab to specify who should get the output of the crontab run</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><tt>cron_log</tt></td>\n    <td>String</td>\n    <td>Log file for redirecting the cron job output</td>\n    <td></td>\n  </tr>\n   <tr>\n    <td><tt>before_hook</tt></td>\n    <td>String</td>\n    <td>Before hook runs ruby code just after 'Backup' logs that the backup has started, before any procedures are performed</td>\n    <td></td>\n  </tr>\n   <tr>\n    <td><tt>after_hook</tt></td>\n    <td>String</td>\n    <td>After hook runs ruby code just before any Notifiers and is guaranteed to run whether or not the backup process was successful or not</td>\n    <td></td>\n  </tr>\n</table>\n\nUsage\n-----\n\nThis cookbook is intended to be a framework to help backup your systems.  Some examples below:\n\n### MongoDB\n\n```ruby\nbackup_install node.name\nbackup_generate_config node.name\ngem_package \"fog\" do  \n    version \"~> 1.4.0\"  \n  end  \nbackup_generate_model \"mongodb\" do  \n  description \"Our shard\"  \n  backup_type \"database\"  \n  database_type \"MongoDB\"  \n  split_into_chunks_of 2048  \n  store_with({\"engine\" => \"S3\", \"settings\" => { \"s3.access_key_id\" => \"example\", \"s3.secret_access_key\" => \"sample\", \"s3.region\" => \"us-east-1\", \"s3.bucket\" => \"sample\", \"s3.path\" => \"/\", \"s3.keep\" => 10 } } )  \n  options({\"db.host\" => \"\\\"localhost\\\"\", \"db.lock\" => true})  \n  mailto \"some@example.com\"  \n  cron_path \"/bin:/usr/bin:/usr/local/bin\"\n  tmp_path \"/mnt/backups\"\n  cron_log \"/var/log/backups.log\"\n  action :backup  \nend  \n```\n      \n### PostgreSQL\n\n```ruby\nbackup_install node.name  \nbackup_generate_config node.name  \ngem_package \"fog\" do  \n  version \"~> 1.4.0\"  \nend  \nbackup_generate_model \"pg\" do  \n  description \"backup of postgres\"  \n  backup_type \"database\"  \n  database_type \"PostgreSQL\"  \n  split_into_chunks_of 2048  \n  store_with({\"engine\" => \"S3\", \"settings\" => { \"s3.access_key_id\" => \"sample\", \"s3.secret_access_key\" => \"sample\", \"s3.region\" => \"us-east-1\", \"s3.bucket\" => \"sample\", \"s3.path\" => \"/\", \"s3.keep\" => 10 } } )\n  options({\"db.name\" => \"\\\"postgres\\\"\", \"db.username\" => \"\\\"postgres\\\"\", \"db.password\" => \"\\\"somepassword\\\"\", \"db.host\" => \"\\\"localhost\\\"\" })  \n  mailto \"sample@example.com\"  \n  action :backup  \n  end\n```\n\n### Archiving files to S3\n\n```ruby\nbackup_install node.name   \nbackup_generate_config node.name  \ngem_package \"fog\" do  \n  version \"~> 1.4.0\"  \nend  \nbackup_generate_model \"home\" do  \n  description \"backup of /home\"  \n  backup_type \"archive\"  \n  split_into_chunks_of 250  \n  store_with({\"engine\" => \"S3\", \"settings\" => { \"s3.access_key_id\" => \"sample\", \"s3.secret_access_key\" => \"sample\", \"s3.region\" => \"us-east-1\", \"s3.bucket\" => \"sample\", \"s3.path\" => \"/\", \"s3.keep\" => 10 } } )  \n  options({\"add\" => [\"/home/\",\"/root/\"], \"exclude\" => [\"/home/tmp\"], \"tar_options\" => \"-p\"})  \n  mailto \"sample@example.com\"  \n  action :backup  \nend  \n```\n\n> It is possible to load the settings in an *role* or an *data bag* or leave the settings in a recipe.\n\nLicense and Author\n-------------------\n\nAuthor:: Scott Likens (<scott@likens.us>)\n\nCopyright 2013, Scott M. Likens\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n    \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "redhat",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "fedora",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/build-essential",
      "revision": ">= 0.0.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/cron",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}