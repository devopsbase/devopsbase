{
  "name": "ssh_known_hosts Chef cookbook",
  "chef_cookbook_name": "ssh_known_hosts",
  "revision": "3.0.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/ssh_known_hosts",
    "https://supermarket.chef.io/cookbooks/ssh_known_hosts/download",
    "https://supermarket.chef.io/cookbooks/ssh_known_hosts/versions/3.0.0",
    "https://supermarket.chef.io/cookbooks/ssh_known_hosts/versions/3.0.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/ssh_known_hosts/versions/3.0.0",
    "https://supermarket.chef.io/api/v1/cookbooks/ssh_known_hosts",
    "https://supermarket.chef.io/api/v1/cookbooks/ssh_known_hosts/versions/3.0.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System",
    "Type/Middleware/Search"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/ssh_known_hosts",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/ssh_known_hosts/versions/3.0.0/download",
  "deprecated": false,
  "created": "2009-10-28T19:20:32.000Z",
  "updated": "2016-09-08T04:07:54.644Z",
  "description": "Dyanmically generates /etc/ssh/ssh_known_hosts based on search indexes",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 59,
  "downloads_count": 23424936,
  "downloads_count_revision": 245,
  "repository_url": "https://github.com/chef-cookbooks/ssh_known_hosts",
  "issues_url": "https://github.com/chef-cookbooks/ssh_known_hosts",
  "chef_source_url": "https://github.com/chef-cookbooks/ssh_known_hosts",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "ssh_known_hosts Cookbook\n========================\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/ssh_known_hosts.svg?branch=master)](http://travis-ci.org/chef-cookbooks/ssh_known_hosts)\n[![Cookbook Version](https://img.shields.io/cookbook/v/ssh_known_hosts.svg)](https://supermarket.chef.io/cookbooks/ssh_known_hosts)\n\nThe Chef `ssh_known_hosts` cookbook exposes resource and default recipe for adding hosts and keys to the `/etc/ssh/ssh_known_hosts` file.\n\n- The default recipe builds `/etc/ssh/ssh_known_hosts` based either on search indexes using `rsa,dsa` key types and ohai data **or**, when `['ssh_known_hosts']['use_data_bag_cache']` is `true`, on the contents of a data bag that is maintained by the `cacher` recipe running on a worker node.\n- The cacher recipe builds and maintains a data bag based on search indexes using `rsa,dsa` key types and ohai data.\n- The LWRP provides a way to add custom entries in your own recipes.\n\nYou can also optionally put other host keys in a data bag called \"`ssh_known_hosts`\". See below for details.\n\n\n## Requirements\n\n### Platforms\n\nShould work on any operating system that supports `/etc/ssh/ssh_known_hosts`.\n\n### Chef\n\nAs of version 3.0.0 this cookbook is Chef 12.0+ as we have eliminated the use of the now deprecated partial_search cookbook. [Filtered search](https://docs.chef.io/chef_search.html) is included as of chef-client 12.0.\n\n\n## Usage\n\n## Resources\n\nUse the LWRP `ssh_known_hosts_entry` to append an entry for the specified host in `/etc/ssh/ssh_known_hosts`. For example:\n\n```ruby\nssh_known_hosts_entry 'github.com'\n```\n\nThis will append an entry in `/etc/ssh/ssh_known_hosts` like this:\n\n```text\n# github.com SSH-2.0-OpenSSH_5.5p1 Debian-6+squeeze1+github8\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\n```\n\nYou can optionally specify your own key, if you don't want to use `ssh-keyscan`:\n\n```ruby\nssh_known_hosts_entry 'github.com' do\n  key 'node.example.com ssh-rsa ...'\nend\n```\n\n### Cacher\n\nUse the `cacher` recipe on a single \"worker\" node somewhere in your cluster to maintain a data bag (`server_data/known_hosts` by default) containing all of your nodes host keys.  The advantage to this approach is that is much faster than running a search of all nodes, and substantially lightens the load on locally hosted Chef servers.  The drawback is that the data is slightly delayed (because the cacher worker must converge first).\n\nTo use the cacher, simply include the `ssh_known_hosts::cacher` cookbook in a wrapper cookbook or run list on a designated worker node.\n\n#### Attributes\n\nThe following attributes are set on a per-platform basis, see the `attributes/default.rb`.\n\n* `node['ssh_known_hosts']['file']` - Sets up the location of the ssh_known_hosts file for the system. \n  Defaults to '/etc/ssh/ssh_known_hosts'\n* `node['ssh_known_hosts']['key_type']` - Determines which key type ssh-keyscan will use to determine the \n  host key, different systems will have different available key types, check your manpage for available \n  key types for ssh-keyscan. Defaults to 'rsa,dsa'\n* `node['ssh_known_hosts']['use_data_bag_cache']` - Use the data bag maintained by the cacher server to build `/etc/ssh/ssh_known_hosts` instead of a direct search (requires that a node be set up to run the cacher recipe regularly).\n* `node['ssh_known_hosts']['cacher']['data_bag']`/`node['ssh_known_hosts']['cacher']['data_bag_item']` - Data bag where cacher recipe should store its keys.\n\n#### LWRP Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Example</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td>host</td>\n      <td>the host to add</td>\n      <td><tt>github.com</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>key</td>\n      <td>(optional) provide your own key</td>\n      <td><tt>ssh-rsa ...</tt></td>\n      <td><tt>ssh-keyscan -H #{host}</tt></td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>(optional) the server port that ssh-keyscan will use to gather the public key</td>\n      <td><tt>2222</tt></td>\n      <td><tt>22</tt></td>\n    </tr>\n  </tbody>\n</table>\n\n- - -\n\n### Default Recipe\n\nSearches the Chef Server for all hosts that have SSH host keys using `rsa,dsa` key types and generates an `/etc/ssh/ssh_known_hosts`.\n\n#### Adding custom host keys\n\nThere are two ways to add custom host keys. You can either use the provided LWRP (see above), or by creating a data bag called \"`ssh_known_hosts`\" and adding an item for each host:\n\n```javascript\n{\n  \"id\": \"github\",\n  \"fqdn\": \"github.com\",\n  \"rsa\": \"github-rsa-host-key\"\n}\n```\n\nThere are additional optional values you may use in the data bag:\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Example</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td>id</td>\n      <td>a unique id for this data bag entry</td>\n      <td><tt>github</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>fqdn</td>\n      <td>the fqdn of the host</td>\n      <td><tt>github.com</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>rsa</td>\n      <td>the rsa key for this server</td>\n      <td><tt>ssh-rsa AAAAB3...</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>ipaddress</td>\n      <td>the ipaddress of the node (if fqdn is missing)</td>\n      <td><tt>1.1.1.1</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>hostname</td>\n      <td>local hostname of the server (if not a fqdn)</td>\n      <td><tt>myserver.local</tt></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>dsa</td>\n      <td>the dsa key for this server</td>\n      <td><tt>ssh-dsa ABAAC3...</tt></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n### ChefSpec matchers\n\nA custom matcher is available for you to use in recipe tests.\n\n``` \ndescribe 'my_cookbook::my_recipe' do\n\tlet(:chef_run) { ChefSpec::Runner.new.converge(described_recipe) }\n\tit { expect(chef_run).to append_to_ssh_known_hosts 'github.com' }\nend\n```\n\n\nLicense & Authors\n-----------------\n\n**Author:** Cookbook Engineering Team (<cookbooks@chef.io>)\n\n**Copyright:** 2008-2016, Chef Software, Inc.\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n",
  "chef_recipes": {
    "ssh_known_hosts": "Provides an LWRP for managing SSH known hosts. Also includes a recipe for automatically adding all nodes to the SSH known hosts."
  }
}