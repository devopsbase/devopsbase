{
  "name": "dsc Chef cookbook",
  "chef_cookbook_name": "dsc",
  "revision": "0.1.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/dsc",
    "https://supermarket.chef.io/cookbooks/dsc/download",
    "https://supermarket.chef.io/cookbooks/dsc/versions/0.1.0",
    "https://supermarket.chef.io/cookbooks/dsc/versions/0.1.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/dsc/versions/0.1.0",
    "https://supermarket.chef.io/api/v1/cookbooks/dsc",
    "https://supermarket.chef.io/api/v1/cookbooks/dsc/versions/0.1.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Operating Systems & Virtualization",
    "Executable/Script/Chef Cookbook",
    "Binding/Provider/Microsoft",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/dsc",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/dsc/versions/0.1.0/download",
  "deprecated": false,
  "created": "2014-07-24T16:03:06.909Z",
  "updated": "2014-07-24T16:03:07.102Z",
  "description": "Experimental primitives to integrate with Microsoft Desired State Configuration",
  "maintainer": {
    "name": "adamedoc",
    "email": "engineering@getchef.com"
  },
  "license": "All rights reserved",
  "chef_foodcritic_failure": null,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 20,
  "downloads_count": 1202109,
  "downloads_count_revision": 1202109,
  "latest": true,
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "dsc Cookbook\n===============\n\nThis cookbook demonstrates **prototype** functionality to expose PowerShell Desired State\nConfiguration (DSC) resources as Chef resources on the Microsoft Windows\noperating system. **This cookbook requires PowerShell 4.0 or later**\nwhich is available as part the [Windows Management Foundation 4.0](http://www.microsoft.com/en-us/download/details.aspx?id=40855) components of Windows.\n\nUse knife to upload the cookbook to your Chef server for testing.\n\n## PRE-RELEASE SOFTWARE NOTES\n\n*WARNING*: This cookbook demonstrates functionality that is intended to be implemented in a future Chef release. Therefore, it should\nbe used for **testing and evaluation purposes only**. If or when the use cases and functionality of this cookbook are released\nin Chef client, the cookbook will be deprecated in favor of the implementation in [Chef](https://github.com/opscode/chef).\n\n**Interfaces and behaviors exposed by this evaluation cookbook are likely to change** before any final implementation, so expect\n  that any recipes on which it is based will probably need to be modified to support an implementation in Chef.\n  \nIssues (code defects, feature requests, design issues, etc.) with this cookbook may be reported in the cookbook's [source\nrepository](https://github.com/opscode-cookbooks/dsc/issues) on Github. As this cookbook is intended for evaluation purposes,\nissues will likely be addressed in the Chef project rather than this one.\n\n## Installation\n\nTo use this cookbook with knife, clone it into a directory in your\ncookbook path:\n\n    git clone https://github.com/opscode-cookbooks/dsc.git\n    \n## Usage\n\nUpload the cookbook to your Chef server to use it.\n\n### Recipes \n\nThe cookbook contains the following recipes, still being updated:\n\n* getdscresourcekit: Will download and install DSC Resource kit powershell modules using DSC\n* dsc_demo: Creates a security group with one member using DSC\n\n### Resources\n\nAll DSC resources on a system that are returned by the command below on that\nsystem will be visible as Chef resources on that system:\n\n    get-dscresource\n \nAs an example, consider the following DSC `Archive` resource returned from\n`get-dscresource`:\n\n    > Get-DscResource archive\n    ImplementedAs Name     Module                      Properties\n    ------------- ----     ------                      ----------\n    PowerShell    Archive  PSDesiredStateConfiguration {Destination, Path, Checksum, DependsOn...}\n\nThat `Archive` resource itself contains the following *properties* which can\nalso be obtained via the `get-dscresource` command:\n\n    > Get-DscResource archive | Select-Object -ExpandProperty Properties\n\n```\n    Name        PropertyType IsMandatory Values\n    ----        ------------ ----------- ------\n    Destination [string]     True        {}\n    Path        [string]     True        {}\n    Checksum    [string]     False       {CreatedDate, ModifiedDate,...\n    DependsOn   [string[]]   False       {}\n    Ensure      [string]     False       {Absent, Present}\n    Force       [bool]       False       {}\n    Validate    [bool]       False       {}\n```\n\nIf you depend on this cookbook in your own cookbook, you can then write a recipe\nthat includes the following `dsc_resource` Chef resource, which in this case \nexposes the DSC `Archive` resource in Chef's Domain Specific Language\n(DSL) like every other resource in Chef:\n\n```ruby\n    dsc_resource 'DSCReskitFromModules' do\n      resource_name :archive\n      property :ensure, 'Present'\n      property :path, \"#{ENV['USERPROFILE']}/Downloads/DSC Resource Kit 03282014.zip\"\n      property :destination, \"#{ENV['PROGRAMW6432']}/WindowsPowerShell/Modules\"\n    end\n```\n\nThe example above will translate the *attributes* of the `dsc_resource` to *properties* of DSC `Archive` resource, which is then\npresented to DSC's *Local Configuration Manager (LCM)* to make changes to the operating system. From a DSC standpoint,\nthe Chef fragment above is analogous to the DSC fragment below:\n\n    configuration 'InstallDSCReskit'\n    {\n        Archive 'DSCReskitFromModules'\n        {\n            Ensure = 'Present'\n            Path = \"$env:USERPROFILE/Downloads/DSC Resource Kit 03282014.zip\"\n            Destination = \"$env:PROGRAMW6432/WindowsPowerShell/Modules\"\n        }\n    }\n\nMore details on the correspondence between usage of a DSC resource within the\nPowerShell configuration DSL and the use of that same resource from within\nChef's DSL is given below.\n\n### Mapping PowerShell DSC resources to Chef resources\n\nIf you've used MSDN documentation or the `get-dscresource` cmdlet to discover\nDSC resources and their semantics / usage, you can use the following simple\nrules to take the knowledge of those DSC resources and express them in Chef\nrecipes as Chef resources:\n\n1. To use a DSC resource in Chef, use the `dsc_resource` resource in your recipe\n2. Set the `resource_name` attribute to the name of the resource as a symbol, i.e. `WindowsFeature` in DSC becomes\n`:windowsfeature`.\n3. For each property in the DSC resource for which you want to declare a desired value, use the syntax\n\n```ruby\n   property :property_name, value\n```\n\nThat's it -- note that case *does not* matter for any of the symbols given above, which is also true of names expressed in the\nDSC DSL.\n\nFor example, we can annotate the Chef translation of\nthe DSC resource *InstallDSCReskit* given earlier as follows:\n\n```ruby\n    dsc_resource 'get-dsc-resource-kit' do \n      resource_name :Archive\n      property :ensure, 'Present'\n      property :path, \"#{ENV['USERPROFILE']}/Downloads/DSC Resource Kit 03282014.zip\"\n      property :destination, \"#{ENV['PROGRAMW6432']}/WindowsPowerShell/Modules\"\n    end\n```\n\n## TODO\n\nMany of the tasks below will be completed outside of this cookbook as the functionality is implemented in `chef-client`.\n\n### Tasks\n\n* Additional prototyping\n  * Better error handling / messages\n* Implement \"embedded\" DSC resource `dsc_script` and `dsc_mof` that allow embedded PowerShell or mof directly in recipes to\n  enable re-use.\n* RFC in the public [Chef RFC repository](https://github.com/opscode/chef-rfc)\n* Update `ohai` to detect PowerShell version \n* Direct integration into Chef rather than cookbook\n* Caching of DSC resources to avoid DSC queries (if needed)\n  release versions\n* Alternative to shelling-out to powershell.exe for each interaction with LCM\n* Disallow \"problematic\" properties such as `dependson`.\n\n### Open issues\n\nNone currently identified, but more will probably arise once an official RFC is posted on https://github.com/opscode/chef-rfc.\n\n### Resolved issues\n\n* Namespacing -- is the \"dsc_\" prefix correct for DSC resources? \n  * **Resolution:** move to single Chef resource for all DSC resources rather than one Chef resource per DSC resource, which\n    obviates the need for any prefix to avoid name collisons. \n* Attribute collision: is collision detection + namespacing really the correct\n  solution? Should we always namespace rather than be clever?\n  * **Resolution:** Don't translate attributes directly, use a single attribute that can express the desired state for a DSC\n      property given its value. Also, if the attribute translation were to be retained, it appears that always prefixing with a\n      dsc \"namespace\" would have been preferable.\n* How do we document resources? We can point to MSDN documentation, but the\n  name mapping rules must understood by the user (e.g. everything must be\n  lower case, use dsc_ prefix for Ruby keywords, etc).\n  * **Resolution:** The decision to use a single Chef resource for all DSC resources that itself uses a single attribute\n      (expressed multiple times) for each DSC property simplifies this significantly. See the discussion earlier where the use\n      of MSDN/TechNet documentation with some straightforward rules that require no syntactic modifications (e.g. namespacing or\n      capitalization changes) are used so that knowledge from documentation can be used to easily access DSC resources from\n      Chef. Rejected approaches include those below:\n      * Offer parallel docs for DSC resources (no way!)\n      * Document the namespacing rules, point to them in some way from chef-client / knife\n      * Create a knife-dsc plug-in that enumerates dsc resources on the system and shows the mapped names. (OK, though a little unorthodox).\n\n# License #\n\nCopyright:: Copyright (c) 2011-2014 Chef Software, Inc.\n\nLicense:: Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "requires": [
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}