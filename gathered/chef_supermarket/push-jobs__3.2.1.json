{
  "name": "push-jobs Chef cookbook",
  "chef_cookbook_name": "push-jobs",
  "revision": "3.2.1",
  "uris": [
    "https://supermarket.chef.io/cookbooks/push-jobs",
    "https://supermarket.chef.io/cookbooks/push-jobs/download",
    "https://supermarket.chef.io/cookbooks/push-jobs/versions/3.2.1",
    "https://supermarket.chef.io/cookbooks/push-jobs/versions/3.2.1/download",
    "https://supermarket.chef.io/api/v1/cookbooks/push-jobs/versions/3.2.1",
    "https://supermarket.chef.io/api/v1/cookbooks/push-jobs",
    "https://supermarket.chef.io/api/v1/cookbooks/push-jobs/versions/3.2.1/download"
  ],
  "labels": [
    "Chef cookbook",
    "Other",
    "Executable/Script/Chef Cookbook",
    "Binding/Region/North America/US",
    "Mode/Executable/Script/Chef Cookbook",
    "Mode/CLI"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/push-jobs",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/push-jobs/versions/3.2.1/download",
  "deprecated": false,
  "created": "2014-02-20T01:02:30.000Z",
  "updated": "2016-09-22T04:35:44.025Z",
  "description": "Installs the Chef Push Jobs Client",
  "maintainer": {
    "name": "chef",
    "email": "cookbooks@chef.io"
  },
  "license": "Apache 2.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": false,
  "rating": null,
  "followers_count": 15,
  "downloads_count": 3836799,
  "downloads_count_revision": 843,
  "repository_url": "https://github.com/chef-cookbooks/push-jobs",
  "issues_url": "https://github.com/chef-cookbooks/push-jobs/issues",
  "chef_source_url": "https://github.com/chef-cookbooks/push-jobs",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# push-jobs cookbook\n\n[![Build Status](https://travis-ci.org/chef-cookbooks/push-jobs.svg?branch=master)](http://travis-ci.org/chef-cookbooks/push-jobs) [![Cookbook Version](https://img.shields.io/cookbook/v/push-jobs.svg)](https://supermarket.chef.io/cookbooks/push-jobs)\n\nInstalls the Chef Push client package and sets it up to run as a service.\n\nThe official documentation is on [docs.chef.io](https://docs.chef.io/push_jobs.html)\n\n## Requirements\n\nRequires Chef Server with the Chef Push Server add-on.\n\n### Platforms\n\n- Debian/Ubuntu\n- Windows\n\nTested with Test Kitchen suites on Ubuntu 12.04/14.04/16.04, CentOS 6/7, and Windows 2012 R2\\. It may work on other debian, rhel, or windows platform families with or without modification.\n\n### Chef\n\n- Chef 12+\n\n### Cookbooks\n\n- [runit](https://supermarket.chef.io/cookbooks/runit)\n- [windows](https://supermarket.chef.io/cookbooks/windows)\n- [chef-ingredient](https://supermarket.chef.io/cookbooks/chef-ingredient)\n- [compat_resource](https://supermarket.chef.io/cookbooks/compat_resource)\n\n## Usage\n\nInclude the default recipe in a node's run list. On Windows, the URL to the package to install and its SHA256 checksum are required so the package may be retrieved. For example:\n\n```ruby\nnode.default['push_jobs']['package_url'] = \"http://www.example.com/pkgs/opscode-push-jobs-client-windows-1.1.5-1.windows.msi\"\nnode.default['push_jobs']['package_checksum'] = \"a-sha256-checksum\"\n```\n\nSet a whitelist of job names and their commands in the configuration file. This is automatically generated from the `node['push_jobs']['whitelist']` attribute Hash, such as:\n\n```ruby\nnode.default['push_jobs']['whitelist'] = {\n  \"chef-client\" => \"chef-client\",\n  \"apt-get-update\" => \"apt-get update\"\n}\n```\n\nAs this is an attribute, interesting uses arise from orchestrating a Chef Client run. Assuming the above is present on the node prior to running the recipe, run Chef Client with this command from the local workstation:\n\n```\nknife job start chef-client A_NODE_NAME\n```\n\nNew jobs can be added to the whitelist simply by creating attributes. This can be done with `knife exec`:\n\n```\nknife exec -E 'nodes.transform(\"name:A_NODE_NAME\") do |n|\n  n.set[\"push_jobs\"][\"whitelist\"][\"ntpdate\"] = \"ntpdate -u time\"\nend'\n```\n\nThen, run the chef-client job, and then the ntpdate job:\n\n```\nknife job start chef-client A_NODE_NAME\nknife job start ntpdate A_NODE_NAME\n```\n\n### Enabling 1.X Server Compatibility\n\nIf you're running the 2.X push jobs client with the 1.X server you'll need to set allow_unencrypted to true with this attribute:\n\n```ruby\nnode.default['push_jobs']['allow_unencrypted'] = true\n```\n\n## Attributes\n\nSee `attributes/default.rb` for default values.\n\n## Recipes\n\nThere are several recipes in this cookbook, so they can be used all together (include the `default` recipe), or as necessary.\n\n### default\n\nThe default recipe includes the appropriate recipe based on the node's `platform_family`. It will `raise` an error if:\n\n- The package URL and checksum attributes are not set on Windows\n- The whitelist is not a Hash.\n- The node's platform is not supported.\n\n### config\n\nThis recipe ensures the platform-specific configuration directory (`/etc/chef`) is created, and renders the configuration file (`push-jobs-client.rb`) using the `whitelist` attribute. Any environment variables can be set using `environment_variables` attribute with key value pairs. You can provide your own `push-jobs-client.rb.erb` template file in a wrapper cookbook and set the `['config']['template_cookbook']` attribute to the name of that wrapper cookbook.\n\nThe path to the configuration file is set using the `PushJobsHelper` module's `#config_path` method. This is done to ensure the correct file path is used on Linux and Windows platforms, as it uses `Chef::Config`'s `#platform_specific_path` method.\n\n### service\n\nThis recipe is responsible for handling the service resource based on the node's platform. On Linux (Debian and RHEL families), it will create a `runit`, `upstart`, or `systemd` service. `upstart` and `systemd` will be used where those are the native init system for your distro. If neither are available or `default['push_jobs']['init_style']` is set to `runit` then runit will be installed and the service will use runit. On Windows nodes, the recipe will add a registry key for the Chef Push client, and manage the Windows service.\n\nThe service resources expect to be restarted if the configuration template is changed, using `subscribes` notification.\n\n## Client Connection Configuration\n\nThe push job client establishes a command and heartbeat channel to the push server over **tcp**. The tcp connection information is read from the Chef Server upon startup of the push client service from an endpoint similar to the following:\n\n```\nhttps://private-chef-server/organizations/org1/pushy/config/\n```\n\nThe connection information for the push server is established when the push server is installed and the Chef Server is reconfigured. In the case the Chef Server is not providing the correct push server configuration, please verify hostnames are correct and that both the push server and Chef Server have been reconfigured.\n\n## Verify Push Jobs Client Connection\n\nIf the push client has been successfully installed on a node, the client should be able to successfully respond to a `knife job` directed to the node. If the node is not responding correctly, please consult the logs `/var/log/push-jobs-client/current` (for Debian and Rhel families) and look for entries similar to the following:\n\n```\nINFO: [pclient] Starting client ...\nINFO: [pclient] Retrieving configuration from https://private-chef-server/organizations/org1/pushy/config/pc_6_1 ...\nINFO: [pclient] Connecting to command channel at tcp://private-chef-server:10002\nINFO: [pclient] Listening for server heartbeat at tcp://private-chef-server:10000\nINFO: [pclient] Started client.\n```\n\n## License & Authors\n\n- Author: Joshua Timberman ([joshua@chef.io](mailto:joshua@chef.io))\n- Author: Charles Johnson ([charles@chef.io](mailto:charles@chef.io))\n- Author: Christopher Maier ([cm@chef.io](mailto:cm@chef.io))\n\n```text\nCopyright:: 2009-2016, Chef Software, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "centos",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "debian",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "host",
      "label": "windows",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/runit",
      "revision": ">= 1.2.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/windows",
      "revision": ">= 1.42.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/chef-ingredient",
      "revision": ">= 0.18.0",
      "self_resolve": true
    },
    {
      "kind": "env",
      "uri": "https://supermarket.chef.io/cookbooks/compat_resource",
      "revision": ">= 0.0.0",
      "self_resolve": true
    }
  ]
}