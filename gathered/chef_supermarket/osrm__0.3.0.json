{
  "name": "osrm Chef cookbook",
  "chef_cookbook_name": "osrm",
  "revision": "0.3.0",
  "uris": [
    "https://supermarket.chef.io/cookbooks/osrm",
    "https://supermarket.chef.io/cookbooks/osrm/download",
    "https://supermarket.chef.io/cookbooks/osrm/versions/0.3.0",
    "https://supermarket.chef.io/cookbooks/osrm/versions/0.3.0/download",
    "https://supermarket.chef.io/api/v1/cookbooks/osrm/versions/0.3.0",
    "https://supermarket.chef.io/api/v1/cookbooks/osrm",
    "https://supermarket.chef.io/api/v1/cookbooks/osrm/versions/0.3.0/download"
  ],
  "labels": [
    "Chef cookbook",
    "Utilities",
    "Executable/Script/Chef Cookbook",
    "Mode/Executable/Script/Chef Cookbook",
    "Type/Infrastructure/Operating System"
  ],
  "info_url": "https://supermarket.chef.io/cookbooks/osrm",
  "package_url": "https://supermarket.chef.io/api/v1/cookbooks/osrm/versions/0.3.0/download",
  "deprecated": false,
  "created": "2013-08-23T14:23:13.000Z",
  "updated": "2016-09-09T06:38:31.996Z",
  "description": "Installs/Configures osrm",
  "maintainer": {
    "name": "chr4",
    "email": "me@chr4.org"
  },
  "license": "GNU Public License 3.0",
  "chef_foodcritic_failure": true,
  "chef_up_for_adoption": null,
  "rating": null,
  "followers_count": 1,
  "downloads_count": 11635481,
  "downloads_count_revision": 1252633,
  "repository_url": "https://github.com/chr4-cookbooks/osrm",
  "issues_url": "https://github.com/chr4-cookbooks/osrm/issues",
  "chef_source_url": "https://github.com/chr4-cookbooks/osrm",
  "gatherbase_origin": "chef-supermarket",
  "readme_name": "README.md",
  "readme": "# OSRM cookbook\n\nThis cookbook can do the following things for you\n\n* Install and configure the OSRM route daemon\n* Download, extract, prepare map data and keep them up to date\n  * (Uses the map data from [Geofabrik](http://download.geofabrik.de/))\n\nTo use the following recipes and providers, add the following to your metadata.rb\n\n```ruby\ndepends 'osrm'\n```\n\n# Recipes\n\n## default\n\nRuns install_git\n\n## install_git\n\nClone and install the latest HEAD from [Project-OSRM](https://github.com/DennisOSRM/Project-OSRM) to ```node['osrm']['target']``` (default ```/opt/osrm```).\n\n\n# Providers\n\n## osrm_map\n\nosrm_map is a shortcut that calls the other map providers in the following order\n\n* osrm_map_download\n* osrm_map_extract\n* osrm_prepare\n\nThis example downloads, extracts and prepares the osrm map for Germany:\n\n```ruby\nosrm_map 'germany'\n```\n\nThe following additional attributes are allowed:\n\n```ruby\nosrm_map 'europe'\n  map_dir         '/srv/my_map_data'     # Where to put the maps (defaults to '/opt/osrm-data')\n\n  # Path to the map (osm.pbf or osm.bz2) to use.\n  # This is filled in automatically if the file is downloaded.\n  # Only use it in case you are using a custom map.\n  map             '/path/to/map.osm.bpf'\n\n  profile         'car'                  # Profile to use (defaults to 'car')\n  profile_dir     '/srv/my_profiles'     # Where to look for profiles (.lua files)\n  extract_command 'osrm-extract'         # Path to osrm-extract binary\n  prepare_command 'osrm-prepare'         # Path to osrm-prepare binary\n  user            'my_osrm_user'         # User to run commands as\n  cwd             '/srv/my_osrm'         # Set working directory for osrm-extract\n  threads         5                      # How many threads to use (defaults to number of cpu cores)\n  cleanup         false                  # Do not cleanup .osrm and .osrm.restrictions after preparing\n  timeout         3600                   # Timeout in seconds for osrm-extract/osrm-prepare. Defaults to 24h\n  stxxl_size      150000                 # Size (in MB) of stxxl temporary file. Dynamically allocated by default\n  stxxl_file      '/tmp/stxxl'           # Location of stxxl temporary file. Defaults to '/var/tmp/stxxl'\n\n  # The files checksum can also be checked (defaults to true)\n  # When set to true, it will use the default checksum set in the attributes (if existent)\n  # When set to false, it doesn't check the checksum\n  # When set to an ftp:// or http:// URL, retrieve the file and use the checksum in its content\n  # When set to a string, use it as the checksum\n  checksum        'http://url.to/checksum.md5'\n\n  action :create_if_missing              # :create and :create_if_missing are supported\nend\n\n```\n\n## osrm_map_download\n\nDownloads map data for the specified region.\n\n```ruby\nosrm_map_download 'planet'\nosrm_map_download 'europe'\nosrm_map_download 'north-america'\nosrm_map_download 'germany'\nosrm_map_download 'us-west'\n```\n\nFor a full list of supported regions, take a look at [attributes/regions.rb](https://github.com/flinc-chef/osrm/blob/master/attributes/regions.rb). If necessary, it can be easily extended to support even more, feel free to file a pull request!\n\nBy default, the provider automatically re-downloads the file if it was changed on the server. You can prevent this behaviour when using the :download_if_missing action:\n\n```ruby\nosrm_map_download 'europe' do\n  action :download_is_missing\nend\n```\n\nFurthermore, you can specify the following attributes:\n\n```ruby\nosrm_map_download 'us-west' do\n  user     'my_osrm_user'\n  map_dir  '/srv/my_map_data' # Where to put the downloaded files (defaults to '/opt/osrm-data')\n\n  # Manually specify url to download map from.\n  # Defaults to the URL in the attributes (available for most regions)\n  url      'http://my.geoserver.com/map.osm.bpf'\n\n  # The files checksum can also be checked (defaults to false)\n  # When set to true, it will use the default checksum set in the attributes\n  # When set to false, it doesn't check the checksum\n  # When set to an ftp:// or http:// URL, use its contents as a checksum\n  # When set to a string, use it as the checksum\n  checksum 'http://url.to/checksum.md5'\nend\n```\n\n## osrm_map_extract\n\nExtracts downloaded map data, using osrm-extract.\n\nExample:\n\n```ruby\nosrm_map_extract 'europe'\n```\n\nThe following attributes are supported:\n\n```ruby\nosrm_map_extract 'europe' do\n  map_dir     '/srv/my_map_data'  # Use the same directory you used in osrm_map_download\n\n  # Path to the map (osm.pbf or osm.bz2) to use.\n  # This is set automatically (via attributes),\n  # if you use a map downloaded by osrm_map_download.\n  # Only use it in case you are using a custom map.\n  map        '/path/to/map.osm.bpf'\n\n  profile     'car'               # Profile to use (defaults to 'car')\n  profile_dir '/srv/my_profiles'  # Where to look for profiles (.lua files)\n  command     'osrm-extract'      # Binary to use\n  user        'my_osrm_user'\n  cwd         '/srv/my_osrm'      # Set working directory for osrm-extract\n  threads     5                   # How many threads to use (defaults to number of cpu cores)\n  timeout     3600                # Timeout in seconds for osrm-extract. Defaults to 24h\n  stxxl_size  150000              # Size (in MB) of stxxl temporary file. Dynamically allocated by default\n  stxxl_file  '/tmp/stxxl'        # Location of stxxl temporary file. Defaults to '/var/tmp/stxxl'\nend\n```\n\n## osrm_map_prepare\n\nPrepares extracted map data, using osrm-prepare.\n\nExample:\n\n```ruby\nosrm_map_prepare 'europe'\n```\n\nThe following attribtues are supported:\n\n```ruby\nosrm_map_prepare 'europe' do\n  map_dir     '/srv/my_map_data'  # Use the same directory you used in osrm_map_download\n\n  # Path to the map (osm.pbf or osm.bz2) to use.\n  # This is set automatically (via attributes),\n  # if you use a map downloaded by osrm_map_download.\n  # Only use it in case you are using a custom map.\n  map        '/path/to/map.osm.bpf'\n\n  profile     'car'               # Profile to use (defaults to 'car')\n  profile_dir '/srv/my_profiles'  # Where to look for profiles (.lua files)\n  command     'osrm-prepare'      # Binary to use\n  user        'my_osrm_user'\n  cwd         '/srv/my_osrm'      # Set working directory for osrm-prepare\n  threads     5                   # How many threads to use (defaults to number of cpu cores)\n  cleanup     false               # Do not cleanup .osrm and .osrm.restrictions after preparing\n  timeout     3600                # Timeout in seconds for osrm-extract. Defaults to 24h\nend\n```\n\n## osrm_routed\n\nSets up and starts osrm-routed (using upstart) for the specified region\n\nExample:\n\n```ruby\nosrm_routed 'europe'\n```\n\nThe following attributes are supported:\n\n```ruby\nosrm_routed 'europe' do\n  config_dir   '/etc/osrm-routed'  # Where to put the configuration file\n  service_name 'osrm-routed-%s'    # %s will be replaced with the selected region and profile\n\n  profile      'car'               # Profile for which to start the daemon\n\n  user         'osrm-routed'       # User to run the daemon as (will be created if not existent)\n  home         '/my/osrm-install'  # Home directory of the osrm-routed user\n\n  daemon       '/path/to/osrm-routed'\n\n  map_dir      '/srv/my_map_data'  # Use the same directory you used in osrm_map_download)\n  map_base     '/path/to/map_base' # Base path of the (prepared) map\n                                   # e.g. '/opt/osrm-data/europe/car/europe-lastest'\n                                   # (skip the file extention, like .edges or .osm.bpf)\n\n  threads      16                  # How many threads to use (defaults to number of cpu cores)\n\n  port         5000                # TCP port to bind to\n  listen       '127.0.0.1'         # TCP address to listen on\nend\n```\n\n\n# Attributes\n\nYou can set the following attributes if you need settings that differ form the defaults\n\n## default\n\n```ruby\nnode['osrm']['repository'] = 'git://github.com/DennisOSRM/Project-OSRM.git'\nnode['osrm']['branch'] = 'master' # use e.g. 'v0.3.5' for a stable version\n\nnode['osrm']['target'] = '/opt/osrm'\nnode['osrm']['map_dir'] = '/opt/osrm-data'\n\nnode['osrm']['threads'] = node['cpu']['total']\n\n```\n\n## routed\n\n```ruby\nnode['osrm']['routed']['user'] = 'osrm-routed'\nnode['osrm']['routed']['service_name'] = 'osrm-routed-%s'\nnode['osrm']['routed']['config_dir'] = '/etc/osrm-routed'\n```\n\n## regions\n\nYou can add custom regions like this\n\n```ruby\nnode['osrm']['map_data']['your-region']['profiles'] = %w{car}\nnode['osrm']['map_data']['your-region']['url'] = \"http://download.geofabrik.de/your-region-latest.osm.pbf\"\nnode['osrm']['map_data']['your-region']['checksum'] = \"#{node['osrm']['map_data']['your-region']['url']}.md5\"\n```\n\n# Contributing\n\nPull requests are very welcome!\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write you change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n",
  "requires": [
    {
      "kind": "host",
      "label": "ubuntu",
      "revision": ">= 0.0.0",
      "one_of_group": "os"
    }
  ]
}